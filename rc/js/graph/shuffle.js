import { Bits } from '../bits.js';
import { seq } from '../rom/util.js';
import { iters } from '../util.js';
class GenericFill {
    constructor() {
        this.slots = [];
        this.items = [];
    }
    set(slot, item) {
        if (this.slots[slot] != null)
            throw new Error(`already filled slot ${slot}`);
        if (this.items[item] != null)
            throw new Error(`already filled item ${item}`);
        this.slots[slot] = item;
        this.items[item] = slot;
    }
    hasSlot(slot) {
        return this.slots[slot] != null;
    }
    hasItem(item) {
        return this.items[item] != null;
    }
}
function expandFill(g, f) {
    const out = new GenericFill();
    for (let i = g.fixed; i < g.items.length; i++) {
        const s = f.items[i];
        out.set(g.slots[s].item, g.items[i].item);
    }
    return out;
}
export function newFill() {
    return new GenericFill();
}
export function traverse(graph, fill, has) {
    has = Bits.clone(has);
    const reachable = new Set();
    const queue = new Set();
    for (let i = 0; i < graph.slots.length; i++) {
        if (graph.graph[i] == null) {
            console.dir(graph);
            throw new Error(`adding bad node ${i} (${graph.slots[i].name}) from slot`);
        }
        queue.add(i);
    }
    for (const n of queue) {
        queue.delete(n);
        if (reachable.has(n))
            continue;
        const needed = graph.graph[n];
        if (needed == null)
            throw new Error(`not in graph: ${n}`);
        for (let i = 0, len = needed.length; i < len; i++) {
            if (!Bits.containsAll(has, needed[i]))
                continue;
            reachable.add(n);
            const item = n < graph.fixed ? n : fill.slots[n];
            if (item != null) {
                has = Bits.with(has, item);
                for (const j of graph.unlocks[item] || []) {
                    if (graph.graph[j] == null) {
                        console.dir(graph);
                        throw new Error(`adding bad node ${j} from unlock ${item}`);
                    }
                    queue.add(j);
                }
            }
            break;
        }
    }
    return reachable;
}
export function traverseFill(graph, fill) {
    const items = [];
    for (const i of graph.items) {
        if (i.item != null)
            items[i.item] = i.index;
    }
    const slots = [];
    for (const s of graph.slots) {
        if (s.item != null && fill.slots[s.item] != null) {
            slots[s.index] = items[fill.slots[s.item]];
        }
    }
    const out = [];
    let has = Bits.of();
    const reachable = new Set();
    const queue = new Set();
    for (let i = 0; i < graph.slots.length; i++) {
        queue.add(i);
    }
    for (const n of queue) {
        queue.delete(n);
        if (reachable.has(n))
            continue;
        const needed = graph.graph[n];
        for (let i = 0, len = needed.length; i < len; i++) {
            if (!Bits.containsAll(has, needed[i]))
                continue;
            out.push([n, ...Bits.bits(needed[i])]);
            reachable.add(n);
            const item = n < graph.fixed ? n : slots[n];
            if (item != null) {
                has = Bits.with(has, item);
                for (const j of graph.unlocks[item] || []) {
                    queue.add(j);
                }
            }
            break;
        }
    }
    return out;
}
var Type;
(function (Type) {
    Type[Type["EMPTY"] = 0] = "EMPTY";
    Type[Type["MIMIC"] = 1] = "MIMIC";
    Type[Type["CONSUMABLE"] = 2] = "CONSUMABLE";
    Type[Type["KEY"] = 3] = "KEY";
    Type[Type["BOSS_DROP"] = 4] = "BOSS_DROP";
    Type[Type["NPC"] = 5] = "NPC";
    Type[Type["MAGIC"] = 6] = "MAGIC";
    Type[Type["TRIGGER"] = 7] = "TRIGGER";
})(Type || (Type = {}));
export class ShuffleRules {
    constructor(rom, flags) {
        this.rom = rom;
        this.pools = new Map();
        const triggers = new Set([0x41, 0x42, 0x46]);
        const chests = new Set();
        const bossDrops = new Set();
        for (const l of rom.locations) {
            if (!l.used)
                continue;
            for (const s of l.spawns) {
                if (s.isInvisible()) {
                    bossDrops.add(s.id);
                }
                else if (s.isChest()) {
                    if (l.bossId() != null) {
                        bossDrops.add(s.id);
                    }
                    else {
                        chests.add(s.id);
                    }
                }
            }
        }
        for (const b of rom.bosses) {
            if (b.drop != null)
                bossDrops.add(b.drop);
        }
        this.slotTypes = seq(0x7c, i => {
            if (triggers.has(i))
                return Type.TRIGGER;
            if (i >= 0x70)
                return Type.MIMIC;
            if (i <= 0x48 && i >= 0x41)
                return Type.MAGIC;
            const item = rom.items[i];
            if (chests.has(i))
                return item && item.unique ? Type.KEY : Type.CONSUMABLE;
            if (bossDrops.has(i))
                return Type.BOSS_DROP;
            return item && item.unique ? Type.NPC : Type.EMPTY;
        });
        const poolFlags = flags.get('S') || [];
        for (let i = 0; i < poolFlags.length; i++) {
            const flag = poolFlags[i];
            if (/c/.test(flag)) {
                this.pools.set(Type.CONSUMABLE, i + 1);
            }
            if (/t/.test(flag)) {
                this.pools.set(Type.MIMIC, i + 1);
            }
            if (/k/.test(flag)) {
                this.pools.set(Type.KEY, i + 1);
                this.pools.set(Type.BOSS_DROP, i + 1);
                this.pools.set(Type.NPC, i + 1);
            }
            if (/m/.test(flag)) {
                this.pools.set(Type.MAGIC, i + 1);
                this.pools.set(Type.TRIGGER, i + 1);
            }
        }
    }
    fits(slot, item) {
        if (slot === item)
            return true;
        const slotType = this.slotTypes[slot] || Type.EMPTY;
        const slotPool = this.pools.get(slotType);
        if (slotPool == null)
            return false;
        if (requiresChest(item) && slotType >= Type.BOSS_DROP)
            return false;
        let itemPool;
        if (item >= 0x70) {
            if (slotType > Type.KEY)
                return false;
            itemPool = this.pools.get(Type.MIMIC);
        }
        else if (item <= 0x48 && item >= 0x41) {
            itemPool = this.pools.get(Type.MAGIC);
        }
        else if (item < 0x41 && this.rom.items[item].unique) {
            itemPool = this.pools.get(Type.KEY);
        }
        else if (this.pools.get(Type.CONSUMABLE) == null &&
            this.slotTypes[item] === Type.BOSS_DROP) {
            itemPool = this.pools.get(Type.BOSS_DROP);
        }
        else {
            if (slotType === Type.TRIGGER)
                return false;
            itemPool = this.pools.get(Type.CONSUMABLE);
        }
        if (itemPool == null)
            return false;
        if (slotPool === itemPool)
            return true;
        return (itemPool === this.pools.get(Type.CONSUMABLE));
    }
    shouldShuffle(id) {
        return this.pools.get(this.slotTypes[id] || 0) != null;
    }
    isEarly(slot) {
        const slotType = this.slotTypes[slot] || Type.EMPTY;
        if (slotType >= Type.TRIGGER)
            return true;
        const pool = this.pools.get(slotType);
        const consumablePool = this.pools.get(Type.CONSUMABLE);
        const mimicPool = this.pools.get(Type.MIMIC);
        return pool !== consumablePool && pool !== mimicPool;
    }
}
export class AssumedFill {
    constructor(rom, flags) {
        this.rom = rom;
        this.flags = flags;
        this.shuffleRules = new ShuffleRules(rom, flags);
    }
    fits(slot, item) {
        return this.shuffleRules.fits(slot, item);
    }
    items(graph, random) {
        const arr = [];
        for (const item of graph.items) {
            if (item.item == null)
                continue;
            let count = 1;
            if (item.item === 0x00 || item.item === 0x01)
                count = 5;
            if (item.item === 0x02)
                count = 10;
            if (item.item === 0x03 || item.item === 0x48)
                count = 15;
            for (let i = 0; i < count; i++)
                arr.push(item.index);
        }
        random.shuffle(arr);
        return arr;
    }
    async shuffle(graph, random, progress, attempts = 2000) {
        if (progress)
            progress.addTasks(Math.floor(attempts / 100));
        for (let attempt = 0; attempt < attempts; attempt++) {
            if (progress && (attempt % 100 === 99)) {
                await new Promise(requestAnimationFrame);
                progress.addCompleted(1);
            }
            const items = this.items(graph, random);
            let has = Bits.from(new Set(items));
            const fill = new GenericFill();
            const itemIndex = new Map();
            const slotIndex = new Map();
            const nonShuffledItems = [];
            for (let i = graph.fixed; i < graph.items.length; i++) {
                const id = graph.items[i].item;
                if (id == null)
                    continue;
                itemIndex.set(id, i);
                if (!this.shuffleRules.shouldShuffle(id))
                    nonShuffledItems.push(id);
            }
            for (let s = graph.fixed; s < graph.slots.length; s++) {
                const id = graph.slots[s].item;
                if (id != null)
                    slotIndex.set(id, s);
            }
            for (const id of nonShuffledItems) {
                const i = itemIndex.get(id);
                const s = slotIndex.get(id);
                if (s == null || i == null)
                    continue;
                fill.set(s, i);
                has = Bits.without(has, i);
            }
            if (this.flags.guaranteeSword()) {
                const sword = random.nextInt(4);
                const i = itemIndex.get(sword);
                const s = slotIndex.get(0);
                if (i != null && s != null && !fill.hasSlot(s) && !fill.hasItem(i)) {
                    fill.set(s, i);
                    has = Bits.without(has, i);
                }
            }
            if (!this.fillInternal(graph, random, fill, items, has, Math.floor(attempt / 5)))
                continue;
            const final = traverse(graph, fill, Bits.of());
            if (final.size !== graph.slots.length) {
                console.error('unexpected size mismatch!', final, graph);
                continue;
            }
            const out = this.fill(graph, expandFill(graph, fill), random);
            if (out == null)
                continue;
            if (progress)
                progress.addCompleted(Math.floor((attempts - attempt) / 100));
            return out;
        }
        return null;
    }
    fillInternal(graph, random, fill, items, has, backSteps) {
        for (let bit = items.pop(); bit != null; bit = items.pop()) {
            if (!Bits.has(has, bit))
                continue;
            const itemId = graph.items[bit].item;
            if (itemId == null)
                throw new Error(`bad item: ${Object.entries(graph.items[bit])}`);
            has = Bits.without(has, bit);
            const reachable = [...traverse(graph, fill, has)];
            random.shuffle(reachable);
            let found = false;
            for (const slot of reachable) {
                const slotId = graph.slots[slot].item;
                if (slotId == null)
                    continue;
                if (!fill.hasSlot(slot) && this.fits(slotId, itemId)) {
                    fill.set(slot, bit);
                    found = true;
                    break;
                }
            }
            if (found)
                continue;
            if (backSteps-- > 0) {
                for (const slot of reachable) {
                    const slotId = graph.slots[slot].item;
                    if (slotId == null)
                        continue;
                    if (this.fits(slotId, itemId)) {
                        const previousItem = fill.slots[slot];
                        fill.slots[slot] = fill.items[previousItem] = undefined;
                        has = Bits.with(has, previousItem);
                        items.push(previousItem);
                        random.shuffle(items);
                        fill.set(slot, bit);
                        found = true;
                        break;
                    }
                }
                if (found)
                    continue;
            }
            return false;
        }
        return true;
    }
    fill(graph, fill, random) {
        const validItems = new Set();
        for (const slot of graph.slots) {
            if (slot.item != null)
                validItems.add(slot.item);
        }
        const uniques = [];
        const consumables = [];
        const mimics = [];
        const earlySlots = [];
        const otherSlots = [];
        for (let i = 0; i < 0x7c; i++) {
            if (i < 0x70 && !validItems.has(i)) {
                if (fill.hasSlot(i) !== fill.hasItem(i))
                    console.error('MISMATCH', i);
                continue;
            }
            if (!fill.hasSlot(i) && !fill.hasItem(i) && !this.shuffleRules.shouldShuffle(i)) {
                fill.set(i, i);
                continue;
            }
            if (!fill.hasSlot(i)) {
                if (this.shuffleRules.isEarly(i)) {
                    earlySlots.push(i);
                }
                else {
                    otherSlots.push(i);
                }
            }
            if (!fill.hasItem(i)) {
                if (i <= 0x48 && this.rom.items[i].unique) {
                    uniques.push(i);
                }
                else if (i < 0x70) {
                    consumables.push(i);
                }
                else {
                    mimics.push(i);
                }
            }
        }
        random.shuffle(earlySlots);
        random.shuffle(otherSlots);
        random.shuffle(uniques);
        random.shuffle(consumables);
        for (const item of iters.concat(uniques, mimics, consumables)) {
            let found = false;
            for (const slots of [earlySlots, otherSlots]) {
                if (found)
                    break;
                for (const slot of slots) {
                    if (this.fits(slot, item)) {
                        fill.set(slot, item);
                        found = true;
                        slots.splice(slots.indexOf(slot), 1);
                        break;
                    }
                }
            }
            if (!found) {
                return null;
            }
        }
        return fill;
    }
}
function requiresChest(id) {
    return id === 0x14 || id === 0x1b || id === 0x1c ||
        id === 0x26 || id === 0x63 || id === 0x6d;
}
//# sourceMappingURL=data:application/json;base64,