import { Flag, Spawn } from '../rom/locationtables.js';
import { Metalocation } from '../rom/metalocation.js';
export function standardMapEdits(rom, opts) {
    if (opts.eastCave) {
        eastCave(rom, opts.eastCave);
    }
    else if (opts.classicLimeTreeToLeaf) {
        connectLimeTreeToLeaf(rom);
    }
    addTowerExit(rom);
    reversibleSwanGate(rom);
    shrinkMado2(rom);
}
(function (standardMapEdits) {
    function generateOptions(flags, random) {
        const options = {};
        if (flags.addEastCave()) {
            options.eastCave = {};
            const exits = ['cordel', 'lime', 'goa', 'desert'];
            let i = random.nextInt(4);
            [options.eastCave.exit1] = exits.splice(i, 1);
            options.eastCave.exit2 = random.pick(exits);
        }
        else if (flags.connectLimeTreeToLeaf()) {
            options.classicLimeTreeToLeaf = true;
        }
        return options;
    }
    standardMapEdits.generateOptions = generateOptions;
})(standardMapEdits || (standardMapEdits = {}));
function eastCave(rom, opts) {
    const { locations: { EastCave1, EastCave2, EastCave3, SealedCave1, ValleyOfWind }, metascreens: { boundaryE_cave, branchNSE, branchNWE, branchNWSE, branchNWS, branchWSE, caveEmpty, deadEndE, deadEndE_downStair, deadEndE_upStair, deadEndN_stairs, deadEndS, deadEndS_stairs, deadEndW, deadEndW_downStair, exit, hallNE, hallNS, hallNW, hallSE, hallWS, hallWE, hallNS_entrance, hallNS_stairs, hallNS_wall, }, } = rom;
    rom.locations.allocate(rom.locations.EastCave1);
    rom.locations.allocate(rom.locations.EastCave2);
    if (opts.exit2)
        rom.locations.allocate(rom.locations.EastCave3);
    for (const l of [EastCave1, EastCave2, EastCave3]) {
        l.bgm = l.originalBgm = 0x17;
        l.entrances = [];
        l.exits = [];
        l.pits = [];
        l.spawns = [];
        l.flags = [];
        l.width = l.height = 1;
        l.screens = [[0x80]];
        l.tilePalettes = [0x1a, 0x1b, 0x05];
        l.originalTilePalettes = [0x1a, 0x1b, 0x05];
        l.tileset = 0x88;
        l.tileEffects = 0xb5;
        l.tilePatterns = [0x14, 0x02];
        l.spritePatterns = [...SealedCave1.spritePatterns];
        l.spritePalettes = [...SealedCave1.spritePalettes];
    }
    EastCave1.meta = new Metalocation(EastCave1.id, rom.metatilesets.cave, 5, 5);
    EastCave1.meta.set2d(0x00, [
        [deadEndE, hallWS, caveEmpty, hallSE, deadEndW],
        [caveEmpty, hallNS, hallSE, hallNW, caveEmpty],
        [hallSE, branchNWSE, branchNWS, caveEmpty, caveEmpty],
        [hallNS, hallNS_stairs, hallNE, hallWE, hallWS],
        [hallNS_entrance, hallNE, deadEndW, deadEndE_upStair, hallNW],
        [exit, caveEmpty, caveEmpty, caveEmpty, caveEmpty],
    ]);
    EastCave2.meta = new Metalocation(EastCave2.id, rom.metatilesets.cave, 5, 5);
    EastCave2.meta.set2d(0x00, [
        [deadEndE, hallWS, deadEndS, caveEmpty, deadEndS],
        [caveEmpty, hallNS, hallNS, caveEmpty, hallNS],
        [caveEmpty, branchNSE, branchNWE, branchWSE, hallNW],
        [caveEmpty, hallNS_stairs, caveEmpty, hallNE, hallWS],
        [deadEndE, hallNW, caveEmpty, caveEmpty, deadEndN_stairs],
    ]);
    ValleyOfWind.meta.set2d(0x33, [[boundaryE_cave]]);
    rom.tileEffects[0].effects[0xc0] = 0;
    EastCave1.meta.attach(0x43, EastCave2.meta, 0x44);
    EastCave1.meta.attach(0x40, ValleyOfWind.meta, 0x33);
    if (opts.exit1) {
        EastCave1.meta.set2d(0x04, [[deadEndW_downStair]]);
        connectEastCaveExit(EastCave1, 0x04, opts.exit1);
    }
    if (opts.exit2) {
        rom.locations.allocate(EastCave3);
        EastCave3.meta = new Metalocation(EastCave3.id, rom.metatilesets.cave, 3, 1);
        EastCave3.meta.set2d(0x00, [
            [deadEndS_stairs],
            [hallNS_wall],
            [hallNS_entrance],
            [exit],
        ]);
        EastCave3.spawns.push(Spawn.from([0x18, 0x07, 0x23, 0x00]));
        EastCave3.flags.push(Flag.of({ screen: 0x10, flag: rom.flags.alloc(0x200) }));
        EastCave2.meta.set2d(0x40, [[deadEndE_downStair]]);
        EastCave2.meta.attach(0x40, EastCave3.meta, 0x00);
        connectEastCaveExit(EastCave3, 0x20, opts.exit2);
    }
    EastCave1.spawns.push(Spawn.of({ screen: 0x21, tile: 0x87, timed: true, id: 0x2 }), Spawn.of({ screen: 0x12, tile: 0x88, timed: false, id: 0x2 }), Spawn.of({ screen: 0x13, tile: 0x89, timed: true, id: 0x2 }), Spawn.of({ screen: 0x32, tile: 0x68, timed: false, id: 0x2 }), Spawn.of({ screen: 0x41, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x33, tile: 0x98, timed: true, id: 0x2 }), Spawn.of({ screen: 0x03, tile: 0x88, timed: true, id: 0x2 }));
    EastCave2.spawns.push(Spawn.of({ screen: 0x01, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x11, tile: 0x48, timed: false, id: 0x2 }), Spawn.of({ screen: 0x12, tile: 0x77, timed: true, id: 0x2 }), Spawn.of({ screen: 0x14, tile: 0x28, timed: false, id: 0x2 }), Spawn.of({ screen: 0x23, tile: 0x85, timed: true, id: 0x2 }), Spawn.of({ screen: 0x31, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x33, tile: 0x8a, timed: false, id: 0x2 }), Spawn.of({ screen: 0x34, tile: 0x98, timed: true, id: 0x2 }), Spawn.of({ screen: 0x41, tile: 0x82, timed: true, id: 0x2 }), Spawn.of({ y: 0x110, x: 0x478, type: 2, id: 0x31 }), Spawn.of({ y: 0x070, x: 0x108, type: 2, id: 0x70 }));
    rom.npcs.WindmillGuard.data[1] = 0x59;
}
function connectEastCaveExit(loc, scr, exit) {
    const { metascreens: { bendNE, bendSE, boundaryN_trees, boundaryW_cave, cornerNE, cornerNW, cornerSE, cornerSE_cave, cornerSW, overworldEmpty, } } = loc.rom;
    let dest;
    let destScr;
    switch (exit) {
        case 'lime':
            dest = loc.rom.locations.LimeTreeValley;
            destScr = 0x10;
            dest.resizeScreens(0, 1, 0, 0);
            dest.meta.spliceColumns(0, 1, 2, [
                [overworldEmpty, overworldEmpty],
                [cornerNW, boundaryN_trees],
                [boundaryW_cave, bendSE],
                [cornerSW, cornerSE],
                [overworldEmpty, overworldEmpty],
            ]);
            break;
        case 'cordel':
            const mapEdit = [
                [boundaryW_cave, bendSE],
                [cornerSW, cornerSE],
            ];
            dest = loc.rom.locations.CordelPlainEast;
            destScr = 0x55;
            dest.meta.set2d(0x55, mapEdit);
            loc.rom.locations.CordelPlainWest.meta.set2d(0x55, mapEdit);
            break;
        case 'goa':
            dest = loc.rom.locations.GoaValley;
            destScr = 0x11;
            dest.meta.set2d(0x01, [
                [cornerNW, cornerNE],
                [boundaryW_cave, bendNE]
            ]);
            break;
        case 'desert':
            dest = loc.rom.locations.Desert2;
            destScr = 0x53;
            dest.meta.set2d(0x53, [[cornerSE_cave]]);
            break;
    }
    loc.meta.attach(scr, dest.meta, destScr);
}
function connectLimeTreeToLeaf(rom) {
    const { locations: { ValleyOfWind, LimeTreeValley }, metascreens: { exitE, exitW_southwest, overworldEmpty_alt }, } = rom;
    ValleyOfWind.meta.set2d(0x54, [[exitE]]);
    LimeTreeValley.meta.set2d(0x10, [[exitW_southwest],
        [overworldEmpty_alt]]);
    ValleyOfWind.meta.attach(0x54, LimeTreeValley.meta, 0x10);
}
function addTowerExit(rom) {
    const { TowerEntrance, Crypt_Teleporter } = rom.locations;
    Crypt_Teleporter.meta.attach(0x00, TowerEntrance.meta, 0x00, 'teleporter', 'teleporter');
}
function reversibleSwanGate(rom) {
    const { flags: { OpenedSwanGate }, locations: { SwanGate }, npcs: { SoldierGuard }, } = rom;
    SwanGate.spawns.push(Spawn.of({ xt: 0x0a, yt: 0x02, type: 1, id: 0x2d }), Spawn.of({ xt: 0x0b, yt: 0x02, type: 1, id: 0x2d }));
    SoldierGuard.localDialogs.get(SwanGate.id)[0].flags.push(OpenedSwanGate.id);
}
function shrinkMado2(rom) {
}
//# sourceMappingURL=data:application/json;base64,