import { Bits } from '../bits.js';
import { hex } from '../rom/util.js';
import { Keyed, ArrayMap, MutableArrayBiMap, iters, spread } from '../util.js';
import { die } from '../assert.js';
export class Graph {
    constructor(worlds) {
        var _a;
        this.worlds = worlds;
        const provided = new Set();
        const required = new Set();
        const slots = new Map();
        const items = new Map();
        for (let i = 0; i < worlds.length; i++) {
            const world = worlds[i];
            const worldId = i << 24;
            for (const [providedId, requirement] of world.requirements) {
                provided.add(worldId | providedId);
                for (const route of requirement) {
                    for (const cond of route) {
                        required.add(worldId | cond);
                    }
                }
            }
            for (const [itemId, info] of world.items) {
                items.set((worldId | itemId), info);
            }
            for (const [slotId, info] of world.slots) {
                slots.set((worldId | slotId), info);
            }
        }
        this.itemInfos = new Map(items);
        this.slotInfos = new Map(slots);
        this.progression = new Set(required);
        for (const item of items.keys())
            required.add(item);
        const common = new Set();
        const extraProvides = new Set();
        const extraRequires = new Set();
        for (const check of required) {
            (provided.has(check) ? common : extraRequires).add(check);
        }
        for (const check of provided) {
            if (!required.has(check))
                extraProvides.add(check);
        }
        this.common = common.size;
        this.slots = new ArrayMap([...common, ...extraProvides]);
        this.items = new ArrayMap([...common, ...extraRequires]);
        const graph = [];
        const unlocks = [];
        for (let i = 0; i < worlds.length; i++) {
            const worldId = i << 24;
            for (const [slot, req] of worlds[i].requirements) {
                const slotIndex = this.slots.index((worldId | slot));
                if (slotIndex == null) {
                    throw new Error(`Provided a non-slot? ${hex(slot)}`);
                }
                for (const cs of req) {
                    const is = [...cs].map(c => { var _a; return (_a = this.items.index((worldId | c))) !== null && _a !== void 0 ? _a : die(); });
                    (graph[slotIndex] || (graph[slotIndex] = [])).push(Bits.from(is));
                    for (const i of is) {
                        (unlocks[i] || (unlocks[i] = new Set())).add(slotIndex);
                    }
                }
            }
        }
        for (let i = 0; i < this.slots.length; i++) {
            if (!graph[i] || !graph[i].length) {
                const id = (_a = this.slots.get(i)) !== null && _a !== void 0 ? _a : NaN;
                const name = this.checkName(id);
                console.error(`Nothing provided $${hex(id)}: ${name} (index ${i})`);
            }
        }
        this.graph = new Keyed(graph);
        this.unlocks = new Keyed(unlocks.map(spread));
    }
    async shuffle(flagset, random, attempts = 20, progress, spoiler) {
        if (progress)
            progress.addTasks(Math.floor(attempts / 100));
        for (let attempt = 0; attempt < attempts; attempt++) {
            if (progress && (attempt % 100 === 99)) {
                progress.addCompleted(1);
                await new Promise(requestAnimationFrame);
            }
            const fill = new MutableArrayBiMap();
            this.prefill(fill, random);
            const indexFill = this.compressFill(fill);
            const items = this.itemPool(indexFill.values(), random);
            let has = Bits.from(new Set(items));
            const backtracks = Math.floor(attempt / 5);
            if (!this.fillInternal(indexFill, items, has, random, flagset, backtracks)) {
                continue;
            }
            const path = spoiler ? [] : undefined;
            const final = this.traverse(i => indexFill.get(i), Bits.of(), path);
            if (spoiler && path) {
                for (const [target, ...deps] of path) {
                    if (target < this.common || indexFill.has(target)) {
                        spoiler.addCheck(this.slots.get(target), deps.map(d => this.items.get(d)));
                    }
                }
            }
            if (final.size !== this.slots.length) {
                const ns = (si) => this.checkName(this.slots.get(si));
                const missing = new Set([...this.slots].map(x => x[0]));
                for (const s of final)
                    missing.delete(s);
                console.error(`Initial fill never filled slots:
  ${[...missing].map(ns).sort().join('\n  ')}`, final, this);
                continue;
            }
            this.expandFill(indexFill, fill);
            const out = this.fillNonProgression(fill, flagset, random);
            if (out == null)
                continue;
            if (progress) {
                progress.addCompleted(Math.floor((attempts - attempt) / 100));
            }
            if (spoiler) {
                for (const [slot, item] of fill) {
                    const name = this.checkName(slot).replace(/^[0-9a-f]{3} /, '');
                    spoiler.addSlot(slot, name, item);
                }
            }
            return out;
        }
        return null;
    }
    fillInternal(fill, items, has, random, flagset, backsteps) {
        var _a;
        const fixed = new Set(fill.keys());
        for (let bit = items.pop(); bit != null; bit = items.pop()) {
            if (!Bits.has(has, bit))
                continue;
            const itemInfo = this.itemInfoFromIndex(bit);
            has = Bits.without(has, bit);
            const reachable = this.expandReachable(this.traverse(i => fill.get(i), has), flagset);
            random.shuffle(reachable);
            let found = false;
            const checked = new Set(fill.keys());
            for (const slot of reachable) {
                if (checked.has(slot))
                    continue;
                checked.add(slot);
                const slotInfo = this.slotInfoFromIndex(slot);
                if (!slotInfo || !this.fits(slotInfo, itemInfo, flagset))
                    continue;
                fill.set(slot, bit);
                found = true;
                break;
            }
            if (found)
                continue;
            checked.clear();
            if (backsteps-- > 0) {
                for (const slot of reachable) {
                    if (checked.has(slot) || !fill.has(slot) || fixed.has(slot))
                        continue;
                    checked.add(slot);
                    const slotInfo = this.slotInfoFromIndex(slot);
                    if (!slotInfo || !this.fits(slotInfo, itemInfo, flagset))
                        continue;
                    const previousItem = (_a = fill.replace(slot, bit)) !== null && _a !== void 0 ? _a : die();
                    has = Bits.with(has, previousItem);
                    items.push(previousItem);
                    random.shuffle(items);
                    found = true;
                    break;
                }
                if (found)
                    continue;
            }
            return false;
        }
        return true;
    }
    expandReachable(slots, flagset) {
        const out = [];
        for (const slot of slots) {
            const info = this.slotInfoFromIndex(slot);
            if (!info || flagset.preserveUniqueChecks() && !info.unique)
                continue;
            addCopies(out, slot, info.weight || 1);
        }
        return out;
    }
    itemPool(exclude, random) {
        const excludeSet = new Set(exclude);
        const arr = [];
        for (const [id, info] of this.itemInfos) {
            const index = this.items.index(id);
            if (index == null)
                continue;
            if (!this.progression.has(id))
                continue;
            if (excludeSet.has(index))
                continue;
            addCopies(arr, index, info.weight || 1);
        }
        return random.shuffle(arr);
    }
    fits(slot, item, flagset) {
        if (flagset.preserveUniqueChecks() &&
            item.unique && !slot.unique) {
            return false;
        }
        const preventLoss = item.preventLoss || slot.preventLoss;
        if (slot.lossy && item.losable && preventLoss)
            return false;
        return true;
    }
    fillNonProgression(fill, flagset, random) {
        const itemPasses = [[], [], []];
        const slotPasses = [[], []];
        for (const [itemId, info] of this.itemInfos) {
            if (fill.hasValue(itemId))
                continue;
            let index = 2;
            if (info.losable && info.preventLoss)
                index = 1;
            if (flagset.preserveUniqueChecks() && info.unique)
                index = 0;
            itemPasses[index].push(itemId);
        }
        for (const [slotId, info] of this.slotInfos) {
            if (fill.has(slotId))
                continue;
            const index = info.lossy && info.preventLoss ? 0 : 1;
            slotPasses[index].push(slotId);
        }
        for (const pass of [...itemPasses, ...slotPasses]) {
            random.shuffle(pass);
        }
        const n = (si) => this.checkName(si);
        const sc = iters.count(iters.concat(...slotPasses));
        const ic = iters.count(iters.concat(...itemPasses));
        if (ic > sc) {
            console.log(`Slots ${sc}:\n  ${[...iters.concat(...slotPasses)].map(n).join('\n  ')}`);
            console.log(`Items ${ic}:\n  ${[...iters.concat(...itemPasses)].map(n).join('\n  ')}`);
            throw new Error(`Too many items`);
        }
        for (const item of iters.concat(...itemPasses)) {
            let found = false;
            for (const slots of [...slotPasses]) {
                if (found)
                    break;
                for (let i = 0; i < slots.length; i++) {
                    if (this.fits(this.slotInfos.get(slots[i]), this.itemInfos.get(item), flagset)) {
                        fill.set(slots[i], item);
                        found = true;
                        slots.splice(i, 1);
                        break;
                    }
                }
            }
            if (!found) {
                console.log(`Slots:\n  ${[...iters.concat(...slotPasses)].map(n).join('\n  ')}`);
                console.error(`REROLL: Could not place item ${n(item)}`);
                return null;
            }
        }
        return new Map(fill);
    }
    traverse(fill, has, path) {
        has = Bits.clone(has);
        const reachable = new Set();
        const queue = new Set();
        for (let i = 0; i < this.slots.length; i++) {
            if (this.graph.get(i) == null) {
                console.dir(this);
                const id = this.slots.get(i);
                throw new Error(`Unreachable slot ${id === null || id === void 0 ? void 0 : id.toString(16)}`);
            }
            queue.add(i);
        }
        for (const n of queue) {
            queue.delete(n);
            if (reachable.has(n))
                continue;
            const needed = this.graph.get(n);
            if (needed == null)
                throw new Error(`Not in graph: ${n}`);
            for (let i = 0, len = needed.length; i < len; i++) {
                if (!Bits.containsAll(has, needed[i]))
                    continue;
                if (path)
                    path.push([n, ...Bits.bits(needed[i])]);
                reachable.add(n);
                const items = [];
                if (n < this.common)
                    items.push(n);
                const filled = fill(n);
                if (filled != null)
                    items.push(filled);
                for (const item of items) {
                    has = Bits.with(has, item);
                    for (const j of this.unlocks.get(item) || []) {
                        if (this.graph.get(j) == null) {
                            console.dir(this);
                            throw new Error(`Adding bad node ${j} from unlock ${item}`);
                        }
                        queue.add(j);
                    }
                }
                break;
            }
        }
        return reachable;
    }
    expandFill(indexFill, fill) {
        for (const [slotIndex, itemIndex] of indexFill) {
            const slotId = this.slots.get(slotIndex);
            const itemId = this.items.get(itemIndex);
            if (slotId == null || itemId == null)
                throw new Error(`missing`);
            fill.replace(slotId, itemId);
        }
    }
    compressFill(fill) {
        const indexFill = new MutableArrayBiMap();
        for (const [slotId, itemId] of fill) {
            const slotIndex = this.slots.index(slotId);
            const itemIndex = this.items.index(itemId);
            if (slotIndex == null || itemIndex == null) {
                throw new Error(`Bad slot/item: ${slotId} ${slotIndex} ${itemId} ${itemIndex}`);
            }
            indexFill.set(slotIndex, itemIndex);
        }
        return indexFill;
    }
    checkName(id) {
        return this.worlds[id >>> 24].checkName(id & 0xffffff);
    }
    prefill(fill, random) {
        for (let i = 0; i < this.worlds.length; i++) {
            const worldId = i << 24;
            const worldFill = this.worlds[i].prefill(random);
            for (const [slot, item] of worldFill) {
                fill.set((worldId | slot), (worldId | item));
            }
        }
    }
    itemInfoFromIndex(item) {
        const id = this.items.get(item);
        if (id == null)
            throw new Error(`Bad item: ${item}`);
        return this.itemInfoFromId(id);
    }
    itemInfoFromId(id) {
        const info = this.itemInfos.get(id);
        if (info == null)
            throw new Error(`Missing info: ${hex(id)}`);
        return info;
    }
    slotInfoFromIndex(slot) {
        const id = this.slots.get(slot);
        if (id == null)
            throw new Error(`Bad slot: ${slot}`);
        return this.slotInfoFromId(id);
    }
    slotInfoFromId(id) {
        const info = this.slotInfos.get(id);
        if (info != null)
            return info;
        return undefined;
    }
}
function addCopies(arr, elem, copies) {
    for (let i = 0; i < copies; i++) {
        arr.push(elem);
    }
}
//# sourceMappingURL=data:application/json;base64,