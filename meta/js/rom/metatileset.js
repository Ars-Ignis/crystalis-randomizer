import { DefaultMap, iters } from '../util.js';
export class Metatilesets {
    constructor(rom) {
        this.rom = rom;
        this._all = [];
        this.grass = this.tileset(0x80, {
            patterns: [0x00, 0x0c],
        });
        this.town = this.tileset(0x84, {});
        this.cave = this.tileset(0x88, {});
        this.dolphinCave = this.tileset(0x88, {});
        this.pyramid = this.tileset(0x8c, {});
        this.river = this.tileset(0x90, {
            animated: [0, 1],
            patterns: [0x14, 0x00],
        });
        this.sea = this.tileset(0x94, {});
        this.lime = this.tileset(0x94, {});
        this.mountain = this.tileset(0x94, {});
        this.shrine = this.tileset(0x98, {});
        this.desert = this.tileset(0x9c, {});
        this.mountainRiver = this.tileset(0x9c, {});
        this.swamp = this.tileset(0xa0, {
            consolidated: true,
        });
        this.house = this.tileset(0xa0, {});
        this.fortress = this.tileset(0xa4, {});
        this.labyrinth = this.tileset(0xa4, {});
        this.iceCave = this.tileset(0xa8, {});
        this.tower = this.tileset(0xac, {});
        for (const key in this) {
            const value = this[key];
            if (value instanceof Metatileset)
                value.name = key;
        }
    }
    tileset(id, opts) {
        const ts = new Metatileset(this.rom, id, opts);
        this._all.push(ts);
        return ts;
    }
    [Symbol.iterator]() {
        return this._all[Symbol.iterator]();
    }
}
export class Metatileset {
    constructor(rom, tilesetId, data) {
        this.rom = rom;
        this.tilesetId = tilesetId;
        this.data = data;
        this._screens = new Set();
        this._cache = undefined;
    }
    [Symbol.iterator]() {
        return this._screens[Symbol.iterator]();
    }
    get cache() {
        if (!this._cache)
            this._cache = new NeighborCache(this);
        return this._cache;
    }
    get tileset() {
        return this.rom.tilesets[this.tilesetId];
    }
    get empty() {
        const e = this.cache.empty;
        if (!e)
            throw new Error(`No empty screen for ${this.name}`);
        return e;
    }
    get exit() {
        return this.rom.metascreens.exit;
    }
    effects() {
        return this.tileset.effects();
    }
    getTile(id) {
        return this.tileset.getTile(id);
    }
    addScreen(screen) {
        this._screens.add(screen);
        screen.unsafeAddTileset(this);
        this.invalidate();
    }
    deleteScreen(screen) {
        this._screens.delete(screen);
        screen.unsafeRemoveTileset(this);
        this.invalidate();
    }
    getMetascreens(screenId) {
        var _a;
        return (_a = this.cache.fromId.get(screenId)) !== null && _a !== void 0 ? _a : EMPTY_SET;
    }
    invalidate() {
        this._cache = undefined;
    }
    check(s1, s2, delta) {
        const cache = this.cache.allowed[delta & 1];
        const index = delta > 0 ? s1 << 16 | s2 : s2 << 16 | s1;
        return cache.has(index);
    }
}
const EMPTY_SET = new class extends Set {
    add() { throw new Error(); }
};
export var Dir;
(function (Dir) {
    Dir.N = 0;
    Dir.W = 1;
    Dir.S = 2;
    Dir.E = 3;
})(Dir || (Dir = {}));
class NeighborCache {
    constructor(tileset) {
        var _a;
        this.tileset = tileset;
        this.allowed = [new Set(), new Set()];
        this.neighbors = new DefaultMap(() => new Set());
        this.fromId = new DefaultMap(() => new Set());
        let empty = undefined;
        for (const s1 of iters.concat(tileset, [tileset.exit])) {
            if (s1.id >= 0)
                this.fromId.get(s1.id).add(s1);
            if (!empty &&
                s1.data.edges === '    ' &&
                s1.hasFeature('empty') &&
                !((_a = s1.data.exits) === null || _a === void 0 ? void 0 : _a.length)) {
                empty = s1;
            }
            const e1 = s1.data.edges || '****';
            for (const s2 of iters.concat(tileset, [tileset.exit])) {
                const e2 = s2.data.edges || '****';
                if (e1[2] !== '*' && e1[2] === e2[0]) {
                    this.add(Dir.S, s1, s2);
                }
                if (e1[3] !== '*' && e1[3] === e2[1]) {
                    this.add(Dir.E, s1, s2);
                }
                for (const dir of (s1.data.allowed ? s1.data.allowed(s2) : [])) {
                    this.add(dir, s1, s2);
                }
            }
        }
        this.empty = empty !== null && empty !== void 0 ? empty : tileset.rom.metascreens.caveEmpty;
    }
    add(dir, s1, s2) {
        const u1 = s1.uid;
        const u2 = s2.uid;
        this.allowed[dir & 1].add(dir & 2 ? u1 << 16 | u2 : u2 << 16 | u1);
        this.neighbors.get(u1 << 2 | dir).add(u2);
        this.neighbors.get(u2 << 2 | (dir ^ 2)).add(u1);
    }
}
//# sourceMappingURL=data:application/json;base64,