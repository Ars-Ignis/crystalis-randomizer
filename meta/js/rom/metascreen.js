import { featureMask } from './metascreendata.js';
import { DefaultMap } from '../util.js';
export class Metascreen {
    constructor(rom, uid, data) {
        var _a, _b, _c;
        this.rom = rom;
        this.uid = uid;
        this.data = data;
        this._tilesets = new Set();
        this.used = false;
        this.neighbors = [
            new DefaultMap((s) => this._checkNeighbor(s, 0)),
            new DefaultMap((s) => this._checkNeighbor(s, 1)),
        ];
        for (const tileset of Object.values(data.tilesets)) {
            if (!tileset.requires)
                this.used = true;
        }
        let features = 0;
        for (const feature of (_a = data.feature) !== null && _a !== void 0 ? _a : []) {
            const mask = featureMask[feature];
            if (mask != null)
                features |= mask;
        }
        for (const exit of (_b = data.exits) !== null && _b !== void 0 ? _b : []) {
            if (exit.type === 'stair:down' || exit.type === 'stair:up') {
                features |= featureMask[exit.type];
            }
        }
        this._features = features;
        this.flag = data.flag;
        const cxn = [[[]], [[]], [[]], [[]]];
        this.connections = cxn;
        for (let i = 0; i < 3; i++) {
            for (const term of (_c = this.data.connect) !== null && _c !== void 0 ? _c : '') {
                if (connectionBlocks.includes(term)) {
                    cxn[i].push([]);
                    continue;
                }
                const num = parseInt(term, 16);
                if (!num)
                    continue;
                const channel = (num & 3) << (num & 4);
                const offset = num & 8 ? (num & 4 ? 0x0100 : 0x1000) : 0;
                cxn[i][cxn[i].length - 1].push(channel | offset);
            }
        }
    }
    get manual() {
        return Boolean(this._features & manualFeatureMask);
    }
    get counted() {
        return Boolean(this._features & countedFeatureMask);
    }
    hasFeature(feature) {
        return Boolean(this._features & featureMask[feature]);
    }
    hasFeatures(features) {
        return (this._features & features) === features;
    }
    withFeature(feature) {
        throw new Error();
    }
    withObstruction() {
        throw new Error();
    }
    isCompatibleWithTileset(id) {
        for (const tileset of this._tilesets) {
            if (tileset.tilesetId === id)
                return true;
        }
        return false;
    }
    replace(from, to) {
        const { tiles } = this.screen;
        for (let i = 0; i < tiles.length; i++) {
            if (tiles[i] === from)
                tiles[i] = to;
        }
        return this;
    }
    remove() {
        for (const key in this.data.tilesets) {
            const tileset = this.rom.metatilesets[key];
            tileset.deleteScreen(this);
        }
    }
    get id() {
        return this.data.id;
    }
    set id(id) {
        if (this.id === id)
            return;
        this.rom.metascreens.renumber(this.id, id);
    }
    get screen() {
        const { id, rom: { screens } } = this;
        return id < 0 ? screens.unallocated[~id] : screens[id];
    }
    unsafeSetId(id) {
        this.data.id = id;
        for (const tileset of this._tilesets) {
            tileset.invalidate();
        }
    }
    unsafeAddTileset(tileset) {
        this._tilesets.add(tileset);
    }
    unsafeRemoveTileset(tileset) {
        this._tilesets.delete(tileset);
    }
    edgeExits() {
        var _a;
        let mask = 0;
        for (const e of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            const dir = edgeTypeMap[e.type];
            if (dir != null)
                mask |= (1 << dir);
        }
        return mask;
    }
    findExitType(tile, single, seamless) {
        var _a;
        for (const exit of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            if (exit.type.startsWith('seamless') !== seamless)
                continue;
            const t0 = single && exit.type === 'edge:bottom' && tile >= 0xc0 ?
                tile + 0x20 : tile;
            if (exit.exits.includes(t0))
                return exit;
        }
        return undefined;
    }
    findEntranceType(coord, single) {
        var _a;
        for (const exit of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            if (exit.type.startsWith('seamless'))
                continue;
            const c0 = single && exit.type === 'edge:bottom' && coord >= 0xbf00 ?
                coord + 0x2000 : coord;
            if (exit.entrance === c0)
                return exit.type;
        }
        return undefined;
    }
    addCustomFlag(defaultValue) {
        this.flag = defaultValue ? 'custom:true' : 'custom:false';
    }
    _checkNeighbor(that, dir) {
        return false;
    }
}
const edgeTypeMap = {
    'edge:top': 0,
    'edge:left': 1,
    'edge:bottom': 2,
    'edge:right': 3,
};
const connectionBlocks = [
    '|:',
    '|:=-',
    '|',
    '|=',
];
const manualFeatures = new Set([
    'arena', 'portoa1', 'portoa2', 'portoa3', 'lake', 'overBridge', 'underBridge',
    'lighthouse', 'cabin', 'windmill', 'altar', 'pyramid', 'crypt',
]);
const countedFeatures = new Set([
    'pit', 'spikes', 'bridge', 'wall', 'stairs', 'whirlpool',
]);
const manualFeatureMask = [...manualFeatures].map(f => featureMask[f]).reduce((a, b) => a | b);
const countedFeatureMask = [...countedFeatures].map(f => featureMask[f]).reduce((a, b) => a | b);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YXNjcmVlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vbWV0YXNjcmVlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0MsV0FBVyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFJaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUl4QyxNQUFNLE9BQU8sVUFBVTtJQXFCckIsWUFBcUIsR0FBUSxFQUFXLEdBQVEsRUFDM0IsSUFBb0I7O1FBRHBCLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFBVyxRQUFHLEdBQUgsR0FBRyxDQUFLO1FBQzNCLFNBQUksR0FBSixJQUFJLENBQWdCO1FBcEJ4QixjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztRQU1wRCxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBS0osY0FBUyxHQUFHO1lBQ25CLElBQUksVUFBVSxDQUFzQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckUsSUFBSSxVQUFVLENBQXNCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM3RCxDQUFDO1FBT1QsS0FBSyxNQUFNLE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsRCxJQUFJLENBQUMsT0FBUSxDQUFDLFFBQVE7Z0JBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDMUM7UUFHRCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDakIsS0FBSyxNQUFNLE9BQU8sVUFBSSxJQUFJLENBQUMsT0FBTyxtQ0FBSSxFQUFFLEVBQUU7WUFDeEMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xD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Q0gsSUFBSTtDQUNMLENBQUM7QUFHRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBVTtJQUN0QyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxhQUFhO0lBQzdFLFlBQVksRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTztDQUMvRCxDQUFDLENBQUM7QUFDSCxNQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsQ0FBVTtJQUN2QyxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVc7Q0FDekQsQ0FBQyxDQUFDO0FBRUgsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUM3QyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMzRCxNQUFNLGtCQUFrQixHQUFHLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQy9DLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25uZWN0aW9uLCBDb25uZWN0aW9uVHlwZSwgRmVhdHVyZSwgTWV0YXNjcmVlbkRhdGEsXG4gICAgICAgIGZlYXR1cmVNYXNrfSBmcm9tICcuL21ldGFzY3JlZW5kYXRhLmpzJztcbmltcG9ydCB7TWV0YXRpbGVzZXQsIE1ldGF0aWxlc2V0c30gZnJvbSAnLi9tZXRhdGlsZXNldC5qcyc7XG5pbXBvcnQge1NjcmVlbn0gZnJvbSAnLi9zY3JlZW4uanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQgeyBEZWZhdWx0TWFwIH0gZnJvbSAnLi4vdXRpbC5qcyc7XG5cbmV4cG9ydCB0eXBlIFVpZCA9IG51bWJlciAmIHtfX3VpZF9fOiBuZXZlcn07XG5cbmV4cG9ydCBjbGFzcyBNZXRhc2NyZWVuIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfZmVhdHVyZXM6IG51bWJlcjsgLy8gPSBuZXcgU2V0PEZlYXR1cmU+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3RpbGVzZXRzID0gbmV3IFNldDxNZXRhdGlsZXNldD4oKTtcbiAgLy8ga2V5OiBiaXRzZXQgLSAxIGZvciBmbGlnaHQsIDIgZm9yIG5vRmxhZ1xuICAvLyB2YWx1ZTogc2VnbWVudHMsIGVhY2ggY29udGFpbmluZyBhbiBvZmZzZXQgdG8gYWRkIHRvIHBvczw8OCB0byBnZXRcbiAgLy8gICAgICAgIGNvbm5lY3Rpb24gcG9pbnRzIChlLmcuIDAwMDEsIDAxMDEsIDEwMjAsIGV0YykuXG4gIHJlYWRvbmx5IGNvbm5lY3Rpb25zOiBSZWFkb25seUFycmF5PFJlYWRvbmx5QXJyYXk8UmVhZG9ubHlBcnJheTxudW1iZXI+Pj47XG5cbiAgdXNlZCA9IGZhbHNlO1xuXG4gIGZsYWc/OiAnYWx3YXlzJyB8ICdjYWxtJyB8ICdjdXN0b206ZmFsc2UnIHwgJ2N1c3RvbTp0cnVlJztcbiAgbmFtZT86IHN0cmluZztcblxuICByZWFkb25seSBuZWlnaGJvcnMgPSBbXG4gICAgbmV3IERlZmF1bHRNYXA8TWV0YXNjcmVlbiwgYm9vbGVhbj4oKHMpID0+IHRoaXMuX2NoZWNrTmVpZ2hib3IocywgMCkpLFxuICAgIG5ldyBEZWZhdWx0TWFwPE1ldGFzY3JlZW4sIGJvb2xlYW4+KChzKSA9PiB0aGlzLl9jaGVja05laWdoYm9yKHMsIDEpKSxcbiAgXSBhcyBjb25zdDtcblxuICAvL3JlYWRvbmx5IGZlYXR1cmVDb3VudDogUmVhZG9ubHlNYXA8RmVhdHVyZSwgbnVtYmVyPjtcblxuICAvLyBUT0RPIC0gbWFrZSBkYXRhIHByaXZhdGU/XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJvbTogUm9tLCByZWFkb25seSB1aWQ6IFVpZCxcbiAgICAgICAgICAgICAgcmVhZG9ubHkgZGF0YTogTWV0YXNjcmVlbkRhdGEpIHtcbiAgICBmb3IgKGNvbnN0IHRpbGVzZXQgb2YgT2JqZWN0LnZhbHVlcyhkYXRhLnRpbGVzZXRzKSkge1xuICAgICAgaWYgKCF0aWxlc2V0IS5yZXF1aXJlcykgdGhpcy51c2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gbGV0IGZpeGVkID0gZmFsc2U7XG4gICAgLy8gY29uc3QgZmVhdHVyZUNvdW50ID0gbmV3IERlZmF1bHRNYXA8RmVhdHVyZSwgbnVtYmVyPigoKSA9PiAwKTtcbiAgICBsZXQgZmVhdHVyZXMgPSAwO1xuICAgIGZvciAoY29uc3QgZmVhdHVyZSBvZiBkYXRhLmZlYXR1cmUgPz8gW10pIHtcbiAgICAgIGNvbnN0IG1hc2sgPSBmZWF0dXJlTWFza1tmZWF0dXJlXTtcbiAgICAgIGlmIChtYXNrICE9IG51bGwpIGZlYXR1cmVzIHw9IG1hc2s7XG4gICAgICAvLyB0aGlzLl9mZWF0dXJlcy5hZGQoZmVhdHVyZSk7XG4gICAgICAvLyBpZiAoZml4ZWRGZWF0dXJlcy5oYXMoZmVhdHVyZSkpIGZpeGVkID0gdHJ1ZTtcbiAgICAgIC8vIGlmIChmaXhlZENvdW50RmVhdHVyZXMuaGFzKGZlYXR1cmUpKSB7XG4gICAgICAvLyAgIGZlYXR1cmVDb3VudC5zZXQoZmVhdHVyZSwgZmVhdHVyZUNvdW50LmdldChmZWF0dXJlKSArIDEpO1xuICAgICAgLy8gfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGV4aXQgb2YgZGF0YS5leGl0cyA/PyBbXSkge1xuICAgICAgaWYgKGV4aXQudHlwZSA9PT0gJ3N0YWlyOmRvd24nIHx8IGV4aXQudHlwZSA9PT0gJ3N0YWlyOnVwJykge1xuICAgICAgICBmZWF0dXJlcyB8PSBmZWF0dXJlTWFza1tleGl0LnR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9mZWF0dXJlcyA9IGZlYXR1cmVzO1xuICAgIHRoaXMuZmxhZyA9IGRhdGEuZmxhZztcbiAgICAvLyB0aGlzLmZpeGVkID0gZml4ZWQ7XG4gICAgLy8gdGhpcy5mZWF0dXJlQ291bnQgPSBmZWF0dXJlQ291bnQ7XG4gICAgLy8gVE9ETyAtIGJ1aWxkIFwiY29ubmVjdGlvbnNcIiBieSBpdGVyYXRpbmcgb3ZlciAwLi4zLlxuICAgIGNvbnN0IGN4bjogbnVtYmVyW11bXVtdID0gW1tbXV0sIFtbXV0sIFtbXV0sIFtbXV1dO1xuICAgIHRoaXMuY29ubmVjdGlvbnMgPSBjeG47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgIGZvciAoY29uc3QgdGVybSBvZiB0aGlzLmRhdGEuY29ubmVjdCA/PyAnJykge1xuICAgICAgICBpZiAoY29ubmVjdGlvbkJsb2Nrcy5pbmNsdWRlcyh0ZXJtKSkge1xuICAgICAgICAgIGN4bltpXS5wdXNoKFtdKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW0gPSBwYXJzZUludCh0ZXJtLCAxNik7XG4gICAgICAgIGlmICghbnVtKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IChudW0gJiAzKSA8PCAobnVtICYgNCk7IC8vIDAxLCAwMiwgMDMsIDEwLCAyMCwgb3IgMzBcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbnVtICYgOCA/IChudW0gJiA0ID8gMHgwMTAwIDogMHgxMDAwKSA6IDA7XG4gICAgICAgIGN4bltpXVtjeG5baV0ubGVuZ3RoIC0gMV0ucHVzaChjaGFubmVsIHwgb2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgbWFudWFsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuX2ZlYXR1cmVzICYgbWFudWFsRmVhdHVyZU1hc2spO1xuICB9XG5cbiAgZ2V0IGNvdW50ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5fZmVhdHVyZXMgJiBjb3VudGVkRmVhdHVyZU1hc2spO1xuICB9XG5cbiAgLy8gZmVhdHVyZXMoKTogSXRlcmFibGU8RmVhdHVyZT4ge1xuICAvLyAgIHJldHVybiB0aGlzLl9mZWF0dXJlcy52YWx1ZXMoKTtcbiAgLy8gfVxuXG4gIGhhc0ZlYXR1cmUoZmVhdHVyZTogRmVhdHVyZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuX2ZlYXR1cmVzICYgZmVhdHVyZU1hc2tbZmVhdHVyZV0pO1xuICB9XG5cbiAgaGFzRmVhdHVyZXMoZmVhdHVyZXM6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5fZmVhdHVyZXMgJiBmZWF0dXJlcykgPT09IGZlYXR1cmVzO1xuICB9XG5cbiAgLyoqIFJldHVybiBhIG5ldyBtZXRhc2NyZWVuIHdpdGggdGhlIHNhbWUgcHJvZmlsZSBidXQgYW4gZXh0cmEgZmVhdHVyZS4gKi9cbiAgd2l0aEZlYXR1cmUoZmVhdHVyZTogRmVhdHVyZSk6IE1ldGFzY3JlZW5bXSB7XG4gICAgLy8gVE9ETyAtIGluZGV4IHRoaXM/XG4gICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gIH1cblxuICAvKiogUmV0dXJuIGEgbmV3IG1ldGFzY3JlZW4gd2l0aCB0aGUgc2FtZSBwcm9maWxlIGJ1dCBtb3JlIG9ic3RydWN0ZWQuICovXG4gIHdpdGhPYnN0cnVjdGlvbigpOiBNZXRhc2NyZWVuW10ge1xuICAgIHRocm93IG5ldyBFcnJvcigpO1xuICB9XG5cbiAgaXNDb21wYXRpYmxlV2l0aFRpbGVzZXQoaWQ6IG51bWJlcikge1xuICAgIGZvciAoY29uc3QgdGlsZXNldCBvZiB0aGlzLl90aWxlc2V0cykge1xuICAgICAgaWYgKHRpbGVzZXQudGlsZXNldElkID09PSBpZCkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlIG9jY3VycmVuY2VzIG9mIGEgbWV0YXRpbGUgd2l0aGluIHRoaXMgc2NyZWVuLlxuICAgKi9cbiAgcmVwbGFjZShmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpOiBNZXRhc2NyZWVuIHtcbiAgICBjb25zdCB7dGlsZXN9ID0gdGhpcy5zY3JlZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRpbGVzW2ldID09PSBmcm9tKSB0aWxlc1tpXSA9IHRvO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICAvLyBSZW1vdmUgc2VsZiBmcm9tIGFsbCBtZXRhdGlsZXNldHMuICBVc2VkIGJ5IGxhYnlyaW50aFZhcmlhbnQgdG9cbiAgICAvLyBlbnN1cmUgaW1wb3NzaWJsZSB2YXJpYW50cyBhcmVuJ3QgYWRkZWQgKG5vdGU6IHdpdGggYSBkZWRpY2F0ZWRcbiAgICAvLyBwYWdlIHdlIGNvdWxkIG1ha2UgbW9yZSBhdmFpbGFibGUpLlxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZGF0YS50aWxlc2V0cykge1xuICAgICAgY29uc3QgdGlsZXNldCA9XG4gICAgICAgICAgdGhpcy5yb20ubWV0YXRpbGVzZXRzW2tleSBhcyBrZXlvZiBNZXRhdGlsZXNldHNdIGFzIE1ldGF0aWxlc2V0O1xuICAgICAgdGlsZXNldC5kZWxldGVTY3JlZW4odGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlkKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5pZDtcbiAgfVxuXG4gIHNldCBpZChpZDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuaWQgPT09IGlkKSByZXR1cm47XG4gICAgdGhpcy5yb20ubWV0YXNjcmVlbnMucmVudW1iZXIodGhpcy5pZCwgaWQpO1xuICB9XG5cbiAgZ2V0IHNjcmVlbigpOiBTY3JlZW4ge1xuICAgIGNvbnN0IHtpZCwgcm9tOiB7c2NyZWVuc319ID0gdGhpcztcbiAgICByZXR1cm4gaWQgPCAwID8gc2NyZWVucy51bmFsbG9jYXRlZFt+aWRdIDogc2NyZWVuc1tpZF07XG4gIH1cblxuICAvLyBPbmx5IE1ldGFzY3JlZW5zLnJlbnVtYmVyIHNob3VsZCBjYWxsIHRoaXMuXG4gIHVuc2FmZVNldElkKGlkOiBudW1iZXIpIHtcbiAgICAodGhpcy5kYXRhIGFzIHtpZDogbnVtYmVyfSkuaWQgPSBpZDtcbiAgICBmb3IgKGNvbnN0IHRpbGVzZXQgb2YgdGhpcy5fdGlsZXNldHMpIHtcbiAgICAgIHRpbGVzZXQuaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuICAvLyBPbmx5IE1ldGF0aWxlc2V0LmFkZFNjcmVlbiBzaG91bGQgY2FsbCB0aGlzLlxuICB1bnNhZmVBZGRUaWxlc2V0KHRpbGVzZXQ6IE1ldGF0aWxlc2V0KSB7XG4gICAgdGhpcy5fdGlsZXNldHMuYWRkKHRpbGVzZXQpO1xuICB9XG4gIC8vIE9ubHkgTWV0YXRpbGVzZXQucmVtb3ZlU2NyZWVuIHNob3VsZCBjYWxsIHRoaXMuXG4gIHVuc2FmZVJlbW92ZVRpbGVzZXQodGlsZXNldDogTWV0YXRpbGVzZXQpIHtcbiAgICB0aGlzLl90aWxlc2V0cy5kZWxldGUodGlsZXNldCk7XG4gIH1cblxuICAvKiogUmV0dXJucyBhIGJpdCBtYXNrIG9mIGVkZ2VzIHRoYXQgX2NvdWxkXyBleGl0OiAxPU4sIDI9VywgND1TLCA4PUUuICovXG4gIGVkZ2VFeGl0cygpOiBudW1iZXIge1xuICAgIGxldCBtYXNrID0gMDtcbiAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5kYXRhLmV4aXRzID8/IFtdKSB7XG4gICAgICBjb25zdCBkaXIgPSBlZGdlVHlwZU1hcFtlLnR5cGVdO1xuICAgICAgaWYgKGRpciAhPSBudWxsKSBtYXNrIHw9ICgxIDw8IGRpcik7XG4gICAgfVxuICAgIHJldHVybiBtYXNrO1xuICB9XG5cbiAgZmluZEV4aXRUeXBlKHRpbGU6IG51bWJlciwgc2luZ2xlOiBib29sZWFuLFxuICAgICAgICAgICAgICAgc2VhbWxlc3M6IGJvb2xlYW4pOiBDb25uZWN0aW9ufHVuZGVmaW5lZCB7XG4gICAgZm9yIChjb25zdCBleGl0IG9mIHRoaXMuZGF0YS5leGl0cyA/PyBbXSkge1xuICAgICAgaWYgKGV4aXQudHlwZS5zdGFydHNXaXRoKCdzZWFtbGVzcycpICE9PSBzZWFtbGVzcykgY29udGludWU7XG4gICAgICBjb25zdCB0MCA9IHNpbmdsZSAmJiBleGl0LnR5cGUgPT09ICdlZGdlOmJvdHRvbScgJiYgdGlsZSA+PSAweGMwID9cbiAgICAgICAgICB0aWxlICsgMHgyMCA6IHRpbGU7XG4gICAgICBpZiAoZXhpdC5leGl0cy5pbmNsdWRlcyh0MCkpIHJldHVybiBleGl0O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZmluZEVudHJhbmNlVHlwZShjb29yZDogbnVtYmVyLCBzaW5nbGU6IGJvb2xlYW4pOiBDb25uZWN0aW9uVHlwZXx1bmRlZmluZWQge1xuICAgIGZvciAoY29uc3QgZXhpdCBvZiB0aGlzLmRhdGEuZXhpdHMgPz8gW10pIHtcbiAgICAgIGlmIChleGl0LnR5cGUuc3RhcnRzV2l0aCgnc2VhbWxlc3MnKSkgY29udGludWU7XG4gICAgICBjb25zdCBjMCA9IHNpbmdsZSAmJiBleGl0LnR5cGUgPT09ICdlZGdlOmJvdHRvbScgJiYgY29vcmQgPj0gMHhiZjAwID9cbiAgICAgICAgICBjb29yZCArIDB4MjAwMCA6IGNvb3JkO1xuICAgICAgaWYgKGV4aXQuZW50cmFuY2UgPT09IGMwKSByZXR1cm4gZXhpdC50eXBlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgYWRkQ3VzdG9tRmxhZyhkZWZhdWx0VmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmZsYWcgPSBkZWZhdWx0VmFsdWUgPyAnY3VzdG9tOnRydWUnIDogJ2N1c3RvbTpmYWxzZSc7XG5cbiAgICAvLyBUT0RPIC0gZm9yIG5vdywgY3VzdG9tIGZsYWdzIGFyZSBzZXQgYnkgZGVmYXVsdC5cblxuICAgIC8vIGlmICghZmxhZ0FsbCkgcmV0dXJuO1xuICAgIC8vIGZvciAoY29uc3QgbG9jIG9mIHRoaXMucm9tLmxvY2F0aW9ucykge1xuICAgIC8vICAgaWYgKCFsb2MudXNlZCkgY29udGludWU7XG4gICAgLy8gICBmb3IgKGNvbnN0IHBvcyBvZiBsb2MubWV0YS5hbGxQb3MoKSkge1xuICAgIC8vICAgICBpZiAobG9jLm1ldGEuZ2V0VWlkKHBvcykgIT09IHRoaXMudWlkKSBjb250aW51ZTtcbiAgICAvLyAgICAgbG9jLm1ldGEuY3VzdG9tRmxhZ3Muc2V0KHBvcywgdGhpcy5yb20uZmxhZ3MuQWx3YXlzVHJ1ZSk7XG4gICAgLy8gICB9XG4gICAgLy8gfVxuICB9XG5cbiAgLyoqIEBwYXJhbSBkaXIgMCB0byBjaGVjayBpZiB0aGF0IGlzIHVuZGVyIHRoaXMsIDEgaWYgdGhhdCBpcyByaWdodCBvZiB0aGlzICovXG4gIHByaXZhdGUgX2NoZWNrTmVpZ2hib3IodGhhdDogTWV0YXNjcmVlbiwgZGlyOiAwfDEpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gY29uc3QgZTEgPSB0aGlzLmRhdGEuZWRnZXM7XG4gICAgLy8gY29uc3QgZTIgPSB0aGF0LmRhdGEuZWRnZXM7XG4gICAgLy8gaWYgKGUxICYmIGUyKSB7XG4gICAgLy8gICBjb25zdCBvcHAgPSBkaXIgfCAyO1xuICAgIC8vICAgaWYgKGUxW29wcF0gIT09ICcqJyAmJiBlMVtvcHBdID09PSBlMltkaXJdKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyB9XG5cbiAgICAvLyBUT0RPIC0gY2hhbmdlIGFsbG93ZWQgdG8gcmV0dXJuIGEgbWFzay5cbiAgfVxufVxuXG5jb25zdCBlZGdlVHlwZU1hcDoge1tDIGluIENvbm5lY3Rpb25UeXBlXT86IG51bWJlcn0gPSB7XG4gICdlZGdlOnRvcCc6IDAsXG4gICdlZGdlOmxlZnQnOiAxLFxuICAnZWRnZTpib3R0b20nOiAyLFxuICAnZWRnZTpyaWdodCc6IDMsXG59O1xuXG5jb25zdCBjb25uZWN0aW9uQmxvY2tzID0gW1xuICAnfDonLCAvLyBicmVhayB3YWxsLCBmb3JtIGJyaWRnZSwgYnV0IG5vIGZsaWdodFxuICAnfDo9LScsIC8vIG5vIHdhbGxzL2JyaWRnZS9mbGlnaHRcbiAgJ3wnLCAvLyBmbGlnaHQgYW5kIGJyZWFrIHdhbGxzXG4gICd8PScsIC8vIGZsaWdodCBvbmx5XG5dO1xuICBcblxuY29uc3QgbWFudWFsRmVhdHVyZXMgPSBuZXcgU2V0PEZlYXR1cmU+KFtcbiAgJ2FyZW5hJywgJ3BvcnRvYTEnLCAncG9ydG9hMicsICdwb3J0b2EzJywgJ2xha2UnLCAnb3ZlckJyaWRnZScsICd1bmRlckJyaWRnZScsXG4gICdsaWdodGhvdXNlJywgJ2NhYmluJywgJ3dpbmRtaWxsJywgJ2FsdGFyJywgJ3B5cmFtaWQnLCAnY3J5cHQnLFxuXSk7XG5jb25zdCBjb3VudGVkRmVhdHVyZXMgPSBuZXcgU2V0PEZlYXR1cmU+KFtcbiAgJ3BpdCcsICdzcGlrZXMnLCAnYnJpZGdlJywgJ3dhbGwnLCAnc3RhaXJzJywgJ3doaXJscG9vbCcsXG5dKTtcblxuY29uc3QgbWFudWFsRmVhdHVyZU1hc2sgPSBbLi4ubWFudWFsRmVhdHVyZXNdLm1hcChcbiAgICBmID0+IGZlYXR1cmVNYXNrW2ZdIGFzIG51bWJlcikucmVkdWNlKChhLCBiKSA9PiBhIHwgYik7XG5jb25zdCBjb3VudGVkRmVhdHVyZU1hc2sgPSBbLi4uY291bnRlZEZlYXR1cmVzXS5tYXAoXG4gICAgZiA9PiBmZWF0dXJlTWFza1tmXSBhcyBudW1iZXIpLnJlZHVjZSgoYSwgYikgPT4gYSB8IGIpO1xuIl19