export class Metatile {
    constructor(tileset, id) {
        this.tileset = tileset;
        this.id = id;
        this.copiedFrom = -1;
    }
    get tiles() {
        return [0, 1, 2, 3].map(i => this.tileset.tiles[i][this.id]);
    }
    setTiles(tiles) {
        for (let i = 0; i < 4; i++) {
            const tile = tiles[i];
            if (tile != null)
                this.tileset.tiles[i][this.id] = tile;
        }
        return this;
    }
    get alternative() {
        const alt = this.id < 0x20 ? this.tileset.alternates[this.id] : this.id;
        return alt !== this.id ? alt : null;
    }
    setAlternative(tile) {
        if (this.id >= 0x20)
            return this;
        this.tileset.alternates[this.id] = tile != null ? tile : this.id;
        return this;
    }
    get attrs() {
        return this.tileset.attrs[this.id];
    }
    setAttrs(attrs) {
        this.tileset.attrs[this.id] = attrs;
        return this;
    }
    get effects() {
        return this.tileset.effects().effects[this.id];
    }
    setEffects(effects) {
        this.tileset.effects().effects[this.id] = effects;
        return this;
    }
    copyFrom(other, ...screens) {
        const that = new Metatile(this.tileset, other);
        this.copiedFrom = other;
        this.setTiles(that.tiles);
        if ((this.id | that.id) < 0x20) {
            this.setAlternative(that.alternative);
        }
        this.setAttrs(that.attrs);
        this.setEffects(that.effects);
        return this;
    }
    replaceIn(...screens) {
        if (this.copiedFrom < 0)
            throw new Error(`Must copyFrom first.`);
        for (const screen of screens) {
            screen.replace(this.copiedFrom, this.id);
        }
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YXRpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvcm9tL21ldGF0aWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE1BQU0sT0FBTyxRQUFRO0lBRW5CLFlBQXFCLE9BQWdCLEVBQVcsRUFBVTtRQUFyQyxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQVcsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQURsRCxlQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcUMsQ0FBQztJQWdCOUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFDRCxRQUFRLENBQUMsS0FBc0M7UUFDN0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxJQUFJLElBQUksSUFBSTtnQkFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ3pEO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUN4RSxPQUFPLEdBQUcsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDO0lBQ0QsY0FBYyxDQUFDLElBQWlCO1FBQzlCLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNqRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsUUFBUSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBQ0QsVUFBVSxDQUFDLE9BQWU7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYSxFQUFFLEdBQUcsT0FBcUI7UUFDOUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFO1lBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQUcsT0FBcUI7UUFDaEMsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUM7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDakUsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMxQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNZXRhc2NyZWVufSBmcm9tICcuL21ldGFzY3JlZW4uanMnO1xuaW1wb3J0IHtUaWxlc2V0fSBmcm9tICcuL3RpbGVzZXQuanMnO1xuXG4vKipcbiAqIEEgc2luZ2xlIG1hcCB0aWxlLCBjb21wb3NlZCBvZiBmb3VyIENIUiB0aWxlcywgdGhhdCBjYW4gYmVcbiAqIG1hbmlwdWxhdGVkIGFzIGEgdW5pdC4gIEEgTWV0YXRpbGUgY2FuIGJlIGdvdHRlbiBmcm9tIGEgVGlsZXNldFxuICogKG5vdCBhIE1ldGF0aWxlc2V0KSBzaW5jZSBpdCBjb3JyZXNwb25kcyB0byBhIHBoeXNpY2FsIGVudGl0eSBpblxuICogdGhlIHJvbSwgcmF0aGVyIHRoYW4gYSBsb2dpY2FsIHN1YnNldCBvZiB0aGUgdGlsZXNldCAod2hpY2ggaXNcbiAqIHdoYXQgdGhlIE1ldGF0aWxlc2V0IHJlcHJlc2VudHMpLlxuICovXG5leHBvcnQgY2xhc3MgTWV0YXRpbGUge1xuICBwcml2YXRlIGNvcGllZEZyb20gPSAtMTtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgdGlsZXNldDogVGlsZXNldCwgcmVhZG9ubHkgaWQ6IG51bWJlcikge31cblxuICAvLyBnZXQgdG9wTGVmdCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy50aWxlc2V0LnRpbGVzZXQudGlsZXNbMF1bdGhpcy5pZF07IH1cbiAgLy8gc2V0IHRvcExlZnQoeDogbnVtYmVyKSB7IHRoaXMudGlsZXNldC50aWxlc2V0LnRpbGVzWzBdW3RoaXMuaWRdID0geDsgfVxuXG4gIC8vIGdldCB0b3BSaWdodCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy50aWxlc2V0LnRpbGVzZXQudGlsZXNbMV1bdGhpcy5pZF07IH1cbiAgLy8gc2V0IHRvcFJpZ2h0KHg6IG51bWJlcikgeyB0aGlzLnRpbGVzZXQudGlsZXNldC50aWxlc1sxXVt0aGlzLmlkXSA9IHg7IH1cblxuICAvLyBnZXQgYm90dG9tTGVmdCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy50aWxlc2V0LnRpbGVzZXQudGlsZXNbMl1bdGhpcy5pZF07IH1cbiAgLy8gc2V0IGJvdHRvbUxlZnQoeDogbnVtYmVyKSB7IHRoaXMudGlsZXNldC50aWxlc2V0LnRpbGVzWzJdW3RoaXMuaWRdID0geDsgfVxuXG4gIC8vIGdldCBib3R0b21SaWdodCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy50aWxlc2V0LnRpbGVzZXQudGlsZXNbM11bdGhpcy5pZF07IH1cbiAgLy8gc2V0IGJvdHRvbVJpZ2h0KHg6IG51bWJlcikgeyB0aGlzLnRpbGVzZXQudGlsZXNldC50aWxlc1szXVt0aGlzLmlkXSA9IHg7IH1cblxuICAvLyBUT0RPIC0gZ2V0dGVycz9cblxuICBnZXQgdGlsZXMoKTogcmVhZG9ubHkgbnVtYmVyW10ge1xuICAgIHJldHVybiBbMCwgMSwgMiwgM10ubWFwKGkgPT4gdGhpcy50aWxlc2V0LnRpbGVzW2ldW3RoaXMuaWRdKTtcbiAgfVxuICBzZXRUaWxlcyh0aWxlczogUmVhZG9ubHlBcnJheTxudW1iZXJ8dW5kZWZpbmVkPik6IHRoaXMge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICBjb25zdCB0aWxlID0gdGlsZXNbaV07XG4gICAgICBpZiAodGlsZSAhPSBudWxsKSB0aGlzLnRpbGVzZXQudGlsZXNbaV1bdGhpcy5pZF0gPSB0aWxlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldCBhbHRlcm5hdGl2ZSgpOiBudW1iZXJ8bnVsbCB7XG4gICAgY29uc3QgYWx0ID0gdGhpcy5pZCA8IDB4MjAgPyB0aGlzLnRpbGVzZXQuYWx0ZXJuYXRlc1t0aGlzLmlkXSA6IHRoaXMuaWQ7XG4gICAgcmV0dXJuIGFsdCAhPT0gdGhpcy5pZCA/IGFsdCA6IG51bGw7XG4gIH1cbiAgc2V0QWx0ZXJuYXRpdmUodGlsZTogbnVtYmVyfG51bGwpOiB0aGlzIHtcbiAgICBpZiAodGhpcy5pZCA+PSAweDIwKSByZXR1cm4gdGhpcztcbiAgICB0aGlzLnRpbGVzZXQuYWx0ZXJuYXRlc1t0aGlzLmlkXSA9IHRpbGUgIT0gbnVsbCA/IHRpbGUgOiB0aGlzLmlkO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0IGF0dHJzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudGlsZXNldC5hdHRyc1t0aGlzLmlkXTtcbiAgfVxuICBzZXRBdHRycyhhdHRyczogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy50aWxlc2V0LmF0dHJzW3RoaXMuaWRdID0gYXR0cnM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQgZWZmZWN0cygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnRpbGVzZXQuZWZmZWN0cygpLmVmZmVjdHNbdGhpcy5pZF07XG4gIH1cbiAgc2V0RWZmZWN0cyhlZmZlY3RzOiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLnRpbGVzZXQuZWZmZWN0cygpLmVmZmVjdHNbdGhpcy5pZF0gPSBlZmZlY3RzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29weUZyb20ob3RoZXI6IG51bWJlciwgLi4uc2NyZWVuczogTWV0YXNjcmVlbltdKTogdGhpcyB7XG4gICAgY29uc3QgdGhhdCA9IG5ldyBNZXRhdGlsZSh0aGlzLnRpbGVzZXQsIG90aGVyKTtcbiAgICB0aGlzLmNvcGllZEZyb20gPSBvdGhlcjtcbiAgICB0aGlzLnNldFRpbGVzKHRoYXQudGlsZXMpO1xuICAgIGlmICgodGhpcy5pZCB8IHRoYXQuaWQpIDwgMHgyMCkge1xuICAgICAgdGhpcy5zZXRBbHRlcm5hdGl2ZSh0aGF0LmFsdGVybmF0aXZlKTtcbiAgICB9XG4gICAgdGhpcy5zZXRBdHRycyh0aGF0LmF0dHJzKTtcbiAgICB0aGlzLnNldEVmZmVjdHModGhhdC5lZmZlY3RzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlcGxhY2VJbiguLi5zY3JlZW5zOiBNZXRhc2NyZWVuW10pOiB0aGlzIHtcbiAgICBpZiAodGhpcy5jb3BpZWRGcm9tIDwgMCkgdGhyb3cgbmV3IEVycm9yKGBNdXN0IGNvcHlGcm9tIGZpcnN0LmApO1xuICAgIGZvciAoY29uc3Qgc2NyZWVuIG9mIHNjcmVlbnMpIHtcbiAgICAgIHNjcmVlbi5yZXBsYWNlKHRoaXMuY29waWVkRnJvbSwgdGhpcy5pZCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iXX0=