import { seq } from './util.js';
export const featureMask = {
    'pit': 0x1,
    'arena': 0x2,
    'spikes': 0x4,
    'bridge': 0x8,
    'wall': 0x10,
    'stairs': 0x20,
    'stair:up': 0x40,
    'stair:down': 0x80,
    'empty': 0x100,
    'portoa1': 0x200,
    'portoa2': 0x400,
    'portoa3': 0x800,
    'lake': 0x1000,
    'overBridge': 0x2000,
    'underBridge': 0x4000,
    'whirlpool': 0x8000,
    'lighthouse': 65536,
    'cabin': 131072,
    'windmill': 262144,
    'altar': 524288,
    'pyramid': 1048576,
    'crypt': 2097152,
    'consolidate': 4194304,
};
export function icon(arr) {
    if (arr.length != 1)
        throw new Error('Bad icon input');
    const str = arr[0];
    const lines = str.split('\n');
    const full = lines.slice(1).map(l => l.replace(/^\s*\||\|\s*$/g, ''));
    const short = /\S/.test(lines[0]) ? lines[0][0] : full[1][1];
    return { short, full: [full[0], full[1], full[2]] };
}
export function upStair(tile, width = 2) {
    const y = tile >>> 4;
    const x = tile & 0xf;
    if (width === 1) {
        const dy = y === 0xe ? 0x2800 : 0x1800;
        const entrance = ((y << 12) + dy) | ((x << 4) + 0x0008);
        return {
            type: 'stair:up',
            dir: 2,
            entrance,
            exits: [tile],
        };
    }
    const entrance = y << 12 | ((x << 4) + (width << 3));
    return {
        type: 'stair:up',
        dir: 0,
        entrance,
        exits: seq(width, i => tile - 0x10 + i),
    };
}
export function downStair(tile, width = 2) {
    const y = tile >>> 4;
    const x = tile & 0xf;
    if (width === 1) {
        const entrance = ((y << 12) - 0x0800) | ((x << 4) + 0x0008);
        return {
            type: 'stair:down',
            dir: 2,
            entrance,
            exits: [tile],
            allowedExits: [tile + 16, tile - 16],
        };
    }
    const entrance = y << 12 | 0x0f00 | ((x << 4) + (width << 3));
    return {
        type: 'stair:down',
        dir: 2,
        entrance,
        exits: seq(width, i => tile + 0x10 + i),
        allowedExits: [...seq(width, i => tile + 0x20 + i),
            ...seq(width, i => tile + i)],
    };
}
export function cave(tile, type = 'cave') {
    return { ...upStair(tile + 16), type };
}
export function door(tile, type = 'door') {
    return { ...upStair(tile, 1), type };
}
export function waterfallCave(tile) {
    const y = tile >>> 4;
    const x = tile & 0xf;
    return {
        type: 'cave',
        dir: 0,
        entrance: y << 12 | x << 4 | 0xf,
        exits: [tile - 0xf, tile + 1],
    };
}
export function topEdge({ left = 7, width = 2, top = 2, manual = false } = {}) {
    return {
        type: 'edge:top',
        manual,
        dir: 0,
        entrance: ((top + 1) << 12) | ((left << 4) + (width << 3)),
        exits: seq(width, i => (top << 4) | (i + left)),
    };
}
export function bottomEdge({ left = 7, width = 2, shift = 0, type = 'edge:bottom', manual = false } = {}) {
    return {
        type, manual,
        dir: 2,
        entrance: 57088 | ((left << 4) + (width << 3) + 16 * shift),
        exits: seq(width, i => 0xe0 | (i + left)),
    };
}
export function bottomEdgeHouse({ left = 7, width = 2, shift = 0 } = {}) {
    return {
        type: 'edge:bottom',
        dir: 2,
        entrance: 44800 | ((left << 4) + (width << 3) + 16 * shift),
        exits: seq(width, i => 0xb0 | (i + left)),
    };
}
export function leftEdge({ top = 7, height = 2, shift = 0 } = {}) {
    return {
        type: 'edge:left',
        dir: 1,
        entrance: ((top << 12) + ((16 * shift) << 8) + (height << 11)) | 0x10,
        exits: seq(height, i => (i + top) << 4),
    };
}
export function rightEdge({ top = 7, height = 2 } = {}) {
    return {
        type: 'edge:right',
        dir: 3,
        entrance: ((top << 12) + (height << 11)) | 0xef,
        exits: seq(height, i => (i + top) << 4 | 0xf),
    };
}
export function seamlessUp(tile, width = 2) {
    return {
        type: 'seamless:up',
        dir: 0,
        get entrance() { throw new Error('does not make sense'); },
        exits: seq(width, i => (tile + i)),
    };
}
export function seamlessDown(tile, width = 2) {
    return {
        type: 'seamless:down',
        dir: 2,
        get entrance() { throw new Error('does not make sense'); },
        exits: seq(width, i => (tile + i)),
    };
}
//# sourceMappingURL=data:application/json;base64,