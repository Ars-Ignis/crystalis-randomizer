import { Entity, EntityArray } from './entity.js';
import { MessageId } from './messageid.js';
import { ITEM_GET_FLAGS, Address, Segment, hex, readLittleEndian, relocExportLabel } from './util.js';
const { $0e, $0f, $14, $fe, $ff } = Segment;
const ITEMGET_TABLE = Address.of($0e, 0x9b00);
const GET_TO_ITEM_BASE = Address.of($0e, 0x9d66);
const GET_TO_ITEM_THRESHOLD = 0x49;
export class ItemGets extends EntityArray {
    constructor(rom) {
        super(0x71);
        this.rom = rom;
        this.actionGrants = new Map();
        for (let i = 0; i < 0x71; i++) {
            this[i] = new ItemGet(rom, i);
        }
        this.actionGrants.set(0x25, 0x29);
        this.actionGrants.set(0x39, 0x3a);
        this.actionGrants.set(0x3b, 0x47);
        this.actionGrants.set(0x3c, 0x3e);
        this.actionGrants.set(0x84, 0x46);
        this.actionGrants.set(0xb2, 0x42);
        this.actionGrants.set(0xb4, 0x41);
    }
    write() {
        const a = this.rom.assembler();
        for (const itemget of this) {
            itemget.assemble(a);
        }
        relocExportLabel(a, [$14, $fe, $ff], 'GrantItemTable');
        for (const [key, value] of this.actionGrants) {
            a.byte(key, value);
        }
        return [a.module()];
    }
}
export class ItemGet extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this._itemId = this.itemPointer.read(rom.prg);
        const tableBase = this.tablePointer.readAddress(rom.prg, $0e, $0f);
        let a = tableBase.offset;
        this.inventoryRowStart = rom.prg[a++];
        this.inventoryRowLength = rom.prg[a++];
        this.acquisitionAction = MessageId.from(rom.prg, a);
        this.flags = ITEM_GET_FLAGS.read(rom.prg, a + 2);
        this.key = rom.prg[a + 2 + 2 * this.flags.length + 1] === 0xfe;
        if (id !== 0 && tableBase.org === readLittleEndian(rom.prg, 0x1dd66)) {
            this.key = false;
            this.flags = [];
        }
    }
    get itemPointer() {
        return GET_TO_ITEM_BASE.plus(this.id);
    }
    get tablePointer() {
        return ITEMGET_TABLE.plus(this.id << 1);
    }
    get itemId() { return this._itemId; }
    set itemId(itemId) {
        if (this.id < GET_TO_ITEM_THRESHOLD)
            throw new Error(`${this.id}`);
        this._itemId = itemId;
    }
    isLosable() {
        return LOSABLE_ROWS.has(this.inventoryRowStart);
    }
    copyFrom(that) {
        this.inventoryRowStart = that.inventoryRowStart;
        this.inventoryRowLength = that.inventoryRowLength;
        this.acquisitionAction = that.acquisitionAction;
        this.flags = [...that.flags];
        this.key = that.key;
    }
    assemble(a) {
        this.itemPointer.loc(a);
        a.byte(this.itemId);
        const table = [
            this.inventoryRowStart, this.inventoryRowLength,
            ...this.acquisitionAction.data,
            ...ITEM_GET_FLAGS.bytes(this.flags),
            this.key ? 0xfe : 0xff,
        ];
        a.segment($0e.name, $0f.name);
        a.reloc(`ItemGetData ${hex(this.id)}`);
        const tableAddr = a.pc();
        a.byte(...table);
        this.tablePointer.loc(a);
        a.word(tableAddr);
    }
}
const LOSABLE_ROWS = new Set([4, 8, 16]);
//# sourceMappingURL=data:application/json;base64,