import { Maze } from './maze.js';
import { GOA1_SCREENS, write2d } from './spec.js';
import { Dir } from './types.js';
import { Flag } from '../rom/location.js';
import { hex } from '../rom/util.js';
import { Monster } from '../rom/monster.js';
export function shuffleGoa1(rom, random, attempts = 1500) {
    extendGoaScreens(rom);
    const loc = rom.locations.GoaFortress_Kelbesque;
    const w = loc.width;
    const h = loc.height;
    OUTER: for (let attempt = 0; attempt < attempts; attempt++) {
        const maze = new Maze(random, h, w, GOA1_SCREENS);
        const entrance = ((h - 1) << 4 | random.nextInt(w));
        const boss = random.nextInt(w);
        const entranceTile = entrance << 8 | 0x02;
        const exitTiles = [(boss + 32) << 8 | 0x01, (boss + 32) << 8 | 0x03];
        function fixed(pos, value) {
            maze.set(pos, value, { force: true });
        }
        fixed(entrance, 0xf0f1);
        fixed(entrance - 1, 0x00f0);
        fixed(entrance + 1, 0xf000);
        fixed(boss, 0xfff0);
        fixed(boss - 1, 0x0ff0);
        fixed(boss + 1, 0xff00);
        fixed(boss + 16, 0xf1ff);
        fixed(boss + 15, 0x00ff);
        fixed(boss + 17, 0xf00f);
        if (!maze.connect(entrance, Dir.UP, boss + 16, Dir.DOWN)) {
            continue OUTER;
        }
        if (maze.get((boss + 32)) === 0x0101 ||
            maze.get((entrance - 16)) === 0x0101)
            continue OUTER;
        for (let i = 0; i < 10 && maze.density() < 0.65; i++) {
            if (maze.addLoop())
                i = 0;
        }
        if (maze.density() < 0.45)
            continue OUTER;
        if (!check())
            continue OUTER;
        for (const [pos, scr] of maze) {
            if (scr === 0x0101 && maze.get((pos + 16)) === 0x0101) {
                const order = random.shuffle([0, 16]);
                if (!tryFlag((pos + order[0]), 131072) &&
                    !tryFlag((pos + order[1]), 131072)) {
                    continue OUTER;
                }
            }
        }
        for (const [pos, alt] of random.shuffle([...maze.alternates()])) {
            tryFlag(pos, alt);
        }
        maze.fillAll({ edge: 0 });
        function check() {
            const traversal = maze.traverse();
            const main = traversal.get(entranceTile);
            if (!main)
                return false;
            if (!exitTiles.filter(t => main.has(t)).length)
                return false;
            if (main.size < 0.8 * traversal.size)
                return false;
            return true;
        }
        function tryFlag(pos, mod = 65536) {
            const prev = maze.get(pos);
            if (prev == null)
                throw new Error(`Cannot flag empty screen ${hex(pos)}`);
            maze.replace(pos, (prev | mod));
            if (check())
                return true;
            maze.replace(pos, prev);
            return false;
        }
        loc.moveScreen(0x06, boss);
        loc.moveScreen(0x83, entrance);
        maze.write(loc, new Set());
        const monsterPlacer = loc.monsterPlacer(random);
        for (const spawn of loc.spawns) {
            if (!spawn.isMonster())
                continue;
            const monster = rom.objects[spawn.monsterId];
            if (!(monster instanceof Monster))
                continue;
            const pos = monsterPlacer(monster);
            if (pos == null) {
                console.error(`no valid location for ${hex(monster.id)} in ${hex(loc.id)}`);
                spawn.used = false;
                continue;
            }
            else {
                spawn.screen = pos >>> 8;
                spawn.tile = pos & 0xff;
            }
        }
        if (rom.spoiler)
            rom.spoiler.addMaze(loc.id, loc.name, maze.show());
        return;
    }
    throw new Error(`unable to shuffle goa1 after ${attempts} attempts`);
}
export function extendGoaScreens(rom) {
    for (const t of [0x8c, 0xa4, 0xa8]) {
        const ts = rom.tilesets[t];
        ts.alternates[0x19] = 0x19;
        ts.alternates[0x1b] = 0x1b;
    }
    rom.swapMetatiles([0xa4, 0x8c], [0x2b, [0x19, 0xc5], ~0xc6], [0xba, [0x1b, 0xc5], ~0xc4]);
    rom.swapMetatiles([0xa8], [[0x17, 0x54], ~0x19], [[0x18, 0x58], ~0x1b]);
    rom.swapMetatiles([0x88], [0x19, ~0xc5], [0x1b, ~0xc5]);
    const w = [[0x19, 0x19], [0x1b, 0x1b]];
    write2d(rom.screens[0xe0].tiles, 0x61, w);
    write2d(rom.screens[0xe1].tiles, 0x6d, w);
    write2d(rom.screens[0xe2].tiles, 0x91, w);
    write2d(rom.screens[0xe3].tiles, 0x9d, w);
    write2d(rom.screens[0xe4].tiles, 0x41, w);
    write2d(rom.screens[0xe4].tiles, 0x8d, w);
    write2d(rom.screens[0xe5].tiles, 0x61, w);
    write2d(rom.screens[0xe5].tiles, 0xad, w);
    write2d(rom.screens[0xe6].tiles, 0x0d, w);
    write2d(rom.screens[0xe6].tiles, 0xd1, w);
    write2d(rom.screens[0xe7].tiles, 0x01, w);
    write2d(rom.screens[0xe7].tiles, 0x0d, w);
    write2d(rom.screens[0xe8].tiles, 0xd1, w);
    write2d(rom.screens[0xe8].tiles, 0xdd, w);
    rom.locations[0xa9].flags.push(Flag.of({ screen: 0x10, flag: 0x2ef }), Flag.of({ screen: 0x20, flag: 0x2ef }), Flag.of({ screen: 0x21, flag: 0x2ef }), Flag.of({ screen: 0x24, flag: 0x2ef }), Flag.of({ screen: 0x25, flag: 0x2ef }), Flag.of({ screen: 0x30, flag: 0x2ef }), Flag.of({ screen: 0x31, flag: 0x2ef }), Flag.of({ screen: 0x33, flag: 0x2ef }), Flag.of({ screen: 0x34, flag: 0x2ef }), Flag.of({ screen: 0x41, flag: 0x2ef }), Flag.of({ screen: 0x54, flag: 0x2ef }), Flag.of({ screen: 0x62, flag: 0x2ef }), Flag.of({ screen: 0x64, flag: 0x2ef }), Flag.of({ screen: 0x72, flag: 0x2ef }), Flag.of({ screen: 0x74, flag: 0x200 }));
    rom.locations.WaterfallCave3.tileset = 0x88;
}
//# sourceMappingURL=data:application/json;base64,