import { DefaultMap } from '../util.js';
const MapTypes = {
    Overworld: {
        ' ': 'blocked',
        '*': 'unmatched',
        '1': 'waterfall valley slope',
        '2': 'waterfall valley bridge to portoa ',
        '3': 'desert oasis ',
        '>': 'open right',
        '<': 'open left',
        '^': 'open top',
        'v': 'open bottom',
        'o': 'open',
        'l': 'long grass',
        's': 'short grass',
        'r': 'river',
        'n': 'narrow edge exit, centered',
        'b': 'boat',
    },
    Tower: {
        ' ': 'blocked',
        's': 'stairs',
        't': 'corridor',
    },
    Cave: {
        ' ': 'blocked',
        'w': 'wide',
        'c': 'corridor',
        'n': 'narrow',
        'r': 'river',
        'b': 'wrong side of bridge',
        's': 'spikes',
    },
    Swamp: {
        ' ': 'blocked',
        's': 'passage',
    },
    Mountain: {
        ' ': 'blocked',
        'p': 'path',
        's': 'slope',
        'w': 'waterfall',
        'l': 'ladder',
    },
};
const [] = [MapTypes];
const BORDER = { uid: 0xffff };
const EDGE_EXIT = { uid: 0xfffe };
class NeighborCache {
    constructor(tileset) {
        this.allowed = [new Set(), new Set()];
        this.neighbors = new DefaultMap(() => new Set());
        for (const s1 of tileset) {
            const e1 = s1.data.edges || '****';
            for (const s2 of tileset) {
                const e2 = s2.data.edges || '****';
                if (e1[2] !== '*' && e1[2] === e2[0]) {
                    this.add(2, s1, s2);
                }
                if (e1[3] !== '*' && e1[3] === e2[1]) {
                    this.add(3, s1, s2);
                }
                for (const dir of (s1.data.allowed ? s1.data.allowed(s2) : [])) {
                    this.add(dir, s1, s2);
                }
            }
            const edges = [];
            for (const { type } of s1.data.exits || []) {
                const dir = edgeTypeMap[type];
                if (dir != null)
                    edges[dir] = EDGE_EXIT;
            }
            for (let dir = 0; dir < 4; dir++) {
                let edge = edges[dir];
                if (edge == null)
                    edge = borderMap[e1[dir]];
                if (edge != null)
                    this.add(dir, s1, edge);
            }
        }
    }
    add(dir, s1, s2) {
        const u1 = s1.uid;
        const u2 = s2.uid;
        this.allowed[dir & 1].add(dir & 2 ? u1 << 16 | u2 : u2 << 16 | u1);
        this.neighbors.get(u1 << 2 | dir).add(u2);
        this.neighbors.get(u2 << 2 | (dir ^ 2)).add(u1);
    }
    check(s1, s2, delta) {
        const cache = this.allowed[delta & 1];
        const index = delta > 0 ? s1 << 16 | s2 : s2 << 16 | s1;
        return cache.has(index);
    }
}
const borderMap = {
    '*': BORDER,
    ' ': BORDER,
};
const edgeTypeMap = {
    'edge:top': 0,
    'edge:left': 1,
    'edge:bottom': 2,
    'edge:right': 3,
};
const caches = new DefaultMap(t => new NeighborCache(t));
function inBounds(pos, height, width) {
    return (pos & 15) < width && pos > 15 && pos >>> 4 <= height;
}
export class Maze {
    constructor(random, height, width, tileset) {
        this.random = random;
        this.height = height;
        this.width = width;
        this.tileset = tileset;
        this.neighbors = caches.get(this.tileset);
        this.rom = tileset.rom;
        this.map = new Array((height + 2) << 4).fill(-1);
        for (let x = 0; x < width; x++) {
            this.map[ind(-1, x)] = this.map[ind(height, x)] = BORDER.uid;
        }
        for (let y = 0; y < width; y++) {
            this.map[ind(y, -1)] = this.map[ind(y, width)] = BORDER.uid;
        }
    }
    inBounds(pos) {
        return (pos & 15) < this.width && pos > 15 && pos >>> 4 <= this.height;
    }
    static from(location, random, tileset) {
        const { rom, width, height } = location;
        if (!tileset) {
            const tilesets = new Set(rom.metatilesets);
            for (const screen of location.allScreens()) {
                for (const tileset of tilesets) {
                    if (!tileset.getMetascreens(screen.id).size)
                        tilesets.delete(tileset);
                }
            }
            if (location.id === 0xa9) {
                tilesets.delete(rom.metatilesets.fortress);
            }
            else {
                tilesets.delete(rom.metatilesets.labyrinth);
            }
            if (!tilesets.size)
                throw new Error(`No tileset had all screens.`);
            if (tilesets.size > 1)
                throw new Error(`Nonunique tileset.`);
            tileset = [...tilesets][0];
        }
        const cache = caches.get(tileset);
        const map = new Array((height + 2) << 4).fill(undefined);
        const ambiguous = new Set();
        function addBorder(y, x) {
            const pos = ind(y, x);
            map[pos] = [0xffff, 0xfffe];
            ambiguous.add(pos);
        }
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const pos = ind(y, x);
                const screens = [...tileset.getMetascreens(location.screens[y][x])].map(s => s.uid);
                if (screens.length > 1)
                    ambiguous.add(pos);
                map[pos] = screens;
            }
            addBorder(y, -1);
            addBorder(y, width);
        }
        for (let x = 0; x < width; x++) {
            addBorder(-1, x);
            addBorder(height, x);
        }
        while (ambiguous.size) {
            let progress = false;
            const prev = [...ambiguous];
            ambiguous.clear();
            for (const pos of prev) {
                const screens = new Set(map[pos]);
                for (const screen of screens) {
                    const ok = [-1, 1, -16, 16].every(delta => {
                        if (!inBounds(pos, height, width) &&
                            !inBounds(pos + delta, height, width)) {
                            return true;
                        }
                        return map[pos + delta]
                            .some(neighbor => cache.check(screen, neighbor, delta));
                    });
                    if (!ok) {
                        screens.delete(screen);
                        progress = true;
                    }
                }
                map[pos] = [...screens];
            }
            if (!progress)
                throw new Error(`divergence`);
        }
        const maze = new Maze(random, height, width, tileset);
        maze.map = map.map(s => s ? s[0] : -1);
        return maze;
    }
    show() {
        var _a, _b;
        const lines = [];
        let line = [];
        for (let x = 0; x < this.width; x++) {
            line.push(x.toString(16));
        }
        lines.push('   ' + line.join('  '));
        for (let y = 0; y < this.height; y++) {
            for (let r = 0; r < 3; r++) {
                line = [r === 1 ? y.toString(16) : ' ', ' '];
                for (let x = 0; x < this.width; x++) {
                    const screen = this.rom.metascreens[this.map[ind(y, x)]];
                    line.push((_b = (_a = screen === null || screen === void 0 ? void 0 : screen.data.icon) === null || _a === void 0 ? void 0 : _a.full[r]) !== null && _b !== void 0 ? _b : (r === 1 ? ' ? ' : '   '));
                }
                lines.push(line.join(''));
            }
        }
        return lines.join('\n');
    }
}
function ind(y, x) {
    return ((y + 1) << 4) + x;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF6ZTIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvbWF6ZS9tYXplMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXRDLE1BQU0sUUFBUSxHQUFHO0lBQ2YsU0FBUyxFQUFFO1FBQ1QsR0FBRyxFQUFFLFNBQVM7UUFDZCxHQUFHLEVBQUUsV0FBVztRQUNoQixHQUFHLEVBQUUsd0JBQXdCO1FBQzdCLEdBQUcsRUFBRSxvQ0FBb0M7UUFDekMsR0FBRyxFQUFFLGVBQWU7UUFDcEIsR0FBRyxFQUFFLFlBQVk7UUFDakIsR0FBRyxFQUFFLFdBQVc7UUFDaEIsR0FBRyxFQUFFLFVBQVU7UUFDZixHQUFHLEVBQUUsYUFBYTtRQUNsQixHQUFHLEVBQUUsTUFBTTtRQUNYLEdBQUcsRUFBRSxZQUFZO1FBQ2pCLEdBQUcsRUFBRSxhQUFhO1FBQ2xCLEdBQUcsRUFBRSxPQUFPO1FBQ1osR0FBRyxFQUFFLDRCQUE0QjtRQUNqQyxHQUFHLEVBQUUsTUFBTTtLQUNaO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsR0FBRyxFQUFFLFNBQVM7UUFDZCxHQUFHLEVBQUUsUUFBUTtRQUNiLEdBQUcsRUFBRSxVQUFVO0tBQ2hCO0lBQ0QsSUFBSSxFQUFFO1FBQ0osR0FBRyxFQUFFLFNBQVM7UUFDZCxHQUFHLEVBQUUsTUFBTTtRQUNYLEdBQUcsRUFBRSxVQUFVO1FBQ2YsR0FBRyxFQUFFLFFBQVE7UUFDYixHQUFHLEVBQUUsT0FBTztRQUNaLEdBQUcsRUFBRSxzQkFBc0I7UUFDM0IsR0FBRyxFQUFFLFFBQVE7S0FDZDtJQUNELEtBQUssRUFBRTtRQUNMLEdBQUcsRUFBRSxTQUFTO1FBQ2QsR0FBRyxFQUFFLFNBQVM7S0FDZjtJQUNELFFBQVEsRUFBRTtRQUNSLEdBQUcsRUFBRSxTQUFTO1FBQ2QsR0FBRyxFQUFFLE1BQU07UUFDWCxHQUFHLEVBQUUsT0FBTztRQUNaLEdBQUcs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SUFDMUIsQ0FBQztDQUVGO0FBSUQsU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFDL0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQge01ldGFzY3JlZW59IGZyb20gJy4uL3JvbS9tZXRhc2NyZWVuLmpzJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJy4uL3JvbS9sb2NhdGlvbi5qcyc7XG5pbXBvcnQge0Nvbm5lY3Rpb25UeXBlfSBmcm9tICcuLi9yb20vbWV0YXNjcmVlbmRhdGEuanMnO1xuaW1wb3J0IHtNZXRhdGlsZXNldH0gZnJvbSAnLi4vcm9tL21ldGF0aWxlc2V0LmpzJztcbmltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuaW1wb3J0IHtSYW5kb219IGZyb20gJy4uL3JhbmRvbS5qcyc7XG5pbXBvcnQge0RlZmF1bHRNYXB9IGZyb20gJy4uL3V0aWwuanMnO1xuXG5jb25zdCBNYXBUeXBlcyA9IHtcbiAgT3ZlcndvcmxkOiB7XG4gICAgJyAnOiAnYmxvY2tlZCcsXG4gICAgJyonOiAndW5tYXRjaGVkJywgLy8gbXVzdCBiZSBvbiBhbiBlZGdlXG4gICAgJzEnOiAnd2F0ZXJmYWxsIHZhbGxleSBzbG9wZScsXG4gICAgJzInOiAnd2F0ZXJmYWxsIHZhbGxleSBicmlkZ2UgdG8gcG9ydG9hICcsXG4gICAgJzMnOiAnZGVzZXJ0IG9hc2lzICcsXG4gICAgJz4nOiAnb3BlbiByaWdodCcsXG4gICAgJzwnOiAnb3BlbiBsZWZ0JyxcbiAgICAnXic6ICdvcGVuIHRvcCcsXG4gICAgJ3YnOiAnb3BlbiBib3R0b20nLFxuICAgICdvJzogJ29wZW4nLFxuICAgICdsJzogJ2xvbmcgZ3Jhc3MnLFxuICAgICdzJzogJ3Nob3J0IGdyYXNzJyxcbiAgICAncic6ICdyaXZlcicsXG4gICAgJ24nOiAnbmFycm93IGVkZ2UgZXhpdCwgY2VudGVyZWQnLFxuICAgICdiJzogJ2JvYXQnLFxuICB9LFxuICBUb3dlcjoge1xuICAgICcgJzogJ2Jsb2NrZWQnLFxuICAgICdzJzogJ3N0YWlycycsXG4gICAgJ3QnOiAnY29ycmlkb3InLFxuICB9LFxuICBDYXZlOiB7XG4gICAgJyAnOiAnYmxvY2tlZCcsXG4gICAgJ3cnOiAnd2lkZScsXG4gICAgJ2MnOiAnY29ycmlkb3InLFxuICAgICduJzogJ25hcnJvdycsXG4gICAgJ3InOiAncml2ZXInLFxuICAgICdiJzogJ3dyb25nIHNpZGUgb2YgYnJpZGdlJyxcbiAgICAncyc6ICdzcGlrZXMnLFxuICB9LFxuICBTd2FtcDoge1xuICAgICcgJzogJ2Jsb2NrZWQnLFxuICAgICdzJzogJ3Bhc3NhZ2UnLFxuICB9LFxuICBNb3VudGFpbjoge1xuICAgICcgJzogJ2Jsb2NrZWQnLFxuICAgICdwJzogJ3BhdGgnLFxuICAgICdzJzogJ3Nsb3BlJyxcbiAgICAndyc6ICd3YXRlcmZhbGwnLFxuICAgICdsJzogJ2xhZGRlcicsXG4gIH0sXG4gIC8vIE90aGVyIHR5cGVzIHdlIGRvbid0IGhhbmRsZTogSG91c2UsIENoYW5uZWxcbn07XG5jb25zdCBbXSA9IFtNYXBUeXBlc107XG5cbnR5cGUgRGlyID0gMHwxfDJ8MztcbnR5cGUgVWlkID0gbnVtYmVyO1xudHlwZSBVaWRQYWlyID0gbnVtYmVyO1xuXG4vLyBmYWtlIFVJRHMgZm9yIHRoZSB0d28gYm9yZGVyIG9wdGlvbnMuXG5jb25zdCBCT1JERVIgPSB7dWlkOiAweGZmZmZ9O1xuY29uc3QgRURHRV9FWElUID0ge3VpZDogMHhmZmZlfTtcblxuLy8gTmVlZCBhIGNhY2hlIG9mIG5laWdoYm9ycz9cbmNsYXNzIE5laWdoYm9yQ2FjaGUge1xuICAvLyBbdmVydGljYWwsIGhvcml6b250YWxdLCBpbmRleGVkIGJ5IGRpciAmIDFcbiAgcmVhZG9ubHkgYWxsb3dlZCA9IFtuZXcgU2V0PFVpZFBhaXI+KCksIG5ldyBTZXQ8VWlkUGFpcj4oKV0gYXMgY29uc3Q7XG4gIHJlYWRvbmx5IG5laWdoYm9ycyA9IG5ldyBEZWZhdWx0TWFwPG51bWJlciwgU2V0PFVpZD4+KCgpID0+IG5ldyBTZXQoKSk7XG5cbiAgY29uc3RydWN0b3IodGlsZXNldDogTWV0YXRpbGVzZXQpIHtcbiAgICBmb3IgKGNvbnN0IHMxIG9mIHRpbGVzZXQpIHtcbiAgICAgIGNvbnN0IGUxID0gczEuZGF0YS5lZGdlcyB8fCAnKioqKic7XG4gICAgICAvLyBSZWdpc3RlciB0aGUgc2NyZWVuIHBhaXJzXG4gICAgICBmb3IgKGNvbnN0IHMyIG9mIHRpbGVzZXQpIHtcbiAgICAgICAgLy8gQmFzaWMgaWRlYTogY29tcGFyZSB0aGUgZWRnZXMuICBCdXQgd2UgbmVlZCBhIHdheSB0byBvdmVycmlkZT9cbiAgICAgICAgLy8gU3BlY2lmaWNhbGx5LCBpZiB0aGVyZSdzIGEgKiB0aGVuIGNhbGwgYSBtZXRob2Q/ICBXaGF0IGFib3V0XG4gICAgICAgIC8vIGFsbG93aW5nIChzYXkpIG5vcm1hbCBjYXZlIHcvIG5hcnJvdz9cbiAgICAgICAgY29uc3QgZTIgPSBzMi5kYXRhLmVkZ2VzIHx8ICcqKioqJztcbiAgICAgICAgaWYgKGUxWzJdICE9PSAnKicgJiYgZTFbMl0gPT09IGUyWzBdKSB7XG4gICAgICAgICAgdGhpcy5hZGQoMiwgczEsIHMyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZTFbM10gIT09ICcqJyAmJiBlMVszXSA9PT0gZTJbMV0pIHtcbiAgICAgICAgICB0aGlzLmFkZCgzLCBzMSwgczIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1heWJlIGNhbGwgYSBtZXRob2QgaWYgaXQncyB0aGVyZT9cbiAgICAgICAgZm9yIChjb25zdCBkaXIgb2YgKHMxLmRhdGEuYWxsb3dlZCA/IHMxLmRhdGEuYWxsb3dlZChzMikgOiBbXSkpIHtcbiAgICAgICAgICB0aGlzLmFkZChkaXIsIHMxLCBzMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFJlZ2lzdGVyIGJvcmRlcnNcbiAgICAgIGNvbnN0IGVkZ2VzOiBBcnJheTx7dWlkOiBudW1iZXJ9PiA9IFtdO1xuICAgICAgZm9yIChjb25zdCB7dHlwZX0gb2YgczEuZGF0YS5leGl0cyB8fCBbXSkge1xuICAgICAgICBjb25zdCBkaXIgPSBlZGdlVHlwZU1hcFt0eXBlXTtcbiAgICAgICAgaWYgKGRpciAhPSBudWxsKSBlZGdlc1tkaXJdID0gRURHRV9FWElUO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgZGlyID0gMCBhcyBEaXI7IGRpciA8IDQ7IGRpcisrKSB7XG4gICAgICAgIC8vIEVkZ2VzIG1heSBiZSBhbGxvd2VkIGFzIGVpdGhlciBleGl0cywgbm9uLWV4aXRzLCBvciBub3QgYXQgYWxsLlxuICAgICAgICBsZXQgZWRnZSA9IGVkZ2VzW2Rpcl07XG4gICAgICAgIGlmIChlZGdlID09IG51bGwpIGVkZ2UgPSBib3JkZXJNYXBbZTFbZGlyXV07XG4gICAgICAgIGlmIChlZGdlICE9IG51bGwpIHRoaXMuYWRkKGRpciwgczEsIGVkZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkKGRpcjogRGlyLCBzMToge3VpZDogbnVtYmVyfSwgczI6IHt1aWQ6IG51bWJlcn0pIHtcbiAgICBjb25zdCB1MSA9IHMxLnVpZDtcbiAgICBjb25zdCB1MiA9IHMyLnVpZDtcbiAgICB0aGlzLmFsbG93ZWRbZGlyICYgMV0uYWRkKGRpciAmIDIgPyB1MSA8PCAxNiB8IHUyIDogdTIgPDwgMTYgfCB1MSk7XG4gICAgdGhpcy5uZWlnaGJvcnMuZ2V0KHUxIDw8IDIgfCBkaXIpLmFkZCh1Mik7XG4gICAgdGhpcy5uZWlnaGJvcnMuZ2V0KHUyIDw8IDIgfCAoZGlyIF4gMikpLmFkZCh1MSk7XG4gIH1cblxuICBjaGVjayhzMTogbnVtYmVyLCBzMjogbnVtYmVyLCBkZWx0YTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLmFsbG93ZWRbZGVsdGEgJiAxXTsgIC8vIHZlcnRpY2FsID0gMCwgaG9yaXogPSAxXG4gICAgY29uc3QgaW5kZXggPSBkZWx0YSA+IDAgPyBzMSA8PCAxNiB8IHMyIDogczIgPDwgMTYgfCBzMTtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGluZGV4KTtcbiAgfVxuXG4gIC8vIFRPRE8gLSB3aGF0IHRvIGRvIHdpdGggYm9yZGVycz8hPyBDYW4gd2UgdHJlYXQgdGhlbSBsaWtlIGEgc2NyZWVuP1xuICAvLyBUaGUgbWFpbiB0aGluZyB0aGF0IG1hdHRlcnMgZm9yIGJvcmRlcnMgaXMgd2hldGhlciBpdCdzIGFuIGVkZ2UgZXhpdFxuICAvLyBvciBub3QuICBXZSBjYW4gYWxyZWFkeSB0cmFjayB0aGlzIGEgYml0IC0gd2UgY291bGQgaGF2ZSBhIGxpc3Qgb2ZcbiAgLy8gYWNjZXB0YWJsZSBlZGdlIHR5cGVzIGZvciBlYWNoIHRpbGVzZXQgLSBcIiBuXCIgbW9zdCBsaWtlbHksIGV4Y2VwdCBmb3JcbiAgLy8gc3dhbXAgKFwiIG5zXCI/KSAgV2Ugc2hvdWxkIGdvIHRocnUgYW5kIG1ha2Ugc3VyZSB0aGVyZSdzIG5vIHJldXNlIG9mXG4gIC8vIGVkZ2UgdHlwZXMgaW4gaW5jb25zaXN0ZW50IHdheXMgKGUuZy4gJ3YnIGZvciBib3RoIGdyYXNzIGFuZCBib3VuZGFyeSlcbn1cblxuY29uc3QgYm9yZGVyTWFwOiB7W2M6IHN0cmluZ106IHt1aWQ6IG51bWJlcn19ID0ge1xuICAnKic6IEJPUkRFUixcbiAgJyAnOiBCT1JERVIsXG59O1xuY29uc3QgZWRnZVR5cGVNYXA6IHtbQyBpbiBDb25uZWN0aW9uVHlwZV0/OiBudW1iZXJ9ID0ge1xuICAnZWRnZTp0b3AnOiAwLFxuICAnZWRnZTpsZWZ0JzogMSxcbiAgJ2VkZ2U6Ym90dG9tJzogMixcbiAgJ2VkZ2U6cmlnaHQnOiAzLFxufTtcblxuXG5jb25zdCBjYWNoZXMgPVxuICAgIG5ldyBEZWZhdWx0TWFwPE1ldGF0aWxlc2V0LCBOZWlnaGJvckNhY2hlPih0ID0+IG5ldyBOZWlnaGJvckNhY2hlKHQpKTtcblxuZnVuY3Rpb24gaW5Cb3VuZHMocG9zOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCB3aWR0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiAocG9zICYgMTUpIDwgd2lkdGggJiYgcG9zID4gMTUgJiYgcG9zID4+PiA0IDw9IGhlaWdodDtcbn1cblxuZXhwb3J0IGNsYXNzIE1hemUge1xuXG4gIHJlYWRvbmx5IHJvbTogUm9tO1xuICByZWFkb25seSBuZWlnaGJvcnMgPSBjYWNoZXMuZ2V0KHRoaXMudGlsZXNldCk7XG4gIC8vIG1hcCBmcm9tIGluZGV4ICh5KzE8PDR8eCkgdG8gbWV0YXNjcmVlbiB1aWRcbiAgLy8gbWV0YXNjcmVlbnMuZ2V0QnlJZCgpIHdpbGwgbWFwIHVpZCB0byBtZXRhZGF0YVxuICBtYXA6IEFycmF5PG51bWJlcj47XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmFuZG9tOiBSYW5kb20sXG4gICAgICAgICAgICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcixcbiAgICAgICAgICAgICAgcHVibGljIHdpZHRoOiBudW1iZXIsXG4gICAgICAgICAgICAgIHJlYWRvbmx5IHRpbGVzZXQ6IE1ldGF0aWxlc2V0KSB7XG4gICAgdGhpcy5yb20gPSB0aWxlc2V0LnJvbTtcbiAgICB0aGlzLm1hcCA9IG5ldyBBcnJheSgoaGVpZ2h0ICsgMikgPDwgNCkuZmlsbCgtMSk7XG4gICAgLy8gSW5pdGlhbGl6ZSBhbiBlbXB0eSBtYXAgd2l0aCBjbG9zZWQgYm9yZGVycyBhbGwgYXJvdW5kLlxuICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgdGhpcy5tYXBbaW5kKC0xLCB4KV0gPSB0aGlzLm1hcFtpbmQoaGVpZ2h0LCB4KV0gPSBCT1JERVIudWlkO1xuICAgIH1cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHdpZHRoOyB5KyspIHtcbiAgICAgIHRoaXMubWFwW2luZCh5LCAtMSldID0gdGhpcy5tYXBbaW5kKHksIHdpZHRoKV0gPSBCT1JERVIudWlkO1xuICAgIH1cbiAgfVxuXG4gIGluQm91bmRzKHBvczogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgLy8gcmV0dXJuIGluQm91bmRzKHBvcywgdGhpcy5oZWlnaHQsIHRoaXMud2lkdGgpO1xuICAgIHJldHVybiAocG9zICYgMTUpIDwgdGhpcy53aWR0aCAmJiBwb3MgPiAxNSAmJiBwb3MgPj4+IDQgPD0gdGhpcy5oZWlnaHQ7XG4gIH1cblxuICBzdGF0aWMgZnJvbShsb2NhdGlvbjogTG9jYXRpb24sIHJhbmRvbTogUmFuZG9tLCB0aWxlc2V0PzogTWV0YXRpbGVzZXQpOiBNYXplIHtcbiAgICAvLyBOYXJyb3cgZG93biB0aGUgbGlzdCBvZiBwb3NzaWJsZSBtZXRhdGlsZXNldHMuXG4gICAgY29uc3Qge3JvbSwgd2lkdGgsIGhlaWdodH0gPSBsb2NhdGlvbjtcbiAgICBpZiAoIXRpbGVzZXQpIHtcbiAgICAgIGNvbnN0IHRpbGVzZXRzID0gbmV3IFNldChyb20ubWV0YXRpbGVzZXRzKTtcbiAgICAgIGZvciAoY29uc3Qgc2NyZWVuIG9mIGxvY2F0aW9uLmFsbFNjcmVlbnMoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHRpbGVzZXQgb2YgdGlsZXNldHMpIHtcbiAgICAgICAgICBpZiAoIXRpbGVzZXQuZ2V0TWV0YXNjcmVlbnMoc2NyZWVuLmlkKS5zaXplKSB0aWxlc2V0cy5kZWxldGUodGlsZXNldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZvcnRyZXNzIGFuZCBsYWJ5cmludGggYXJlIGluZGlzdGluZ3Vpc2hhYmxlLCBzbyB1c2UgbG9jYXRpb24gaWQuXG4gICAgICBpZiAobG9jYXRpb24uaWQgPT09IDB4YTkpIHtcbiAgICAgICAgdGlsZXNldHMuZGVsZXRlKHJvbS5tZXRhdGlsZXNldHMuZm9ydHJlc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGlsZXNldHMuZGVsZXRlKHJvbS5tZXRhdGlsZXNldHMubGFieXJpbnRoKTtcbiAgICAgIH1cbiAgICAgIC8vIEVuc3VyZSB1bmlxdWVuZXNzLlxuICAgICAgaWYgKCF0aWxlc2V0cy5zaXplKSB0aHJvdyBuZXcgRXJyb3IoYE5vIHRpbGVzZXQgaGFkIGFsbCBzY3JlZW5zLmApO1xuICAgICAgaWYgKHRpbGVzZXRzLnNpemUgPiAxKSB0aHJvdyBuZXcgRXJyb3IoYE5vbnVuaXF1ZSB0aWxlc2V0LmApO1xuICAgICAgdGlsZXNldCA9IFsuLi50aWxlc2V0c11bMF07XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0gY2FjaGVzLmdldCh0aWxlc2V0KTtcblxuICAgIC8vIEZpZ3VyZSBvdXQgcG9zc2libGUgc2NyZWVucy5cbiAgICBjb25zdCBtYXA6IEFycmF5PEFycmF5PG51bWJlcj4+ID1cbiAgICAgICAgbmV3IEFycmF5KChoZWlnaHQgKyAyKSA8PCA0KS5maWxsKHVuZGVmaW5lZCk7XG4gICAgY29uc3QgYW1iaWd1b3VzID0gbmV3IFNldDxudW1iZXI+KCk7XG4gICAgZnVuY3Rpb24gYWRkQm9yZGVyKHk6IG51bWJlciwgeDogbnVtYmVyKSB7XG4gICAgICBjb25zdCBwb3MgPSBpbmQoeSwgeCk7XG4gICAgICBtYXBbcG9zXSA9IFsweGZmZmYsIDB4ZmZmZV07XG4gICAgICBhbWJpZ3VvdXMuYWRkKHBvcyk7XG4gICAgfVxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICBjb25zdCBwb3MgPSBpbmQoeSwgeCk7XG4gICAgICAgIGNvbnN0IHNjcmVlbnMgPVxuICAgICAgICAgICAgWy4uLnRpbGVzZXQuZ2V0TWV0YXNjcmVlbnMobG9jYXRpb24uc2NyZWVuc1t5XVt4XSldLm1hcChzID0+IHMudWlkKTtcbiAgICAgICAgLy8gVE9ETyAtIG5hcnJvdyBieSBleGl0cz8gIGxvY2F0aW9uLmVudHJhbmNlTmVhciguLi4pP1xuICAgICAgICBpZiAoc2NyZWVucy5sZW5ndGggPiAxKSBhbWJpZ3VvdXMuYWRkKHBvcyk7XG4gICAgICAgIG1hcFtwb3NdID0gc2NyZWVucztcbiAgICAgIH1cbiAgICAgIC8vIEFkZCBhbWJpZ3VvdXMgYm9yZGVycy5cbiAgICAgIGFkZEJvcmRlcih5LCAtMSk7XG4gICAgICBhZGRCb3JkZXIoeSwgd2lkdGgpO1xuICAgIH1cbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIGFkZEJvcmRlcigtMSwgeCk7XG4gICAgICBhZGRCb3JkZXIoaGVpZ2h0LCB4KTtcbiAgICB9XG5cbiAgICAvLyBSZXNvbHZlIGFueSBhbWJpZ3VpdGllcy5cbiAgICB3aGlsZSAoYW1iaWd1b3VzLnNpemUpIHtcbiAgICAgIC8vIFRPRE8gLSB3aHkgYXJlIHRoZXNlIG5vdCByZXNvbHZpbmc/XG4gICAgICBsZXQgcHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIGNvbnN0IHByZXYgPSBbLi4uYW1iaWd1b3VzXTtcbiAgICAgIGFtYmlndW91cy5jbGVhcigpO1xuICAgICAgZm9yIChjb25zdCBwb3Mgb2YgcHJldikge1xuICAgICAgICBjb25zdCBzY3JlZW5zID0gbmV3IFNldChtYXBbcG9zXSk7XG4gICAgICAgIGZvciAoY29uc3Qgc2NyZWVuIG9mIHNjcmVlbnMpIHtcbiAgICAgICAgICBjb25zdCBvayA9IFstMSwgMSwgLTE2LCAxNl0uZXZlcnkoZGVsdGEgPT4ge1xuICAgICAgICAgICAgaWYgKCFpbkJvdW5kcyhwb3MsIGhlaWdodCwgd2lkdGgpICYmXG4gICAgICAgICAgICAgICAgIWluQm91bmRzKHBvcyArIGRlbHRhLCBoZWlnaHQsIHdpZHRoKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXBbcG9zICsgZGVsdGFdXG4gICAgICAgICAgICAgICAgLnNvbWUobmVpZ2hib3IgPT4gY2FjaGUuY2hlY2soc2NyZWVuLCBuZWlnaGJvciwgZGVsdGEpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBzY3JlZW5zLmRlbGV0ZShzY3JlZW4pO1xuICAgICAgICAgICAgcHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYXBbcG9zXSA9IFsuLi5zY3JlZW5zXTtcbiAgICAgIH1cbiAgICAgIGlmICghcHJvZ3Jlc3MpIHRocm93IG5ldyBFcnJvcihgZGl2ZXJnZW5jZWApO1xuICAgIH1cblxuICAgIC8vIERpZCB3ZSBtYWtlIGl0IGhlcmU/ICBJZiBzbyB0aGVuIHdlJ3JlIGJhc2ljYWxseSBnb29kLi4uIVxuICAgIGNvbnN0IG1hemUgPSBuZXcgTWF6ZShyYW5kb20sIGhlaWdodCwgd2lkdGgsIHRpbGVzZXQpO1xuICAgIG1hemUubWFwID0gbWFwLm1hcChzID0+IHMgPyBzWzBdIDogLTEpO1xuICAgIHJldHVybiBtYXplO1xuICB9XG5cbiAgLy8gVE9ETyAtIHNob3J0IHZzIGZ1bGw/XG4gIHNob3coKTogc3RyaW5nIHtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGxldCBsaW5lID0gW107XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgIGxpbmUucHVzaCh4LnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuICAgIGxpbmVzLnB1c2goJyAgICcgKyBsaW5lLmpvaW4oJyAgJykpO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5oZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCAzOyByKyspIHtcbiAgICAgICAgbGluZSA9IFtyID09PSAxID8geS50b1N0cmluZygxNikgOiAnICcsICcgJ107XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XG4gICAgICAgICAgY29uc3Qgc2NyZWVuID0gdGhpcy5yb20ubWV0YXNjcmVlbnNbdGhpcy5tYXBbaW5kKHksIHgpXV07XG4gICAgICAgICAgbGluZS5wdXNoKHNjcmVlbj8uZGF0YS5pY29uPy5mdWxsW3JdID8/IChyID09PSAxID8gJyA/ICcgOiAnICAgJykpO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVzLnB1c2gobGluZS5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgfVxuXG59XG5cbi8vIE1hcCAoeSwgeCkgc2NyZWVuIHBvc2l0aW9uIHRvIGFuIGluZGV4LiAgTm90ZSB0aGF0IHdlIHVzZSBwYWRkaW5nIGZvclxuLy8gYm9yZGVycy4gIEluLWJvdW5kIGNoZWNraW5nIGlzIHRyaXZpYWwuXG5mdW5jdGlvbiBpbmQoeTogbnVtYmVyLCB4OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gKCh5ICsgMSkgPDwgNCkgKyB4O1xufVxuXG4vLyBUT0RPIC0gZmluZCBhIHBsYWNlIGZvciBhIE1hcDxudW1iZXIsIE1ldGFzY3JlZW4+IGJ1dCB3aGF0IHRvIGRvIHdpdGggYm9yZGVycz9cbiJdfQ==