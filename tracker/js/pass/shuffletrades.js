export function shuffleTrades(rom, flags, random) {
    if (!flags.randomizeTrades())
        return;
    const items = [
        [rom.items[0x25], 0, 'Akahana'],
        [rom.items[0x35], 0, 'Fisherman'],
        [rom.items[0x3b], 0, 'Kensu'],
        [rom.items[0x3c], 0, 'Aryllis'],
        [rom.items[0x3d], 0, 'Slimed Kensu'],
    ];
    const npcs = [];
    for (const [item, offset, npcName] of items) {
        if (!item.tradeIn)
            throw new Error(`Expected trade-in for ${item.id}`);
        npcs.push([npcName, item.tradeIn.slice(offset, offset + 6)]);
    }
    random.shuffle(npcs);
    for (const [item, offset] of items) {
        const [npcName, npc] = npcs.pop();
        item.tradeIn.splice(offset, 6, ...npc);
        if (rom.spoiler)
            rom.spoiler.addTrade(item.id, item.messageName, npcName);
        if (npc[0] === 0x23) {
            rom.prg[0x3d4b5] = item.id - 0x1c;
        }
    }
    const rage = rom.items[random.nextInt(4)];
    rom.npcs[0xc3].localDialogs.get(-1)[0].condition = 0x200 | rage.id;
    if (rom.spoiler)
        rom.spoiler.addTrade(rage.id, rage.messageName, 'Rage');
    const tornel = rom.items[random.nextInt(4) * 2 + 6];
    for (const ds of rom.npcs[0x5f].localDialogs.values()) {
        for (let i = 2; i < ds.length; i++) {
            if (ds[i].message.action === 3) {
                ds[i - 2].condition = ~(0x200 | (tornel.id - 1));
                ds[i - 1].condition = ~(0x200 | tornel.id);
                if (rom.spoiler) {
                    rom.spoiler.addTrade(tornel.id, tornel.messageName, 'Tornel');
                }
                break;
            }
        }
    }
}
export function buildTradeInMap(rom) {
    const map = new Map();
    for (const item of rom.items) {
        if (!item.tradeIn)
            continue;
        for (let i = 0; i < item.tradeIn.length; i += 6) {
            map.set(item.tradeIn[i], item.id);
        }
    }
    return map;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZXRyYWRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL3NodWZmbGV0cmFkZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxVQUFVLGFBQWEsQ0FBQyxHQUFRLEVBQUUsS0FBYyxFQUFFLE1BQWM7SUFDcEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUU7UUFBRSxPQUFPO0lBRXJDLE1BQU0sS0FBSyxHQUFHO1FBQ1osQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUM7UUFFL0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUM7UUFDakMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUM7UUFDN0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUM7UUFDL0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFjLENBQUM7S0FDNUIsQ0FBQztJQUVYLE1BQU0sSUFBSSxHQUE4QixFQUFFLENBQUM7SUFDM0MsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5RDtJ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RyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ25DO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZsYWdTZXR9IGZyb20gJy4uL2ZsYWdzZXQuanMnO1xuaW1wb3J0IHtSYW5kb219IGZyb20gJy4uL3JhbmRvbS5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxuLy8gU2h1ZmZsZSB0aGUgcGFsZXR0ZXMuXG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZVRyYWRlcyhyb206IFJvbSwgZmxhZ3M6IEZsYWdTZXQsIHJhbmRvbTogUmFuZG9tKSB7XG4gIGlmICghZmxhZ3MucmFuZG9taXplVHJhZGVzKCkpIHJldHVybjtcblxuICBjb25zdCBpdGVtcyA9IFtcbiAgICBbcm9tLml0ZW1zWzB4MjVdLCAwLCAnQWthaGFuYSddLCAgICAgICAgICAgIC8vIHN0YXR1ZSBvZiBvbnl4XG4gICAgLy8gW3JvbS5pdGVtc1sweDI4XSwgMTgsICdTdG9uZWQgQWthaGFuYSddLCAvLyBmbHV0ZSBvZiBsaW1lXG4gICAgW3JvbS5pdGVtc1sweDM1XSwgMCwgJ0Zpc2hlcm1hbiddLCAgICAgICAgICAvLyBmb2cgbGFtcFxuICAgIFtyb20uaXRlbXNbMHgzYl0sIDAsICdLZW5zdSddLCAgICAgICAgICAgICAgLy8gbG92ZSBwZW5kYW50XG4gICAgW3JvbS5pdGVtc1sweDNjXSwgMCwgJ0FyeWxsaXMnXSwgICAgICAgICAgICAvLyBraXJpc2EgcGxhbnRcbiAgICBbcm9tLml0ZW1zWzB4M2RdLCAwLCAnU2xpbWVkIEtlbnN1J10sICAgICAgIC8vIGl2b3J5IHN0YXR1ZVxuICBdIGFzIGNvbnN0O1xuXG4gIGNvbnN0IG5wY3M6IEFycmF5PFtzdHJpbmcsIG51bWJlcltdXT4gPSBbXTtcbiAgZm9yIChjb25zdCBbaXRlbSwgb2Zmc2V0LCBucGNOYW1lXSBvZiBpdGVtcykge1xuICAgIGlmICghaXRlbS50cmFkZUluKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHRyYWRlLWluIGZvciAke2l0ZW0uaWR9YCk7XG4gICAgLy8gc2F2ZSBleHBlY3RlZCBOUEMsIGFsb25nIHdpdGggbWVzc2FnZSBpZCBhbmQgZmxhZ1xuICAgIG5wY3MucHVzaChbbnBjTmFtZSwgaXRlbS50cmFkZUluLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgNildKTtcbiAgfVxuXG4gIHJhbmRvbS5zaHVmZmxlKG5wY3MpO1xuXG4gIGZvciAoY29uc3QgW2l0ZW0sIG9mZnNldF0gb2YgaXRlbXMpIHtcbiAgICBjb25zdCBbbnBjTmFtZSwgbnBjXSA9IG5wY3MucG9wKCkhO1xuICAgIGl0ZW0udHJhZGVJbiEuc3BsaWNlKG9mZnNldCwgNiwgLi4ubnBjKTtcbiAgICBpZiAocm9tLnNwb2lsZXIpIHJvbS5zcG9pbGVyLmFkZFRyYWRlKGl0ZW0uaWQsIGl0ZW0ubWVzc2FnZU5hbWUsIG5wY05hbWUpO1xuICAgIGlmIChucGNbMF0gPT09IDB4MjMpIHsgLy8gYXJ5bGxpcyBpdGVtIHJlcXVpcmVzIGJlaW5nIGEgZ2lybFxuICAgICAgcm9tLnByZ1sweDNkNGI1XSA9IGl0ZW0uaWQgLSAweDFjO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFsc28gcmFuZG9taXplIFJhZ2UgYW5kIFRvcm5lbFxuICBjb25zdCByYWdlID0gcm9tLml0ZW1zW3JhbmRvbS5uZXh0SW50KDQpXTtcbiAgcm9tLm5wY3NbMHhjM10ubG9jYWxEaWFsb2dzLmdldCgtMSkhWzBdLmNvbmRpdGlvbiA9IDB4MjAwIHwgcmFnZS5pZDtcbiAgaWYgKHJvbS5zcG9pbGVyKSByb20uc3BvaWxlci5hZGRUcmFkZShyYWdlLmlkLCByYWdlLm1lc3NhZ2VOYW1lLCAnUmFnZScpO1xuXG4gIGNvbnN0IHRvcm5lbCA9IHJvbS5pdGVtc1tyYW5kb20ubmV4dEludCg0KSAqIDIgKyA2XTtcbiAgZm9yIChjb25zdCBkcyBvZiByb20ubnBjc1sweDVmXS5sb2NhbERpYWxvZ3MudmFsdWVzKCkpIHtcbiAgICBmb3IgKGxldCBpID0gMjsgaSA8IGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZHNbaV0ubWVzc2FnZS5hY3Rpb24gPT09IDMpIHtcbiAgICAgICAgLy8gTk9URTogYnJhY2VsZXQgZ29lcyBmaXJzdFxuICAgICAgICBkc1tpIC0gMl0uY29uZGl0aW9uID0gfigweDIwMCB8ICh0b3JuZWwuaWQgLSAxKSk7XG4gICAgICAgIGRzW2kgLSAxXS5jb25kaXRpb24gPSB+KDB4MjAwIHwgdG9ybmVsLmlkKTtcbiAgICAgICAgaWYgKHJvbS5zcG9pbGVyKSB7XG4gICAgICAgICAgcm9tLnNwb2lsZXIuYWRkVHJhZGUodG9ybmVsLmlkLCB0b3JuZWwubWVzc2FnZU5hbWUsICdUb3JuZWwnKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gTk9URSAtIHRoaXMgaXMgY29waWVkIGZyb20gZml4ZGlhbG9nXG4vKiogQnVpbGRzIGEgbWFwIGZyb20gTlBDIGlkIHRvIHdhbnRlZCBpdGVtIGlkLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkVHJhZGVJbk1hcChyb206IFJvbSk6IE1hcDxudW1iZXIsIG51bWJlcj4ge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gIGZvciAoY29uc3QgaXRlbSBvZiByb20uaXRlbXMpIHtcbiAgICBpZiAoIWl0ZW0udHJhZGVJbikgY29udGludWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLnRyYWRlSW4ubGVuZ3RoOyBpICs9IDYpIHtcbiAgICAgIG1hcC5zZXQoaXRlbS50cmFkZUluW2ldLCBpdGVtLmlkKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hcDtcbn1cbiJdfQ==