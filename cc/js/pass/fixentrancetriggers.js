import { Spawn } from '../rom/location.js';
export function fixEntranceTriggers(rom) {
    const { locations: { Portoa, PortoaPalace_ThroneRoom, Portoa_PalaceEntrance, UndergroundChannel, WaterfallCave2, WaterfallCave3, }, } = rom;
    fixTrigger(Portoa_PalaceEntrance, 'edge:bottom', 0xb7, Portoa);
    fixTrigger(PortoaPalace_ThroneRoom, 'door', 0x92, UndergroundChannel);
    fixTrigger(WaterfallCave2, 'stair:up', 0xbf, WaterfallCave3);
}
function fixTrigger(exitLocation, exitType, trigger, originalEntrance) {
    const [exit, ...rest] = [...exitLocation.meta.exits()].filter(([, type]) => type === exitType);
    if (!exit)
        throw new Error(`Could not find ${exitType} in ${exitLocation}`);
    if (rest.length)
        throw new Error(`Ambiguous ${exitType} in ${exitLocation}`);
    const [entranceLocPos, entranceType] = exit[2];
    const entranceLoc = entranceLocPos >>> 8;
    if (entranceLoc === originalEntrance.id)
        return;
    const entrancePos = entranceLocPos & 0xff;
    const entranceLocation = exitLocation.rom.locations[entranceLoc];
    const scr = entranceLocation.meta.get(entrancePos);
    const entrance = scr.data.exits.find(e => e.type === entranceType);
    if (!entrance)
        throw new Error(`Bad entrance in ${entranceLocation}`);
    const triggerCoord = (entrance.entrance >>> 12 | (entrance.entrance & 0xf0) >>> 4) +
        triggerDirectionAdjustments[entrance.dir];
    if (entranceLocation.spawns.length > 17)
        entranceLocation.spawns.pop();
    const triggerSpawnIndex = originalEntrance.spawns.findIndex(s => s.isTrigger() && s.id === trigger);
    const triggerSpawn = triggerSpawnIndex >= 0 ?
        originalEntrance.spawns.splice(triggerSpawnIndex, 1)[0] :
        Spawn.of({ type: 2, id: trigger });
    triggerSpawn.xt = (entrancePos & 0xf) << 4 | (triggerCoord & 0xf);
    triggerSpawn.yt = (entrancePos & 0xf0) | triggerCoord >>> 4;
    entranceLocation.spawns.push(triggerSpawn);
}
const triggerDirectionAdjustments = [0x10, 0, 0, 0];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4ZW50cmFuY2V0cmlnZ2Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL2ZpeGVudHJhbmNldHJpZ2dlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFZLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBVXJELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxHQUFRO0lBQzFDLE1BQU0sRUFDSixTQUFTLEVBQUUsRUFDVCxNQUFNLEVBQ04sdUJBQXVCLEVBQ3ZCLHFCQUFxQixFQUNyQixrQkFBa0IsRUFDbEIsY0FBYyxFQUNkLGNBQWMsR0FDZixHQUNGLEdBQUcsR0FBRyxDQUFDO0lBRVIsVUFBVSxDQUFDLHFCQUFxQixFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0QsVUFBVSxDQUFDLHVCQUF1QixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUN0RSxVQUFVLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQVFELFNBQVMsVUFBVSxDQUFDLFlBQXNCLEVBQUUsUUFBd0IsRUFDaEQsT0FBZSxFQUFFLGdCQUEwQjtJQUM3RCxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQ2pCLENBQUMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUM7SUFDM0UsSUFBSSxDQUFDLElBQUk7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixRQUFRLE9BQU8sWUFBWSxFQUFFLENBQUMsQ0FBQztJQUM1RSxJQUFJLElBQUksQ0FBQyxNQUFNO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLFFBQVEsT0FBTyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sV0FBVyxHQUFHLGNBQWMsS0FBSyxDQUFDLENBQUM7SUFDekMsSUFBSSxXQUFXLEtBQUssZ0JBQWdCLENBQUMsRUFBRTtRQUFFLE9BQU87SUFDaEQsTUFBTSxXQUFXLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQztJQUMxQyxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sR0FBRyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkQsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQztJQUNwRSxJQUFJLENBQUMsUUFBUTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUN0RSxNQUFNLFlBQVksR0FDZCxDQUFDLFFBQVEsQ0FBQyxRQUFRLEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0QsMkJBQTJCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFO1FBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZFLE1BQU0saUJBQWlCLEdBQ25CLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsQ0FBQztJQUM5RSxNQUFNLFlBQVksR0FDZCxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN4QixnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7SUFDckMsWUFBWSxDQUFDLEVBQUUsR0FBRyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDbEUsWUFBWSxDQUFDLEVBQUUsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxZQUFZLEtBQUssQ0FBQyxDQUFDO0lBQzVELGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvbSB9IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQgeyBDb25uZWN0aW9uVHlwZSB9IGZyb20gJy4uL3JvbS9tZXRhc2NyZWVuZGF0YS5qcyc7XG5pbXBvcnQgeyBMb2NhdGlvbiwgU3Bhd24gfSBmcm9tICcuLi9yb20vbG9jYXRpb24uanMnO1xuXG4vKipcbiAqIE1vdmVzIGVudHJhbmNlLWJhc2VkIHRyaWdnZXJzIHRoYXQgc2hvdWxkIGJlIGF0dGFjaGVkIHRvXG4gKiB0aGUgb3Bwb3NpdGUgc2lkZSBvZiBzcGVjaWZpYyBleGl0cy4gIFRoaXMgc2hvdWxkIGlkZWFsbHlcbiAqIHJ1biBhZnRlciBzaHVmZmxpbmcgYW55IGxvY2F0aW9uLXRvLWxvY2F0aW9uIGNvbm5lY3Rpb25zXG4gKiAoaS5lLiBzaHVmZmxlIGhvdXNlcykgYnV0IF9iZWZvcmVfIHJhbmRvbWl6aW5nIHRoZSBtYXBzLFxuICogaW4gY2FzZSB3ZSBuZWVkIHRvIGRpc2FtYmlndWF0ZSBtdWx0aXBsZSBzYW1lLXR5cGUgZXhpdHNcbiAqIGF0IHNvbWUgcG9pbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhFbnRyYW5jZVRyaWdnZXJzKHJvbTogUm9tKSB7XG4gIGNvbnN0IHtcbiAgICBsb2NhdGlvbnM6IHtcbiAgICAgIFBvcnRvYSxcbiAgICAgIFBvcnRvYVBhbGFjZV9UaHJvbmVSb29tLFxuICAgICAgUG9ydG9hX1BhbGFjZUVudHJhbmNlLFxuICAgICAgVW5kZXJncm91bmRDaGFubmVsLFxuICAgICAgV2F0ZXJmYWxsQ2F2ZTIsXG4gICAgICBXYXRlcmZhbGxDYXZlMyxcbiAgICB9LFxuICB9ID0gcm9tO1xuXG4gIGZpeFRyaWdnZXIoUG9ydG9hX1BhbGFjZUVudHJhbmNlLCAnZWRnZTpib3R0b20nLCAweGI3LCBQb3J0b2EpO1xuICBmaXhUcmlnZ2VyKFBvcnRvYVBhbGFjZV9UaHJvbmVSb29tLCAnZG9vcicsIDB4OTIsIFVuZGVyZ3JvdW5kQ2hhbm5lbCk7XG4gIGZpeFRyaWdnZXIoV2F0ZXJmYWxsQ2F2ZTIsICdzdGFpcjp1cCcsIDB4YmYsIFdhdGVyZmFsbENhdmUzKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gYHR5cGVgIG9mIGV4aXQgZnJvbSBgZXhpdExvY2F0aW9uYCBjb25uZWN0cyB0b1xuICogdGhlIGBvcmlnaW5hbEVudHJhbmNlYCBsb2NhdGlvbi4gIElmIG5vdCwgcmVtb3ZlIGB0cmlnZ2VyYCBmcm9tXG4gKiB0aGUgb3JpZ2luYWwgbG9jYXRpb24gYW5kIGFkZCBpdCB0byB0aGUgYWN0dWFsIG90aGVyIHNpZGUgb2YgdGhlXG4gKiBnaXZlbiBleGl0LlxuICovXG5mdW5jdGlvbiBmaXhUcmlnZ2VyKGV4aXRMb2NhdGlvbjogTG9jYXRpb24sIGV4aXRUeXBlOiBDb25uZWN0aW9uVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogbnVtYmVyLCBvcmlnaW5hbEVudHJhbmNlOiBMb2NhdGlvbikge1xuICBjb25zdCBbZXhpdCwgLi4ucmVzdF0gPVxuICAgICAgWy4uLmV4aXRMb2NhdGlvbi5tZXRhLmV4aXRzKCldLmZpbHRlcigoWywgdHlwZV0pID0+IHR5cGUgPT09IGV4aXRUeXBlKTtcbiAgaWYgKCFleGl0KSB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kICR7ZXhpdFR5cGV9IGluICR7ZXhpdExvY2F0aW9ufWApO1xuICBpZiAocmVzdC5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihgQW1iaWd1b3VzICR7ZXhpdFR5cGV9IGluICR7ZXhpdExvY2F0aW9ufWApO1xuICBjb25zdCBbZW50cmFuY2VMb2NQb3MsIGVudHJhbmNlVHlwZV0gPSBleGl0WzJdO1xuICBjb25zdCBlbnRyYW5jZUxvYyA9IGVudHJhbmNlTG9jUG9zID4+PiA4O1xuICBpZiAoZW50cmFuY2VMb2MgPT09IG9yaWdpbmFsRW50cmFuY2UuaWQpIHJldHVybjsgLy8gbm90aGluZyB0byBkb1xuICBjb25zdCBlbnRyYW5jZVBvcyA9IGVudHJhbmNlTG9jUG9zICYgMHhmZjtcbiAgY29uc3QgZW50cmFuY2VMb2NhdGlvbiA9IGV4aXRMb2NhdGlvbi5yb20ubG9jYXRpb25zW2VudHJhbmNlTG9jXTtcbiAgY29uc3Qgc2NyID0gZW50cmFuY2VMb2NhdGlvbi5tZXRhLmdldChlbnRyYW5jZVBvcyk7XG4gIGNvbnN0IGVudHJhbmNlID0gc2NyLmRhdGEuZXhpdHMhLmZpbmQoZSA9PiBlLnR5cGUgPT09IGVudHJhbmNlVHlwZSk7XG4gIGlmICghZW50cmFuY2UpIHRocm93IG5ldyBFcnJvcihgQmFkIGVudHJhbmNlIGluICR7ZW50cmFuY2VMb2NhdGlvbn1gKTtcbiAgY29uc3QgdHJpZ2dlckNvb3JkID1cbiAgICAgIChlbnRyYW5jZS5lbnRyYW5jZSA+Pj4gMTIgfCAoZW50cmFuY2UuZW50cmFuY2UgJiAweGYwKSA+Pj4gNCkgK1xuICAgICAgdHJpZ2dlckRpcmVjdGlvbkFkanVzdG1lbnRzW2VudHJhbmNlLmRpcl07XG4gIGlmIChlbnRyYW5jZUxvY2F0aW9uLnNwYXducy5sZW5ndGggPiAxNykgZW50cmFuY2VMb2NhdGlvbi5zcGF3bnMucG9wKCk7XG4gIGNvbnN0IHRyaWdnZXJTcGF3bkluZGV4ID1cbiAgICAgIG9yaWdpbmFsRW50cmFuY2Uuc3Bhd25zLmZpbmRJbmRleChzID0+IHMuaXNUcmlnZ2VyKCkgJiYgcy5pZCA9PT0gdHJpZ2dlcik7XG4gIGNvbnN0IHRyaWdnZXJTcGF3biA9XG4gICAgICB0cmlnZ2VyU3Bhd25JbmRleCA+PSAwID9cbiAgICAgIG9yaWdpbmFsRW50cmFuY2Uuc3Bhd25zLnNwbGljZSh0cmlnZ2VyU3Bhd25JbmRleCwgMSlbMF0gOlxuICAgICAgU3Bhd24ub2Yoe3R5cGU6IDIsIGlkOiB0cmlnZ2VyfSk7XG4gIHRyaWdnZXJTcGF3bi54dCA9IChlbnRyYW5jZVBvcyAmIDB4ZikgPDwgNCB8ICh0cmlnZ2VyQ29vcmQgJiAweGYpO1xuICB0cmlnZ2VyU3Bhd24ueXQgPSAoZW50cmFuY2VQb3MgJiAweGYwKSB8IHRyaWdnZXJDb29yZCA+Pj4gNDtcbiAgZW50cmFuY2VMb2NhdGlvbi5zcGF3bnMucHVzaCh0cmlnZ2VyU3Bhd24pO1xufVxuXG5jb25zdCB0cmlnZ2VyRGlyZWN0aW9uQWRqdXN0bWVudHMgPSBbMHgxMCwgMCwgMCwgMF07XG4iXX0=