import { World } from './graph/world.js';
import { newFill, traverse } from './graph/shuffle.js';
import { Bits } from './bits.js';
import { FlagSet } from './flagset.js';
import { Rom } from './rom.js';
import { deterministic } from './pass/deterministic.js';
const ITEMS = `
sword-of-wind $00 sort-of-wind
sword-of-fire $01 sort-of-fire
sword-of-water $02 sort-of-water
sword-of-thunder $03 sort-of-thunder
windmill-key $32
statue-of-onyx $25 onyx-statue
insect-flute $27
key-to-prison $33 prison-key
flute-of-lime $28

ball-of-wind $05 orb-of-wind
ball-of-fire $07 orb-of-fire
ball-of-water $09 orb-of-water
ball-of-thunder $0b orb-of-thunder
kirisa-plant $3c carissa-plant
alarm-flute $31
fog-lamp $35
shell-flute $36
broken-statue $38
eye-glasses $37 eyeglasses
glowing-lamp $39

tornado-bracelet $06
flame-bracelet $08
blizzard-bracelet $0a
storm-bracelet $0c
love-pendant $3b
key-to-styx $34
opel-statue $26
sacred-shield $12
ivory-statue $3d

rabbit-boots $2e
gas-mask $29 hazard-suit
shield-ring $30
iron-necklace $2c
leather-boots $2f speed-boots
power-ring $2a
warrior-ring $2b
deos-pendant $2d deo dio d-o t-o deal
bow-of-moon $3e moon
bow-of-sun $3f sun

refresh $41
paralysis $42
telepathy $43
teleport $44
recover $45
barrier $46
change $47
flight $48
psycho-armor $1c
bow-of-truth $40 truth
`;
const SLOTS = [
    [0x00, 121, 192],
    [0x01, 274, 176],
    [0x02, 335, 123],
    [0x03, 77, 10],
    [0x05, 89, 107],
    [0x06, 115, 224],
    [0x07, 282, 187],
    [0x08, 47, 182],
    [0x09, 251, 232],
    [0x0a, 206, 249],
    [0x0b, 83, 63],
    [0x0c, 23, 9],
    [0x12, 49, 48],
    [0x14, 77, 2],
    [0x76, 70, 3],
    [0x77, 84, 3],
    [0x1b, 168, 96],
    [0x1c, 199, 110],
    [0x1d, 82, 95],
    [0x1e, 82, 101],
    [0x1f, 346, 147],
    [0x70, 346, 153],
    [0x71, 346, 159],
    [0x20, 126, 52],
    [0x21, 227, 97],
    [0x22, 256, 73],
    [0x23, 58, 115],
    [0x24, 82, 113],
    [0x25, 189, 180],
    [0x26, 18, 172],
    [0x27, 267, 185],
    [0x28, 275, 147],
    [0x29, 147, 206],
    [0x2a, 172, 104],
    [0x2b, 203, 5],
    [0x2c, 249, 69],
    [0x2d, 191, 110],
    [0x2e, 89, 99],
    [0x2f, 164, 104],
    [0x30, 319, 123],
    [0x72, 320, 130],
    [0x32, 105, 94],
    [0x33, 64, 198],
    [0x34, 83, 71],
    [0x35, 345, 140],
    [0x36, 301, 119],
    [0x37, 233, 118],
    [0x38, 234, 88],
    [0x39, 295, 92],
    [0x3b, 274, 117],
    [0x3c, 338, 226],
    [0x3d, 23, 17],
    [0x3e, 206, 241],
    [0x3f, 101, 6],
    [0x40, 207, 110],
    [0x41, 92, 117],
    [0x42, 279, 126],
    [0x43, 202, 138],
    [0x44, 124, 202],
    [0x45, 304, 128],
    [0x46, 248, 35],
    [0x47, 277, 3],
    [0x48, 15, 25],
    [0x50, 82, 107],
    [0x52, 134, 219],
    [0x53, 59, 219],
    [0x54, 52, 55],
    [0x55, 241, 97],
    [0x56, 123, 23],
    [0x74, 115, 3],
    [0x57, 70, 9],
    [0x75, 84, 9],
    [0x58, 32, 38],
    [0x79, 32, 16],
    [0x7a, 40, 16],
    [0x7b, 40, 38],
    [0x5a, 161, 97],
    [0x10, 327, 123],
    [0x5c, 256, 79],
    [0x5d, 36, 139],
    [0x5e, 14, 229],
    [0x5f, 345, 225],
    [0x60, 18, 94],
    [0x61, 234, 96],
    [0x62, 18, 118],
    [0x63, 36, 54],
    [0x64, 175, 97],
    [0x65, 139, 40],
    [0x66, 66, 160],
    [0x69, 131, 201],
    [0x6a, 76, 226],
    [0x6b, 18, 100],
    [0x6c, 193, 103],
    [0x78, 199, 103],
    [0x6d, 205, 103],
    [0x73, 256, 67],
    [0x6e, 24, 38],
    [0x6f, 44, 97],
];
const KEY = new Set([0x10, 0x12, 0x23, 0x26, 0x61]);
const BOSSES = new Map([
    [~0x100, 0x2e],
    [~0x101, 0x07],
    [~0x102, 0x08],
    [~0x103, 0x09],
    [~0x104, 0x38],
    [~0x105, 0x0b],
    [~0x106, 0x26],
    [~0x107, 0x23],
    [~0x108, 0x12],
    [~0x109, 0x3d],
    [~0x10a, 0x1c],
    [~0x10c, 0x61],
]);
const TRADES = new Set([0x29, 0x3e, 0x44, 0x47, 0x48]);
class Graph {
    constructor(rom, world, flags) {
        this.rom = rom;
        this.world = world;
        this.flags = flags;
        this.slots = new Map();
        this.items = new Map();
        this.slotElts = new Map();
        this.has = Bits.of();
        this.names = new Map();
        window.GRAPH = this;
        this.grid = document.getElementsByClassName('grid')[0];
        this.map = document.getElementsByClassName('map')[0];
        let always = Bits.of();
        for (const { item: id, index } of world.graph.slots) {
            if (id == null)
                continue;
            this.slots.set(id, index);
        }
        for (const { item: id, index } of world.graph.items) {
            if (id == null)
                continue;
            this.items.set(id, index);
            const item = rom.items[id];
            if (item && !item.unique)
                always = Bits.with(always, index);
        }
        this.unusedItems = world.graph.items.length;
        this.has = this.always = always;
        const toggle = (e) => {
            let t = e.target;
            while (t && !t.dataset['index']) {
                t = t.parentElement;
            }
            if (!t)
                return;
            this.toggle(t);
            e.preventDefault();
        };
        this.grid.addEventListener('click', toggle);
    }
    toggle(t, val) {
        const uid = Number(t.dataset['index']);
        const has = t.classList.toggle('got');
        if (t.dataset['item']) {
            this.has = has ?
                Bits.with(this.has, uid) :
                Bits.without(this.has, uid);
        }
        this.update();
    }
    addSlot(slotId, x, y) {
        const index = this.slots.get(slotId);
        if (index == null) {
            debugger;
            throw new Error();
        }
        const div = document.createElement('div');
        const itemget = this.rom.itemGets[slotId];
        const item = itemget && this.rom.items[itemget.itemId];
        if (item && item.unique || KEY.has(slotId)) {
            div.classList.add('key');
            x--;
            y--;
        }
        x--;
        y--;
        div.dataset['index'] = String(index);
        div.style.left = x + 'px';
        div.style.top = y + 'px';
        const inner = document.createElement('div');
        div.appendChild(inner);
        inner.textContent =
            slotId >= 0x70 ?
                'Mimic' :
                this.rom.items[itemget.itemId].messageName.replace(' ', '\xa0');
        if (this.flags.randomizeTrades() && TRADES.has(slotId)) {
            div.classList.add('boss');
        }
        this.slotElts.set(index, div);
        this.map.appendChild(div);
    }
    addItem(cls, id, ...otherNames) {
        const uid = Number.parseInt(id.substring(1), 16);
        const outer = document.getElementsByClassName(cls)[0];
        const inner = document.createElement('div');
        outer.appendChild(inner);
        let index = this.items.get(uid);
        if (index == null) {
            this.items.set(uid, index = this.unusedItems++);
        }
        outer.dataset['index'] = String(index);
        outer.dataset['item'] = String(index);
        this.names.set(cls.replace(/-/g, ' '), outer);
        for (const name of otherNames) {
            this.names.set(name.replace(/-/g, ' '), outer);
        }
    }
    addExtraFlags() {
        const g = this.world.graph;
        for (const slot of g.slots.slice(g.fixed)) {
            const c = slot.condition;
            const bossSlot = BOSSES.get(c);
            const replaced = bossSlot && this.slots.get(bossSlot);
            if (replaced == null)
                continue;
            const elt = this.slotElts.get(replaced);
            if (elt == null)
                throw new Error('expected');
            this.slotElts.delete(Number(elt.dataset['index']));
            this.slotElts.set(slot.index, elt);
            elt.classList.add('boss');
            elt.dataset['index'] = String(slot.index);
            elt.dataset['item'] = String(slot.index);
        }
    }
    update() {
        for (const elt of this.slotElts.values()) {
            elt.dataset['state'] = elt.classList.contains('got') ? '' : 'blocked';
        }
        for (const slot of traverse(this.world.graph, newFill(), this.has)) {
            const elt = this.slotElts.get(slot);
            if (elt && !elt.classList.contains('got')) {
                elt.dataset['state'] = 'available';
            }
        }
    }
    addVoiceRecognition() {
        try {
            let stopped = false;
            const rec = this.recognition = new SpeechRecognition();
            const grammar = new SpeechGrammarList();
            grammar.addFromString(`
          #JSGF V1.0;
          grammar command;
          public <item> = ${[...this.names.keys()].join(' | ')};
          public <command> = track <item> | untrack <item>;
      `, 1);
            rec.lang = 'en-US';
            rec.grammars = grammar;
            rec.interimResults = false;
            rec.maxAlternatives = 10;
            rec.onstart = () => { stopped = false; };
            rec.onresult = (e) => {
                const result = e.results[e.results.length - 1];
                if (!result.isFinal)
                    return;
                let matched = false;
                for (const alt of result) {
                    const command = alt.transcript.toLowerCase().replace(/[^a-z ]/g, '');
                    if (command === 'stop listening')
                        matched = stopped = true;
                    const match = /([auo][nm] ?)?tr[au]c?k?(?:ed)? ?(.+)/.exec(command);
                    if (!match)
                        continue;
                    const el = this.names.get(match[2]);
                    if (!el)
                        continue;
                    this.toggle(el, !match[1]);
                    matched = true;
                    break;
                }
                if (!matched) {
                    console.log(`No match: ${[...result].map(r => r.transcript).join(', ')}`);
                }
                rec.stop();
            };
            rec.onend = () => { if (!stopped)
                rec.start(); };
            rec.start();
            return true;
        }
        catch (err) {
            console.error(err);
            return false;
        }
    }
}
function polyfill(...names) {
    const win = window;
    for (let n of names) {
        if (typeof win[n] === 'function') {
            win[names[0]] = win[n];
            return;
        }
    }
    console.error(`Could not polyfill ${names[0]}`);
}
polyfill('SpeechRecognition', 'webkitSpeechRecognition');
polyfill('SpeechGrammarList', 'webkitSpeechGrammarList');
let voice = false;
let flags = 'Rlpt Tb';
for (const arg of location.hash.substring(1).split('&')) {
    const [key, value] = arg.split('=');
    if (key === 'flags') {
        flags = decodeURIComponent(value);
    }
    if (key === 'voice') {
        voice = true;
    }
}
async function main() {
    const rom = await Rom.load();
    const flagset = new FlagSet(flags);
    deterministic(rom, flagset);
    const world = World.build(rom, flagset, true);
    const graph = new Graph(rom, world, flagset);
    for (let item of ITEMS.split('\n')) {
        item = item.replace(/#.*/, '').trim();
        if (!item)
            continue;
        graph.addItem(...item.split(/ +/g));
    }
    for (const slot of SLOTS) {
        graph.addSlot(...slot);
    }
    graph.addExtraFlags();
    graph.update();
    document.getElementById('toggle-map').addEventListener('click', () => {
        graph.map.classList.toggle('hidden');
    });
    document.getElementById('clear-all').addEventListener('click', () => {
        for (const e of graph.grid.querySelectorAll('.got')) {
            e.classList.remove('got');
        }
        graph.has = graph.always;
        graph.update();
    });
    if (voice)
        graph.addVoiceRecognition();
    window.graph = graph;
}
;
main();
//# sourceMappingURL=data:application/json;base64,