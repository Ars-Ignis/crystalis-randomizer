import { Location } from '../rom/location.js';
export function compressMapData(rom) {
    if (rom.compressedMapData)
        return;
    rom.compressedMapData = true;
    for (let i = 0; i < 3; i++) {
        rom.metascreens.renumber(0x100 | i, 0x140 | i);
        delete rom.screens[0x100 | i];
    }
}
export function moveScreensIntoExpandedRom(rom) {
    if (!rom.compressedMapData)
        throw new Error(`Must compress first`);
    const { grass, town, cave, dolphinCave, pyramid, river, sea, lime, mountain, shrine, desert, mountainRiver, swamp, house, fortress, labyrinth, iceCave, tower, } = rom.metatilesets;
    rom.moveScreens([swamp], 4);
    rom.moveScreens([house], 4);
    rom.moveScreens([town], 4);
    rom.moveScreens([lime], 4);
    rom.moveScreens([shrine], 4);
    rom.moveScreens([tower], 4);
    rom.moveScreens([mountain, mountainRiver], 4);
    rom.moveScreens([cave, pyramid, fortress, labyrinth, iceCave], 5);
    const [] = [sea, dolphinCave, grass, river, desert];
    splitDeadEnds(rom);
}
function splitDeadEnds(rom) {
    const { caveEmpty, deadEndE, deadEndN, deadEndN_stairs, deadEndS, deadEndS_stairs, deadEndW, riverCave_deadEndE, riverCave_deadEndN, riverCave_deadEndS, riverCave_deadEndW, riverCaveN_bridge, riverCaveS_bridge, wideHall_deadEndN, wideHall_deadEndS, } = rom.metascreens;
    const empty = caveEmpty.screen.tiles[0];
    deadEndN_stairs.split().screen.tiles.fill(empty, 0x80);
    deadEndS_stairs.split().screen.tiles.fill(empty, 0, 0x80);
    deadEndN.split().screen.tiles.fill(empty, 0x80);
    deadEndS.split().screen.tiles.fill(empty, 0, 0x80);
    deadEndE.split().screen.set2d(0x00, repeat(15, repeat(6, empty)));
    deadEndW.split().screen.set2d(0x0a, repeat(15, repeat(6, empty)));
    wideHall_deadEndN.split().screen.tiles.fill(empty, 0xa0);
    wideHall_deadEndS.split().screen.tiles.fill(empty, 0, 0x70);
    riverCave_deadEndN.split().screen.tiles.fill(empty, 0x80);
    riverCave_deadEndS.split().screen.tiles.fill(empty, 0, 0x80);
    riverCave_deadEndE.split().screen.set2d(0x00, repeat(15, repeat(6, empty)));
    riverCave_deadEndW.split().screen.set2d(0x0a, repeat(15, repeat(6, empty)));
    riverCaveN_bridge.split().screen.tiles.fill(empty, 0x60);
    riverCaveS_bridge.split().screen.tiles.fill(empty, 0, 0x60);
}
function repeat(length, x) {
    return Array.from({ length }, () => x);
}
const [] = [Location];
//# sourceMappingURL=data:application/json;base64,