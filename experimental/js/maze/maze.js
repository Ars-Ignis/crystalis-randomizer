import { hex } from '../rom/util.js';
const [] = [hex];
export const OK = { ok: true, value: undefined };
export class MazeShuffle {
    constructor(loc, params) {
        this.loc = loc;
        this.attempts = 0;
        this.maxAttempts = 100;
        this.orig = loc.meta;
        this.params = params !== null && params !== void 0 ? params : this.survey(this.orig);
    }
    shuffle(random) {
        if (!this.loc.used)
            return;
        this.random = random;
        while (++this.attempts <= this.maxAttempts) {
            const result = this.build();
            if (result.ok) {
                this.finish(result.value);
                return;
            }
            console.log(`Shuffle failed ${this.loc}: ${result.fail}`);
        }
        this.reportFailure();
    }
    reportFailure() {
        console.error(`Completely failed to map shuffle ${this.loc}`);
    }
    finish(newMeta) {
        newMeta.transferFlags(this.loc.meta, this.random);
        newMeta.transferExits(this.loc.meta, this.random);
        newMeta.transferSpawns(this.loc.meta, this.random);
        newMeta.transferPits(this.loc.meta, this.random);
        this.loc.meta = newMeta;
    }
    pickHeight() {
        return Math.max(1, Math.min(16, this.orig.height +
            Math.floor((this.random.nextInt(6) - 1) / 3)));
    }
    pickWidth() {
        return Math.max(1, Math.min(8, this.orig.width +
            Math.floor((this.random.nextInt(6) - 1) / 3)));
    }
    pickSize() {
        return this.params.size + (this.random.nextInt(5) < 2 ? 1 : 0);
    }
    extract(g, c, { h = 3, w = 3, replace = undefined, } = {}) {
        const index = g.index(c);
        let out = '';
        const end = index + h * g.row;
        const { row } = g;
        for (let r = index; r < end; r += row) {
            for (let i = r; i < r + w; i++) {
                if (replace) {
                    const s = replace.get(g.coord(i));
                    if (s != null) {
                        out += (s || ' ');
                        continue;
                    }
                }
                out += (g.data[i] || ' ');
            }
        }
        return out;
    }
    canSet(a, c, v) {
        return this.canSetAll(a, new Map([[c, v]]));
    }
    canSetAll(a, replace) {
        const screens = new Set();
        for (const c of replace.keys()) {
            if (a.fixed.has(c))
                return false;
            const s = (c & ~0x808);
            const y = s >>> 12;
            const x = (s >>> 4) & 0xf;
            if (x < a.w && y < a.h)
                screens.add(s);
            if (!(c & 8) && y < a.h && x)
                screens.add(s - 0x10);
            if (!(c & 0x800) && x < a.w && y)
                screens.add(s - 0x1000);
            if (!(c & 0x808) && x && y)
                screens.add(s - 0x1010);
        }
        for (const s of screens) {
            const tile = this.extract(a.grid, s, { replace });
            if (!this.orig.tileset.getMetascreensFromTileString(tile).length) {
                return false;
            }
        }
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,