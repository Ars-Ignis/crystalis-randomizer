import { hex } from '../rom/util.js';
const [] = [hex];
export const OK = { ok: true, value: undefined };
export class MazeShuffle {
    constructor(loc, params) {
        this.loc = loc;
        this.attempts = 0;
        this.maxAttempts = 100;
        this.orig = loc.meta;
        this.params = params !== null && params !== void 0 ? params : this.survey(this.orig);
    }
    shuffle(random) {
        if (!this.loc.used)
            return;
        this.random = random;
        while (++this.attempts <= this.maxAttempts) {
            const result = this.build();
            if (result.ok) {
                this.finish(result.value);
                return;
            }
            console.log(`Shuffle failed ${this.loc}: ${result.fail}`);
        }
        this.reportFailure();
    }
    reportFailure() {
        console.error(`Completely failed to map shuffle ${this.loc}`);
    }
    finish(newMeta) {
        newMeta.transferFlags(this.loc.meta, this.random);
        newMeta.transferExits(this.loc.meta, this.random);
        newMeta.transferSpawns(this.loc.meta, this.random);
        this.loc.meta = newMeta;
    }
    pickHeight() {
        return Math.max(1, Math.min(16, this.orig.height +
            Math.floor((this.random.nextInt(6) - 1) / 3)));
    }
    pickWidth() {
        return Math.max(1, Math.min(8, this.orig.width +
            Math.floor((this.random.nextInt(6) - 1) / 3)));
    }
    pickSize() {
        return this.params.size + (this.random.nextInt(5) < 2 ? 1 : 0);
    }
    extract(g, c, { h = 3, w = 3, replace = undefined, } = {}) {
        const index = g.index(c);
        let out = '';
        const end = index + h * g.row;
        const { row } = g;
        for (let r = index; r < end; r += row) {
            for (let i = r; i < r + w; i++) {
                if (replace) {
                    const s = replace.get(g.coord(i));
                    if (s != null) {
                        out += (s || ' ');
                        continue;
                    }
                }
                out += (g.data[i] || ' ');
            }
        }
        return out;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9tYXplL21hemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXJDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUE0QmpCLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBaUIsRUFBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsQ0FBQztBQUU3RCxNQUFNLE9BQWdCLFdBQVc7SUFRL0IsWUFBcUIsR0FBYSxFQUFFLE1BQWU7UUFBOUIsUUFBRyxHQUFILEdBQUcsQ0FBVTtRQUpsQyxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsZ0JBQVcsR0FBRyxHQUFHLENBQUM7UUFJaEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxhQUFOLE1BQU0sY0FBTixNQUFNLEdBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELE9BQU8sQ0FBQyxNQUFjO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7WUFBRSxPQUFPO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDMUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzVCLElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRTtnQkFDYixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDMUIsT0FBTzthQUNSO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFB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RyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQzthQUMzQjtTQUNGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmlkLCBHcmlkQ29vcmQsIEdyaWRJbmRleCB9IGZyb20gJy4vZ3JpZC5qcyc7XG5pbXBvcnQgeyBSYW5kb20gfSBmcm9tICcuLi9yYW5kb20uanMnO1xuaW1wb3J0IHsgaGV4IH0gZnJvbSAnLi4vcm9tL3V0aWwuanMnO1xuaW1wb3J0IHsgTWV0YWxvY2F0aW9uIH0gZnJvbSAnLi4vcm9tL21ldGFsb2NhdGlvbi5qcyc7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJy4uL3JvbS9sb2NhdGlvbi5qcyc7XG5cbmNvbnN0IFtdID0gW2hleF07XG5cbnR5cGUgRmVhdHVyZSA9XG4gICAgJ2FyZW5hJyB8ICdicmlkZ2UnIHwgJ292ZXInIHwgJ3BpdCcgfCAncmFtcCcgfCAncml2ZXInIHwgJ3NwaWtlJyB8XG4gICAgJ3VuZGVyJyB8ICd3YWxsJyB8ICd3aWRlJztcblxuZXhwb3J0IGludGVyZmFjZSBTdXJ2ZXkge1xuICByZWFkb25seSBpZDogbnVtYmVyO1xuICByZWFkb25seSBtZXRhOiBNZXRhbG9jYXRpb247XG4gIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcbiAgcmVhZG9ubHkgZWRnZXM/OiBudW1iZXJbXTsgLy8gW3RvcCwgbGVmdCwgYm90dG9tLCByaWdodF1cbiAgcmVhZG9ubHkgc3RhaXJzPzogbnVtYmVyW107IC8vIFt1cCwgZG93bl1cbiAgLy9wb2k/OiBudW1iZXI7XG4gIHJlYWRvbmx5IGZlYXR1cmVzPzogUmVjb3JkPEZlYXR1cmUsIG51bWJlcj47IC8vIGEsIHIsIHMsIHAsIGIsIHdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdHRlbXB0IHtcbiAgcmVhZG9ubHkgZ3JpZDogR3JpZDxzdHJpbmc+O1xuICByZWFkb25seSB3OiBudW1iZXI7XG4gIHJlYWRvbmx5IGg6IG51bWJlcjtcbiAgcmVhZG9ubHkgc2l6ZTogbnVtYmVyO1xuICBjb3VudDogbnVtYmVyO1xufVxuXG4vL3R5cGUgU3VydmV5VHlwZTxUIGV4dGVuZHMgTWF6ZVNodWZmbGU+ID0gUmV0dXJuVHlwZTxUWydzdXJ2ZXknXT47XG4vL3R5cGUgQXR0ZW1wdFR5cGU8VCBleHRlbmRzIE1hemVTaHVmZmxlPiA9IFJldHVyblR5cGU8VFsnYXR0ZW1wdCddPjtcblxuZXhwb3J0IHR5cGUgUmVzdWx0PFQ+ID0ge29rOiB0cnVlLCB2YWx1ZTogVH0gfCB7b2s6IGZhbHNlLCBmYWlsOiBzdHJpbmd9O1xuZXhwb3J0IGNvbnN0IE9LOiBSZXN1bHQ8dm9pZD4gPSB7b2s6IHRydWUsIHZhbHVlOiB1bmRlZmluZWR9O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTWF6ZVNodWZmbGUge1xuXG4gIHJhbmRvbSE6IFJhbmRvbTsgLy8gc2V0IGluIHNodWZmbGUoKSBmb3IgYmV0dGVyIEFQSS5cbiAgb3JpZzogTWV0YWxvY2F0aW9uO1xuICBhdHRlbXB0cyA9IDA7XG4gIG1heEF0dGVtcHRzID0gMTAwO1xuICBwYXJhbXM6IFN1cnZleTtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBsb2M6IExvY2F0aW9uLCBwYXJhbXM/OiBTdXJ2ZXkpIHtcbiAgICB0aGlzLm9yaWcgPSBsb2MubWV0YTtcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcyA/PyB0aGlzLnN1cnZleSh0aGlzLm9yaWcpO1xuICB9XG5cbiAgc2h1ZmZsZShyYW5kb206IFJhbmRvbSkge1xuICAgIGlmICghdGhpcy5sb2MudXNlZCkgcmV0dXJuO1xuICAgIHRoaXMucmFuZG9tID0gcmFuZG9tO1xuICAgIHdoaWxlICgrK3RoaXMuYXR0ZW1wdHMgPD0gdGhpcy5tYXhBdHRlbXB0cykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWlsZCgpO1xuICAgICAgaWYgKHJlc3VsdC5vaykge1xuICAgICAgICB0aGlzLmZpbmlzaChyZXN1bHQudmFsdWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhgU2h1ZmZsZSBmYWlsZWQgJHt0aGlzLmxvY306ICR7cmVzdWx0LmZhaWx9YCk7XG4gICAgfVxuICAgIHRoaXMucmVwb3J0RmFpbHVyZSgpO1xuICB9XG5cbiAgcmVwb3J0RmFpbHVyZSgpIHtcbiAgICAvL3Rocm93IG5ldyBFcnJvcihgQ29tcGxldGVseSBmYWlsZWQgdG8gbWFwIHNodWZmbGUgJHtsb2N9YCk7XG4gICAgY29uc29sZS5lcnJvcihgQ29tcGxldGVseSBmYWlsZWQgdG8gbWFwIHNodWZmbGUgJHt0aGlzLmxvY31gKTtcbiAgfVxuXG4gIGFic3RyYWN0IHN1cnZleShtZXRhOiBNZXRhbG9jYXRpb24pOiBTdXJ2ZXk7XG5cbiAgYWJzdHJhY3QgYnVpbGQoKTogUmVzdWx0PE1ldGFsb2NhdGlvbj47XG5cbiAgZmluaXNoKG5ld01ldGE6IE1ldGFsb2NhdGlvbikge1xuICAgIG5ld01ldGEudHJhbnNmZXJGbGFncyh0aGlzLmxvYy5tZXRhLCB0aGlzLnJhbmRvbSk7XG4gICAgbmV3TWV0YS50cmFuc2ZlckV4aXRzKHRoaXMubG9jLm1ldGEsIHRoaXMucmFuZG9tKTtcbiAgICBuZXdNZXRhLnRyYW5zZmVyU3Bhd25zKHRoaXMubG9jLm1ldGEsIHRoaXMucmFuZG9tKTtcbiAgICAvL25ld01ldGEucmVwbGFjZU1vbnN0ZXJzKHRoaXMucmFuZG9tKTtcbiAgICB0aGlzLmxvYy5tZXRhID0gbmV3TWV0YTtcbiAgfVxuXG4gIHBpY2tIZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMSwgTWF0aC5taW4oMTYsIHRoaXMub3JpZy5oZWlnaHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKCh0aGlzLnJhbmRvbS5uZXh0SW50KDYpIC0gMSkgLyAzKSkpO1xuICB9XG5cbiAgcGlja1dpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgubWF4KDEsIE1hdGgubWluKDgsIHRoaXMub3JpZy53aWR0aCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoKHRoaXMucmFuZG9tLm5leHRJbnQoNikgLSAxKSAvIDMpKSk7XG4gIH1cblxuICBwaWNrU2l6ZSgpOiBudW1iZXIge1xuICAgIC8vIDQwJSBjaGFuY2Ugb2YgKzEgc2l6ZVxuICAgIHJldHVybiB0aGlzLnBhcmFtcy5zaXplICsgKHRoaXMucmFuZG9tLm5leHRJbnQoNSkgPCAyID8gMSA6IDApO1xuICB9XG5cblxuICAvKiogRXh0cmFjdCBhIDN4MyBzZWN0aW9uIGludG8gYSAoaMOXdyktY2hhcmFjdGVyIHN0cmluZy4gKi9cbiAgZXh0cmFjdChnOiBHcmlkPGFueT4sIGM6IEdyaWRDb29yZCxcbiAgICAgICAgICB7aCA9IDMsIHcgPSAzLFxuICAgICAgICAgICByZXBsYWNlID0gdW5kZWZpbmVkIGFzIE1hcDxHcmlkQ29vcmQsIHN0cmluZz58dW5kZWZpbmVkLFxuICAgICAgICAgIH0gPSB7fSk6IHN0cmluZyB7XG4gICAgY29uc3QgaW5kZXggPSBnLmluZGV4KGMpO1xuICAgIGxldCBvdXQgPSAnJztcbiAgICBjb25zdCBlbmQgPSBpbmRleCArIGggKiBnLnJvdztcbiAgICBjb25zdCB7cm93fSA9IGc7XG4gICAgZm9yIChsZXQgciA9IGluZGV4IGFzIG51bWJlcjsgciA8IGVuZDsgciArPSByb3cpIHtcbiAgICAgIGZvciAobGV0IGkgPSByOyBpIDwgciArIHc7IGkrKykge1xuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIGNvbnN0IHMgPSByZXBsYWNlLmdldChnLmNvb3JkKGkgYXMgR3JpZEluZGV4KSk7XG4gICAgICAgICAgaWYgKHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgb3V0ICs9IChzIHx8ICcgJyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9IChnLmRhdGFbaV0gfHwgJyAnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuIl19