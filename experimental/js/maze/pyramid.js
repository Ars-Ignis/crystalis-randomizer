export class PyramidShuffle {
    constructor(location) {
        this.location = location;
    }
    shuffle(random) {
        const meta = this.location.meta;
        moveInternalStair(meta, random);
        if (random.nextInt(2))
            invertPyramidExit(this.location.rom);
        const up = [...meta.exits()].filter(e => e[1] === 'stair:up');
        const dn = [...meta.exits()].filter(e => e[1] === 'stair:down');
        random.shuffle(up);
        random.shuffle(dn);
        for (const e of [...meta.exits()]) {
            if ((e[2][0] >>> 8) !== this.location.id) {
                const next = (e[1] === 'stair:up' ? up : dn).pop();
                meta.setExit(next[0], next[1], e[2]);
            }
        }
        if (up.length !== dn.length)
            throw new Error(`length mismatch`);
        const dn2 = random.shuffle([...dn]);
        const self = this.location.id << 8;
        for (let i = 0; i < up.length; i++) {
            meta.setExitOneWay(up[i][0], up[i][1], [self | dn[i][0], dn[i][1]]);
            meta.setExitOneWay(dn2[i][0], dn2[i][1], [self | up[i][0], up[i][1]]);
        }
    }
}
function moveInternalStair(meta, random) {
    const y = random.nextInt(2) + 6;
    const x = random.nextInt(3) + 2;
    if (y === 7 && x === 3)
        return;
    const { branchNWSE, branchNWE, branchWSE, branchNWE_upStair, deadEndW, deadEndE } = meta.rom.metascreens;
    const pos = y << 4 | x;
    let bottom = branchWSE;
    if (y === 7 && x === 1)
        bottom = deadEndE;
    if (y === 7 && x === 5)
        bottom = deadEndW;
    meta.set2d(0x63, [[branchNWSE], [branchNWSE], [branchNWSE]]);
    meta.set2d(pos - 16, [[branchNWE], [branchNWE_upStair], [bottom]]);
    meta.moveExit(0x73, pos);
}
function invertPyramidExit(rom) {
    const draygon = rom.locations.Pyramid_Draygon.meta;
    const main = rom.locations.Pyramid_Main.meta;
    const { metascreens: { hallSE, deadEndW_downStair, wideHallNE, wideHallNW, fortressArena_through, deadEndS_stairs } } = rom;
    draygon.width = 2;
    draygon.set2d(0x00, [[null, deadEndS_stairs],
        [null, fortressArena_through],
        [wideHallNE, wideHallNW]]);
    draygon.moveExit(0x20, 0x01);
    main.set2d(0x03, [[hallSE, deadEndW_downStair]]);
    main.moveExit(0x03, 0x04);
    main.attach(0x04, draygon, 0x01);
}
//# sourceMappingURL=data:application/json;base64,