import { Maze } from './maze.js';
import { SWAMP_SCREENS, readScreen, write2d } from './spec.js';
import { Dir, Pos } from './types.js';
import { Monster } from '../rom/monster.js';
import { hex } from '../rom/util.js';
export function shuffleSwamp(rom, random, attempts = 100) {
    extendSwampScreens(rom);
    const swamp = rom.locations.Swamp;
    const w = swamp.width;
    const h = swamp.height;
    const extraTiles = [SCR_U, SCR_D, SCR_UD, SCR_DR, SCR_URD, SCR_LR];
    const available = [0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7d, 0x7e];
    for (let attempt = 0; attempt < attempts; attempt) {
        const maze = new Maze(random, h, w, SWAMP_SCREENS, extraTiles);
        if (!tryShuffleSwamp(rom, random, swamp, maze, available))
            continue;
        return;
    }
    console.error(`Failed to shuhffle swamp after ${attempts} attempts.`);
}
function tryShuffleSwamp(rom, random, swamp, maze, available) {
    const w = maze.width;
    const h = maze.height;
    const [boss, entrance] = (() => {
        let boss;
        let entrance;
        do {
            boss = random.nextInt(w);
            entrance = random.nextInt(h);
        } while (boss < 2 || entrance < 2);
        return [boss, (entrance << 4)];
    })();
    maze.setBorder(entrance, Dir.LEFT, 1);
    maze.set(boss, 0xf1f0, { force: true });
    maze.set((boss - 1), 0x00f0, { force: true });
    maze.set((boss + 1), 0xf000, { force: true });
    maze.fillAll({ edge: 1 });
    const entranceRoute = entrance << 8 | 0x10;
    function check() {
        const traversal = maze.traverse();
        const main = traversal.get(entranceRoute);
        return main && main.size === traversal.size || false;
    }
    const allPos = [...maze].map(s => s[0]);
    for (let i = Math.floor(0.6 * w * h); i; i--) {
        const pos = random.pick(allPos);
        const dir = random.pick(Dir.ALL);
        const pos2 = Pos.plus(pos, dir);
        if (maze.isFixed(pos) || maze.isFixed(pos2) ||
            !(maze.get(pos) & Dir.edgeMask(dir))) {
            i++;
            continue;
        }
        maze.saveExcursion(() => {
            if (!maze.replaceEdge(pos, dir, 0))
                return false;
            return !!(maze.get(pos) && maze.get(pos2) && check());
        });
    }
    if (!maze.consolidate(available, check, rom))
        return false;
    const [oak, alt] = random.pick([...maze.alternates()]);
    if (alt != 65536)
        throw new Error(`unexpected alt: ${hex(alt)}`);
    maze.replace(oak, (maze.get(oak) | alt));
    swamp.moveScreen(0x30, entrance);
    swamp.moveScreen(0x04, boss);
    maze.write(swamp, new Set());
    const deadEnds = [];
    const bends = [];
    for (const [pos, scr] of maze) {
        if (pos === boss || pos === oak)
            continue;
        if (scr === 0x0001 || scr === 0x0010 || scr === 0x0100 || scr === 0x1000) {
            deadEnds.push(pos);
        }
        if (scr === 0x0011 || scr === 0x0110 || scr === 0x1100 || scr === 0x1001) {
            bends.push(pos);
        }
    }
    const oakScreenTiles = rom.screens[swamp.screens[oak >> 4][oak & 0xf]].tiles;
    let oakTile = 0;
    for (let t = 0; t < 0xf0; t++) {
        if (oakScreenTiles[t] === 3) {
            oakTile = t;
            break;
        }
    }
    swamp.entrances[1].screen = oak;
    swamp.entrances[1].tile = oakTile + 0x11;
    for (let i = 0; i < 2; i++) {
        swamp.exits[5 + i].screen = oak;
        swamp.exits[5 + i].tile = oakTile + i;
    }
    const child = random.pick(deadEnds.length ? deadEnds : bends);
    swamp.spawns[1].screen = child;
    const monsterPlacer = swamp.monsterPlacer(random);
    for (const spawn of swamp.spawns) {
        if (!spawn.isMonster())
            continue;
        const monster = rom.objects[spawn.monsterId];
        if (!(monster instanceof Monster))
            continue;
        const pos = monsterPlacer(monster);
        if (pos == null) {
            console.error(`no valid location for ${hex(monster.id)} in ${hex(swamp.id)}`);
            spawn.used = false;
            continue;
        }
        else {
            spawn.screen = pos >>> 8;
            spawn.tile = pos & 0xff;
        }
    }
    if (rom.spoiler)
        rom.spoiler.addMaze(swamp.id, swamp.name, maze.show());
    return true;
}
const SCR_U = readScreen(`c8 c8 c8 c8 cf f6 c7 ad c4 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 b8 b9 c3 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 b7 b8 ad ad d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 c2 c3 b7 b8 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b6 c2 b7 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 ad ad b9 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 ad ad ad ad d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b9 b8 ad ad d2 e2 c8 c8 c8 c8
     c8 c8 c8 c8 e3 f6 c3 c3 b8 b6 d2 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 e3 fd ad ad fc e2 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 ff fb fb fa c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8`);
const SCR_D = readScreen(`c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 cd c9 c9 ca c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 cd eb a0 a0 cb ca c8 c8 c8 c8 c8
     c8 c8 c8 c8 cf a0 f9 f5 f7 f8 cb cc c8 c8 c8 c8
     c8 c8 c8 c8 cf a0 ed 08 09 a0 a0 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf db ee 0c 0b ef a0 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d0 d1 03 03 d8 db cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 c7 ad ad ae d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 ad b9 b7 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 c2 c3 c3 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 c5 c3 c3 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b6 c2 c3 c3 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 b8 b6 b6 b6 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 b7 b7 b7 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 b7 b7 b8 b6 d2 cc c8 c8 c8 c8`);
const SCR_UD = readScreen(`c8 c8 c8 c8 cf d3 b6 b6 c6 b6 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b6 c3 c7 b6 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f5 c3 c7 b6 b6 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b6 b6 c6 c5 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d9 b6 c6 c3 c7 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f5 c3 c3 c3 c3 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d9 ad c2 c3 c3 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d9 c4 c5 c3 c3 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f5 b7 b7 b8 b6 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d9 c2 b8 b6 b6 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d9 b6 c2 b7 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d9 b6 b6 b6 b6 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 b7 b7 b8 b6 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b9 b7 b7 b7 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 b7 b7 c7 b6 d2 cc c8 c8 c8 c8`);
const SCR_DR = readScreen(`c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 cd c9 c9 c9 c9 c9 c9 c9 c9 c9
     c8 c8 c8 c8 c8 cd a0 a0 a0 e8 04 a0 e8 a0 a0 e4
     c8 c8 c8 c8 cf f8 a0 f0 f1 f5 f5 f7 e9 f4 f7 e5
     c8 c8 c8 c8 cf f6 f7 f8 f2 ea 06 aa e9 f0 f1 e6
     c8 c8 c8 c8 cf a0 dd e0 f3 e0 07 0c ea db f3 e7
     c8 c8 c8 c8 cf db d5 d0 d1 d1 03 03 d0 d1 da da
     c8 c8 c8 c8 cf d5 af c4 c4 ad ad ad ad ad c4 ad
     c8 c8 c8 c8 cf d3 b9 c3 c3 b8 ad ad ad c2 b7 b8
     c8 c8 c8 c8 cf f6 c3 c3 c3 c3 b8 ad ad ad ad ad
     c8 c8 c8 c8 cf f6 c7 ad c2 c3 c7 fc fb fb fb fb
     c8 c8 c8 c8 cf d3 ad ad ad ad d6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b9 b8 ad b9 f6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf f6 c7 ad b9 c7 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b6 b9 c3 b8 d2 cc c8 c8 c8 c8`);
const SCR_URD = readScreen(`c8 c8 c8 c8 cf d3 c4 c3 c3 c3 f7 f8 ca c8 c8 c8
     c8 c8 c8 c8 cf f5 c3 c3 c3 c3 f7 f7 a0 ca c9 c9
     c8 c8 c8 c8 cf f6 c3 c3 b8 b6 d2 cf cf e8 e4 a0
     c8 c8 c8 c8 cf f5 b7 c3 b7 b8 d2 f0 f1 e9 e5 cf
     c8 c8 c8 c8 cf d3 c2 b8 c2 b8 d8 db cf ea e6 cf
     c8 c8 c8 c8 cf d3 ad ad ad ad ae d4 f3 dd e7 cf
     c8 c8 c8 c8 cf d3 ad ad ad ad ad ae d0 d1 d0 d1
     c8 c8 c8 c8 cf d3 c2 c3 c3 b7 b8 ad ad ad ad ad
     c8 c8 c8 c8 cf d3 ad ad c2 b7 b7 b7 b8 c4 ad ad
     c8 c8 c8 c8 cf d3 ad ad b6 b9 b7 b7 b7 b7 b8 ad
     c8 c8 c8 c8 cf d3 ad c4 c3 b7 b8 fc fb fb fb fb
     c8 c8 c8 c8 cf d3 b6 ad ad ad d6 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 ad ad ad ad d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 c4 c3 b7 b8 d2 cc c8 c8 c8 c8
     c8 c8 c8 c8 cf d3 b6 b9 b7 b7 f6 cc c8 c8 c8 c8`);
const SCR_LR = readScreen(`c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9
     a0 e4 e8 eb e4 a0 a0 a0 eb eb e8 f0 f1 a0 e4 a0
     a0 e5 e9 f9 f5 f6 f6 f7 ec f9 f7 f8 f2 a0 e5 a0
     a0 e6 f0 f1 e6 e0 08 09 ed de ea de f2 a0 e6 a0
     db e7 db f3 e7 e1 0c 0b dd df e0 df f3 db e7 e0
     d0 d1 da da d0 d1 03 03 d0 d1 d0 d1 da da da da
     ad c4 ad ad ad ad ad ad ad ad ad ad ad ad ad ad
     c2 c5 b8 c6 c4 c4 b9 c7 c4 c5 c5 c7 ad ad ad ad
     ad ad ad ad c2 c3 c3 c3 c3 c3 c7 ad ad ad ad ad
     fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8
     c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8`);
export function extendSwampScreens(rom) {
    const ts = rom.metatilesets.swamp;
    ts.getTile(0x03).copyFrom(0xda).setAlternative(0xac);
    ts.getTile(0x04).copyFrom(0xe4).setAlternative(0xaa);
    ts.getTile(0x05).copyFrom(0xe5).setAlternative(0xaa);
    ts.getTile(0x06).copyFrom(0xe6).setAlternative(0xaa);
    ts.getTile(0x07).copyFrom(0xe7).setAlternative(0xaa);
    ts.getTile(0x08).copyFrom(0xf0).setAlternative(0xaa);
    ts.getTile(0x09).copyFrom(0xf1).setAlternative(0xaa);
    ts.getTile(0x0a).copyFrom(0xf2).setAlternative(0xaa);
    ts.getTile(0x0b).copyFrom(0xf3).setAlternative(0xaa);
    ts.getTile(0x0c).copyFrom(0xdc).setAlternative(0xaa);
    ts.getTile(0x0d).copyFrom(0xdd).setAlternative(0xaa);
    rom.swapMetatiles([0xa0], [[0x03, 0xac], ~0xda], [[0x04, 0xaa], ~0xe4], [[0x05, 0xaa], ~0xe5], [[0x06, 0xaa], ~0xe6], [[0x07, 0xaa], ~0xe7], [[0x08, 0xaa], ~0xf0], [[0x09, 0xaa], ~0xf1], [[0x0a, 0xaa], ~0xf2], [[0x0b, 0xaa], ~0xf3], [[0x0c, 0xaa], ~0xdc], [[0x0d, 0xaa], ~0xdd]);
    write2d(rom.screens[0x7f].tiles, 0x00, [
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xd2, 0xcc],
        [0xd2, 0xcc],
        [0xd2, 0xcc],
        [0xd2, 0xe2],
        [0xe2, 0xc8],
    ]);
    write2d(rom.screens[0x76].tiles, 0x4c, [
        [0x08, 0x09],
        [0x0c, 0x0b],
        [0x03, 0x03],
    ]);
    write2d(rom.screens[0x7a].tiles, 0x25, [
        [, , 0x04],
        [0x08, 0x09, 0x05],
        [, 0x0a, 0x06],
        [, 0x0b, 0x07],
        [, 0x03, 0x03],
    ]);
    write2d(rom.screens[0x7b].tiles, 0x24, [
        [0x04],
        [],
        [0x06],
        [0x07, 0x0d],
        [0x03, 0x03],
    ]);
    write2d(rom.screens[0x7e].tiles, 0x47, [
        [0x08, 0x09],
        [0x0c, 0x0b],
        [0x03, 0x03],
    ]);
}
//# sourceMappingURL=data:application/json;base64,