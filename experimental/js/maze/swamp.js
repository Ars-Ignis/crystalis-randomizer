import { Monogrid } from './monogrid.js';
import { Metalocation } from '../rom/metalocation.js';
import { CaveShuffle } from './cave.js';
import { seq } from '../rom/util.js';
import { ScreenFix } from '../rom/screenfix.js';
export class SwampShuffle extends CaveShuffle {
    build(h = this.pickHeight(), w = this.pickWidth()) {
        var _a, _b, _c;
        const rom = this.orig.rom;
        const g = new Monogrid(h, w);
        g.fill();
        const arenaY = h * w < 28 ? 0 : this.random.nextInt(h - 1);
        const arenaX = this.random.nextInt(w);
        function del(y, x) {
            g.delete2(y, x);
            g.fixed.add(y * g.w + x);
        }
        function isDoor(type) {
            return !type.startsWith('edge');
        }
        g.fixed.add(arenaY * g.w + arenaX);
        if (arenaX)
            del(arenaY, arenaX - 1);
        if (arenaX < g.w - 1)
            del(arenaY, arenaX + 1);
        if (arenaY) {
            del(arenaY - 1, arenaX);
            if (arenaX)
                del(arenaY - 1, arenaX - 1);
            if (arenaX < g.w - 1)
                del(arenaY - 1, arenaX + 1);
        }
        const edgePos = new Set();
        for (let dir = 0; dir < 4; dir++) {
            const max = dir & 1 ? h : w;
            const nums = this.random.shuffle(seq(max));
            const opp = dir & 2 ? max : 0;
            let count = (_b = (_a = this.params.edges) === null || _a === void 0 ? void 0 : _a[dir]) !== null && _b !== void 0 ? _b : 0;
            while (count && nums.length) {
                const y = dir & 1 ? nums.pop() : opp;
                const x = dir & 1 ? opp : nums.pop();
                const i = y * g.w + x;
                if (!g.data[i] || g.fixed.has(i))
                    continue;
                g.addEdge(y, x, dir);
                edgePos.add(y << 4 | x);
                count--;
            }
            if (count)
                return { ok: false, fail: `could not add all edges: ${dir} ${count}\n${g.toGrid('c').show()}\n${g.data}` };
        }
        console.log(g.toGrid('c').show());
        let deleted = 0;
        const target = g.h * g.w * (this.random.next() * 0.15 + 0.4);
        for (const posDir of this.random.ishuffle(seq(g.data.length << 2))) {
            const i = posDir >>> 2;
            const dir = posDir & 3;
            if (g.isBorder(i, dir) && g.deleteEdge(i, dir)) {
                if (++deleted >= target)
                    break;
            }
        }
        const allocd = new Set();
        const unallocd = new Set();
        const plain = [];
        const doors = [];
        let arena;
        for (const s of this.orig.tileset) {
            if (s.hasFeature('arena')) {
                arena = s;
                continue;
            }
            else if (s.hasFeature('empty')) {
                plain[0] = s;
                continue;
            }
            const edgeIndex = s.edgeIndex('s');
            if (edgeIndex == null)
                throw new Error(`bad edges`);
            const hasDoor = (_c = s.data.exits) === null || _c === void 0 ? void 0 : _c.some(e => isDoor(e.type));
            (hasDoor ? doors : plain)[edgeIndex] = s;
            (s.sid < 0 ? unallocd : allocd).add(s.sid);
        }
        if (!arena)
            throw new Error(`never found arena`);
        const used = new Set(g.consolidate(this.random, allocd.size).map(e => plain[e].sid));
        if (!used.size)
            return { ok: false, fail: `consolidate failed` };
        const newlyUsed = [...unallocd].filter(e => used.has(e));
        const newlyUnused = [...allocd].filter(e => !used.has(e));
        if (newlyUsed.length > newlyUnused.length)
            throw new Error(`out of space`);
        if (newlyUsed.length) {
            let unusedId = -1;
            while (rom.metascreens.getById(unusedId).length)
                unusedId--;
            for (let i = 0; i < newlyUsed.length; i++) {
                rom.metascreens.renumber(newlyUnused[i], unusedId);
                rom.metascreens.renumber(newlyUsed[i], newlyUnused[i]);
                unusedId = newlyUsed[i];
            }
            rom.metascreens.renumber(unusedId, newlyUsed.pop());
        }
        const meta = new Metalocation(this.orig.id, this.orig.tileset, h, w);
        for (let y = 0; y < g.h; y++) {
            for (let x = 0; x < g.w; x++) {
                const isArena = y === arenaY && x === arenaX;
                meta.set(y << 4 | x, isArena ? arena : plain[g.data[y * g.w + x]]);
            }
        }
        let doorCount = [...this.orig.exits()].filter(e => isDoor(e[1])).length;
        for (const pos of this.random.ishuffle(meta.allPos())) {
            if (!doorCount)
                break;
            if (edgePos.has(pos))
                continue;
            const x = pos & 0xf;
            const y = pos >>> 4;
            const door = doors[g.data[y * g.w + x]];
            if (!door)
                continue;
            meta.set(pos, door);
            doorCount--;
        }
        if (doorCount)
            return { ok: false, fail: `could not place all doors` };
        return { ok: true, value: meta };
    }
}
export function addSwampDoors(rom) {
    const { swamp } = rom.metatilesets;
    const $ = rom.metascreens;
    const tiles = [
        [0x03, 0xda, 0xac],
        [0x04, 0xe4, 0xaa],
        [0x05, 0xe5, 0xaa],
        [0x06, 0xe6, 0xaa],
        [0x07, 0xe7, 0xaa],
        [0x08, 0xf0, 0xaa],
        [0x09, 0xf1, 0xaa],
        [0x0a, 0xf2, 0xaa],
        [0x0b, 0xf3, 0xaa],
        [0x0c, 0xdc, 0xaa],
        [0x0d, 0xdd, 0xaa],
    ];
    for (const [tile, src, alt] of tiles) {
        swamp.getTile(tile).copyFrom(src).setAlternative(alt);
    }
    $.swampEmpty.screen.set2d(0x00, [
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xa8, 0xcc],
        [0xd2, 0xcc],
        [0xd2, 0xcc],
        [0xd2, 0xcc],
        [0xd2, 0xe2],
        [0xe2, 0xc8],
    ]);
    $.swampE.screen.set2d(0x4c, [
        [0x08, 0x09],
        [0x0c, 0x0b],
        [0x03, 0x03],
    ]);
    $.swampWSE.screen.set2d(0x25, [
        [, , 0x04],
        [0x08, 0x09, 0x05],
        [, 0x0a, 0x06],
        [, 0x0b, 0x07],
        [, 0x03, 0x03],
    ]);
    $.swampW.screen.set2d(0x24, [
        [0x04],
        [],
        [0x06],
        [0x07, 0x0d],
        [0x03, 0x03],
    ]);
    $.swampWS.screen.set2d(0x47, [
        [0x08, 0x09],
        [0x0c, 0x0b],
        [0x03, 0x03],
    ]);
    $.registerFix(ScreenFix.SwampDoors, 0);
}
//# sourceMappingURL=data:application/json;base64,