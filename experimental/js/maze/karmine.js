import { Grid, E, S, N, W } from './grid.js';
import { OK } from '../maze/maze.js';
import { CaveShuffle } from './cave.js';
export class KarmineUpstairsShuffle extends CaveShuffle {
    constructor() {
        super(...arguments);
        this.patterns = [
            ['     ',
                ' >cc ',
                '   c ',
                '   b ',
                '   c '],
            ['     ',
                ' cc> ',
                ' c   ',
                ' b   ',
                ' c   '],
            ['   c ',
                '   b ',
                '   c ',
                ' >cc ',
                '     '],
            [' c   ',
                ' b   ',
                ' c   ',
                ' cc> ',
                '     ']
        ];
    }
    initialFill(a) {
        const pattern = this.random.pick(this.patterns);
        a.count = 3;
        const result = this.insertPattern(a, pattern, { top: 1, bottom: 1 });
        if (!result.ok)
            return result;
        for (let i = 0; i < a.grid.data.length; i++) {
            if (a.grid.data[i])
                a.fixed.add(a.grid.coord(i));
        }
        return OK;
    }
    addEdges(a) {
        let retries = 10;
        while (a.count < a.size && retries) {
            if (!this.tryAdd(a))
                retries--;
        }
        return retries ? OK : { ok: false, fail: `addEdges` };
    }
    addEarlyFeatures(a) {
        let found = false;
        for (const s of this.random.ishuffle(a.grid.screens())) {
            if (this.extract(a.grid, s) !== ' c  c  c ')
                continue;
            a.grid.set(s + 0x808, 'b');
            found = true;
            break;
        }
        if (!found)
            return { ok: false, fail: `could not add bridge` };
        return super.addStairs(a, 0, 2);
    }
    refine() { return OK; }
    addLateFeatures() { return OK; }
    addStairs() { return OK; }
}
const STAIRS = new WeakMap();
export class KarmineMainShuffle extends CaveShuffle {
    constructor() {
        super(...arguments);
        this.maxAttempts = 200;
    }
    initialFill(a) {
        const bridges = [];
        let stairDown = true;
        let stair;
        const upstairs = this.orig.rom.locations.GoaFortress_Karmine3.meta;
        for (const [pos, , [dest]] of upstairs.exits()) {
            if ((dest >>> 8) !== this.orig.id)
                continue;
            STAIRS.set(this.orig.rom.locations.GoaFortress_Karmine3, pos);
            stair = pos;
            if (!upstairs.get(pos).isEmpty()) {
                stair += 16;
                stairDown = false;
            }
            break;
        }
        if (stair == null)
            throw new Error('no stair found');
        for (const pos of upstairs.allPos()) {
            const scr = upstairs.get(pos);
            if (scr.hasFeature('overpass'))
                bridges.push(pos);
        }
        this.random.shuffle(bridges);
        let top = stair >>> 4;
        let left = stair & 0xf;
        let right = left;
        let bottom = top;
        for (const bridge of bridges) {
            const y = bridge >>> 4;
            const x = bridge & 0xf;
            top = Math.min(top, y);
            left = Math.min(left, x);
            right = Math.max(right, x);
            bottom = Math.max(bottom, y);
        }
        const height = bottom - top + 1;
        const width = right - left + 1;
        const origin = top << 4 | left;
        const outX = 1 + this.random.nextInt(a.w - width - 2);
        const outY = this.random.nextInt(a.h - height - (stairDown ? 1 : 0));
        const delta = (outY << 4 | outX) - origin;
        const stairRight = (stair & 0xf) - left < width / 2;
        stair += delta;
        STAIRS.set(this.orig.rom.locations.GoaFortress_Karmine5, stair);
        for (let i = 0; i < bridges.length; i++) {
            bridges[i] += delta;
        }
        const stairTile = stairDown ? '    <  c ' : stairRight ? '    <c   ' : '   c<    ';
        if (!this.insertTile(a, stair, stairTile) ||
            !this.insertTile(a, bridges[0], '   cbc   ') ||
            !this.insertTile(a, bridges[1], '   cbc   ')) {
            throw new Error('Could not insert tile');
        }
        a.fixed.add(this.posToGrid(stair, 0x808));
        a.fixed.add(this.posToGrid(bridges[0], 0x808));
        a.fixed.add(this.posToGrid(bridges[1], 0x808));
        a.count = 3;
        const dx = stairRight ? 1 : -1;
        const ds = stairDown ? 0x10 : dx;
        if (!bridges.includes(stair + dx) &&
            !this.tryConnect(a, this.posToGrid(stair + ds, 0x808), this.posToGrid(bridges[0] - dx, 0x808), 'c', 10)) {
            return { ok: false, fail: `could not connect stair to bridge` };
        }
        if (!this.tryConnect(a, this.posToGrid(bridges[0] + dx, 0x808), this.posToGrid(bridges[1] + dx, 0x808), 'c', 10)) {
            return { ok: false, fail: `could not connect bridges` };
        }
        return OK;
    }
    addEdges(a) {
        let attempts = 100;
        while (a.count < a.size - 4 && attempts) {
            if (!this.tryAdd(a))
                attempts--;
        }
        return attempts ? OK : { ok: false, fail: `could not populate` };
    }
    refine() { return OK; }
    refineEdges() { return true; }
    addUnderpasses() { return true; }
    addArenas(a) {
        for (const s of this.random.ishuffle(a.grid.screens())) {
            if (!(s & 0xf000))
                continue;
            const c = s + 0x808;
            if (a.fixed.has(c) || a.grid.get(c))
                continue;
            if (a.grid.get(W(c, 2)) || a.grid.get(E(c, 2)))
                continue;
            if (a.grid.get(S(c, 2)) !== 'c')
                continue;
            if (!this.canSetAll(a, new Map([[S(c), 'c'], [c, 'a'],
                [N(c), 'c'], [N(c, 2), 'c']]))) {
                continue;
            }
            a.grid.set(S(c), 'c');
            a.grid.set(c, 'a');
            a.grid.set(N(c), 'c');
            a.fixed.add(c);
            a.fixed.add(N(c, 2));
            return true;
        }
        return false;
    }
    addStairs(a, up = 0, down = 0) {
        return super.addStairs(a, up - 1, down);
    }
    finish(newMeta) {
        for (const [pos, type] of this.orig.exits()) {
            if (type.startsWith('seamless'))
                this.orig.deleteExit(pos, type);
        }
        super.finish(newMeta);
        const upperMeta = this.orig.rom.locations.GoaFortress_Karmine3.meta;
        const upperPos = STAIRS.get(this.orig.rom.locations.GoaFortress_Karmine3);
        const mainPos = STAIRS.get(this.orig.rom.locations.GoaFortress_Karmine5);
        if (upperPos != null && mainPos != null) {
            newMeta.attach(mainPos, upperMeta, upperPos, 'stair:up', 'stair:down');
        }
    }
}
export class KarmineKensuShuffle extends CaveShuffle {
    findArena(meta) {
        for (const pos of meta.allPos()) {
            if (meta.get(pos).hasFeature('arena')) {
                return pos;
            }
        }
        throw new Error(`never found arena`);
    }
    initialFill(a) {
        const main = this.orig.rom.locations.GoaFortress_Karmine5.meta;
        const arena = this.findArena(main);
        const c = this.posToGrid(arena, 0x808);
        a.grid.set(c, 'a');
        a.grid.set(N(c), 'c');
        a.grid.set(S(c), 'c');
        a.fixed.add(c);
        a.fixed.add(S(c));
        a.fixed.add(S(c, 2));
        return OK;
    }
    addEdges(a) {
        let retries = 10;
        const size = 2 + this.random.nextInt(2);
        while (a.count < size && retries) {
            if (!this.tryAdd(a))
                retries--;
        }
        return retries ? OK : { ok: false, fail: `addEdges` };
    }
    refine() { return OK; }
    addLateFeatures() { return OK; }
    inferScreens(a) {
        const result = super.inferScreens(a);
        if (!result.ok)
            return result;
        const meta = result.value;
        const arena = this.findArena(meta);
        const main = this.orig.rom.locations.GoaFortress_Karmine5.meta;
        meta.set(arena + 0x10, main.get(arena + 0x10));
        return result;
    }
    finish(newMeta) {
        const main = this.orig.rom.locations.GoaFortress_Karmine5.meta;
        const arena = this.findArena(newMeta);
        super.finish(newMeta);
        main.setExit(arena, 'seamless:up', [newMeta.id << 8 | arena, 'seamless:down']);
        newMeta.freeFlags = new Set(main.freeFlags);
    }
    reportFailure() {
        throw new Error(`Completely failed to shuffle Karmine Kensu map`);
    }
}
export class KarmineBasementShuffle extends CaveShuffle {
    constructor() {
        super(...arguments);
        this.looseRefine = true;
    }
    pickWidth() { return 8; }
    pickHeight() { return 5; }
    initialFill(a) {
        if (a.grid.height !== 5 || a.grid.width !== 8)
            throw new Error('bad size');
        Grid.writeGrid2d(a.grid, 0, KarmineBasementShuffle.PATTERN);
        a.count = 36;
        return OK;
    }
    addSpikes(a) {
        const dropped = this.random.nextInt(4);
        for (let y = 1; y < 10; y++) {
            for (let x = 0; x < 4; x++) {
                const i = 2 * x + 5 + y * 17;
                if (x === dropped) {
                    a.grid.data[i] = 'c';
                }
                else {
                    const c = a.grid.coord(i);
                    a.fixed.add(c);
                    if (y === 5) {
                        a.fixed.add(c + 8);
                        a.fixed.add(c + 16);
                        a.fixed.add(c - 8);
                        a.fixed.add(c - 16);
                    }
                }
            }
        }
        let stairs = 0;
        for (const c of this.random.ishuffle(a.grid.screens())) {
            if (stairs === 3)
                break;
            const mid = (c | 0x808);
            const up = (mid - 0x800);
            const down = (mid + 0x800);
            if (a.grid.get(mid) === 'c' &&
                a.grid.get(up) !== 's' &&
                a.grid.get(down) !== 's') {
                a.grid.set(mid, '<');
                a.fixed.add(mid);
                a.grid.set(up, '');
                a.grid.set(down, '');
                stairs++;
            }
        }
        const partitions = new Set(a.grid.partition().values());
        return partitions.size === 1;
    }
    addStairs() { return OK; }
}
KarmineBasementShuffle.PATTERN = [
    '                 ',
    '   ccccccccccc   ',
    '   c c c c c c   ',
    ' ccc s s s s ccc ',
    ' c c s s s s c c ',
    ' ccccscscscscccc ',
    ' c c s s s s c c ',
    ' ccc s s s s ccc ',
    '   c c c c c c   ',
    '   ccccccccccc   ',
    '                 ',
];
//# sourceMappingURL=data:application/json;base64,