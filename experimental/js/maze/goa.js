import { CaveShuffle } from './cave.js';
import { OK } from './maze.js';
import { E, N, S, W } from './grid.js';
import { ScreenFix } from '../rom/screenfix.js';
import { DefaultMap } from '../util.js';
export class LabyrinthShuffle extends CaveShuffle {
    initialFill(a) {
        const target = a.size + 3;
        const stair = (this.random.nextInt(a.w) << 4 | (a.h - 1) << 12 | 0x808);
        if (!a.grid.isBorder(W(stair)))
            a.fixed.add(W(stair, 2));
        if (!a.grid.isBorder(E(stair)))
            a.fixed.add(E(stair, 2));
        a.grid.set(stair, '>');
        a.fixed.add(stair);
        a.grid.set(N(stair), 'w');
        a.fixed.add(N(stair));
        a.fixed.add(W(stair));
        a.fixed.add(E(stair));
        const arena = (this.random.nextInt(a.w) << 4 | 0x808);
        const down = S(arena, 2);
        a.grid.set(arena, '<');
        a.fixed.add(arena);
        a.grid.set(S(arena), 'w');
        a.fixed.add(S(arena));
        a.grid.set(down, 'w');
        a.fixed.add(down);
        a.grid.set(S(down), 'w');
        a.fixed.add(S(down));
        a.fixed.add(W(down));
        a.fixed.add(E(down));
        if (!this.tryConnect(a, N(stair, 2), S(down, 2), 'w', 10)) {
            return { ok: false, fail: `initial connect` };
        }
        while (a.count < target) {
            if (!this.tryAddLoop(a, 'w', 10))
                return { ok: false, fail: `add loops` };
        }
        return OK;
    }
    refine() { return OK; }
    refineEdges() { return true; }
    addArenas() { return true; }
    addStairs() { return OK; }
    refineMetascreens(a, meta) {
        console.log(meta.show());
        for (let y = 0; y < meta.height; y++) {
            for (let x = 0; x < meta.width; x++) {
                const pos = y << 4 | x;
                const scr = meta.get(pos);
                const edge = scr.edgeIndex('w');
                if (scr.hasFeature('arena')) {
                    this.arena = pos + 0x10 << 8 | 1;
                }
                else if (edge === 5) {
                    if (pos < 16 || !meta.get(pos - 16).hasFeature('arena')) {
                        meta.set(pos, meta.rom.metascreens.goaWideHallNS_stairs);
                        const c = ((pos << 8 | pos << 4) & 0xf0f0 | 0x808);
                        a.grid.set(c, 'H');
                    }
                }
                else if (edge === 1) {
                    this.stair = pos << 8 | 2;
                }
            }
        }
        this.reachable = undefined;
        if (!this.checkMeta(meta))
            return { ok: false, fail: `initial meta check` };
        console.log(meta.show());
        const deadEnd = this.orig.rom.metascreens.goaWideHallNS_deadEnd;
        for (let x = 0; x < meta.width; x++) {
            for (let y = 0; y < meta.height; y++) {
                const c = (y << 12 | x << 4 | 0x808);
                let len = 0;
                while (y + len < meta.height &&
                    a.grid.get(c + len * 0x1000) === 'H') {
                    len++;
                }
                if (!len)
                    continue;
                const opts = [new Map(), new Map()];
                for (let i = 0; i < len; i++) {
                    opts[i & 1].set((y + i) << 4 | x, deadEnd);
                }
                let found = false;
                for (const opt of this.random.ishuffle(opts)) {
                    if (!opt.size) {
                        found = true;
                        continue;
                    }
                    if (!this.checkMeta(meta, opt))
                        continue;
                    for (const [pos, s] of opt) {
                        meta.set(pos, s);
                        a.grid.set(c + 0x1000 * ((pos >> 4) - y), '=');
                    }
                    found = true;
                    break;
                }
                if (!found)
                    return { ok: false, fail: `could not rectify hallway` };
                y += len;
            }
        }
        return super.refineMetascreens(a, meta);
    }
    checkMeta(meta, repl) {
        const opts = repl ? { with: repl } : {};
        const parts = meta.traverse(opts);
        const part = parts.get(this.stair);
        if (part !== parts.get(this.arena)) {
            console.log(`stair not connected to arena\n${meta.show()}`);
            return false;
        }
        if (this.reachable == null) {
            if (part && part.size < parts.size * 0.95) {
                console.log(`too small`);
                return false;
            }
            this.reachable = part === null || part === void 0 ? void 0 : part.size;
            return true;
        }
        else {
            if ((part === null || part === void 0 ? void 0 : part.size) > this.reachable * 0.95) {
                return true;
            }
            return false;
        }
    }
}
export function fixLabyrinthScreens(rom, random) {
    var _a;
    const { metatilesets: { cave, pyramid, labyrinth, iceCave } } = rom;
    rom.metascreens.registerFix(ScreenFix.LabyrinthParapets, 1);
    {
        for (const ts of [labyrinth, pyramid]) {
            ts.getTile(0x2b).copyFrom(0x19).replaceIn(...ts);
            ts.getTile(0xba).copyFrom(0x1b).replaceIn(...ts);
        }
        iceCave.getTile(0x17).copyFrom(0x19).replaceIn(...iceCave);
        iceCave.getTile(0x18).copyFrom(0x1b).replaceIn(...iceCave);
        for (const ts of [iceCave, cave, pyramid]) {
            ts.getTile(0x19).copyFrom(0xc5);
            ts.getTile(0x1b).copyFrom(0xc5);
        }
        labyrinth.getTile(0x19).copyFrom(0xc6).setAlternative(0xc5);
        labyrinth.getTile(0x1b).copyFrom(0xc4).setAlternative(0xc5);
    }
    const bySid = new DefaultMap(() => []);
    for (const s of rom.metatilesets.labyrinth) {
        bySid.get(s.sid).push(s);
    }
    for (const [sid, screens] of bySid) {
        const screen = rom.screens[sid];
        const remove = screens.map(s => { var _a; return (_a = s.data.tilesets.labyrinth) === null || _a === void 0 ? void 0 : _a.removeWall; });
        const [removed, ...rest] = new Set(remove.filter(w => w != null));
        if (removed != null) {
            screen.set2d(removed, [[0xc5, 0xc5], [0xd0, 0xc5]]);
            if (rest.length)
                throw new Error(`bad remove`);
            for (let i = 0; i < remove.length; i++) {
                if (remove[i] == null) {
                    screens[i].data.tilesets.labyrinth.addWall = [removed];
                }
            }
        }
        if (screens.length < 2)
            continue;
        if (screens.length > 2) {
            const deleted = random.pick(screens.filter(s => { var _a; return (_a = s.data.tilesets.labyrinth) === null || _a === void 0 ? void 0 : _a.addWall; }));
            screens.splice(screens.indexOf(deleted), 1);
            deleted.remove();
        }
        for (const s of screens) {
            const add = (_a = s.data.tilesets.labyrinth) === null || _a === void 0 ? void 0 : _a.addWall;
            if (add != null) {
                s.data.mod = 'block';
                for (const w of add)
                    screen.set2d(w, [[0x19, 0x19], [0x1b, 0x1b]]);
            }
            else {
                s.flag = 'always';
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,