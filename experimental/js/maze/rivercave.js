import { Monogrid, Cursor } from './monogrid.js';
import { OK } from './maze.js';
import { TwoStageCaveShuffle } from './twostage.js';
export class RiverCaveShuffle extends TwoStageCaveShuffle {
    constructor() {
        super(...arguments);
        this.early = 'r';
        this.maxAttempts = 250;
    }
    targetEarly() { var _a, _b; return (_b = (_a = this.params.features) === null || _a === void 0 ? void 0 : _a.river) !== null && _b !== void 0 ? _b : 0; }
    preinfer(a) {
        if ([...this.orig.exits()].length < 2)
            return OK;
        const override = new Map();
        for (let i = 0; i < a.grid.data.length; i++) {
            if (a.grid.data[i] === 'r')
                override.set(a.grid.coord(i), '');
        }
        const parts = a.grid.partition(override);
        const stairParts = [];
        for (let i = 0; i < a.grid.data.length; i++) {
            if (a.grid.data[i] === '<' || a.grid.data[i] === '>' ||
                (a.grid.data[i] && a.grid.isBorder(a.grid.coord(i)))) {
                stairParts.push(parts.get(a.grid.coord(i)));
            }
        }
        if (new Set(stairParts).size < stairParts.length) {
            return { ok: false, fail: `river didn't matter` };
        }
        return super.preinfer(a);
    }
    addLateFeatures(a) {
        return OK;
    }
    addArenas(a, arenas) {
        if (!arenas)
            return true;
        const g = a.grid;
        for (const c of this.random.ishuffle(a.grid.screens())) {
            const middle = (c | 0x808);
            const left = (middle - 8);
            const left2 = (left - 8);
            const right = (middle + 8);
            const right2 = (right + 8);
            const up = middle - 0x800;
            const down = middle + 0x800;
            if (g.get(middle) !== 'c')
                continue;
            if (g.get(up) !== 'c')
                continue;
            if (g.get(down) !== 'c')
                continue;
            const leftTile = g.isBorder(left) ? '' : this.extract(g, left2 - 0x808);
            const rightTile = g.isBorder(right) ? '' : this.extract(g, right2 - 0x808);
            if (/[^ c]/.test(leftTile + rightTile))
                continue;
            if (!g.isBorder(left)) {
                g.set(left, '');
                g.set(left2, '');
                g.set(left2 - 8, '');
                g.set(left2 - 0x800, '');
                g.set(left2 + 0x800, '');
            }
            if (!g.isBorder(right)) {
                g.set(right, '');
                g.set(right2, '');
                g.set(right2 + 8, '');
                g.set(right2 - 0x800, '');
                g.set(right2 + 0x800, '');
            }
            a.fixed.add(middle);
            a.fixed.add(up);
            a.fixed.add(down);
            g.set(middle, 'a');
            arenas--;
            if (!arenas) {
                this.pruneDisconnected(a);
                return true;
            }
        }
        return false;
    }
}
export class WaterfallRiverCaveShuffle extends RiverCaveShuffle {
    constructor() {
        super(...arguments);
        this.addBlocks = false;
    }
    initialFillEarly(a) {
        const g = new Monogrid(a.h, a.w, this.getValidEarlyScreens());
        const x0 = 2 + this.random.nextInt(a.w - 4);
        const x1 = 2 + this.random.nextInt(a.w - 4);
        const c = new Cursor(g, a.h - 1, x1);
        c.go(0);
        c.directedPath(this.random, 1, x0);
        c.go(0);
        a.grid.data = g.toGrid('r').data;
        this.addAllFixed(a);
        return OK;
    }
    addEdges(a) {
        let r = -1;
        const h = (a.h - 1) << 12 | 0x808;
        for (let x = 0; x < a.w; x++) {
            if (a.grid.get((h | (x << 4))) === 'r')
                r = x;
        }
        if (r < 0)
            throw new Error(`no river on bottom edge`);
        const c0 = (h | this.random.nextInt(r) << 4);
        const c1 = (h | (r + 1 + this.random.nextInt(a.w - 1 - r)) << 4);
        a.grid.set(c0, '>');
        a.grid.set(c0 - 8, '');
        a.grid.set(c0 + 8, '');
        a.grid.set(c1, '>');
        a.grid.set(c1 - 8, '');
        a.grid.set(c1 + 8, '');
        a.fixed.add(c0);
        a.fixed.add(c1);
        return OK;
    }
    addStairs() { return OK; }
    checkMeta(meta, repl) {
        const opts = repl ? { flight: true, with: repl } : { flight: true };
        const parts = meta.traverse(opts);
        return new Set(parts.values()).size === this.maxPartitions;
    }
}
//# sourceMappingURL=data:application/json;base64,