import { DefaultMap } from '../util.js';
const MapTypes = {
    Overworld: {
        ' ': 'blocked',
        '*': 'unmatched',
        '1': 'waterfall valley slope',
        '2': 'waterfall valley bridge to portoa ',
        '3': 'desert oasis ',
        '>': 'open right',
        '<': 'open left',
        '^': 'open top',
        'v': 'open bottom',
        'o': 'open',
        'l': 'long grass',
        's': 'short grass',
        'r': 'river',
        'n': 'narrow edge exit, centered',
        'b': 'boat',
    },
    Tower: {
        ' ': 'blocked',
        's': 'stairs',
        't': 'corridor',
    },
    Cave: {
        ' ': 'blocked',
        'w': 'wide',
        'c': 'corridor',
        'n': 'narrow',
        'r': 'river',
        'b': 'wrong side of bridge',
        's': 'spikes',
    },
    Swamp: {
        ' ': 'blocked',
        's': 'passage',
    },
    Mountain: {
        ' ': 'blocked',
        'p': 'path',
        's': 'slope',
        'w': 'waterfall',
        'l': 'ladder',
    },
};
const [] = [MapTypes];
const BORDER = { uid: 0xffff };
const EDGE_EXIT = { uid: 0xfffe };
class NeighborCache {
    constructor({ screens }) {
        this.allowed = [new Set(), new Set()];
        this.neighbors = new DefaultMap(() => new Set());
        for (const s1 of screens) {
            const e1 = s1.data.edges || '****';
            for (const s2 of screens) {
                const e2 = s2.data.edges || '****';
                if (e1[2] !== '*' && e1[2] === e2[0]) {
                    this.add(0, s1, s2);
                }
                if (e1[3] !== '*' && e1[3] === e2[1]) {
                    this.add(1, s1, s2);
                }
                for (const dir of (s1.data.allowed ? s1.data.allowed(s2) : [])) {
                    this.add(dir, s1, s2);
                }
            }
            const edges = [];
            for (const { type } of s1.data.exits || []) {
                const dir = edgeTypeMap[type];
                if (dir != null)
                    edges[dir] = EDGE_EXIT;
            }
            for (let dir = 0; dir < 4; dir++) {
                let edge = edges[dir];
                if (edge == null)
                    edge = borderMap[e1[dir]];
                if (edge != null)
                    this.add(dir, s1, edge);
            }
        }
    }
    add(dir, s1, s2) {
        const u1 = s1.uid;
        const u2 = s2.uid;
        this.allowed[dir & 1].add(dir & 2 ? u2 << 16 | u1 : u1 << 16 | u2);
        this.neighbors.get(u1 << 2 | dir).add(u2);
        this.neighbors.get(u2 << 2 | (dir ^ 2)).add(u1);
    }
}
const borderMap = {
    '*': EDGE_EXIT,
    ' ': EDGE_EXIT,
};
const edgeTypeMap = {
    'edge:top': 0,
    'edge:left': 1,
    'edge:bottom': 2,
    'edge:right': 3,
};
const caches = new DefaultMap(t => new NeighborCache(t));
export class Maze {
    constructor(random, width, height, tileset) {
        this.random = random;
        this.width = width;
        this.height = height;
        this.tileset = tileset;
        this.neighbors = caches.get(this.tileset);
        this.map = new Array((height + 2) << 4).fill(undefined);
        for (let x = 0; x < width; x++) {
            this.map[ind(-1, x)] = this.map[ind(height, x)] = BORDER.uid;
        }
        for (let y = 0; y < width; y++) {
            this.map[ind(y, -1)] = this.map[ind(y, width)] = BORDER.uid;
        }
    }
    inBounds(pos) {
        return (pos & 15) < this.width && pos > 15 && pos >>> 4 <= this.height;
    }
}
function ind(y, x) {
    return ((y + 1) << 4) + x;
}
//# sourceMappingURL=data:application/json;base64,