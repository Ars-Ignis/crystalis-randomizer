import { World } from './logic/world.js';
import { FlagSet } from './flagset.js';
import { Rom } from './rom.js';
import { deterministic, deterministicPreParse } from './pass/deterministic.js';
import { DefaultMap } from './util.js';
const ITEMS = `
sword-of-wind $00
sword-of-fire $01
sword-of-water $02
sword-of-thunder $03
windmill-key $32
statue-of-onyx $25
insect-flute $27
key-to-prison $33
flute-of-lime $28

ball-of-wind $05 
ball-of-fire $07
ball-of-water $09
ball-of-thunder $0b
kirisa-plant $3c
alarm-flute $31
fog-lamp $35
shell-flute $36
broken-statue $38
eye-glasses $37
glowing-lamp $39

tornado-bracelet $06
flame-bracelet $08
blizzard-bracelet $0a
storm-bracelet $0c
love-pendant $3b
key-to-styx $34
statue-of-gold $3a
sacred-shield $12
ivory-statue $3d

rabbit-boots $2e
gas-mask $29
shield-ring $30
iron-necklace $2c
leather-boots $2f
power-ring $2a
warrior-ring $2b
deos-pendant $2d
bow-of-moon $3e
bow-of-sun $3f

refresh $41
paralysis $42
telepathy $43
teleport $44
recover $45
barrier $46
change $47
flight $48
psycho-armor $1c
bow-of-truth $40
`;
const SLOTS = [
    [0x00, 121, 192],
    [0x01, 274, 176],
    [0x02, 335, 123],
    [0x03, 77, 10],
    [0x05, 89, 107],
    [0x06, 115, 224],
    [0x07, 282, 187],
    [0x08, 47, 182],
    [0x09, 251, 232],
    [0x0a, 206, 249],
    [0x0b, 83, 63],
    [0x0c, 23, 9],
    [0x12, 49, 48],
    [0x14, 77, 2],
    [0x76, 70, 3],
    [0x77, 84, 3],
    [0x1b, 168, 96],
    [0x1c, 199, 110],
    [0x1d, 82, 95],
    [0x1e, 82, 101],
    [0x1f, 346, 147],
    [0x70, 346, 153],
    [0x71, 346, 159],
    [0x20, 126, 52],
    [0x21, 227, 97],
    [0x22, 256, 73],
    [0x23, 58, 115],
    [0x24, 82, 113],
    [0x25, 189, 180],
    [0x26, 18, 172],
    [0x27, 267, 185],
    [0x28, 275, 147],
    [0x29, 147, 206],
    [0x2a, 172, 104],
    [0x2b, 203, 5],
    [0x2c, 249, 69],
    [0x2d, 191, 110],
    [0x2e, 89, 99],
    [0x2f, 164, 104],
    [0x30, 319, 123],
    [0x72, 320, 130],
    [0x32, 105, 94],
    [0x33, 64, 198],
    [0x34, 83, 71],
    [0x35, 345, 140],
    [0x36, 301, 119],
    [0x37, 233, 118],
    [0x38, 234, 88],
    [0x39, 295, 92],
    [0x3a, 234, 49],
    [0x3b, 274, 117],
    [0x3c, 338, 226],
    [0x3d, 23, 17],
    [0x3e, 206, 241],
    [0x3f, 101, 6],
    [0x40, 207, 110],
    [0x41, 92, 117],
    [0x42, 279, 126],
    [0x43, 202, 138],
    [0x44, 124, 202],
    [0x45, 304, 128],
    [0x46, 248, 35],
    [0x47, 277, 3],
    [0x48, 15, 25],
    [0x50, 82, 107],
    [0x52, 134, 219],
    [0x53, 59, 219],
    [0x54, 52, 55],
    [0x55, 241, 97],
    [0x56, 123, 23],
    [0x74, 115, 3],
    [0x57, 70, 9],
    [0x75, 84, 9],
    [0x58, 32, 38],
    [0x79, 32, 16],
    [0x7a, 40, 16],
    [0x7b, 40, 38],
    [0x5a, 161, 97],
    [0x10, 327, 123],
    [0x5c, 256, 79],
    [0x5d, 36, 139],
    [0x5e, 14, 229],
    [0x5f, 345, 225],
    [0x60, 18, 94],
    [0x61, 234, 96],
    [0x62, 18, 118],
    [0x63, 36, 54],
    [0x64, 175, 97],
    [0x65, 139, 40],
    [0x66, 66, 160],
    [0x69, 131, 201],
    [0x6a, 76, 226],
    [0x6b, 18, 100],
    [0x6c, 193, 103],
    [0x78, 199, 103],
    [0x6d, 205, 103],
    [0x73, 256, 67],
    [0x6e, 24, 38],
    [0x6f, 44, 97],
];
const KEY = new Set([0x10, 0x12, 0x23, 0x26, 0x61]);
const TRADES = new Set([0x29, 0x3e, 0x44, 0x47, 0x48]);
class Graph {
    constructor(rom, world, flags) {
        this.rom = rom;
        this.world = world;
        this.flags = flags;
        this.slots = new Map();
        this.items = new Map();
        this.slotElts = new Map();
        this.has = new Set();
        window.GRAPH = this;
        this.graph = world.getLocationList();
        this.grid = document.getElementsByClassName('grid')[0];
        this.map = document.getElementsByClassName('map')[0];
        const unlocks = new DefaultMap(() => new Set());
        for (const [slot, req] of this.graph.requirements) {
            for (const cs of req) {
                for (const c of cs) {
                    unlocks.get(c).add(slot);
                }
            }
        }
        this.unlocks = new Map([...unlocks].map(([i, s]) => [i, [...s]]));
        const toggle = (e) => {
            let t = e.target;
            while (t && !t.dataset['slot']) {
                t = t.parentElement;
            }
            if (!t)
                return;
            const id = Number(t.dataset['slot']);
            const has = t.classList.toggle('got');
            if (t.dataset['item']) {
                has ? this.has.add(id) : this.has.delete(id);
            }
            this.update();
            e.preventDefault();
        };
        this.grid.addEventListener('click', toggle);
    }
    addSlot(slotId, x, y) {
        const div = document.createElement('div');
        const itemget = this.rom.itemGets[slotId];
        const item = itemget && this.rom.items[itemget.itemId];
        if (item && item.unique || KEY.has(slotId)) {
            div.classList.add('key');
            x--;
            y--;
        }
        x--;
        y--;
        div.dataset['slot'] = String(slotId);
        div.style.left = x + 'px';
        div.style.top = y + 'px';
        const inner = document.createElement('div');
        div.appendChild(inner);
        inner.textContent =
            slotId >= 0x70 ?
                'Mimic' :
                this.rom.items[itemget.itemId].messageName.replace(' ', '\xa0');
        if (this.flags.randomizeTrades() && TRADES.has(slotId)) {
            div.classList.add('boss');
        }
        this.slotElts.set(slotId, div);
        this.map.appendChild(div);
    }
    addItem(cls, hex) {
        const id = Number.parseInt(hex.substring(1), 16);
        const outer = document.getElementsByClassName(cls)[0];
        const inner = document.createElement('div');
        outer.appendChild(inner);
        outer.dataset['slot'] = String(id);
        outer.dataset['item'] = String(id);
    }
    addExtraFlags() {
    }
    update() {
        for (const elt of this.slotElts.values()) {
            elt.dataset['state'] = elt.classList.contains('got') ? '' : 'blocked';
        }
        const reachable = this.traverse();
        for (const slot of reachable) {
            if ((slot & ~0x7f) !== 0x100)
                continue;
            const elt = this.slotElts.get(slot & 0xff);
            if (elt && !elt.classList.contains('got')) {
                elt.dataset['state'] = 'available';
            }
        }
    }
    traverse() {
        const has = new Set([...this.has].map(i => i | 0x200));
        const reachable = new Set();
        const slots = new Set();
        const queue = new Set(this.graph.requirements.keys());
        for (const n of queue) {
            queue.delete(n);
            if (reachable.has(n))
                continue;
            const needed = this.graph.requirements.get(n);
            for (const route of needed) {
                if (!containsAll(has, route))
                    continue;
                reachable.add(n);
                const items = [];
                if ((n & ~0x7f) === 0x100) {
                    slots.add((n & 0xff));
                }
                else {
                    if (isItem(n))
                        items.push((n & 0xff));
                    has.add(n);
                }
                for (const item of has) {
                    for (const j of this.unlocks.get(item) || []) {
                        if (!this.graph.requirements.has(j)) {
                            console.dir(this);
                            throw new Error(`Adding bad node ${j} from unlock ${item}`);
                        }
                        queue.add(j);
                    }
                }
                break;
            }
        }
        return reachable;
    }
}
function isItem(x) {
    return (x & ~0x7f) === 0x200;
}
function containsAll(set, want) {
    for (const elem of want) {
        if (!set.has(elem))
            return false;
    }
    return true;
}
let flags = '@Casual';
for (const arg of location.hash.substring(1).split('&')) {
    const [key, value] = arg.split('=');
    if (key === 'flags') {
        flags = decodeURIComponent(value);
    }
}
function initItemGrants(rom) {
    rom.itemGets.actionGrants = new Map([
        [0x25, 0x29],
        [0x39, 0x3a],
        [0x3b, 0x47],
        [0x3c, 0x3e],
        [0x84, 0x46],
        [0xb2, 0x42],
        [0xb4, 0x41],
    ]);
}
async function main() {
    const rom = await Rom.load(deterministicPreParse);
    rom.flags.defrag();
    initItemGrants(rom);
    const flagset = new FlagSet(flags);
    deterministic(rom, flagset);
    const world = new World(rom, flagset, true);
    const graph = new Graph(rom, world, flagset);
    for (let item of ITEMS.split('\n')) {
        item = item.replace(/#.*/, '').trim();
        if (!item)
            continue;
        graph.addItem(...item.split(/ +/g));
    }
    for (const slot of SLOTS) {
        graph.addSlot(...slot);
    }
    graph.addExtraFlags();
    graph.update();
    document.getElementById('toggle-map').addEventListener('click', () => {
        graph.map.classList.toggle('hidden');
    });
    document.getElementById('clear-all').addEventListener('click', () => {
        for (const e of graph.grid.querySelectorAll('.got')) {
            e.classList.remove('got');
        }
        graph.has = new Set();
        graph.update();
    });
}
;
main();
//# sourceMappingURL=data:application/json;base64,