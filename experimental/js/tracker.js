import { World } from './logic/world.js';
import { FlagSet } from './flagset.js';
import { Rom } from './rom.js';
import { deterministic, deterministicPreParse } from './pass/deterministic.js';
import { DefaultMap } from './util.js';
const ITEMS = `
sword-of-wind $00 sort-of-wind
sword-of-fire $01 sort-of-fire
sword-of-water $02 sort-of-water
sword-of-thunder $03 sort-of-thunder
windmill-key $32
statue-of-onyx $25 onyx-statue
insect-flute $27
key-to-prison $33 prison-key
flute-of-lime $28

ball-of-wind $05 orb-of-wind
ball-of-fire $07 orb-of-fire
ball-of-water $09 orb-of-water
ball-of-thunder $0b orb-of-thunder
kirisa-plant $3c carissa-plant
alarm-flute $31
fog-lamp $35
shell-flute $36
broken-statue $38
eye-glasses $37 eyeglasses
glowing-lamp $39

tornado-bracelet $06
flame-bracelet $08
blizzard-bracelet $0a
storm-bracelet $0c
love-pendant $3b
key-to-styx $34 key-to-stxy
statue-of-gold $3a gold-statue
sacred-shield $12
ivory-statue $3d

rabbit-boots $2e
gas-mask $29 hazard-suit
shield-ring $30
iron-necklace $2c
leather-boots $2f speed-boots
power-ring $2a
warrior-ring $2b
deos-pendant $2d deo dio d-o t-o deal
bow-of-moon $3e moon
bow-of-sun $3f sun

refresh $41
paralysis $42
telepathy $43
teleport $44
recover $45
barrier $46
change $47
flight $48
psycho-armor $1c
bow-of-truth $40 truth
`;
const SLOTS = [
    [0x00, 121, 192],
    [0x01, 274, 176],
    [0x02, 335, 123],
    [0x03, 77, 10],
    [0x05, 89, 107],
    [0x06, 115, 224],
    [0x07, 282, 187],
    [0x08, 47, 182],
    [0x09, 251, 232],
    [0x0a, 206, 249],
    [0x0b, 83, 63],
    [0x0c, 23, 9],
    [0x12, 49, 48],
    [0x14, 77, 2],
    [0x76, 70, 3],
    [0x77, 84, 3],
    [0x1b, 168, 96],
    [0x1c, 199, 110],
    [0x1d, 82, 95],
    [0x1e, 82, 101],
    [0x1f, 346, 147],
    [0x70, 346, 153],
    [0x71, 346, 159],
    [0x20, 126, 52],
    [0x21, 227, 97],
    [0x22, 256, 73],
    [0x23, 58, 115],
    [0x24, 82, 113],
    [0x25, 189, 180],
    [0x26, 18, 172],
    [0x27, 267, 185],
    [0x28, 275, 147],
    [0x29, 147, 206],
    [0x2a, 172, 104],
    [0x2b, 203, 5],
    [0x2c, 249, 69],
    [0x2d, 191, 110],
    [0x2e, 89, 99],
    [0x2f, 164, 104],
    [0x30, 319, 123],
    [0x72, 320, 130],
    [0x32, 105, 94],
    [0x33, 64, 198],
    [0x34, 83, 71],
    [0x35, 345, 140],
    [0x36, 301, 119],
    [0x37, 233, 118],
    [0x38, 234, 88],
    [0x39, 295, 92],
    [0x3a, 234, 49],
    [0x3b, 274, 117],
    [0x3c, 338, 226],
    [0x3d, 23, 17],
    [0x3e, 206, 241],
    [0x3f, 101, 6],
    [0x40, 207, 110],
    [0x41, 92, 117],
    [0x42, 279, 126],
    [0x43, 202, 138],
    [0x44, 124, 202],
    [0x45, 304, 128],
    [0x46, 248, 35],
    [0x47, 277, 3],
    [0x48, 15, 25],
    [0x50, 82, 107],
    [0x52, 134, 219],
    [0x53, 59, 219],
    [0x54, 52, 55],
    [0x55, 241, 97],
    [0x56, 123, 23],
    [0x74, 115, 3],
    [0x57, 70, 9],
    [0x75, 84, 9],
    [0x58, 32, 38],
    [0x79, 32, 16],
    [0x7a, 40, 16],
    [0x7b, 40, 38],
    [0x5a, 161, 97],
    [0x10, 327, 123],
    [0x5c, 256, 79],
    [0x5d, 36, 139],
    [0x5e, 14, 229],
    [0x5f, 345, 225],
    [0x60, 18, 94],
    [0x61, 234, 96],
    [0x62, 18, 118],
    [0x63, 36, 54],
    [0x64, 175, 97],
    [0x65, 139, 40],
    [0x66, 66, 160],
    [0x69, 131, 201],
    [0x6a, 76, 226],
    [0x6b, 18, 100],
    [0x6c, 193, 103],
    [0x78, 199, 103],
    [0x6d, 205, 103],
    [0x73, 256, 67],
    [0x6e, 24, 38],
    [0x6f, 44, 97],
];
const KEY = new Set([0x10, 0x12, 0x23, 0x26, 0x61]);
const TRADES = new Set([0x29, 0x3e, 0x44, 0x47, 0x48]);
class Graph {
    constructor(rom, world, flags) {
        this.rom = rom;
        this.world = world;
        this.flags = flags;
        this.slots = new Map();
        this.items = new Map();
        this.slotElts = new Map();
        this.has = new Set();
        this.names = new Map();
        window.GRAPH = this;
        this.graph = world.getLocationList();
        this.grid = document.getElementsByClassName('grid')[0];
        this.map = document.getElementsByClassName('map')[0];
        const unlocks = new DefaultMap(() => new Set());
        for (const [slot, req] of this.graph.requirements) {
            for (const cs of req) {
                for (const c of cs) {
                    unlocks.get(c).add(slot);
                }
            }
        }
        this.unlocks = new Map([...unlocks].map(([i, s]) => [i, [...s]]));
        const toggle = (e) => {
            let t = e.target;
            while (t && !t.dataset['slot']) {
                t = t.parentElement;
            }
            if (!t)
                return;
            this.toggle(t);
            e.preventDefault();
        };
        this.grid.addEventListener('click', toggle);
    }
    toggle(t, val) {
        const id = Number(t.dataset['slot']);
        const has = t.classList.toggle('got', val);
        if (t.dataset['item']) {
            has ? this.has.add(id) : this.has.delete(id);
        }
        this.update();
    }
    addSlot(slotId, x, y) {
        const div = document.createElement('div');
        const itemget = this.rom.itemGets[slotId];
        const item = itemget && this.rom.items[itemget.itemId];
        if (item && item.unique || KEY.has(slotId)) {
            div.classList.add('key');
            x--;
            y--;
        }
        x--;
        y--;
        div.dataset['slot'] = String(slotId);
        div.style.left = x + 'px';
        div.style.top = y + 'px';
        const inner = document.createElement('div');
        div.appendChild(inner);
        inner.textContent =
            slotId >= 0x70 ?
                'Mimic' :
                this.rom.items[itemget.itemId].messageName.replace(' ', '\xa0');
        if (this.flags.randomizeTrades() && TRADES.has(slotId)) {
            div.classList.add('boss');
        }
        this.slotElts.set(slotId, div);
        this.map.appendChild(div);
    }
    addItem(cls, hex, ...otherNames) {
        const id = Number.parseInt(hex.substring(1), 16);
        const outer = document.getElementsByClassName(cls)[0];
        const inner = document.createElement('div');
        outer.appendChild(inner);
        outer.dataset['slot'] = String(id);
        outer.dataset['item'] = String(id);
        this.names.set(cls.replace(/-/g, ' '), outer);
        for (const name of otherNames) {
            this.names.set(name.replace(/-/g, ' '), outer);
        }
    }
    addExtraFlags() {
    }
    update() {
        for (const elt of this.slotElts.values()) {
            elt.dataset['state'] = elt.classList.contains('got') ? '' : 'blocked';
        }
        const reachable = this.traverse();
        for (const slot of reachable) {
            if ((slot & ~0x7f) !== 0x100)
                continue;
            const elt = this.slotElts.get(slot & 0xff);
            if (elt && !elt.classList.contains('got')) {
                elt.dataset['state'] = 'available';
            }
        }
    }
    traverse() {
        const has = new Set([...this.has].map(i => i | 0x200));
        const reachable = new Set();
        const slots = new Set();
        const queue = new Set(this.graph.requirements.keys());
        for (const n of queue) {
            queue.delete(n);
            if (reachable.has(n))
                continue;
            const needed = this.graph.requirements.get(n);
            for (const route of needed) {
                if (!containsAll(has, route))
                    continue;
                reachable.add(n);
                const items = [];
                if ((n & ~0x7f) === 0x100) {
                    slots.add((n & 0xff));
                }
                else {
                    if (isItem(n))
                        items.push((n & 0xff));
                    has.add(n);
                }
                for (const item of has) {
                    for (const j of this.unlocks.get(item) || []) {
                        if (!this.graph.requirements.has(j)) {
                            console.dir(this);
                            throw new Error(`Adding bad node ${j} from unlock ${item}`);
                        }
                        queue.add(j);
                    }
                }
                break;
            }
        }
        return reachable;
    }
    addVoiceRecognition() {
        try {
            let stopped = false;
            const rec = this.recognition = new SpeechRecognition();
            const grammar = new SpeechGrammarList();
            grammar.addFromString(`
          #JSGF V1.0;
          grammar command;
          public <item> = ${[...this.names.keys()].join(' | ')};
          public <command> = track <item> | untrack <item>;
      `, 1);
            rec.lang = 'en-US';
            rec.grammars = grammar;
            rec.interimResults = false;
            rec.maxAlternatives = 10;
            rec.onstart = () => { stopped = false; };
            rec.onresult = (e) => {
                const result = e.results[e.results.length - 1];
                if (!result.isFinal)
                    return;
                let matched = false;
                for (const alt of result) {
                    const command = alt.transcript.toLowerCase().replace(/[^a-z ]/g, '');
                    if (command === 'stop listening')
                        matched = stopped = true;
                    const match = /([auo][nm] ?)?tr[au]c?k?(?:ed)? ?(.+)/.exec(command);
                    if (!match)
                        continue;
                    const el = this.names.get(match[2]);
                    if (!el)
                        continue;
                    this.toggle(el, !match[1]);
                    matched = true;
                    break;
                }
                if (!matched) {
                    console.log(`No match: ${[...result].map(r => r.transcript).join(', ')}`);
                }
                rec.stop();
            };
            rec.onend = () => { if (!stopped)
                rec.start(); };
            rec.start();
            return true;
        }
        catch (err) {
            console.error(err);
            return false;
        }
    }
}
function polyfill(...names) {
    const win = window;
    for (let n of names) {
        if (typeof win[n] === 'function') {
            win[names[0]] = win[n];
            return;
        }
    }
    console.error(`Could not polyfill ${names[0]}`);
}
polyfill('SpeechRecognition', 'webkitSpeechRecognition');
polyfill('SpeechGrammarList', 'webkitSpeechGrammarList');
function isItem(x) {
    return (x & ~0x7f) === 0x200;
}
function containsAll(set, want) {
    for (const elem of want) {
        if (!set.has(elem))
            return false;
    }
    return true;
}
let voice = false;
let flags = '@Casual';
for (const arg of location.hash.substring(1).split('&')) {
    const [key, value] = arg.split('=');
    if (key === 'flags') {
        flags = decodeURIComponent(value);
    }
    if (key === 'voice') {
        voice = true;
    }
}
function initItemGrants(rom) {
    rom.itemGets.actionGrants = new Map([
        [0x25, 0x29],
        [0x39, 0x3a],
        [0x3b, 0x47],
        [0x3c, 0x3e],
        [0x84, 0x46],
        [0xb2, 0x42],
        [0xb4, 0x41],
    ]);
}
async function main() {
    const rom = await Rom.load(deterministicPreParse);
    rom.flags.defrag();
    initItemGrants(rom);
    const flagset = new FlagSet(flags);
    deterministic(rom, flagset);
    const world = new World(rom, flagset, true);
    const graph = new Graph(rom, world, flagset);
    for (let item of ITEMS.split('\n')) {
        item = item.replace(/#.*/, '').trim();
        if (!item)
            continue;
        graph.addItem(...item.split(/ +/g));
    }
    for (const slot of SLOTS) {
        graph.addSlot(...slot);
    }
    graph.addExtraFlags();
    graph.update();
    document.getElementById('toggle-map').addEventListener('click', () => {
        graph.map.classList.toggle('hidden');
    });
    document.getElementById('clear-all').addEventListener('click', () => {
        for (const e of graph.grid.querySelectorAll('.got')) {
            e.classList.remove('got');
        }
        graph.has = new Set();
        graph.update();
    });
    if (voice)
        graph.addVoiceRecognition();
    window.graph = graph;
}
;
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy90cmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUN2QyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDN0IsT0FBTyxFQUFDLGFBQWEsRUFBRSxxQkFBcUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRTdFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFckMsTUFBTSxLQUFLLEdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNEckIsQ0FBQztBQUVGLE1BQU0sS0FBSyxHQUFxRDtJQUM5RCxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBRyxDQUFDLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFHLENBQUMsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBRyxDQUFDLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFHLENBQUMsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUVmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRyxDQUFDLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFDLEdBQUcsQ0FBQztJQUVmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFHLENBQUMsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBRyxDQUFDLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUVmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRyxFQUFFLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBQyxHQUFHLENBQUM7SUFHZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLENBQUM7SUFDZixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUMsSUFBSSxFQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7Q0FDUCxDQUFDO0FBR1gsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENB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QUNuRCxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtRQUNELEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN0QixLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLEtBQUs7UUFBRSxLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUN0QyxNQUFjLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNoQyxDQUFDO0FBQUEsQ0FBQztBQUlGLElBQUksRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSXRlbSB0cmFja2VyIGZvciB3ZWIuXG4vLyBVc2VzIGZsYWdzZXQgdG8gZmlndXJlIG91dCBhY3R1YWwgZGVwZW5kZW5jaWVzLlxuXG5pbXBvcnQge1dvcmxkfSBmcm9tICcuL2xvZ2ljL3dvcmxkLmpzJztcbmltcG9ydCB7RmxhZ1NldH0gZnJvbSAnLi9mbGFnc2V0LmpzJztcbmltcG9ydCB7Um9tfSBmcm9tICcuL3JvbS5qcyc7XG5pbXBvcnQge2RldGVybWluaXN0aWMsIGRldGVybWluaXN0aWNQcmVQYXJzZX0gZnJvbSAnLi9wYXNzL2RldGVybWluaXN0aWMuanMnO1xuaW1wb3J0IHtMb2NhdGlvbkxpc3QsIEl0ZW1JZCwgU2xvdElkfSBmcm9tICcuL2xvZ2ljL2dyYXBoLmpzJztcbmltcG9ydCB7RGVmYXVsdE1hcH0gZnJvbSAnLi91dGlsLmpzJztcblxuY29uc3QgSVRFTVM6IHN0cmluZyA9IGBcbnN3b3JkLW9mLXdpbmQgJDAwIHNvcnQtb2Ytd2luZFxuc3dvcmQtb2YtZmlyZSAkMDEgc29ydC1vZi1maXJlXG5zd29yZC1vZi13YXRlciAkMDIgc29ydC1vZi13YXRlclxuc3dvcmQtb2YtdGh1bmRlciAkMDMgc29ydC1vZi10aHVuZGVyXG53aW5kbWlsbC1rZXkgJDMyXG5zdGF0dWUtb2Ytb255eCAkMjUgb255eC1zdGF0dWVcbmluc2VjdC1mbHV0ZSAkMjdcbmtleS10by1wcmlzb24gJDMzIHByaXNvbi1rZXlcbmZsdXRlLW9mLWxpbWUgJDI4XG5cbmJhbGwtb2Ytd2luZCAkMDUgb3JiLW9mLXdpbmRcbmJhbGwtb2YtZmlyZSAkMDcgb3JiLW9mLWZpcmVcbmJhbGwtb2Ytd2F0ZXIgJDA5IG9yYi1vZi13YXRlclxuYmFsbC1vZi10aHVuZGVyICQwYiBvcmItb2YtdGh1bmRlclxua2lyaXNhLXBsYW50ICQzYyBjYXJpc3NhLXBsYW50XG5hbGFybS1mbHV0ZSAkMzFcbmZvZy1sYW1wICQzNVxuc2hlbGwtZmx1dGUgJDM2XG5icm9rZW4tc3RhdHVlICQzOFxuZXllLWdsYXNzZXMgJDM3IGV5ZWdsYXNzZXNcbmdsb3dpbmctbGFtcCAkMzlcblxudG9ybmFkby1icmFjZWxldCAkMDZcbmZsYW1lLWJyYWNlbGV0ICQwOFxuYmxpenphcmQtYnJhY2VsZXQgJDBhXG5zdG9ybS1icmFjZWxldCAkMGNcbmxvdmUtcGVuZGFudCAkM2JcbmtleS10by1zdHl4ICQzNCBrZXktdG8tc3R4eVxuc3RhdHVlLW9mLWdvbGQgJDNhIGdvbGQtc3RhdHVlXG5zYWNyZWQtc2hpZWxkICQxMlxuaXZvcnktc3RhdHVlICQzZFxuXG5yYWJiaXQtYm9vdHMgJDJlXG5nYXMtbWFzayAkMjkgaGF6YXJkLXN1aXRcbnNoaWVsZC1yaW5nICQzMFxuaXJvbi1uZWNrbGFjZSAkMmNcbmxlYXRoZXItYm9vdHMgJDJmIHNwZWVkLWJvb3RzXG5wb3dlci1yaW5nICQyYVxud2Fycmlvci1yaW5nICQyYlxuZGVvcy1wZW5kYW50ICQyZCBkZW8gZGlvIGQtbyB0LW8gZGVhbFxuYm93LW9mLW1vb24gJDNlIG1vb25cbmJvdy1vZi1zdW4gJDNmIHN1blxuXG5yZWZyZXNoICQ0MVxucGFyYWx5c2lzICQ0MlxudGVsZXBhdGh5ICQ0M1xudGVsZXBvcnQgJDQ0XG5yZWNvdmVyICQ0NVxuYmFycmllciAkNDZcbmNoYW5nZSAkNDdcbmZsaWdodCAkNDhcbnBzeWNoby1hcm1vciAkMWNcbmJvdy1vZi10cnV0aCAkNDAgdHJ1dGhcbmA7XG5cbmNvbnN0IFNMT1RTOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXT4gPSBbXG4gIFsweDAwLCAxMjEsMTkyXSwgLy8gc3dvcmQgb2Ygd2luZFxuICBbMHgwMSwgMjc0LDE3Nl0sIC8vIHN3b3JkIG9mIGZpcmVcbiAgWzB4MDIsIDMzNSwxMjNdLCAvLyBzd29yZCBvZiB3YXRlclxuICBbMHgwMywgIDc3LCAxMF0sIC8vIHN3b3JkIG9mIHRodW5kZXJcbiAgWzB4MDUsICA4OSwxMDddLCAvLyBiYWxsIG9mIHdpbmRcbiAgWzB4MDYsIDExNSwyMjRdLCAvLyB0b3JuYWRvIGJyYWNlbGV0XG4gIFsweDA3LCAyODIsMTg3XSwgLy8gYmFsbCBvZiBmaXJlXG4gIFsweDA4LCAgNDcsMTgyXSwgLy8gZmxhbWUgYnJhY2VsZXRcbiAgWzB4MDksIDI1MSwyMzJdLCAvLyBiYWxsIG9mIHdhdGVyXG4gIFsweDBhLCAyMDYsMjQ5XSwgLy8gYmxpenphcmQgYnJhY2VsZXRcbiAgWzB4MGIsICA4MywgNjNdLCAvLyBiYWxsIG9mIHRodW5kZXJcbiAgWzB4MGMsICAyMywgIDldLCAvLyBzdG9ybSBicmFjZWxldFxuICBbMHgxMiwgIDQ5LCA0OF0sIC8vIHNhY3JlZCBzaGllbGRcbiAgWzB4MTQsICA3NywgIDJdLCAvLyBwc3ljaG8gc2hpZWxkXG4gIFsweDc2LCAgNzAsICAzXSwgLy8gcHN5Y2hvIHNoaWVsZCBtaW1pYyAxXG4gIFsweDc3LCAgODQsICAzXSwgLy8gcHN5Y2hvIHNoaWVsZCBtaW1pYyAyXG4gIFsweDFiLCAxNjgsIDk2XSwgLy8gYmF0dGxlIHN1aXRcbiAgWzB4MWMsIDE5OSwxMTBdLCAvLyBwc3ljaG8gYXJtb3JcbiAgWzB4MWQsICA4MiwgOTVdLCAvLyBtZWRpY2FsIGhlcmIgc2VhbGVkIGNhdmVcbiAgWzB4MWUsICA4MiwxMDFdLCAvLyBhbnRpZG90ZSBzZWFsZWQgY2F2ZVxuICBbMHgxZiwgMzQ2LDE0N10sIC8vIGx5c2lzIHBsYW50IGZvZyBsYW1wXG4gIFsweDcwLCAzNDYsMTUzXSwgLy8gZm9nIGxhbXAgbWltaWMgMVxuICBbMHg3MSwgMzQ2LDE1OV0sIC8vIGZvZyBsYW1wIG1pbWljIDJcbiAgWzB4MjAsIDEyNiwgNTJdLCAvLyBmcnVpdCBvZiBsaW1lIG10IGh5ZHJhXG4gIFsweDIxLCAyMjcsIDk3XSwgLy8gZnJ1aXQgb2YgcG93ZXIgc2FiZXJhIHBhbGFjZVxuICBbMHgyMiwgMjU2LCA3M10sIC8vIG1hZ2ljIHJpbmcgZXZpbCBzcGlyaXQgaXNsYW5kXG4gIFsweDIzLCAgNTgsMTE1XSwgLy8gZnJ1aXQgb2YgcmVwdW4gc2FiZXJhIDJcbiAgWzB4MjQsICA4MiwxMTNdLCAvLyB3YXJwIGJvb3RzIHNlYWxlZCBjYXZlXG4gIFsweDI1LCAxODksMTgwXSwgLy8gc3RhdHVlIG9mIG9ueXhcbiAgWzB4MjYsICAxOCwxNzJdLCAvLyBvcGVsIHN0YXR1ZVxuICBbMHgyNywgMjY3LDE4NV0sIC8vIGluc2VjdCBmbHV0ZVxuICBbMHgyOCwgMjc1LDE0N10sIC8vIGZsdXRlIG9mIGxpbWVcbiAgWzB4MjksIDE0NywyMDZdLCAvLyBnYXMgbWFza1xuICBbMHgyYSwgMTcyLDEwNF0sIC8vIHBvd2VyIHJpbmdcbiAgWzB4MmIsIDIwMywgIDVdLCAvLyB3YXJyaW9yIHJpbmdcbiAgWzB4MmMsIDI0OSwgNjldLCAvLyBpcm9uIG5lY2tsYWNlXG4gIFsweDJkLCAxOTEsMTEwXSwgLy8gZGVvcyBwZW5kYW50XG4gIFsweDJlLCAgODksIDk5XSwgLy8gcmFiYml0IGJvb3RzXG4gIFsweDJmLCAxNjQsMTA0XSwgLy8gbGVhdGhlciBib290c1xuICBbMHgzMCwgMzE5LDEyM10sIC8vIHNoaWVsZCByaW5nXG4gIFsweDcyLCAzMjAsMTMwXSwgLy8gd2F0ZXJmYWxsIGNhdmUgbWltaWNcbiAgLy8gMzEgYWxhcm0gZmx1dGVcbiAgWzB4MzIsIDEwNSwgOTRdLCAvLyB3aW5kbWlsbCBrZXlcbiAgWzB4MzMsICA2NCwxOThdLCAvLyBrZXkgdG8gcHJpc29uXG4gIFsweDM0LCAgODMsIDcxXSwgLy8ga2V5IHRvIHN0eXhcbiAgWzB4MzUsIDM0NSwxNDBdLCAvLyBmb2cgbGFtcFxuICBbMHgzNiwgMzAxLDExOV0sIC8vIHNoZWxsIGZsdXRlXG4gIFsweDM3LCAyMzMsMTE4XSwgLy8gZXllIGdsYXNzZXNcbiAgWzB4MzgsIDIzNCwgODhdLCAvLyBicm9rZW4gc3RhdHVlXG4gIFsweDM5LCAyOTUsIDkyXSwgLy8gZ2xvd2luZyBsYW1wXG4gIFsweDNhLCAyMzQsIDQ5XSwgLy8gc3RhdHVlIG9mIGdvbGRcbiAgWzB4M2IsIDI3NCwxMTddLCAvLyBsb3ZlIHBlbmRhbnRcbiAgWzB4M2MsIDMzOCwyMjZdLCAvLyBraXJpc2EgcGxhbnRcbiAgWzB4M2QsICAyMywgMTddLCAvLyBpdm9yeSBzdGF0dWVcbiAgWzB4M2UsIDIwNiwyNDFdLCAvLyBib3cgb2YgbW9vblxuICBbMHgzZiwgMTAxLCAgNl0sIC8vIGJvdyBvZiBzdW5cbiAgWzB4NDAsIDIwNywxMTBdLCAvLyBib3cgb2YgdHJ1dGhcbiAgWzB4NDEsICA5MiwxMTddLCAvLyByZWZyZXNoXG4gIFsweDQyLCAyNzksMTI2XSwgLy8gcGFyYWx5c2lzXG4gIFsweDQzLCAyMDIsMTM4XSwgLy8gdGVsZXBhdGh5XG4gIFsweDQ0LCAxMjQsMjAyXSwgLy8gdGVsZXBvcnRcbiAgWzB4NDUsIDMwNCwxMjhdLCAvLyByZWNvdmVyXG4gIFsweDQ2LCAyNDgsIDM1XSwgLy8gYmFycmllclxuICBbMHg0NywgMjc3LCAgM10sIC8vIGNoYW5nZVxuICBbMHg0OCwgIDE1LCAyNV0sIC8vIGZsaWdodFxuICBbMHg1MCwgIDgyLDEwN10sIC8vIG1lZGljYWwgaGVyYiBzZWFsZWQgY2F2ZSBmcm9udFxuICAvLyA1MSBzYWNyZWQgc2hpZWxkXG4gIFsweDUyLCAxMzQsMjE5XSwgLy8gbWVkaWNhbCBoZXJiIG10IHNhYnJlIHdcbiAgWzB4NTMsICA1OSwyMTldLCAvLyBtZWRpY2FsIGhlcmIgbXQgc2FicmUgblxuICBbMHg1NCwgIDUyLCA1NV0sIC8vIG1hZ2ljIHJpbmcgZm9ydHJlc3MgMyB1cHBlclxuICBbMHg1NSwgMjQxLCA5N10sIC8vIG1lZGljYWwgaGVyYiBzYWJlcmEgcGFsYWNlXG4gIFsweDU2LCAxMjMsIDIzXSwgLy8gbWVkaWNhbCBoZXJiIG10IGh5ZHJhXG4gIFsweDc0LCAxMTUsICAzXSwgLy8gbXQgaHlkcmEgbWltaWNcbiAgWzB4NTcsICA3MCwgIDldLCAvLyBtZWRpY2FsIGhlcmIgc3R5eFxuICBbMHg3NSwgIDg0LCAgOV0sIC8vIHN0eXggMSBtaW1pY1xuICBbMHg1OCwgIDMyLCAzOF0sIC8vIG1hZ2ljIHJpbmcga2FybWluZVxuICBbMHg3OSwgIDMyLCAxNl0sIC8vIGthcm1pbmUgbWltaWMgMVxuICBbMHg3YSwgIDQwLCAxNl0sIC8vIGthcm1pbmUgbWltaWMgMlxuICBbMHg3YiwgIDQwLCAzOF0sIC8vIGthcm1pbmUgbWltaWMgM1xuICAvLyA1OSBtZWRpY2FsIGhlcmJcbiAgWzB4NWEsIDE2MSwgOTddLCAvLyBmcnVpdCBvZiBwb3dlciBvYXNpcyBjYXZlIChvdmVyIHdhdGVyKVxuICBbMHgxMCwgMzI3LDEyM10sIC8vIGZsdXRlIG9mIGxpbWUgY2hlc3QgKE5PVEU6IGNoYW5nZWQgNWItPiAxMClcbiAgWzB4NWMsIDI1NiwgNzldLCAvLyBseXNpcyBwbGFudCBldmlsIHNwaXJpdCBpc2xhbmRcbiAgWzB4NWQsICAzNiwxMzldLCAvLyBseXNpcyBwbGFudCBzYWJlcmEgbGV2ZWxcbiAgWzB4NWUsICAxNCwyMjldLCAvLyBhbnRpZG90ZSBtdCBzYWJyZSBuXG4gIFsweDVmLCAzNDUsMjI1XSwgLy8gYW50aWRvdGUga2lyaXNhIGNhdmVcbiAgWzB4NjAsICAxOCwgOTRdLCAvLyBhbnRpZG90ZSBmb3J0ZXNzIDNcbiAgWzB4NjEsIDIzNCwgOTZdLCAvLyBmcnVpdCBvZiBwb3dlciB2YW1waXJlIDJcbiAgWzB4NjIsICAxOCwxMThdLCAvLyBmcnVpdCBvZiBwb3dlciBzYWJlcmEgbGV2ZWxcbiAgWzB4NjMsICAzNiwgNTRdLCAvLyBvcGVsIHN0YXR1ZSBmb3J0cmVzcyAzXG4gIFsweDY0LCAxNzUsIDk3XSwgLy8gZnJ1aXQgb2YgcG93ZXIgb2FzaXMgY2F2ZVxuICBbMHg2NSwgMTM5LCA0MF0sIC8vIG1hZ2ljIHJpbmcgbXQgaHlkcmFcbiAgWzB4NjYsICA2NiwxNjBdLCAvLyBmcnVpdCBvZiByZXB1biBzYWJlcmEgbGV2ZWxcbiAgLy8gNjcgbWFnaWMgcmluZ1xuICAvLyA2OCBtYWdpYyByaW5nXG4gIFsweDY5LCAxMzEsMjAxXSwgLy8gbWFnaWMgcmluZyBtdCBzYWJyZSB3XG4gIFsweDZhLCAgNzYsMjI2XSwgLy8gd2FycCBib290cyBtdCBzYWJyZSB3XG4gIFsweDZiLCAgMTgsMTAwXSwgLy8gbWFnaWMgcmluZyBmb3J0cmVzcyAzIHVwcGVyIChiZWhpbmQpXG4gIFsweDZjLCAxOTMsMTAzXSwgLy8gbWFnaWMgcmluZyBweXJhbWlkIGZyb250XG4gIFsweDc4LCAxOTksMTAzXSwgLy8gcHlyYW1pZCBiYWNrIG1pbWljXG4gIFsweDZkLCAyMDUsMTAzXSwgLy8gb3BlbCBzdGF0dWUgcHlyYW1pZCBiYWNrXG4gIFsweDczLCAyNTYsIDY3XSwgLy8gaXJvbiBuZWNrbGFjZSBtaW1pY1xuICBbMHg2ZSwgIDI0LCAzOF0sIC8vIHdhcnAgYm9vdHMga2FybWluZVxuICBbMHg2ZiwgIDQ0LCA5N10sIC8vIG1hZ2ljIHJpbmcgZm9ydHJlc3MgMyBsb3dlclxuXSBhcyBjb25zdDtcblxuLy8gbm9uLXVuaXF1ZSBrZXkgaXRlbSBzbG90c1xuY29uc3QgS0VZID0gbmV3IFNldChbMHgxMCwgMHgxMiwgMHgyMywgMHgyNiwgMHg2MV0pO1xuXG4vLyBjb25zdCBCT1NTRVMgPSBuZXcgU2V0KFtcbi8vICAgMHgyZSwgLy8gcmFiYml0IGJvb3RzIHNsb3QgLT4gdmFtcGlyZSAxXG4vLyAgIDB4MDcsIC8vIGJhbGwgb2YgZmlyZSBzbG90IC0+IGluc2VjdFxuLy8gICAweDA4LCAvLyBmbGFtZSBicmFjZWxldCBzbG90IC0+IGtlbGJlc3F1ZSAxXG4vLyAgIDB4MDksIC8vIGJhbGwgb2Ygd2F0ZXIgc2xvdCAtPiByYWdlXG4vLyAgIDB4MzgsIC8vIGJyb2tlbiBzdGF0dWUgc2xvdCAtPiBzYWJlcmEgMVxuLy8gICAweDBiLCAvLyBiYWxsIG9mIHRodW5kZXIgc2xvdCAtPiBtYWRvIDFcbi8vICAgMHgyNiwgLy8gb3BlbCBzdGF0dWUgc2xvdCAtPiBrZWxiZXNxdWUgMlxuLy8gICAweDIzLCAvLyBmcnVpdCBvZiByZXB1biBzbG90IC0+IHNhYmVyYSAyXG4vLyAgIDB4MTIsIC8vIHNhY3JlZCBzaGllbGQgc2xvdCAtPiBtYWRvIDJcbi8vICAgMHgzZCwgLy8gaXZvcnkgc3RhdHVlIHNsb3QgLT4ga2FybWluZVxuLy8gICAweDFjLCAvLyBwc3ljaG8gYXJtb3Igc2xvdCAtPiBkcmF5Z29uIDFcbi8vICAgLy8gWywgfjB4MTBiXSwgLy8gZHJheWdvbiAyXG4vLyAgIDB4NjEsIC8vIGZydWl0IG9mIHBvd2VyIHNsb3QgLT4gdmFtcGlyZSAyXG4vLyBdKTtcblxuLy8gc2xvdHMgdGhhdCBjb21lIGZyb20gdHJhZGUtaW5zXG4vLyAgLSBub3RlOiB0aGUgZm9nIGxhbXAgdHJhZGUtaW4gZG9lc24ndCBoYXZlIGEgZ29vZCBzbG90IGZvciB0aGlzXG4vLyBUT0RPIC0gYWRkIFwidHJhZGVkIGZvZyBsYW1wXCIgdG8gaXRlbXMsIGFkZCBhIGJveCBmb3IgaXQuXG4vLyBUT0RPIC0gY291bnQgbnVtYmVyIG9mIHRyYWRlZCBib3hlcyBjaGVja2VkLCBzZXQgcmVzdCB0byBibG9ja2VkIGlmXG4vLyAgICAgICAgPD0gbnVtYmVyIG9mIGl0ZW1zIGFscmVhZHkgdHJhZGVkIGluLi4uP1xuLy8gVE9ETyAtIGZpbmQtYW5kLXJlcGxhY2UgZm9yIHRvcm5lbCdzIGl0ZW0gYWZ0ZXIgdGhlIGZhY3Q/P1xuY29uc3QgVFJBREVTID0gbmV3IFNldChbMHgyOSwgMHgzZSwgMHg0NCwgMHg0NywgMHg0OF0pO1xuXG4vLyBUT0RPIC0gYWRkIGV4dHJhIGluZGlyZWN0aW9uIGZvciB3YWxscyBpbiBvdmVybGF5IGlmIHRyYWNraW5nXG4vLyAgLSBvbmUgZm9yIGVhY2ggc2VwYXJhdGUgcmVnaW9uLi4uIGhvdyB0byBrZWVwIHRyYWNrIG9mIHRoYXQ/XG4vLyAgLSB0aGVuIGtlZXAgdGhlbSBhcyBpdGVtcy4uLj8gIGJvc3Nlcz8gIG1heWJlIGp1c3QgaGFyZGNvZGVcbi8vICAgIHRoZSBsaW5rYWdlcz8gIG9yIGp1c3QgYWRkIGFsbCB3YWxscyBhcyBpdGVtcyBhbmQgbGluayB0aGVtXG4vLyAgICBkaXJlY3RseSBoZXJlLi4uIC0gdGhhdCBtaWdodCBiZSBiZXR0ZXIuXG5cbi8vIHgsIHksIC4uLmZsYWdzXG4vLyBjb25zdCBXQUxMUzogW251bWJlciwgbnVtYmVyLCAuLi5udW1iZXJdID0gW107XG5cbmNsYXNzIEdyYXBoIHtcbiAgLyoqIG1hcCBmcm9tIGlkIHRvIHNsb3QgaW5kZXggKi9cbiAgcmVhZG9ubHkgc2xvdHMgPSBuZXcgTWFwPG51bWJlciwgbnVtYmVyPigpO1xuICAvKiogbWFwIGZyb20gaWQgdG8gaXRlbSBpbmRleCAqL1xuICByZWFkb25seSBpdGVtcyA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gIC8qKiBtYXAgZnJvbSBzbG90IGluZGV4IHRvIGVsZW1lbnQgKi9cbiAgcmVhZG9ubHkgc2xvdEVsdHMgPSBuZXcgTWFwPG51bWJlciwgSFRNTEVsZW1lbnQ+KCk7XG4gIC8qKiBtYXAgZnJvbSBpdGVtIGluZGV4IHRvIGVsZW1lbnQgKi9cbiAgLy9yZWFkb25seSBpdGVtRWx0cyA9IG5ldyBNYXA8bnVtYmVyLCBIVE1MRWxlbWVudD4oKTtcbiAgLyoqIHNldCBvZiBzbG90IGluZGV4ICovXG4gIC8vcmVhZG9ubHkgY2hlY2tlZCA9IG5ldyBTZXQ8bnVtYmVyPigpO1xuICAvLyAvKiogbWFwIGZyb20gc2xvdCBpZCB0byBub2RlICovXG4gIC8vIHJlYWRvbmx5IG5vZGVGcm9tU2xvdCA9IG5ldyBNYXA8bnVtYmVyLCBhbnk+KCk7XG4gIC8vIHJlYWRvbmx5IG5vZGVzID0gbmV3IE1hcDxhbnksIGFueT4oKTtcbiAgLyoqIE1hcHMgaXRlbSBpbmRleCB0byB3aGV0aGVyIGl0ZW0gaXMgZ290dGVuICovXG4gIGhhczogU2V0PEl0ZW1JZD4gPSBuZXcgU2V0KCk7XG5cbiAgcmVhZG9ubHkgZ3JhcGg6IExvY2F0aW9uTGlzdDtcbiAgcmVhZG9ubHkgdW5sb2NrczogUmVhZG9ubHlNYXA8SXRlbUlkLCByZWFkb25seSBTbG90SWRbXT47XG4gIHJlYWRvbmx5IGdyaWQ6IEVsZW1lbnQ7XG4gIHJlYWRvbmx5IG1hcDogRWxlbWVudDtcbiAgcmVhZG9ubHkgbmFtZXMgPSBuZXcgTWFwPHN0cmluZywgSFRNTEVsZW1lbnQ+KCk7XG5cbiAgcmVjb2duaXRpb24/OiBTcGVlY2hSZWNvZ25pdGlvbjtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSByb206IFJvbSxcbiAgICAgICAgICAgICAgcmVhZG9ubHkgd29ybGQ6IFdvcmxkLFxuICAgICAgICAgICAgICByZWFkb25seSBmbGFnczogRmxhZ1NldCkge1xuICAgIC8vIFRPRE8gLSBjb21wdXRlIHR3byBkZXBncmFwaHM6IG9uZSB3aXRoIGdsaXRjaGVzIGFuZCBvbmUgd2l0aG91dFxuICAgIC8vICAtIHRoZW4gd2UgY2FuIHNob3cgZ3JlZW4gdnMgeWVsbG93IGZvciBnbGl0Y2hhYmxlIGxvY2F0aW9ucy4uP1xuICAgICh3aW5kb3cgYXMgYW55KS5HUkFQSCA9IHRoaXM7XG5cbiAgICB0aGlzLmdyYXBoID0gd29ybGQuZ2V0TG9jYXRpb25MaXN0KCk7XG4gICAgdGhpcy5ncmlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZ3JpZCcpWzBdO1xuICAgIHRoaXMubWFwID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbWFwJylbMF07XG5cbiAgICBjb25zdCB1bmxvY2tzID0gbmV3IERlZmF1bHRNYXA8bnVtYmVyLCBTZXQ8U2xvdElkPj4oKCkgPT4gbmV3IFNldCgpKTtcbiAgICBmb3IgKGNvbnN0IFtzbG90LCByZXFdIG9mIHRoaXMuZ3JhcGgucmVxdWlyZW1lbnRzKSB7XG4gICAgICBmb3IgKGNvbnN0IGNzIG9mIHJlcSkge1xuICAgICAgICBmb3IgKGNvbnN0IGMgb2YgY3MpIHtcbiAgICAgICAgICB1bmxvY2tzLmdldChjKS5hZGQoc2xvdCBhcyBTbG90SWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudW5sb2NrcyA9IG5ldyBNYXAoWy4uLnVubG9ja3NdLm1hcChcbiAgICAgICAgKFtpLCBzXTogW251bWJlciwgU2V0PFNsb3RJZD5dKSA9PiBbaSBhcyBJdGVtSWQsIFsuLi5zXV0pKTtcblxuICAgICAgLy8gdGhpcy5ub2Rlcy5zZXQobi51aWQsIG4ubmFtZSk7XG4gICAgICAvLyB0aGlzLnJvdXRlW24udWlkXSA9IDQ7XG4gICAgICAvLyBpZiAobiBpbnN0YW5jZW9mIFNsb3QpIHtcbiAgICAgIC8vICAgLy8gdXNlZCBieSBhZGRCb3hcbiAgICAgIC8vICAgaWYgKCFuLmlzTWltaWMoKSkge1xuICAgICAgLy8gICAgIHRoaXMubm9kZUZyb21TbG90LnNldChuLnNsb3RJbmRleCwgbik7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vICAgLy8gbm90IHNob3duLCBqdXN0IGFzc3VtZSBoYXZlIGl0XG4gICAgICAvLyAgIGlmIChuLm5hbWUgPT0gJ0FsYXJtIEZsdXRlJyB8fCBuLm5hbWUgPT0gJ01lZGljYWwgSGVyYicpIHtcbiAgICAgIC8vICAgICB0aGlzLmFsd2F5cy5hZGQobi5pdGVtLnVpZCk7XG4gICAgICAvLyAgICAgdGhpcy5yb3V0ZVtuLml0ZW0udWlkXSA9IDA7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH0gZWxzZSBpZiAobiBpbnN0YW5jZW9mIExvY2F0aW9uKSB7XG4gICAgICAvLyAgIC8vIGZpbmQgdGhlIG1pbWljcywgdGhleSBuZWVkIHNwZWNpYWwgaGFuZGxpbmcgYmVjYXVzZVxuICAgICAgLy8gICAvLyB0aGV5IGFsbCBtYXAgdG8gdGhlIHNhbWUgc2xvdCBJRC4uLlxuICAgICAgLy8gICBmb3IgKGNvbnN0IGNoZXN0IG9mIG4uY2hlc3RzKSB7XG4gICAgICAvLyAgICAgaWYgKGNoZXN0LmlzTWltaWMoKSkge1xuICAgICAgLy8gICAgICAgdGhpcy5taW1pY1Nsb3RzLnNldChuLmlkIDw8IDggfCBjaGVzdC5zcGF3blNsb3QsIGNoZXN0KTtcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH0gZWxzZSBpZiAobiBpbnN0YW5jZW9mIFRyYWNrZXJOb2RlKSB7XG4gICAgICAvLyAgIGNvbnN0IGluZGV4ID0gdGhpcy5kZXBncmFwaC51aWRUb0l0ZW1bbi51aWRdO1xuICAgICAgLy8gICBpZiAoaW5kZXggPT0gbnVsbCkgY29udGludWU7XG4gICAgICAvLyAgIGxldCBjb2xvciA9IDQ7XG4gICAgICAvLyAgIGlmIChuLnR5cGUgPT09IFRyYWNrZXJOb2RlLk9GRl9ST1VURSkgY29sb3IgPSAxO1xuICAgICAgLy8gICBpZiAobi50eXBlID09PSBUcmFja2VyTm9kZS5HTElUQ0gpIGNvbG9yID0gMjtcbiAgICAgIC8vICAgaWYgKG4udHlwZSA9PT0gVHJhY2tlck5vZGUuSEFSRCkgY29sb3IgPSAzO1xuICAgICAgLy8gICB0aGlzLnJvdXRlW24udWlkXSA9IGNvbG9yO1xuICAgICAgLy8gfVxuXG4gICAgY29uc3QgdG9nZ2xlID0gKGU6IEV2ZW50KSA9PiB7XG4gICAgICBsZXQgdCA9IGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50fG51bGw7XG4gICAgICB3aGlsZSAodCAmJiAhdC5kYXRhc2V0WydzbG90J10pIHtcbiAgICAgICAgdCA9IHQucGFyZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICAgIGlmICghdCkgcmV0dXJuO1xuICAgICAgdGhpcy50b2dnbGUodCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIHRoaXMuZ3JpZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZSk7XG4gICAgLy90aGlzLm1hcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZSk7XG4gIH1cblxuICB0b2dnbGUodDogSFRNTEVsZW1lbnQsIHZhbD86IGJvb2xlYW4pIHtcbiAgICBjb25zdCBpZCA9IE51bWJlcih0LmRhdGFzZXRbJ3Nsb3QnXSkgYXMgSXRlbUlkO1xuICAgIGNvbnN0IGhhcyA9IHQuY2xhc3NMaXN0LnRvZ2dsZSgnZ290JywgdmFsKTtcbiAgICBpZiAodC5kYXRhc2V0WydpdGVtJ10pIHtcbiAgICAgIGhhcyA/IHRoaXMuaGFzLmFkZChpZCkgOiB0aGlzLmhhcy5kZWxldGUoaWQpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgYWRkU2xvdChzbG90SWQ6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAvLyBjb25zdCBpbmRleCA9IHRoaXMuc2xvdHMuZ2V0KHNsb3RJZCk7XG4gICAgLy8gaWYgKGluZGV4ID09IG51bGwpIHsgZGVidWdnZXI7IHRocm93IG5ldyBFcnJvcigpOyB9XG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgaXRlbWdldCA9IHRoaXMucm9tLml0ZW1HZXRzW3Nsb3RJZF07XG4gICAgY29uc3QgaXRlbSA9IGl0ZW1nZXQgJiYgdGhpcy5yb20uaXRlbXNbaXRlbWdldC5pdGVtSWRdO1xuICAgIC8vIG1ha2Ugc29tZSBib3hlcyBiaWdnZXI7IHF1aWNrIGhhY2sgdG8gYXZvaWQgdW5pcXVlIGFybW9yc1xuICAgIGlmIChpdGVtICYmIGl0ZW0udW5pcXVlIHx8IEtFWS5oYXMoc2xvdElkKSkge1xuICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2tleScpO1xuICAgICAgeC0tOyB5LS07XG4gICAgfVxuICAgIHgtLTsgeS0tO1xuICAgIGRpdi5kYXRhc2V0WydzbG90J10gPSBTdHJpbmcoc2xvdElkKTtcbiAgICBkaXYuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgIGRpdi5zdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICAvL2Rpdi50ZXh0Q29udGVudCA9ICdcXHhhMCc7XG4gICAgY29uc3QgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuICAgIGlubmVyLnRleHRDb250ZW50ID1cbiAgICAgICAgc2xvdElkID49IDB4NzAgP1xuICAgICAgICAgICAgJ01pbWljJyA6XG4gICAgICAgICAgICB0aGlzLnJvbS5pdGVtc1tpdGVtZ2V0Lml0ZW1JZF0ubWVzc2FnZU5hbWUucmVwbGFjZSgnICcsICdcXHhhMCcpO1xuICAgIGlmICh0aGlzLmZsYWdzLnJhbmRvbWl6ZVRyYWRlcygpICYmIFRSQURFUy5oYXMoc2xvdElkKSkge1xuICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2Jvc3MnKTtcbiAgICB9XG4gICAgdGhpcy5zbG90RWx0cy5zZXQoc2xvdElkLCBkaXYpO1xuICAgIHRoaXMubWFwLmFwcGVuZENoaWxkKGRpdik7XG4gIH1cblxuICBhZGRJdGVtKGNsczogc3RyaW5nLCBoZXg6IHN0cmluZywgLi4ub3RoZXJOYW1lczogc3RyaW5nW10pIHtcbiAgICAvLyBwYXJzZSB0aGUgaGV4LCByZW1vdmluZyAkIHByZWZpeFxuICAgIGNvbnN0IGlkID0gTnVtYmVyLnBhcnNlSW50KGhleC5zdWJzdHJpbmcoMSksIDE2KTtcbiAgICBjb25zdCBvdXRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xzKVswXSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcbiAgICBvdXRlci5kYXRhc2V0WydzbG90J10gPSBTdHJpbmcoaWQpO1xuICAgIG91dGVyLmRhdGFzZXRbJ2l0ZW0nXSA9IFN0cmluZyhpZCk7XG4gICAgLy90aGlzLnNsb3RFbHRzLnNldChpbmRleCwgb3V0ZXIpO1xuICAgIHRoaXMubmFtZXMuc2V0KGNscy5yZXBsYWNlKC8tL2csICcgJyksIG91dGVyKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygb3RoZXJOYW1lcykge1xuICAgICAgdGhpcy5uYW1lcy5zZXQobmFtZS5yZXBsYWNlKC8tL2csICcgJyksIG91dGVyKTtcbiAgICB9XG4gIH1cblxuICBhZGRFeHRyYUZsYWdzKCkge1xuICAgIC8vIGZvciAoY29uc3Qgc2xvdCBvZiB0aGlzLmdyYXBoLnJlcXVpcmVtZW50cy5rZXlTZXQoKSkge1xuICAgIC8vICAgaWYgKCFpc1Nsb3Qoc2xvdCkpIGNvbnRpbnVlO1xuICAgIC8vICAgaWYgKCFCT1NTRVMuaGFzKHNsb3QgJiAweGZmKSkgY29udGludWU7XG4gICAgLy8gICBjb25zdCBlbHQgPSB0aGlzLnNsb3RFbHRzLmdldChyZXBsYWNlZCk7XG4gICAgLy8gICBpZiAoZWx0ID09IG51bGwpIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQnKTtcbiAgICAvLyAgIHRoaXMuc2xvdEVsdHMuZGVsZXRlKE51bWJlcihlbHQuZGF0YXNldFsnc2xvdCddKSk7XG4gICAgLy8gICB0aGlzLnNsb3RFbHRzLnNldChzbG90LmluZGV4LCBlbHQpO1xuICAgIC8vICAgZWx0LmNsYXNzTGlzdC5hZGQoJ2Jvc3MnKTtcbiAgICAvLyAgIGVsdC5kYXRhc2V0WydzbG90J10gPSBTdHJpbmcoc2xvdC5pbmRleCk7XG4gICAgLy8gICBlbHQuZGF0YXNldFsnaXRlbSddID0gU3RyaW5nKHNsb3QuaW5kZXgpO1xuICAgIC8vIH1cbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBmb3IgKGNvbnN0IGVsdCBvZiB0aGlzLnNsb3RFbHRzLnZhbHVlcygpKSB7XG4gICAgICBlbHQuZGF0YXNldFsnc3RhdGUnXSA9IGVsdC5jbGFzc0xpc3QuY29udGFpbnMoJ2dvdCcpID8gJycgOiAnYmxvY2tlZCc7XG4gICAgfVxuICAgIGNvbnN0IHJlYWNoYWJsZSA9IHRoaXMudHJhdmVyc2UoKTtcbiAgICBmb3IgKGNvbnN0IHNsb3Qgb2YgcmVhY2hhYmxlKSB7XG4gICAgICAvLyBmaWd1cmUgb3V0IHdoZXRoZXIgaXQncyBhdmFpbGFibGUgb3Igbm90XG4gICAgICAvLyBUT0RPIC0gY29uc2lkZXIgaGF2aW5nIG11bHRpcGxlIHdvcmxkcywgZm9yIGdsaXRjaGVkL2hhcmQ/XG4gICAgICAvLyAgICAgIC0+IGFkanVzdCBmbGFncyB0byBhZGQgYWxsIGdsaXRjaGVzL2hhcmQgbW9kZVxuICAgICAgaWYgKChzbG90ICYgfjB4N2YpICE9PSAweDEwMCkgY29udGludWU7XG4gICAgICBjb25zdCBlbHQgPSB0aGlzLnNsb3RFbHRzLmdldChzbG90ICYgMHhmZik7XG4gICAgICBpZiAoZWx0ICYmICFlbHQuY2xhc3NMaXN0LmNvbnRhaW5zKCdnb3QnKSkge1xuICAgICAgICBlbHQuZGF0YXNldFsnc3RhdGUnXSA9ICdhdmFpbGFibGUnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRyYXZlcnNlKCk6IFNldDxTbG90SWQ+IHtcbiAgICBjb25zdCBoYXMgPSBuZXcgU2V0KFsuLi50aGlzLmhhc10ubWFwKGkgPT4gaSB8IDB4MjAwKSk7XG4gICAgY29uc3QgcmVhY2hhYmxlID0gbmV3IFNldDxTbG90SWQ+KCk7XG4gICAgY29uc3Qgc2xvdHMgPSBuZXcgU2V0PFNsb3RJZD4oKTtcbiAgICBjb25zdCBxdWV1ZSA9XG4gICAgICAgIG5ldyBTZXQ8U2xvdElkPih0aGlzLmdyYXBoLnJlcXVpcmVtZW50cy5rZXlzKCkgYXMgSXRlcmFibGU8U2xvdElkPik7XG4gICAgZm9yIChjb25zdCBuIG9mIHF1ZXVlKSB7XG4gICAgICBxdWV1ZS5kZWxldGUobik7XG4gICAgICBpZiAocmVhY2hhYmxlLmhhcyhuKSkgY29udGludWU7XG4gICAgICAvLyBjYW4gd2UgcmVhY2ggaXQ/XG4gICAgICBjb25zdCBuZWVkZWQgPSB0aGlzLmdyYXBoLnJlcXVpcmVtZW50cy5nZXQobikhO1xuICAgICAgZm9yIChjb25zdCByb3V0ZSBvZiBuZWVkZWQpIHtcbiAgICAgICAgaWYgKCFjb250YWluc0FsbChoYXMsIHJvdXRlKSkgY29udGludWU7XG4gICAgICAgIHJlYWNoYWJsZS5hZGQobik7XG4gICAgICAgIC8vIFRPRE8gLS0tIG5lZWQgdG8gZmlndXJlIG91dCB3aGF0IHRvIGRvIGhlcmUuXG4gICAgICAgIC8vICAgICAgLS0tIGZpbGwgd291bGQgbGlrZSB0byBiZSB6ZXJvLWJhc2VkIGJ1dCBkb2Vzbid0IG5lZWQgdG8gYmUuXG4gICAgICAgIC8vICAgICAgICAgIGNvdWxkIHVzZSBhIHNpbXBsZSBwYWlyIG9mIE1hcHMsIHBvc3NpYmx5P1xuICAgICAgICAvLyAgICAgICAgICBvciBmcm9udC1sb2FkIHRoZSBpdGVtcz9cbiAgICAgICAgLy8gICBzbG90czogMXh4IG90aGVyc1xuICAgICAgICAvLyAgIGl0ZW1zOiAyeHggb3RoZXJzXG4gICAgICAgIC8vIGJ1dCB3ZSB3YW50IHNhbWUgZmxhZ3MgdG8gaGF2ZSBzYW1lIGluZGV4XG4gICAgICAgIC8vICAgc2xvdHM6IChmaXhlZCkgKHJlcXVpcmVkIHNsb3RzKSAoZXh0cmEgc2xvdHMpXG4gICAgICAgIC8vICAgaXRlbXM6IChmaXhlZCkgKHJlcXVpcmVkIHNsb3RzKSAoaXRlbXMpXG4gICAgICAgIC8vIGlmIG4gaXMgYSBzbG90IHRoZW4gYWRkIHRoZSBpdGVtIHRvIGhhcy5cbiAgICAgICAgY29uc3QgaXRlbXM6IEl0ZW1JZFtdID0gW107XG4gICAgICAgIGlmICgobiAmIH4weDdmKSA9PT0gMHgxMDApIHtcbiAgICAgICAgICBzbG90cy5hZGQoKG4gJiAweGZmKSBhcyBTbG90SWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0l0ZW0obikpIGl0ZW1zLnB1c2goKG4gJiAweGZmKSBhcyBudW1iZXIgYXMgSXRlbUlkKTtcbiAgICAgICAgICBoYXMuYWRkKG4pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBoYXMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGogb2YgdGhpcy51bmxvY2tzLmdldChpdGVtIGFzIEl0ZW1JZCkgfHwgW10pIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5ncmFwaC5yZXF1aXJlbWVudHMuaGFzKGopKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZGlyKHRoaXMpO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFkZGluZyBiYWQgbm9kZSAke2p9IGZyb20gdW5sb2NrICR7aXRlbX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXVlLmFkZChqKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZWFjaGFibGU7XG4gIH1cblxuICBhZGRWb2ljZVJlY29nbml0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICBsZXQgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgY29uc3QgcmVjID0gdGhpcy5yZWNvZ25pdGlvbiA9IG5ldyBTcGVlY2hSZWNvZ25pdGlvbigpO1xuICAgICAgLy8gTk9URTogYXMgZmFyIGFzIEkgY2FuIHRlbGwsIHRoaXMgZG9lcyBub3RoaW5nLi4uXG4gICAgICBjb25zdCBncmFtbWFyID0gbmV3IFNwZWVjaEdyYW1tYXJMaXN0KCk7XG4gICAgICBncmFtbWFyLmFkZEZyb21TdHJpbmcoYFxuICAgICAgICAgICNKU0dGIFYxLjA7XG4gICAgICAgICAgZ3JhbW1hciBjb21tYW5kO1xuICAgICAgICAgIHB1YmxpYyA8aXRlbT4gPSAke1suLi50aGlzLm5hbWVzLmtleXMoKV0uam9pbignIHwgJyl9O1xuICAgICAgICAgIHB1YmxpYyA8Y29tbWFuZD4gPSB0cmFjayA8aXRlbT4gfCB1bnRyYWNrIDxpdGVtPjtcbiAgICAgIGAsIDEpO1xuICAgICAgcmVjLmxhbmcgPSAnZW4tVVMnO1xuICAgICAgcmVjLmdyYW1tYXJzID0gZ3JhbW1hcjtcbiAgICAgIHJlYy5pbnRlcmltUmVzdWx0cyA9IGZhbHNlO1xuICAgICAgLy9yZWMuY29udGludW91cyA9IHRydWU7XG4gICAgICByZWMubWF4QWx0ZXJuYXRpdmVzID0gMTA7XG4gICAgICByZWMub25zdGFydCA9ICgpID0+IHsgc3RvcHBlZCA9IGZhbHNlOyB9O1xuICAgICAgcmVjLm9ucmVzdWx0ID0gKGUpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZS5yZXN1bHRzW2UucmVzdWx0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKCFyZXN1bHQuaXNGaW5hbCkgcmV0dXJuO1xuICAgICAgICBsZXQgbWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGFsdCBvZiByZXN1bHQpIHtcbiAgICAgICAgICBjb25zdCBjb21tYW5kID0gYWx0LnRyYW5zY3JpcHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEteiBdL2csICcnKTtcbiAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gJ3N0b3AgbGlzdGVuaW5nJykgbWF0Y2hlZCA9IHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0IG1hdGNoID0gLyhbYXVvXVtubV0gPyk/dHJbYXVdYz9rPyg/OmVkKT8gPyguKykvLmV4ZWMoY29tbWFuZCk7XG4gICAgICAgICAgaWYgKCFtYXRjaCkgY29udGludWU7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhgYXR0ZW1wdDogJHttYXRjaFsyXX1gKTtcbiAgICAgICAgICBjb25zdCBlbCA9IHRoaXMubmFtZXMuZ2V0KG1hdGNoWzJdKTtcbiAgICAgICAgICBpZiAoIWVsKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnRvZ2dsZShlbCwgIW1hdGNoWzFdKTtcbiAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1hdGNoZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgTm8gbWF0Y2g6ICR7Wy4uLnJlc3VsdF0ubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0+IHIudHJhbnNjcmlwdCkuam9pbignLCAnKX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZWMuc3RvcCgpOyAvLyBnZWNrbyBkb2Vzbid0IHN1cHBvcnQgY29udGludW91cz9cbiAgICAgIH07XG4gICAgICByZWMub25lbmQgPSAoKSA9PiB7IGlmICghc3RvcHBlZCkgcmVjLnN0YXJ0KCk7IH07XG4gICAgICByZWMuc3RhcnQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwb2x5ZmlsbCguLi5uYW1lczogc3RyaW5nW10pIHtcbiAgY29uc3Qgd2luID0gd2luZG93IGFzIGFueTtcbiAgZm9yIChsZXQgbiBvZiBuYW1lcykge1xuICAgIGlmICh0eXBlb2Ygd2luW25dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB3aW5bbmFtZXNbMF1dID0gd2luW25dO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBjb25zb2xlLmVycm9yKGBDb3VsZCBub3QgcG9seWZpbGwgJHtuYW1lc1swXX1gKTtcbn1cbnBvbHlmaWxsKCdTcGVlY2hSZWNvZ25pdGlvbicsICd3ZWJraXRTcGVlY2hSZWNvZ25pdGlvbicpO1xucG9seWZpbGwoJ1NwZWVjaEdyYW1tYXJMaXN0JywgJ3dlYmtpdFNwZWVjaEdyYW1tYXJMaXN0Jyk7XG5cblxuXG4vLyBmdW5jdGlvbiBpc1Nsb3QoeDogbnVtYmVyKTogYm9vbGVhbiB7XG4vLyAgIHJldHVybiAoeCAmIH4weDdmKSA9PT0gMHgxMDA7XG4vLyB9XG5cbmZ1bmN0aW9uIGlzSXRlbSh4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuICh4ICYgfjB4N2YpID09PSAweDIwMDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNBbGw8VD4oc2V0OiBTZXQ8VD4sIHdhbnQ6IEl0ZXJhYmxlPFQ+KTogYm9vbGVhbiB7XG4gIGZvciAoY29uc3QgZWxlbSBvZiB3YW50KSB7XG4gICAgaWYgKCFzZXQuaGFzKGVsZW0pKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIFRPRE8gLSBhbGwgRyBmbGFncyBnZXQgdGhlIGdsaXRjaCBmb3IgZnJlZVxuLy8gICAgICAtIGFsbCBvdGhlcnMgKG1pbnVzIHdpbGQgd2FycCBpZiBkaXNhYmxlZCkgdHJhY2tlZCBhcyBnbGl0Y2hlc1xuLy8gICAgICAtIGNvbnNpZGVyIGRhcmsgeWVsbG93IGFuZCBkYXJrIGdyZWVuIGFzIHdlbGwgYXMgZGFyayBibHVlID8/XG5cbmxldCB2b2ljZSA9IGZhbHNlO1xubGV0IGZsYWdzID0gJ0BDYXN1YWwnO1xuZm9yIChjb25zdCBhcmcgb2YgbG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSkuc3BsaXQoJyYnKSkge1xuICBjb25zdCBba2V5LCB2YWx1ZV0gPSBhcmcuc3BsaXQoJz0nKTtcbiAgaWYgKGtleSA9PT0gJ2ZsYWdzJykge1xuICAgIGZsYWdzID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfVxuICBpZiAoa2V5ID09PSAndm9pY2UnKSB7XG4gICAgdm9pY2UgPSB0cnVlO1xuICB9XG59XG4vLyAgICdzcGVlZC1ib290cyc6IHRydWUsXG4vLyAgICdnbGl0Y2gtZ2hldHRvLWZsaWdodCc6IHRydWUsXG4vLyAgICdnbGl0Y2gtdGFsayc6IHRydWUsXG4vLyAgICdyb3V0ZS1uby1mcmVlLWJhcnJpZXInOiB0cnVlLFxuLy8gICAncm91dGUtc2h5cm9uLXRlbGVwb3J0JzogdHJ1ZSxcbi8vICAgJ3JvdXRlLWVhcmx5LWZsaWdodCc6IHRydWUsXG4vLyAgICd0cmFja2VyJzogdHJ1ZSxcbi8vIH07XG5cbmZ1bmN0aW9uIGluaXRJdGVtR3JhbnRzKHJvbTogUm9tKSB7XG4gIC8vIE5PVEU6IFRoaXMgaXMgdWdseSB0byBwdXQgaGVyZSwgYnV0IHRoZSBub3JtYWwgdmVyc2lvblxuICAvLyByZXF1aXJlcyBwcmVzaHVmZmxlIHRvIHdvcmsgY29ycmVjdGx5LCBhbmQgaXQgZG9lc24ndFxuICAvLyBtYWtlIHNlbnNlIHRvIGhhcmRjb2RlIGl0IGluIEl0ZW1HZXRzJyBpbml0aWFsaXplci5cbiAgcm9tLml0ZW1HZXRzLmFjdGlvbkdyYW50cyA9IG5ldyBNYXAoW1xuICAgIFsweDI1LCAweDI5XSxcbiAgICBbMHgzOSwgMHgzYV0sXG4gICAgWzB4M2IsIDB4NDddLFxuICAgIFsweDNjLCAweDNlXSxcbiAgICBbMHg4NCwgMHg0Nl0sXG4gICAgWzB4YjIsIDB4NDJdLFxuICAgIFsweGI0LCAweDQxXSxcbiAgXSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gIGNvbnN0IHJvbSA9IGF3YWl0IFJvbS5sb2FkKGRldGVybWluaXN0aWNQcmVQYXJzZSk7XG4gIHJvbS5mbGFncy5kZWZyYWcoKTtcbiAgaW5pdEl0ZW1HcmFudHMocm9tKTtcbiAgY29uc3QgZmxhZ3NldCA9IG5ldyBGbGFnU2V0KGZsYWdzKTtcbiAgZGV0ZXJtaW5pc3RpYyhyb20sIGZsYWdzZXQpOyAvLyBtYWtlIGRldGVybWluaXN0aWMgY2hhbmdlc1xuICBjb25zdCB3b3JsZCA9IG5ldyBXb3JsZChyb20sIGZsYWdzZXQsIHRydWUpOyAvLyArICcgRHQnKSk7XG4gIGNvbnN0IGdyYXBoID0gbmV3IEdyYXBoKHJvbSwgd29ybGQsIGZsYWdzZXQpO1xuICBmb3IgKGxldCBpdGVtIG9mIElURU1TLnNwbGl0KCdcXG4nKSkge1xuICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoLyMuKi8sICcnKS50cmltKCk7XG4gICAgaWYgKCFpdGVtKSBjb250aW51ZTtcbiAgICBncmFwaC5hZGRJdGVtKC4uLihpdGVtLnNwbGl0KC8gKy9nKSBhcyBbc3RyaW5nLCBzdHJpbmcsIC4uLnN0cmluZ1tdXSkpO1xuICB9XG4gIGZvciAoY29uc3Qgc2xvdCBvZiBTTE9UUykge1xuICAgIGdyYXBoLmFkZFNsb3QoLi4uc2xvdCk7XG4gIH1cbiAgZ3JhcGguYWRkRXh0cmFGbGFncygpO1xuICBncmFwaC51cGRhdGUoKTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9nZ2xlLW1hcCcpIS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBncmFwaC5tYXAuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7XG4gIH0pO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xlYXItYWxsJykhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGZvciAoY29uc3QgZSBvZiBncmFwaC5ncmlkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5nb3QnKSkge1xuICAgICAgZS5jbGFzc0xpc3QucmVtb3ZlKCdnb3QnKTtcbiAgICB9XG4gICAgZ3JhcGguaGFzID0gbmV3IFNldCgpOyAvLyBncmFwaC5hbHdheXM7XG4gICAgZ3JhcGgudXBkYXRlKCk7XG4gIH0pO1xuICBpZiAodm9pY2UpIGdyYXBoLmFkZFZvaWNlUmVjb2duaXRpb24oKTtcbiAgKHdpbmRvdyBhcyBhbnkpLmdyYXBoID0gZ3JhcGg7XG59O1xuXG4vL2Z1bmN0aW9uIGRpZSgpOiBuZXZlciB7IHRocm93IG5ldyBFcnJvcignQXNzZXJ0aW9uIGZhaWxlZCcpOyB9XG5cbm1haW4oKTtcbiJdfQ==