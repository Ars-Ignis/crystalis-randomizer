import { DefaultMap, iters } from '../util.js';
import { Requirement } from './requirement.js';
export class Terrains {
    constructor(rom) {
        this.rom = rom;
        this.tiles = new DefaultMap((effects) => makeTile(this.rom, effects));
        this.bosses = new DefaultMap((flag) => new BossTerrain(flag));
        this.statues = new Map();
        this.flags = new DefaultMap((base) => new DefaultMap((flag) => new DefaultMap((alt) => new FlagTerrain(base, flag, alt))));
        this.meets = new DefaultMap((left) => new DefaultMap((right) => new MeetTerrain(left, right)));
        this._seamless = new DefaultMap((t) => new SeamlessTerrain(t));
    }
    tile(effects) {
        return effects & 0x04 ? undefined : this.tiles.get(effects);
    }
    boss(flag) {
        return this.bosses.get(flag);
    }
    statue(req) {
        const label = Requirement.label(req);
        let terrain = this.statues.get(label);
        if (!terrain)
            this.statues.set(label, terrain = new StatueTerrain(req));
        return terrain;
    }
    flag(base, flag, alt) {
        if (!base)
            base = CLOSED;
        return this.flags.get(base).get(flag).get(alt);
    }
    meet(left, right) {
        return this.meets.get(left).get(right);
    }
    seamless(delegate) {
        return this._seamless.get(delegate);
    }
    label(terrain, rom) {
        if (terrain.label)
            return terrain.label(rom);
        return 'Terrain';
    }
}
export var Terrain;
(function (Terrain) {
    Terrain.FLY = 0x02;
    Terrain.BLOCKED = 0x04;
    Terrain.SLOPE = 0x20;
    Terrain.BITS = 0x26;
    Terrain.SWAMP = 0x100;
    Terrain.BARRIER = 0x200;
    Terrain.SLOPE8 = 0x400;
    Terrain.SLOPE9 = 0x800;
    Terrain.DOLPHIN = 0x1000;
    function label(t, rom) {
        var _a, _b, _c;
        return _c = (_b = (_a = t).label) === null || _b === void 0 ? void 0 : _b.call(_a, rom), (_c !== null && _c !== void 0 ? _c : 'Terrain');
    }
    Terrain.label = label;
})(Terrain || (Terrain = {}));
class SeamlessTerrain {
    constructor(_delegate) {
        this._delegate = _delegate;
        this.enter = _delegate.enter;
        this.exit = _delegate.exit;
    }
    label(rom) {
        return `Seamless(${Terrain.label(this._delegate, rom)})`;
    }
}
class SimpleTerrain {
    constructor(enter, exit = Requirement.OPEN) {
        this.enter = enter;
        this.exit = [[0xf, exit]];
    }
    get kind() { return 'Simple'; }
    label(rom) {
        const terr = [];
        if (!Requirement.isOpen(this.enter)) {
            terr.push(`enter = ${debugLabel(this.enter, rom)}`);
        }
        if (!Requirement.isOpen(this.exit[0][1])) {
            terr.push(`exit = ${debugLabel(this.exit[0][1], rom)}`);
        }
        return `${this.kind}(${terr.join(', ')})`;
    }
}
class SouthTerrain {
    constructor(enter, exit) {
        this.enter = enter;
        this.exit =
            exit ?
                [[0xb, exit], [0x4, Requirement.OPEN]] :
                [[0xf, Requirement.OPEN]];
    }
    get kind() { return 'South'; }
    label(rom) {
        if (this.exit.length === 1) {
            return SimpleTerrain.prototype.label.call(this, rom);
        }
        const terr = [];
        if (!Requirement.isOpen(this.enter)) {
            terr.push(`enter = ${debugLabel(this.enter, rom)}`);
        }
        if (!Requirement.isOpen(this.exit[0][1])) {
            terr.push(`other = ${debugLabel(this.exit[0][1], rom)}`);
        }
        if (!Requirement.isOpen(this.exit[1][1])) {
            terr.push(`south = ${debugLabel(this.exit[1][1], rom)}`);
        }
        return `${this.kind}(${terr.join(', ')})`;
    }
}
function makeTile(rom, effects) {
    let enter = Requirement.OPEN;
    let exit = undefined;
    if ((effects & Terrain.DOLPHIN) && (effects & Terrain.FLY)) {
        if (effects & Terrain.SLOPE) {
            exit = rom.flags.ClimbWaterfall.r;
        }
        enter = [[rom.flags.CurrentlyRidingDolphin.c], [rom.flags.Flight.c]];
    }
    else {
        if (effects & Terrain.SLOPE9) {
            exit = rom.flags.ClimbSlope9.r;
        }
        else if (effects & Terrain.SLOPE8) {
            exit = rom.flags.ClimbSlope8.r;
        }
        else if (effects & Terrain.SLOPE) {
            exit = rom.flags.Flight.r;
        }
        if (effects & Terrain.FLY)
            enter = rom.flags.Flight.r;
    }
    if (effects & Terrain.SWAMP) {
        enter = enter.map((cs) => [rom.flags.TravelSwamp.c, ...cs]);
    }
    if (effects & Terrain.BARRIER) {
        enter = enter.map((cs) => [rom.flags.ShootingStatue.c, ...cs]);
    }
    return new SouthTerrain(enter, exit);
}
class BossTerrain extends SimpleTerrain {
    constructor(_flag) {
        super(Requirement.OPEN, [[_flag]]);
        this._flag = _flag;
    }
    get kind() { return 'Boss'; }
}
class StatueTerrain extends SouthTerrain {
    constructor(_req) {
        super(Requirement.OPEN, _req);
        this._req = _req;
    }
    get kind() { return 'Statue'; }
}
class FlagTerrain extends SimpleTerrain {
    constructor(base, flag, alt) {
        if (base.exit.length !== 1 || alt.exit.length !== 1) {
            throw new Error('bad flag');
        }
        const f = [[flag]];
        const enter = flag >= 0 ? Requirement.meet(alt.enter, f) : alt.enter;
        const exit = flag >= 0 ? Requirement.meet(alt.exit[0][1], f) : alt.exit[0][1];
        super(Requirement.or(base.enter, enter), Requirement.or(base.exit[0][1], exit));
    }
    get kind() { return 'Flag'; }
}
const CLOSED = new SimpleTerrain(Requirement.CLOSED, Requirement.CLOSED);
function directionIndex(t) {
    const ind = [];
    for (let i = 0; i < t.exit.length; i++) {
        for (let b = 0; b < 4; b++) {
            if (t.exit[i][0] & (1 << b))
                ind[b] = i;
        }
    }
    for (let b = 0; b < 4; b++) {
        if (ind[b] == null) {
            throw new Error(`Bad terrain: ${t.exit.map(e => e[0]).join(',')}`);
        }
    }
    return ind;
}
class MeetTerrain {
    constructor(left, right) {
        this.left = left;
        this.right = right;
        const leftInd = directionIndex(left);
        const rightInd = directionIndex(right);
        const sources = new Set();
        const exit = [];
        for (let i = 0; i < 4; i++) {
            sources.add(leftInd[i] << 2 | rightInd[i]);
        }
        for (const source of sources) {
            const [d0, r0] = left.exit[source >> 2];
            const [d1, r1] = right.exit[source & 3];
            exit.push([d0 & d1, Requirement.meet(r0, r1)]);
        }
        this.enter = Requirement.meet(left.enter, right.enter);
        this.exit = exit;
    }
    get kind() { return 'Terrain'; }
    label(rom) {
        if (this.exit.length === 1) {
            return SimpleTerrain.prototype.label.call(this, rom);
        }
        const terr = [];
        if (!Requirement.isOpen(this.enter)) {
            terr.push(`enter = ${debugLabel(this.enter, rom)}`);
        }
        for (const [dirs, req] of this.exit) {
            const dirstring = [dirs & 1 ? 'N' : '', dirs & 2 ? 'W' : '',
                dirs & 4 ? 'S' : '', dirs & 8 ? 'E' : ''].join('');
            terr.push(`exit${dirstring} = ${debugLabel(req, rom)}`);
        }
        return `${this.kind}(${terr.join(', ')})`;
    }
}
export function debugLabel(r, rom) {
    const css = [...r];
    const s = css.map(cs => iters.isEmpty(cs) ? 'open' :
        [...cs].map((c) => { var _a; return (_a = rom.flags[c]) === null || _a === void 0 ? void 0 : _a.debug; }).join(' & '))
        .join(') | (');
    return css.length > 1 ? `(${s})` : css.length ? s : 'never';
}
Terrain.debugLabel = debugLabel;
if (typeof window === 'object')
    window.debugLabel = debugLabel;
//# sourceMappingURL=data:application/json;base64,