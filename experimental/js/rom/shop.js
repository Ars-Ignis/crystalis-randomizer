import { Entity, EntityArray } from './entity.js';
import { readLittleEndian, seq, tuple } from './util.js';
export class Shops extends EntityArray {
    constructor(rom) {
        super(44);
        this.rom = rom;
        this.innBasePrice = 20;
        this.toolShopScaling = new Array(48).fill(0);
        this.armorShopScaling = new Array(48).fill(0);
        for (let i = 0; i < 44; i++) {
            this[i] = new Shop(rom, i);
        }
        if (rom.shopDataTablesAddress != null) {
            const address = rom.shopDataTablesAddress +
                21 * rom.shopCount +
                2 * rom.scalingLevels;
            this.basePrices = seq(0x49, id => id >= 0xd && id < 0x27 ?
                readLittleEndian(rom.prg, address + 2 * (id - 0xd)) :
                0);
        }
        else {
            this.basePrices =
                seq(0x49, id => readLittleEndian(rom.prg, VANILLA_PAWN_PRICE_TABLE + 2 * id) * 2);
        }
    }
    armorShops() {
        return seq(11, i => this[4 * i]);
    }
    toolShops() {
        return seq(11, i => this[4 * i + 1]);
    }
    inns() {
        return seq(11, i => this[4 * i + 2]);
    }
    pawnShops() {
        return seq(11, i => this[4 * i + 3]);
    }
    write() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const a = this.rom.assembler();
        if (this.rescale) {
            function exportLabel(label) {
                a.export(label);
                a.label(label);
            }
            a.segment("10", "fe", "ff");
            a.org(0x9da4);
            exportLabel('ShopData');
            exportLabel('ArmorShopIdTable');
            for (const shop of this.armorShops()) {
                for (let i = 0; i < 4; i++) {
                    a.byte((_a = shop.contents[i], (_a !== null && _a !== void 0 ? _a : 0xff)));
                }
            }
            exportLabel('ToolShopIdTable');
            for (const shop of this.toolShops()) {
                for (let i = 0; i < 4; i++) {
                    a.byte((_b = shop.contents[i], (_b !== null && _b !== void 0 ? _b : 0xff)));
                }
            }
            exportLabel('ArmorShopPriceTable');
            for (const shop of this.armorShops()) {
                for (let i = 0; i < 4; i++) {
                    a.byte(Math.round((_c = shop.prices[i], (_c !== null && _c !== void 0 ? _c : 0)) * 32));
                }
            }
            exportLabel('ToolShopPriceTable');
            for (const shop of this.toolShops()) {
                for (let i = 0; i < 4; i++) {
                    a.byte(Math.round((_d = shop.prices[i], (_d !== null && _d !== void 0 ? _d : 0)) * 32));
                }
            }
            exportLabel('InnPrices');
            for (const shop of this.inns()) {
                a.byte(Math.round((_e = shop.prices[0], (_e !== null && _e !== void 0 ? _e : 0)) * 32));
            }
            exportLabel('ShopLocations');
            for (const shop of this) {
                a.byte(shop.location);
            }
            exportLabel('ToolShopScaling');
            a.byte(...this.toolShopScaling);
            exportLabel('ArmorShopScaling');
            a.byte(...this.armorShopScaling);
            exportLabel('BasePrices');
            a.word(...this.basePrices.slice(0x0d, 0x27).map(x => (x !== null && x !== void 0 ? x : 0)));
            exportLabel('InnBasePrice');
            a.word(this.innBasePrice);
        }
        else {
            a.segment('10');
            a.org(0x9da4);
            for (const shop of this.armorShops()) {
                for (let i = 0; i < 4; i++) {
                    a.byte((_f = shop.contents[i], (_f !== null && _f !== void 0 ? _f : 0xff)));
                }
            }
            for (const shop of this.armorShops()) {
                for (let i = 0; i < 4; i++) {
                    a.word((_g = shop.prices[i], (_g !== null && _g !== void 0 ? _g : 0)));
                }
            }
            for (const shop of this.toolShops()) {
                for (let i = 0; i < 4; i++) {
                    a.byte((_h = shop.contents[i], (_h !== null && _h !== void 0 ? _h : 0xff)));
                }
            }
            for (const shop of this.toolShops()) {
                for (let i = 0; i < 4; i++) {
                    a.word((_j = shop.prices[i], (_j !== null && _j !== void 0 ? _j : 0)));
                }
            }
        }
        return [a.module()];
    }
}
export var ShopType;
(function (ShopType) {
    ShopType[ShopType["ARMOR"] = 0] = "ARMOR";
    ShopType[ShopType["TOOL"] = 1] = "TOOL";
    ShopType[ShopType["INN"] = 2] = "INN";
    ShopType[ShopType["PAWN"] = 3] = "PAWN";
})(ShopType || (ShopType = {}));
const SHOP_TYPES = [ShopType.ARMOR, ShopType.TOOL, ShopType.INN, ShopType.PAWN];
const CONTENTS_ADDRESSES = [
    (base, count) => base ? base : VANILLA_ARMOR_SHOP_ITEMS,
    (base, count) => base ? base + 4 * count : VANILLA_TOOL_SHOP_ITEMS,
    (base, count) => 0,
    (base, count) => 0,
];
const CONTENTS_COUNTS = [4, 4, 0, 0];
const PRICES_ADDRESSES = [
    (base, count) => base ? base + 8 * count : VANILLA_ARMOR_SHOP_PRICES,
    (base, count) => base ? base + 12 * count : VANILLA_TOOL_SHOP_PRICES,
    (base, count) => base ? base + 16 * count : VANILLA_INN_PRICES,
    (base, count) => 0,
];
const PRICES_COUNTS = [4, 4, 1, 0];
export class Shop extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.type = SHOP_TYPES[id & 3];
        this.index = id >>> 2;
        if (rom.shopDataTablesAddress) {
            const base = rom.shopDataTablesAddress;
            const count = rom.shopCount;
            const locationTable = base + 17 * count;
            this.location = rom.prg[locationTable + id];
        }
        else {
            let shopLocation = 0xff;
            for (let i = 0; i < 33 && shopLocation === 0xff; i++) {
                if (rom.prg[VANILLA_SHOP_INDICES + i] !== this.index)
                    continue;
                const location = rom.prg[VANILLA_SHOP_LOCATIONS + i];
                for (const spawn of rom.locations[location].spawns) {
                    if (spawn.type !== 4)
                        continue;
                    const obj = rom.objects[spawn.id];
                    if (obj.data[25] === 0x20 + this.type) {
                        shopLocation = location;
                        break;
                    }
                }
            }
            this.location = shopLocation;
        }
        const readPrice = rom.shopDataTablesAddress ?
            i => rom.prg[this.pricesAddress + i] / 32 :
            i => readLittleEndian(rom.prg, this.pricesAddress + 2 * i);
        this.contents = tuple(rom.prg, this.contentsAddress, CONTENTS_COUNTS[this.type]);
        this.prices = seq(PRICES_COUNTS[this.type], readPrice);
        this.used = this.location !== 0xff;
    }
    get contentsAddress() {
        const base = CONTENTS_ADDRESSES[this.type](this.rom.shopDataTablesAddress, this.rom.shopCount);
        return base + 4 * this.index;
    }
    get pricesAddress() {
        const shopTable = this.rom.shopDataTablesAddress;
        const base = PRICES_ADDRESSES[this.type](shopTable, this.rom.shopCount);
        return base + (shopTable ? 1 : 2) * PRICES_COUNTS[this.type] * this.index;
    }
    updateShopkeeper() {
        throw new Error('not implemented');
    }
}
const VANILLA_SHOP_LOCATIONS = 0x21f54;
const VANILLA_SHOP_INDICES = 0x21f75;
const VANILLA_ARMOR_SHOP_ITEMS = 0x21da4;
const VANILLA_ARMOR_SHOP_PRICES = 0x21dd0;
const VANILLA_TOOL_SHOP_ITEMS = 0x21e28;
const VANILLA_TOOL_SHOP_PRICES = 0x21e54;
const VANILLA_INN_PRICES = 0x21eac;
const VANILLA_PAWN_PRICE_TABLE = 0x21ec2;
//# sourceMappingURL=data:application/json;base64,