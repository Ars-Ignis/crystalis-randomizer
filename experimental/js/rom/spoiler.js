export class Spoiler {
    constructor(rom) {
        this.rom = rom;
        this.slots = [];
        this.route = [];
        this.mazes = [];
        this.trades = [];
        this.walls = [];
        this.unidentifiedItems = [];
        this.wildWarps = [];
        this.flags = '';
    }
    addCheck(condition, deps) {
        this.route.push(new Check(this, condition, deps));
    }
    addSlot(slot, slotName, item) {
        this.slots[slot & 0xff] =
            new Slot(this.rom, slot & 0xff, slotName, item & 0xff);
    }
    addMaze(id, name, maze) {
        this.mazes.push({ id, name, maze });
    }
    addTrade(itemId, item, npc) {
        this.trades.push({ itemId, item, npc });
    }
    addUnidentifiedItem(itemId, oldName, newName) {
        this.unidentifiedItems.push({ itemId, oldName, newName });
    }
    addWall(location, oldElement, newElement) {
        this.walls.push({ location, oldElement, newElement });
    }
    addWildWarp(id, name) {
        this.wildWarps.push({ id, name });
    }
    formatCondition(id) {
        var _a;
        return (_a = this.rom.flags[id]) === null || _a === void 0 ? void 0 : _a.name;
    }
    formatConditionList(conditions) {
        var _a;
        const terms = [];
        for (const c of conditions) {
            const f = this.rom.flags[c];
            if ((_a = f) === null || _a === void 0 ? void 0 : _a.logic.track)
                terms.push(f.name);
        }
        return terms.join(', ');
    }
}
class Check {
    constructor(spoiler, condition, deps) {
        this.spoiler = spoiler;
        this.condition = condition;
        this.deps = deps;
    }
    toString() {
        let item = 0;
        if ((this.condition & ~0x7f) === 0x100) {
            item = 0x200 | this.spoiler.rom.slots[this.condition & 0xff];
        }
        return `${this.spoiler.formatCondition(this.condition)}${item ? ` (${this.spoiler.formatCondition(item)})` : ''}: [${this.spoiler.formatConditionList(this.deps)}]`;
    }
}
class Slot {
    constructor(rom, slot, slotName, item) {
        this.slot = slot;
        this.slotName = slotName;
        this.item = item;
        this.itemName = slotToItem(rom, item);
        this.originalItem = slotToItem(rom, slot);
    }
    toString() {
        return `${this.itemName}: ${this.slotName} (${this.originalItem})`;
    }
}
function slotToItem(rom, slot) {
    if (slot >= 0x70)
        return 'Mimic';
    return rom.items[rom.itemGets[slot].itemId].messageName;
}
//# sourceMappingURL=data:application/json;base64,