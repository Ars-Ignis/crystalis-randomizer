import { Address, Segment } from './util.js';
export class Scaling {
    constructor(rom) {
        this.rom = rom;
        this.patk = new Array(48).fill(0);
        this.pdef = new Array(48).fill(0);
        this.php = new Array(48).fill(0);
        this.exp = new Array(48).fill(0);
        this.setPAtkFormula(s => 5 + s * 15 / 32);
        this.setPDefFormula(s => s);
        this.setPhpFormula(s => 48 + 5.5 * s);
        this.setExpScalingFactor(1);
    }
    setExpScalingFactor(f) {
        this.setExpFormula(s => Math.floor(4 * (2 ** ((16 + 9 * s) / 32)) * f));
    }
    setPAtkFormula(f) {
        this.patk = this.patk.map((_, s) => Math.round(8 * f(s)));
    }
    setPDefFormula(f) {
        this.pdef = this.pdef.map((_, s) => Math.round(4 * f(s)));
    }
    setPhpFormula(f) {
        this.php =
            this.php.map((_, s) => Math.min(255, Math.max(5, Math.round(f(s)))));
    }
    setExpFormula(f) {
        this.exp = this.exp.map((_, s) => {
            const e = f(s);
            return e < 0x80 ? e : Math.min(255, 0x80 + (e >> 4));
        });
    }
    write() {
        const a = this.rom.assembler();
        ADDRESS.loc(a);
        a.byte(...this.patk, ...this.pdef, ...this.php, ...this.exp);
        return [a.module()];
    }
}
const ADDRESS = Address.of(Segment.$0d, 0xbd00);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vc2NhbGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUczQyxNQUFNLE9BQU8sT0FBTztJQVdsQixZQUFxQixHQUFRO1FBQVIsUUFBRyxHQUFILEdBQUcsQ0FBSztRQUw3QixTQUFJLEdBQWEsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLFNBQUksR0FBYSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsUUFBRyxHQUFhLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxRQUFHLEdBQWEsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBSXBDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUcxQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxDQUFTO1FBRTNCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELGNBQWMsQ0FBQyxDQUE4QjtRQUUzQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsY0FBYyxDQUFDLENBQThCO1FBRTNDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxhQUFhLENBQUMsQ0FBOEI7UUFFMUMsSUFBSSxDQUFDLEdBQUc7WUFDSixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELGFBQWEsQ0FBQyxDQUE4QjtRQUcxQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNmLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLElBQUksQ0FDRixHQUFHLElBQUksQ0FBQyxJQUFJLEVBQ1osR0FBRyxJQUFJLENBQUMsSUFBSSxFQUNaLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFDWCxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb2R1bGV9IGZyb20gJy4uL2FzbS9tb2R1bGUuanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQge0FkZHJlc3MsIFNlZ21lbnR9IGZyb20gJy4vdXRpbC5qcyc7XG5cbi8vIERhdGEgc3RydWN0dXJlIGZvciBzY2FsaW5nIHRhYmxlcy4gIEdvZXMgd2l0aCBwb3N0c2h1ZmZsZS5zLlxuZXhwb3J0IGNsYXNzIFNjYWxpbmcge1xuXG4gIC8vIFRPRE8gLSBjb25zaWRlciBpZiB3ZSBjYW4gZWFzaWx5IGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGVzZSB0YWJsZXM/XG4gIC8vIGxldmVscyA9IDQ4O1xuXG4gIC8vIFRPRE8gLSBpcyB0aGVyZSBzb21ldGhpbmcgYmV0dGVyIHRvIGluaXRpYWxpemUgdGhpcyB3aXRoP1xuICBwYXRrOiBudW1iZXJbXSA9IG5ldyBBcnJheSg0OCkuZmlsbCgwKTtcbiAgcGRlZjogbnVtYmVyW10gPSBuZXcgQXJyYXkoNDgpLmZpbGwoMCk7XG4gIHBocDogbnVtYmVyW10gPSBuZXcgQXJyYXkoNDgpLmZpbGwoMCk7XG4gIGV4cDogbnVtYmVyW10gPSBuZXcgQXJyYXkoNDgpLmZpbGwoMCk7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcm9tOiBSb20pIHtcbiAgICAvLyBQQXRrID0gNSArIHMgKiAxNS8zMlxuICAgIHRoaXMuc2V0UEF0a0Zvcm11bGEocyA9PiA1ICsgcyAqIDE1IC8gMzIpO1xuICAgIC8vIE5PVEU6IHVzZWQgdG8gYmUgMyszKnMvNCwgMitzLzIsIGFuZCBvdGhlciB0aGluZ3MgZGVwZW5kaW5nIG9uXG4gICAgLy8gaG93IGFybW9ycyBhcmUgdHJlYXRlZC4gIEZvciBhcm1vciBjYXAgYXQgMyAqIEx2bCwgc2V0IFBEZWYgPSBzXG4gICAgdGhpcy5zZXRQRGVmRm9ybXVsYShzID0+IHMpO1xuICAgIC8vIFBIUCA9IG1pbigyNTUsIDQ4ICsgcm91bmQocyAqIDExIC8gMikpXG4gICAgdGhpcy5zZXRQaHBGb3JtdWxhKHMgPT4gNDggKyA1LjUgKiBzKTtcbiAgICB0aGlzLnNldEV4cFNjYWxpbmdGYWN0b3IoMSk7XG4gIH1cblxuICBzZXRFeHBTY2FsaW5nRmFjdG9yKGY6IG51bWJlcikge1xuICAgIC8vIFByZS1jb21wcmVzc2VkIGZvcm11bGEuICBBbGxvdyBzZXR0aW5nIGEgbXVsdGlwbGljYXRpdmUgZmFjdG9yLlxuICAgIHRoaXMuc2V0RXhwRm9ybXVsYShzID0+IE1hdGguZmxvb3IoNCAqICgyICoqICgoMTYgKyA5ICogcykgLyAzMikpICogZikpO1xuICB9XG5cbiAgc2V0UEF0a0Zvcm11bGEoZjogKHNjYWxpbmc6IG51bWJlcikgPT4gbnVtYmVyKSB7XG4gICAgLy8gVGFsZSBzdG9yZXMgOCAqIFBBdGssIHdoZXJlIFBBdGsgaXMgZXhwZWN0ZWQgcGxheWVyIGF0dGFjay5cbiAgICB0aGlzLnBhdGsgPSB0aGlzLnBhdGsubWFwKChfLCBzKSA9PiBNYXRoLnJvdW5kKDggKiBmKHMpKSk7XG4gIH1cblxuICBzZXRQRGVmRm9ybXVsYShmOiAoc2NhbGluZzogbnVtYmVyKSA9PiBudW1iZXIpIHtcbiAgICAvLyBUYWJsZSBzdG9yZXMgNCAqIFBEZWYsIHdoZXJlIFBEZWYgaXMgdGhlIGV4cGVjdGVkIHBsYXllciBkZWZlbnNlLlxuICAgIHRoaXMucGRlZiA9IHRoaXMucGRlZi5tYXAoKF8sIHMpID0+IE1hdGgucm91bmQoNCAqIGYocykpKTtcbiAgfVxuXG4gIHNldFBocEZvcm11bGEoZjogKHNjYWxpbmc6IG51bWJlcikgPT4gbnVtYmVyKSB7XG4gICAgLy8gVGFibGUgc3RvcmVzIFBIUCwgd2hpY2ggaXMgZXhwZWN0ZWQgcGxheWVyIEhQLlxuICAgIHRoaXMucGhwID1cbiAgICAgICAgdGhpcy5waHAubWFwKChfLCBzKSA9PiBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDUsIE1hdGgucm91bmQoZihzKSkpKSk7XG4gIH1cblxuICBzZXRFeHBGb3JtdWxhKGY6IChzY2FsaW5nOiBudW1iZXIpID0+IG51bWJlcikge1xuICAgIC8vIFRhYmxlIHN0b3JlcyBFeHBCLCB3aGljaCBpcyB0aGUgY29tcHJlc3NlZCBiYXNlIEVYUCBkcm9wLlxuICAgIC8vIENvbXByZXNzIG1hcHMgdmFsdWVzID4gMTI3IHRvICQ4MHwoeD4+NClcbiAgICB0aGlzLmV4cCA9IHRoaXMuZXhwLm1hcCgoXywgcykgPT4ge1xuICAgICAgY29uc3QgZSA9IGYocyk7XG4gICAgICByZXR1cm4gZSA8IDB4ODAgPyBlIDogTWF0aC5taW4oMjU1LCAweDgwICsgKGUgPj4gNCkpO1xuICAgIH0pO1xuICB9XG5cbiAgd3JpdGUoKTogTW9kdWxlW10ge1xuICAgIGNvbnN0IGEgPSB0aGlzLnJvbS5hc3NlbWJsZXIoKTtcbiAgICBBRERSRVNTLmxvYyhhKTtcbiAgICBhLmJ5dGUoXG4gICAgICAgIC4uLnRoaXMucGF0ayxcbiAgICAgICAgLi4udGhpcy5wZGVmLFxuICAgICAgICAuLi50aGlzLnBocCxcbiAgICAgICAgLi4udGhpcy5leHApO1xuICAgIHJldHVybiBbYS5tb2R1bGUoKV07XG4gIH1cbn1cblxuY29uc3QgQUREUkVTUyA9IEFkZHJlc3Mub2YoU2VnbWVudC4kMGQsIDB4YmQwMCk7XG4iXX0=