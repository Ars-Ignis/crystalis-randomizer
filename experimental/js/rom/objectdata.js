import { Entity } from './entity.js';
import { readLittleEndian } from './util.js';
export class ObjectData extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.used = true;
        this.name = '';
        this.base = readLittleEndian(rom.prg, this.pointer) + 0x10000;
        this.sfx = rom.prg[this.base];
        this.data = [];
        let a = this.base + 1;
        let m = 0;
        for (let i = 0; i < 32; i++) {
            if (!(i & 7)) {
                m = rom.prg[a++];
            }
            this.data.push(m & 0x80 ? rom.prg[a++] : 0);
            m <<= 1;
        }
    }
    get pointer() {
        return 0x1ac00 + (this.id << 1);
    }
    serialize() {
        const out = [this.sfx];
        for (let i = 0; i < 4; i++) {
            const k = out.length;
            out.push(0);
            for (let j = 0; j < 8; j++) {
                if (this.data[8 * i + j]) {
                    out[k] |= (0x80 >>> j);
                    out.push(this.data[8 * i + j]);
                }
            }
        }
        return out;
    }
    write() {
        const name = `Object_${this.id.toString(16).padStart(2, '0')}`;
        const a = this.rom.assembler();
        a.segment('0d');
        a.reloc(name);
        const label = a.pc();
        a.byte(...this.serialize());
        a.org(0xac00 + (this.id << 1), `${name}_Ptr`);
        a.word(label);
        return [a.module()];
    }
    get(addr) {
        return this.data[(addr - 0x300) >>> 5];
    }
    parents() {
        return [];
    }
    locations() {
        return this.rom.locations.filter((l) => l.used && l.spawns.some(spawn => spawn.isMonster() && spawn.monsterId === this.id));
    }
    palettes(includeChildren = false) {
        if (this.action === 0x22)
            return [3];
        let metaspriteId = this.data[0];
        if (this.action === 0x2a)
            metaspriteId = this.data[31] | 1;
        if (this.action === 0x29)
            metaspriteId = 0x6b;
        if (this.action === 0x26)
            metaspriteId = 0x9c;
        const ms = this.rom.metasprites[metaspriteId];
        const childMs = includeChildren && this.child ?
            this.rom.metasprites[this.rom.objects[this.rom.adHocSpawns[this.child].objectId].data[0]] :
            null;
        const s = new Set([...ms.palettes(), ...(childMs ? childMs.palettes() : [])]);
        return [...s];
    }
    isVulnerable(element) {
        return !(this.elements & (1 << element));
    }
    isShadow() {
        return this.id === 0x7b || this.id === 0x8c;
    }
    get metasprite() { return METASPRITE.get(this.data); }
    set metasprite(x) { METASPRITE.set(this.data, x); }
    get speed() { return SPEED.get(this.data); }
    set speed(x) { SPEED.set(this.data, x); }
    get collisionPlane() { return COLLISION_PLANE.get(this.data); }
    set collisionPlane(x) { COLLISION_PLANE.set(this.data, x); }
    get hitbox() { return HITBOX.get(this.data); }
    set hitbox(x) { HITBOX.set(this.data, x); }
    get hp() { return HP.get(this.data); }
    set hp(x) { HP.set(this.data, x); }
    get atk() { return ATK.get(this.data); }
    set atk(x) { ATK.set(this.data, x); }
    get def() { return DEF.get(this.data); }
    set def(x) { DEF.set(this.data, x); }
    get level() { return LEVEL.get(this.data); }
    set level(x) { LEVEL.set(this.data, x); }
    get poison() { return !!POISON.get(this.data); }
    set poison(x) { POISON.set(this.data, x ? 1 : 0); }
    get child() { return CHILD.get(this.data); }
    set child(x) { CHILD.set(this.data, x); }
    get terrainSusceptibility() { return TERRAIN_SUSCEPTIBILITY.get(this.data); }
    set terrainSusceptibility(x) { TERRAIN_SUSCEPTIBILITY.set(this.data, x); }
    get immobile() { return !!IMMOBILE.get(this.data); }
    set immobile(x) { IMMOBILE.set(this.data, x ? 1 : 0); }
    get action() { return ACTION.get(this.data); }
    set action(x) { ACTION.set(this.data, x); }
    get replacement() { return REPLACEMENT.get(this.data); }
    set replacement(x) { REPLACEMENT.set(this.data, x); }
    get goldDrop() { return GOLD_DROP.get(this.data); }
    set goldDrop(x) { GOLD_DROP.set(this.data, x); }
    get elements() { return ELEMENTS.get(this.data); }
    set elements(x) { ELEMENTS.set(this.data, x); }
    get expReward() { return EXP_REWARD.get(this.data); }
    set expReward(x) { EXP_REWARD.set(this.data, x); }
    get attackType() { return ATTACK_TYPE.get(this.data); }
    set attackType(x) { ATTACK_TYPE.set(this.data, x); }
    get statusEffect() { return STATUS_EFFECT.get(this.data); }
    set statusEffect(x) { STATUS_EFFECT.set(this.data, x); }
}
function prop(...spec) {
    return new Stat(...spec);
}
class Stat {
    constructor(...spec) {
        this.spec = spec;
    }
    get(data) {
        let value = 0;
        for (const [addr, mask = 0xff, shift = 0] of this.spec) {
            const index = (addr - 0x300) >>> 5;
            const lsh = shift < 0 ? -shift : 0;
            const rsh = shift < 0 ? 0 : shift;
            value |= ((data[index] & mask) >>> rsh) << lsh;
        }
        return value;
    }
    set(data, value) {
        for (const [addr, mask = 0xff, shift = 0] of this.spec) {
            const index = (addr - 0x300) >>> 5;
            const lsh = shift < 0 ? -shift : 0;
            const rsh = shift < 0 ? 0 : shift;
            const v = (value >>> lsh) << rsh & mask;
            data[index] = data[index] & ~mask | v;
        }
    }
}
const METASPRITE = prop([0x300]);
const SPEED = prop([0x340, 0xf]);
const COLLISION_PLANE = prop([0x3a0, 0xf0, 4]);
const HITBOX = prop([0x420, 0x40, 2], [0x3a0, 0x0f]);
const HP = prop([0x3c0]);
const ATK = prop([0x3e0]);
const DEF = prop([0x400]);
const LEVEL = prop([0x420, 0x1f]);
const POISON = prop([0x420, 0x80, 7]);
const CHILD = prop([0x440]);
const TERRAIN_SUSCEPTIBILITY = prop([0x460]);
const IMMOBILE = prop([0x4a0, 0x80, 7]);
const ACTION = prop([0x4a0, 0x7f]);
const REPLACEMENT = prop([0x4c0]);
const GOLD_DROP = prop([0x500, 0xf0, 4]);
const ELEMENTS = prop([0x500, 0xf]);
const EXP_REWARD = prop([0x520]);
const ATTACK_TYPE = prop([0x540]);
const STATUS_EFFECT = prop([0x560, 0xf]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0ZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vb2JqZWN0ZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRW5DLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUczQyxNQUFNLE9BQU8sVUFBVyxTQUFRLE1BQU07SUFVcEMsWUFBWSxHQUFRLEVBQUUsRUFBVTtRQUM5QixLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUM5RCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1osQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNsQjtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdB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LElBQUksQ0FBQyxFQUFFLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDO0lBQzlDLENBQUM7SUFFRCxJQUFJLFVBQVUsS0FBYSxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxJQUFJLFVBQVUsQ0FBQyxDQUFTLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzRCxJQUFJLEtBQUssS0FBYSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxJQUFJLEtBQUssQ0FBQyxDQUFTLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRCxJQUFJLGNBQWMsS0FBYSxPQUFPLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxJQUFJLGNBQWMsQ0FBQyxDQUFTLElBQUksZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRSxJQUFJLE1BQU0sS0FBYSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxJQUFJLE1BQU0sQ0FBQyxDQUFTLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuRCxJQUFJLEVBQUUsS0FBYSxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFJLEVBQUUsQ0FBQyxDQUFTLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzQyxJQUFJLEdBQUcsS0FBYSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxJQUFJLEdBQUcsQ0FBQyxDQUFTLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3QyxJQUFJLEdBQUcsS0FBYSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxJQUFJLEdBQUcsQ0FBQyxDQUFTLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3QyxJQUFJLEtBQUssS0FBYSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxJQUFJLEtBQUssQ0FBQyxDQUFTLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRCxJQUFJLE1BQU0sS0FBYyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsSUFBSSxNQUFNLENBQUMsQ0FBVSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVELElBQUksS0FBSyxLQUFhLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BELElBQUksS0FBSyxDQUFDLENBQVMsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWpELElBQUkscUJBQXFCLEtBQWEsT0FBTyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRixJQUFJLHFCQUFxQixDQUFDLENBQVMsSUFBSSxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbEYsSUFBSSxRQUFRLEtBQWMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELElBQUksUUFBUSxDQUFDLENBQVUsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoRSxJQUFJLE1BQU0sS0FBYSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxJQUFJLE1BQU0sQ0FBQyxDQUFTLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuRCxJQUFJLFdBQVcsS0FBYSxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxJQUFJLFdBQVcsQ0FBQyxDQUFTLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RCxJQUFJLFFBQVEsS0FBYSxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRCxJQUFJLFFBQVEsQ0FBQyxDQUFTLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV4RCxJQUFJLFFBQVEsS0FBYSxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLFFBQVEsQ0FBQyxDQUFTLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUd2RCxJQUFJLFNBQVMsS0FBYSxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxJQUFJLFNBQVMsQ0FBQyxDQUFTLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRCxJQUFJLFVBQVUsS0FBYSxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxJQUFJLFVBQVUsQ0FBQyxDQUFTLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU1RCxJQUFJLFlBQVksS0FBYSxPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRSxJQUFJLFlBQVksQ0FBQyxDQUFTLElBQUksYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRTtBQUVELFNBQVMsSUFBSSxDQUFDLEdBQUcsSUFBa0M7SUFDakQsT0FBTyxJQUFJLElBQUks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LENBQUMsQ0FBQyxDQUFDO0FBQzVCLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbkMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDcEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNqQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb2R1bGV9IGZyb20gJy4uL2FzbS9tb2R1bGUuanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQge0VudGl0eX0gZnJvbSAnLi9lbnRpdHkuanMnO1xuaW1wb3J0IHtMb2NhdGlvbn0gZnJvbSAnLi9sb2NhdGlvbi5qcyc7XG5pbXBvcnQge3JlYWRMaXR0bGVFbmRpYW59IGZyb20gJy4vdXRpbC5qcyc7XG5cbi8vIE5PVEU6IFdvdWxkIGJlIG5pY2UgdG8gY2FsbCB0aGlzIE9iamVjdCwgYnV0IHRoYXQgc2VlbXMgY29uZnVzaW5nLi4uXG5leHBvcnQgY2xhc3MgT2JqZWN0RGF0YSBleHRlbmRzIEVudGl0eSB7XG5cbiAgdXNlZDogYm9vbGVhbjtcbiAgbmFtZTogc3RyaW5nO1xuXG4gIGJhc2U6IG51bWJlcjtcblxuICBzZng6IG51bWJlcjtcbiAgZGF0YTogbnVtYmVyW107XG5cbiAgY29uc3RydWN0b3Iocm9tOiBSb20sIGlkOiBudW1iZXIpIHtcbiAgICBzdXBlcihyb20sIGlkKTtcbiAgICB0aGlzLnVzZWQgPSB0cnVlO1xuICAgIHRoaXMubmFtZSA9ICcnO1xuICAgIHRoaXMuYmFzZSA9IHJlYWRMaXR0bGVFbmRpYW4ocm9tLnByZywgdGhpcy5wb2ludGVyKSArIDB4MTAwMDA7XG4gICAgdGhpcy5zZnggPSByb20ucHJnW3RoaXMuYmFzZV07XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgbGV0IGEgPSB0aGlzLmJhc2UgKyAxO1xuICAgIGxldCBtID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgIGlmICghKGkgJiA3KSkge1xuICAgICAgICBtID0gcm9tLnByZ1thKytdO1xuICAgICAgfVxuICAgICAgdGhpcy5kYXRhLnB1c2gobSAmIDB4ODAgPyByb20ucHJnW2ErK10gOiAwKTtcbiAgICAgIG0gPDw9IDE7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHBvaW50ZXIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gMHgxYWMwMCArICh0aGlzLmlkIDw8IDEpO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIGJ5dGUgYXJyYXkgZm9yIHRoaXMgZW50cnlcbiAgc2VyaWFsaXplKCk6IG51bWJlcltdIHtcbiAgICBjb25zdCBvdXQgPSBbdGhpcy5zZnhdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICBjb25zdCBrID0gb3V0Lmxlbmd0aDtcbiAgICAgIG91dC5wdXNoKDApO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVs4ICogaSArIGpdKSB7XG4gICAgICAgICAgb3V0W2tdIHw9ICgweDgwID4+PiBqKTtcbiAgICAgICAgICBvdXQucHVzaCh0aGlzLmRhdGFbOCAqIGkgKyBqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHdyaXRlKCk6IE1vZHVsZVtdIHtcbiAgICBjb25zdCBuYW1lID0gYE9iamVjdF8ke3RoaXMuaWQudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyl9YDtcbiAgICBjb25zdCBhID0gdGhpcy5yb20uYXNzZW1ibGVyKCk7XG4gICAgYS5zZWdtZW50KCcwZCcpO1xuICAgIGEucmVsb2MobmFtZSk7XG4gICAgY29uc3QgbGFiZWwgPSBhLnBjKCk7XG4gICAgYS5ieXRlKC4uLnRoaXMuc2VyaWFsaXplKCkpO1xuICAgIGEub3JnKDB4YWMwMCArICh0aGlzLmlkIDw8IDEpLCBgJHtuYW1lfV9QdHJgKTtcbiAgICBhLndvcmQobGFiZWwpO1xuICAgIHJldHVybiBbYS5tb2R1bGUoKV07XG4gIH1cblxuICBnZXQoYWRkcjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhWyhhZGRyIC0gMHgzMDApID4+PiA1XTtcbiAgfVxuXG4gIHBhcmVudHMoKTogT2JqZWN0RGF0YVtdIHtcbiAgICAvLyBJZiB0aGlzIGlzIGEgcHJvamVjdGlsZSB0aGF0IGlzIHRoZSBwYXJlbnQgb2Ygc29tZSBtb25zdGVyLFxuICAgIC8vIHJldHVybiBhbiBhcnJheSBvZiBwYXJlbnRzIHRoYXQgc3Bhd25lZCBpdC5cbiAgICByZXR1cm4gW107XG4gICAgLy8gcmV0dXJuIHRoaXMucm9tLm1vbnN0ZXJzLmZpbHRlcihcbiAgICAvLyAgICAgKG06IE9iamVjdERhdGEpID0+IG0uY2hpbGQgJiZcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9tLmFkSG9jU3Bhd25zW20uY2hpbGRdLm9iamVjdElkID09PSB0aGlzLmlkKTtcbiAgfVxuXG4gIGxvY2F0aW9ucygpOiBMb2NhdGlvbltdIHtcbiAgICAvLyBUT0RPIC0gaGFuZGxlIG5vbi1tb25zdGVyIE5QQ3MuXG4gICAgcmV0dXJuIHRoaXMucm9tLmxvY2F0aW9ucy5maWx0ZXIoKGw6IExvY2F0aW9uKSA9PlxuICAgICAgICBsLnVzZWQgJiYgbC5zcGF3bnMuc29tZShzcGF3biA9PlxuICAgICAgICAgICAgc3Bhd24uaXNNb25zdGVyKCkgJiYgc3Bhd24ubW9uc3RlcklkID09PSB0aGlzLmlkKSk7XG4gIH1cblxuICBwYWxldHRlcyhpbmNsdWRlQ2hpbGRyZW4gPSBmYWxzZSk6IG51bWJlcltdIHtcbiAgICAvLyBOT1RFOiB0aGlzIGdldHMgdGhlIHdyb25nIHJlc3VsdCBmb3IgaWNlL3NhbmQgem9tYmllcyBhbmQgYmxvYnMuXG4gICAgLy8gIC0gbWF5IGp1c3QgbmVlZCB0byBndWVzcy9hc3N1bWUgYW5kIGV4cGVyaW1lbnQ/XG4gICAgLy8gIC0gem9tYmllcyAoYWN0aW9uIDB4MjIpIGxvb2sgbGlrZSBzaG91bGQganVzdCBiZSAzXG4gICAgLy8gIC0gbGF2YW1lbi9ibG9icyAoYWN0aW9uIDB4MjkpIGFyZSAyXG4gICAgLy8gIC0gd3JhaXRoIHNoYWRvd3MgKGFjdGlvbiAweDI2KSBhcmUgM1xuICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gMHgyMikgcmV0dXJuIFszXTsgLy8gem9tYmllXG4gICAgbGV0IG1ldGFzcHJpdGVJZCA9IHRoaXMuZGF0YVswXTtcbiAgICBpZiAodGhpcy5hY3Rpb24gPT09IDB4MmEpIG1ldGFzcHJpdGVJZCA9IHRoaXMuZGF0YVszMV0gfCAxO1xuICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gMHgyOSkgbWV0YXNwcml0ZUlkID0gMHg2YjsgLy8gYmxvYlxuICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gMHgyNikgbWV0YXNwcml0ZUlkID0gMHg5YztcblxuICAgIGNvbnN0IG1zID0gdGhpcy5yb20ubWV0YXNwcml0ZXNbbWV0YXNwcml0ZUlkXTtcbiAgICBjb25zdCBjaGlsZE1zID1cbiAgICAgICAgaW5jbHVkZUNoaWxkcmVuICYmIHRoaXMuY2hpbGQgP1xuICAgICAgICAgICAgdGhpcy5yb20ubWV0YXNwcml0ZXNbXG4gICAgICAgICAgICAgICAgdGhpcy5yb20ub2JqZWN0c1tcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb20uYWRIb2NTcGF3bnNbdGhpcy5jaGlsZF0ub2JqZWN0SWRdLmRhdGFbMF1dIDpcbiAgICAgICAgICAgIG51bGw7XG4gICAgY29uc3QgcyA9IG5ldyBTZXQoWy4uLm1zLnBhbGV0dGVzKCksIC4uLihjaGlsZE1zID8gY2hpbGRNcy5wYWxldHRlcygpIDogW10pXSk7XG4gICAgcmV0dXJuIFsuLi5zXTtcbiAgfVxuXG4gIC8vIDAgZm9yIHdpbmQsIDEgZm9yIGZpcmUsIDIgZm9yIHdhdGVyLCAzIGZvciB0aHVuZGVyXG4gIGlzVnVsbmVyYWJsZShlbGVtZW50OiBudW1iZXIpIHtcbiAgICByZXR1cm4gISh0aGlzLmVsZW1lbnRzICYgKDEgPDwgZWxlbWVudCkpO1xuICB9XG5cbiAgaXNTaGFkb3coKSB7XG4gICAgLy8gTk9URTogaW50ZXJuYWxseSB0aGUgZ2FtZSBjaGVja3MgdGhhdCB0aGUgbWV0YXNwcml0ZVxuICAgIC8vIGlzICRhNyAoc2VlICQzNTBmMyksIGJ1dCB3ZSdsbCBqdXN0IGhhcmRjb2RlLlxuICAgIHJldHVybiB0aGlzLmlkID09PSAweDdiIHx8IHRoaXMuaWQgPT09IDB4OGM7XG4gIH1cblxuICBnZXQgbWV0YXNwcml0ZSgpOiBudW1iZXIgeyByZXR1cm4gTUVUQVNQUklURS5nZXQodGhpcy5kYXRhKTsgfVxuICBzZXQgbWV0YXNwcml0ZSh4OiBudW1iZXIpIHsgTUVUQVNQUklURS5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIGdldCBzcGVlZCgpOiBudW1iZXIgeyByZXR1cm4gU1BFRUQuZ2V0KHRoaXMuZGF0YSk7IH1cbiAgc2V0IHNwZWVkKHg6IG51bWJlcikgeyBTUEVFRC5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIGdldCBjb2xsaXNpb25QbGFuZSgpOiBudW1iZXIgeyByZXR1cm4gQ09MTElTSU9OX1BMQU5FLmdldCh0aGlzLmRhdGEpOyB9XG4gIHNldCBjb2xsaXNpb25QbGFuZSh4OiBudW1iZXIpIHsgQ09MTElTSU9OX1BMQU5FLnNldCh0aGlzLmRhdGEsIHgpOyB9XG5cbiAgZ2V0IGhpdGJveCgpOiBudW1iZXIgeyByZXR1cm4gSElUQk9YLmdldCh0aGlzLmRhdGEpOyB9XG4gIHNldCBoaXRib3goeDogbnVtYmVyKSB7IEhJVEJPWC5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIGdldCBocCgpOiBudW1iZXIgeyByZXR1cm4gSFAuZ2V0KHRoaXMuZGF0YSk7IH1cbiAgc2V0IGhwKHg6IG51bWJlcikgeyBIUC5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIGdldCBhdGsoKTogbnVtYmVyIHsgcmV0dXJuIEFUSy5nZXQodGhpcy5kYXRhKTsgfVxuICBzZXQgYXRrKHg6IG51bWJlcikgeyBBVEsuc2V0KHRoaXMuZGF0YSwgeCk7IH1cblxuICBnZXQgZGVmKCk6IG51bWJlciB7IHJldHVybiBERUYuZ2V0KHRoaXMuZGF0YSk7IH1cbiAgc2V0IGRlZih4OiBudW1iZXIpIHsgREVGLnNldCh0aGlzLmRhdGEsIHgpOyB9XG5cbiAgZ2V0IGxldmVsKCk6IG51bWJlciB7IHJldHVybiBMRVZFTC5nZXQodGhpcy5kYXRhKTsgfVxuICBzZXQgbGV2ZWwoeDogbnVtYmVyKSB7IExFVkVMLnNldCh0aGlzLmRhdGEsIHgpOyB9XG5cbiAgZ2V0IHBvaXNvbigpOiBib29sZWFuIHsgcmV0dXJuICEhUE9JU09OLmdldCh0aGlzLmRhdGEpOyB9XG4gIHNldCBwb2lzb24oeDogYm9vbGVhbikgeyBQT0lTT04uc2V0KHRoaXMuZGF0YSwgeCA/IDEgOiAwKTsgfVxuXG4gIGdldCBjaGlsZCgpOiBudW1iZXIgeyByZXR1cm4gQ0hJTEQuZ2V0KHRoaXMuZGF0YSk7IH1cbiAgc2V0IGNoaWxkKHg6IG51bWJlcikgeyBDSElMRC5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIGdldCB0ZXJyYWluU3VzY2VwdGliaWxpdHkoKTogbnVtYmVyIHsgcmV0dXJuIFRFUlJBSU5fU1VTQ0VQVElCSUxJVFkuZ2V0KHRoaXMuZGF0YSk7IH1cbiAgc2V0IHRlcnJhaW5TdXNjZXB0aWJpbGl0eSh4OiBudW1iZXIpIHsgVEVSUkFJTl9TVVNDRVBUSUJJTElUWS5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIGdldCBpbW1vYmlsZSgpOiBib29sZWFuIHsgcmV0dXJuICEhSU1NT0JJTEUuZ2V0KHRoaXMuZGF0YSk7IH1cbiAgc2V0IGltbW9iaWxlKHg6IGJvb2xlYW4pIHsgSU1NT0JJTEUuc2V0KHRoaXMuZGF0YSwgeCA/IDEgOiAwKTsgfVxuXG4gIGdldCBhY3Rpb24oKTogbnVtYmVyIHsgcmV0dXJuIEFDVElPTi5nZXQodGhpcy5kYXRhKTsgfVxuICBzZXQgYWN0aW9uKHg6IG51bWJlcikgeyBBQ1RJT04uc2V0KHRoaXMuZGF0YSwgeCk7IH1cblxuICBnZXQgcmVwbGFjZW1lbnQoKTogbnVtYmVyIHsgcmV0dXJuIFJFUExBQ0VNRU5ULmdldCh0aGlzLmRhdGEpOyB9XG4gIHNldCByZXBsYWNlbWVudCh4OiBudW1iZXIpIHsgUkVQTEFDRU1FTlQuc2V0KHRoaXMuZGF0YSwgeCk7IH1cblxuICBnZXQgZ29sZERyb3AoKTogbnVtYmVyIHsgcmV0dXJuIEdPTERfRFJPUC5nZXQodGhpcy5kYXRhKTsgfVxuICBzZXQgZ29sZERyb3AoeDogbnVtYmVyKSB7IEdPTERfRFJPUC5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIGdldCBlbGVtZW50cygpOiBudW1iZXIgeyByZXR1cm4gRUxFTUVOVFMuZ2V0KHRoaXMuZGF0YSk7IH1cbiAgc2V0IGVsZW1lbnRzKHg6IG51bWJlcikgeyBFTEVNRU5UUy5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIC8qKiBVbnByb2Nlc3NlZCBleHBlcmllbmNlIHJld2FyZCAoJDUyMCx4KS4gKi9cbiAgZ2V0IGV4cFJld2FyZCgpOiBudW1iZXIgeyByZXR1cm4gRVhQX1JFV0FSRC5nZXQodGhpcy5kYXRhKTsgfVxuICBzZXQgZXhwUmV3YXJkKHg6IG51bWJlcikgeyBFWFBfUkVXQVJELnNldCh0aGlzLmRhdGEsIHgpOyB9XG5cbiAgZ2V0IGF0dGFja1R5cGUoKTogbnVtYmVyIHsgcmV0dXJuIEFUVEFDS19UWVBFLmdldCh0aGlzLmRhdGEpOyB9XG4gIHNldCBhdHRhY2tUeXBlKHg6IG51bWJlcikgeyBBVFRBQ0tfVFlQRS5zZXQodGhpcy5kYXRhLCB4KTsgfVxuXG4gIGdldCBzdGF0dXNFZmZlY3QoKTogbnVtYmVyIHsgcmV0dXJuIFNUQVRVU19FRkZFQ1QuZ2V0KHRoaXMuZGF0YSk7IH1cbiAgc2V0IHN0YXR1c0VmZmVjdCh4OiBudW1iZXIpIHsgU1RBVFVTX0VGRkVDVC5zZXQodGhpcy5kYXRhLCB4KTsgfVxufVxuXG5mdW5jdGlvbiBwcm9wKC4uLnNwZWM6IFtudW1iZXIsIG51bWJlcj8sIG51bWJlcj9dW10pIHtcbiAgcmV0dXJuIG5ldyBTdGF0KC4uLnNwZWMpO1xufVxuXG5jbGFzcyBTdGF0IHtcbiAgcmVhZG9ubHkgc3BlYzogW251bWJlciwgbnVtYmVyPywgbnVtYmVyP11bXTtcblxuICBjb25zdHJ1Y3RvciguLi5zcGVjOiBbbnVtYmVyLCBudW1iZXI/LCBudW1iZXI/XVtdKSB7XG4gICAgdGhpcy5zcGVjID0gc3BlYztcbiAgfVxuXG4gIGdldChkYXRhOiBudW1iZXJbXSkge1xuICAgIGxldCB2YWx1ZSA9IDA7XG4gICAgZm9yIChjb25zdCBbYWRkciwgbWFzayA9IDB4ZmYsIHNoaWZ0ID0gMF0gb2YgdGhpcy5zcGVjKSB7XG4gICAgICBjb25zdCBpbmRleCA9IChhZGRyIC0gMHgzMDApID4+PiA1O1xuICAgICAgY29uc3QgbHNoID0gc2hpZnQgPCAwID8gLXNoaWZ0IDogMDtcbiAgICAgIGNvbnN0IHJzaCA9IHNoaWZ0IDwgMCA/IDAgOiBzaGlmdDtcbiAgICAgIHZhbHVlIHw9ICgoZGF0YVtpbmRleF0gJiBtYXNrKSA+Pj4gcnNoKSA8PCBsc2g7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHNldChkYXRhOiBudW1iZXJbXSwgdmFsdWU6IG51bWJlcikge1xuICAgIGZvciAoY29uc3QgW2FkZHIsIG1hc2sgPSAweGZmLCBzaGlmdCA9IDBdIG9mIHRoaXMuc3BlYykge1xuICAgICAgY29uc3QgaW5kZXggPSAoYWRkciAtIDB4MzAwKSA+Pj4gNTtcbiAgICAgIGNvbnN0IGxzaCA9IHNoaWZ0IDwgMCA/IC1zaGlmdCA6IDA7XG4gICAgICBjb25zdCByc2ggPSBzaGlmdCA8IDAgPyAwIDogc2hpZnQ7XG4gICAgICBjb25zdCB2ID0gKHZhbHVlID4+PiBsc2gpIDw8IHJzaCAmIG1hc2s7XG4gICAgICBkYXRhW2luZGV4XSA9IGRhdGFbaW5kZXhdICYgfm1hc2sgfCB2O1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBNRVRBU1BSSVRFID0gcHJvcChbMHgzMDBdKTtcbmNvbnN0IFNQRUVEID0gcHJvcChbMHgzNDAsIDB4Zl0pO1xuY29uc3QgQ09MTElTSU9OX1BMQU5FID0gcHJvcChbMHgzYTAsIDB4ZjAsIDRdKTtcbmNvbnN0IEhJVEJPWCA9IHByb3AoWzB4NDIwLCAweDQwLCAyXSwgWzB4M2EwLCAweDBmXSk7XG5jb25zdCBIUCA9IHByb3AoWzB4M2MwXSk7XG5jb25zdCBBVEsgPSBwcm9wKFsweDNlMF0pO1xuY29uc3QgREVGID0gcHJvcChbMHg0MDBdKTtcbmNvbnN0IExFVkVMID0gcHJvcChbMHg0MjAsIDB4MWZdKTtcbmNvbnN0IFBPSVNPTiA9IHByb3AoWzB4NDIwLCAweDgwLCA3XSk7XG5jb25zdCBDSElMRCA9IHByb3AoWzB4NDQwXSk7IC8vIGFkLWhvYyBzcGF3biBpbmRleFxuY29uc3QgVEVSUkFJTl9TVVNDRVBUSUJJTElUWSA9IHByb3AoWzB4NDYwXSk7XG5jb25zdCBJTU1PQklMRSA9IHByb3AoWzB4NGEwLCAweDgwLCA3XSk7IC8vIHdpbGwgbm90IGJlIGtub2NrZWQgYmFja1xuY29uc3QgQUNUSU9OID0gcHJvcChbMHg0YTAsIDB4N2ZdKTtcbmNvbnN0IFJFUExBQ0VNRU5UID0gcHJvcChbMHg0YzBdKTtcbmNvbnN0IEdPTERfRFJPUCA9IHByb3AoWzB4NTAwLCAweGYwLCA0XSk7XG5jb25zdCBFTEVNRU5UUyA9IHByb3AoWzB4NTAwLCAweGZdKTtcbmNvbnN0IEVYUF9SRVdBUkQgPSBwcm9wKFsweDUyMF0pO1xuY29uc3QgQVRUQUNLX1RZUEUgPSBwcm9wKFsweDU0MF0pO1xuY29uc3QgU1RBVFVTX0VGRkVDVCA9IHByb3AoWzB4NTYwLCAweGZdKTtcbiJdfQ==