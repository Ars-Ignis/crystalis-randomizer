import { Entity, EntityArray } from './entity.js';
import { MessageId } from './messageid.js';
import { DIALOG_FLAGS, SPAWN_CONDITION_FLAGS, Address, Segment, hex, readBigEndian, tuple, upperCamelToSpaces } from './util.js';
const { $04, $05, $0e } = Segment;
export class Npcs extends EntityArray {
    constructor(rom) {
        super(0xcd);
        this.rom = rom;
        this.GoaSoldier = new Npc(this, 0x0b);
        this.LeafElder = new Npc(this, 0x0d);
        this.LeafElderDaughter = new Npc(this, 0x11);
        this.LeafRabbit = new Npc(this, 0x13);
        this.WindmillGuard = new Npc(this, 0x14);
        this.SleepingWindmillGuard = new Npc(this, 0x15);
        this.Akahana = new Npc(this, 0x16);
        this.OakElder = new Npc(this, 0x1d);
        this.OakMother = new Npc(this, 0x1e);
        this.OakChild = new Npc(this, 0x1f);
        this.Aryllis = new Npc(this, 0x23);
        this.AmazonesGuard = new Npc(this, 0x25);
        this.AryllisRightAttendant = new Npc(this, 0x26);
        this.AryllisLeftAttendant = new Npc(this, 0x27);
        this.Nadare = new Npc(this, 0x28);
        this.SoldierGuard = new Npc(this, 0x2d);
        this.PortoaThroneRoomBackDoorGuard = new Npc(this, 0x33);
        this.PortoaPalaceFrontGuard = new Npc(this, 0x34);
        this.PortoaQueen = new Npc(this, 0x38);
        this.FortuneTeller = new Npc(this, 0x39);
        this.WaterfallCaveAdventurers = new Npc(this, 0x3a);
        this.JoelElder = new Npc(this, 0x3d);
        this.Clark = new Npc(this, 0x44);
        this.ShyronGuard = new Npc(this, 0x4e);
        this.Brokahana = new Npc(this, 0x54);
        this.SaharaBunny = new Npc(this, 0x59);
        this.Deo = new Npc(this, 0x5a);
        this.SaharaElder = new Npc(this, 0x5b);
        this.SaharaElderDaughter = new Npc(this, 0x5c);
        this.Zebu = new Npc(this, 0x5e);
        this.Tornel = new Npc(this, 0x5f);
        this.Stom = new Npc(this, 0x60);
        this.MesiaRecording = new Npc(this, 0x61);
        this.Asina = new Npc(this, 0x62);
        this.HurtDolphin = new Npc(this, 0x63);
        this.Fisherman = new Npc(this, 0x64);
        this.KensuInCabin = new Npc(this, 0x68);
        this.Dolphin = new Npc(this, 0x69);
        this.SleepingKensu = new Npc(this, 0x6b);
        this.KensuDisguisedAsDancer = new Npc(this, 0x6c);
        this.KensuDisguisedAsSoldier = new Npc(this, 0x6d);
        this.AztecaInShyron = new Npc(this, 0x6e);
        this.DeadAkahana = new Npc(this, 0x70);
        this.DeadStomsGirlfriend = new Npc(this, 0x71);
        this.DeadStom = new Npc(this, 0x72);
        this.KensuInSwan = new Npc(this, 0x74);
        this.SlimedKensu = new Npc(this, 0x75);
        this.FishermanDaughter = new Npc(this, 0x7b);
        this.Kensu = new Npc(this, 0x7e);
        this.AkahanaInBrynmaer = new Npc(this, 0x82);
        this.AztecaInPyramid = new Npc(this, 0x83);
        this.SaberaDisguisedAsMesia = new Npc(this, 0x84);
        this.StonedWaterfallCaveAdventurers = new Npc(this, 0x85);
        this.StonedAkahana = new Npc(this, 0x88);
        this.Mesia = new Npc(this, 0x8e);
        this.Vampire1 = new Npc(this, 0xc0);
        this.Insect = new Npc(this, 0xc1);
        this.Kelbesque1 = new Npc(this, 0xc2);
        this.Rage = new Npc(this, 0xc3);
        this.Kelbesque2 = new Npc(this, 0xc5);
        this.Sabera2 = new Npc(this, 0xc6);
        this.Mado2 = new Npc(this, 0xc7);
        this.Karmine = new Npc(this, 0xc8);
        this.StatueOfMoon = new Npc(this, 0xc9);
        this.StatueOfSun = new Npc(this, 0xca);
        this.Draygon = new Npc(this, 0xcb);
        this.Vampire2 = new Npc(this, 0xcc);
        for (const key in this) {
            const npc = this[key];
            if (!this.hasOwnProperty(key) || !(npc instanceof Npc))
                continue;
            this[npc.id] = npc;
            npc.name = upperCamelToSpaces(key);
        }
        for (let i = 0; i < 0xcd; i++) {
            if (!this[i]) {
                this[i] = new Npc(this, i);
            }
        }
    }
}
export class Npc extends Entity {
    constructor(npcs, id) {
        super(npcs.rom, id);
        this.npcs = npcs;
        this.spawnConditions = new Map();
        this.localDialogs = new Map();
        const rom = npcs.rom;
        if (id > 0xcc)
            throw new Error(`Unavailable: ${id}`);
        this._used = !UNUSED_NPCS.has(id) && (id < 0x8f || id >= 0xc0);
        let dialogBase = id < 0xc4 ? this.dialogPointer.readAddress(rom.prg) : null;
        if (dialogBase && dialogBase.org === 0x8b39)
            dialogBase = null;
        this.data = tuple(rom.prg, this.dataBase.offset, 4);
        const spawnBase = this.spawnPointer.readAddress(rom.prg);
        let i = spawnBase.offset;
        let loc;
        while (this.used && (loc = rom.prg[i++]) !== 0xff) {
            const flags = SPAWN_CONDITION_FLAGS.read(rom.prg, i);
            i += 2 * flags.length;
            this.spawnConditions.set(loc, flags);
        }
        this.globalDialogs = [];
        if (dialogBase) {
            let a = dialogBase.offset;
            while (true) {
                const [dialog, last] = GlobalDialog.parse(rom.prg, a);
                a += 4;
                if (dialog.condition)
                    this.globalDialogs.push(dialog);
                if (last)
                    break;
            }
            const locations = [];
            while (true) {
                const location = rom.prg[a++];
                if (location === 0xff)
                    break;
                locations.push([location, rom.prg[a++]]);
            }
            if (!locations.length)
                locations.push([-1, 0]);
            const base = a;
            for (const [location, offset] of locations) {
                const dialogs = [];
                this.localDialogs.set(location, dialogs);
                a = base + offset;
                while (true) {
                    const [dialog, last] = LocalDialog.parse(rom.prg, a);
                    a += dialog.byteLength();
                    dialogs.push(dialog);
                    if (last)
                        break;
                }
            }
        }
    }
    get dataBase() {
        const seg = this.id & 0x80 ? $05 : $04;
        const org = 0x80f0 | ((this.id & 0xfc) << 6) | ((this.id & 3) << 2);
        return Address.of(seg, org);
    }
    get spawnPointer() {
        return Address.of($0e, 0x85e0 + (this.id << 1));
    }
    get dialogPointer() {
        return Address.of($0e, 0x895d + (this.id << 1));
    }
    get used() { return this._used; }
    set used(used) {
        if (used && (this.id > 0x88 && this.id < 0xc0 && this.id !== 0x8e)) {
            throw new Error(`invalid: ${this.id}`);
        }
        this._used = used;
    }
    spawnConditionsBytes() {
        const bytes = [];
        for (const [loc, flags] of this.spawnConditions) {
            bytes.push(loc, ...SPAWN_CONDITION_FLAGS.bytes(flags));
        }
        bytes.push(0xff);
        return bytes;
    }
    dialog(location) {
        const id = location ? location.id : -1;
        const dialogs = this.localDialogs.get(id);
        if (dialogs)
            return dialogs;
        throw new Error(`No local dialog for NPC ${hex(this.id)} at ${hex(id)}`);
    }
    spawns(location) {
        const id = location.id;
        const conditions = this.spawnConditions.get(location.id);
        if (conditions)
            return conditions;
        throw new Error(`No spawn condition for NPC ${hex(this.id)} at ${hex(id)}`);
    }
    hasDialog() {
        const result = Boolean(this.globalDialogs.length || this.localDialogs.size);
        if (this.id > 0x8e && this.id !== 0xc3 && result) {
            throw new Error(`invalid: ${this.id}`);
        }
        return result;
    }
    *allDialogs() {
        yield* this.globalDialogs;
        for (const ds of this.localDialogs.values()) {
            yield* ds;
        }
    }
    dialogBytes() {
        if (!this.hasDialog())
            return [];
        const bytes = [];
        function serialize(ds) {
            const out = [];
            for (let i = 0; i < ds.length; i++) {
                out.push(...ds[i].bytes(i === ds.length - 1));
            }
            return out;
        }
        if (this.globalDialogs.length) {
            bytes.push(...serialize(this.globalDialogs));
        }
        else {
            bytes.push(0x80, 0, 0, 0);
        }
        const locals = [];
        const cache = new Map();
        for (const [location, dialogs] of this.localDialogs) {
            const localBytes = serialize(dialogs);
            const label = localBytes.join(',');
            const cached = cache.get(label);
            if (cached != null) {
                bytes.push(location, cached);
                continue;
            }
            cache.set(label, locals.length);
            if (location !== -1)
                bytes.push(location, locals.length);
            locals.push(...localBytes);
        }
        if (locals.length)
            bytes.push(0xff, ...locals);
        return bytes;
    }
    link(id) {
        const other = this.rom.npcs[id];
        this.spawnConditions = other.spawnConditions;
        this.linkDialog(id);
    }
    linkDialog(id) {
        const other = this.rom.npcs[id];
        this.globalDialogs = other.globalDialogs;
        this.localDialogs = other.localDialogs;
    }
    localDialog(location, index) {
        if (index == null) {
            index = location;
            location = -1;
        }
        const dialogs = this.localDialogs.get(location);
        if (dialogs == null || index >= dialogs.length) {
            throw new Error(`No local dialog ${index} for location ${hex(location)}`);
        }
        return dialogs[index];
    }
    isParalyzable() {
        for (let i = 0x35058; i < 0x3506c; i++) {
            if (this.rom.prg[i] === this.id)
                return false;
        }
        return true;
    }
    write() {
        if (!this.used)
            return [];
        const id = hex(this.id);
        const a = this.rom.assembler();
        this.dataBase.loc(a);
        a.byte(...this.data);
        a.segment('0e', 'fe', 'ff');
        a.reloc(`SpawnCondition_${id}`);
        const spawn = a.pc();
        a.byte(...this.spawnConditionsBytes());
        this.spawnPointer.loc(a, `SpawnCondition_${id}_Pointer`);
        a.word(spawn);
        if (this.hasDialog()) {
            a.segment('0e', 'fe', 'ff');
            a.reloc(`Dialog_${id}`);
            const dialog = a.pc();
            a.byte(...this.dialogBytes());
            this.dialogPointer.loc(a, `Dialog_${id}_Pointer`);
            a.word(dialog);
        }
        return [a.module()];
    }
}
export class GlobalDialog {
    constructor(condition, message) {
        this.condition = condition;
        this.message = message;
    }
    static of(condition, message) {
        const [part, index, action = 0] = message;
        return new GlobalDialog(condition, MessageId.of({ part, index, action }));
    }
    static parse(data, offset = 0) {
        const flag = readBigEndian(data, offset);
        const message = MessageId.from(data, offset + 2);
        let condition = flag & 0x03ff;
        const last = !!(flag & 0x8000);
        const sign = flag & 0x2000;
        if (sign)
            condition = ~condition;
        return [new GlobalDialog(condition, message), last];
    }
    bytes(last) {
        let flag = this.condition;
        if (flag < 0)
            flag = (~flag) | 0x2000;
        if (last)
            flag |= 0x8000;
        return [flag >>> 8, flag & 0xff, ...this.message.data];
    }
}
export class LocalDialog {
    constructor(condition, message, update, flags) {
        this.condition = condition;
        this.message = message;
        this.update = update;
        this.flags = flags;
    }
    clone() {
        return LocalDialog.parse(this.bytes(false))[0];
    }
    static parse(data, offset = 0) {
        const word = readBigEndian(data, offset);
        const message = MessageId.from(data, offset + 2);
        const update = data[offset + 4];
        offset += 5;
        let condition = word & 0x03ff;
        const last = !!(word & 0x8000);
        const sign = word & 0x2000;
        if (sign)
            condition = ~condition;
        const flags = word & 0x4000 ? DIALOG_FLAGS.read(data, offset) : [];
        return [new LocalDialog(condition, message, update, flags), last];
    }
    static of(condition, message, flags = []) {
        const [part, index, action = 0] = message;
        return new LocalDialog(condition, MessageId.of({ part, index, action }), 0, flags);
    }
    byteLength() {
        return 5 + 2 * this.flags.length;
    }
    bytes(last) {
        let flag = this.condition;
        if (flag < 0)
            flag = (~flag) | 0x2000;
        if (last)
            flag |= 0x8000;
        if (this.flags.length)
            flag |= 0x4000;
        return [flag >>> 8, flag & 0xff, ...this.message.data, this.update,
            ...DIALOG_FLAGS.bytes(this.flags)];
    }
}
const UNUSED_NPCS = new Set([
    0x31, 0x3b, 0x3c, 0x66, 0x67, 0x6a, 0x73, 0x74,
    0x82, 0x86, 0x87, 0x89, 0x8a, 0x8b, 0x8c, 0x8d,
    0xc4,
]);
export class PortoaQueen extends Npc {
    constructor() {
        super(...arguments);
        this.id = 0x38;
        this.name = 'Portoa Queen';
    }
    get expectedSword() { return this.localDialog(3).condition & 0xff; }
    set expectedSword(id) { this.localDialog(3).condition = 0x200 | id; }
}
//# sourceMappingURL=data:application/json;base64,