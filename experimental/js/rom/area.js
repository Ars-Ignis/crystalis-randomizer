import { initializer } from './util.js';
const area = initializer();
export class Areas {
    constructor(rom) {
        this.rom = rom;
        this.Empty = area();
        this.ValleyOfWind = area({ type: 'overworld' });
        this.CordelPlain = area();
        this.WaterfallValley = area();
        this.AngrySea = area();
        this.GoaValley = area();
        this.Desert1 = area();
        this.Desert2 = area();
        this.Leaf = area();
        this.Brynmaer = area();
        this.Oak = area();
        this.Amazones = area();
        this.Nadare = area();
        this.Portoa = area();
        this.Joel = area();
        this.ZombieTown = area();
        this.Swan = area();
        this.Shyron = area();
        this.Goa = area();
        this.Sahara = area();
        this.EastCave = area();
        this.WindmillCave = area();
        this.SealedCave = area();
        this.ZebuCave = area();
        this.Swamp = area();
        this.MtSabreWest = area();
        this.MtSabreNorth = area();
        this.LimeTreeValley = area();
        this.PortoaPalace = area();
        this.FishermanHouse = area();
        this.UndergroundChannel = area();
        this.JoelPassage = area();
        this.EvilSpiritIslandEntrance = area();
        this.EvilSpiritIsland = area();
        this.KirisaPlantCave = area();
        this.SwanGate = area();
        this.MtHydra = area();
        this.GoaFortress = area();
        this.OasisEntrance = area();
        this.OasisCave = area();
        this.DesertCave1 = area();
        this.SaharaMeadow = area();
        this.DesertCave2 = area();
        this.Mezame = area();
        this.Windmill = area();
        this.StomHouse = area();
        this.WaterfallCave = area();
        this.KirisaMeadow = area();
        this.FogLampCave = area();
        this.LimeTreeLake = area();
        this.Lighthouse = area();
        this.SaberaFortress = area();
        this.ShyronTemple = area();
        this.Styx = area();
        this.FortressBasement = area();
        this.Pyramid = area();
        this.Crypt = area();
        this.Tower = area();
        area.commit(this, (key, opts) => makeArea(this, key, opts || {}));
    }
}
function makeArea(areas, key, opts) {
    const name = key.replace(/([a-z])([A-Z0-9])/g, '$1 $2').replace('Of', 'of');
    return new Area(areas, name, opts);
}
export class Area {
    constructor(areas, name, opts) {
        this.areas = areas;
        this.name = name;
        this.opts = opts;
    }
}
//# sourceMappingURL=data:application/json;base64,