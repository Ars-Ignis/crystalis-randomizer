import { DefaultMap } from '../util.js';
import { featureMask } from './metascreendata.js';
export class Metatilesets {
    constructor(rom) {
        this.rom = rom;
        this._all = [];
        this.grass = this.tileset(0x80, {
            patterns: [0x00, 0x0c],
        });
        this.town = this.tileset(0x84, {});
        this.cave = this.tileset(0x88, {});
        this.dolphinCave = this.tileset(0x88, {});
        this.pyramid = this.tileset(0x8c, {});
        this.river = this.tileset(0x90, {
            animated: [0, 1],
            patterns: [0x14, 0x00],
        });
        this.sea = this.tileset(0x94, {});
        this.lime = this.tileset(0x94, {});
        this.mountain = this.tileset(0x94, {});
        this.shrine = this.tileset(0x98, {});
        this.desert = this.tileset(0x9c, {});
        this.mountainRiver = this.tileset(0x9c, {});
        this.swamp = this.tileset(0xa0, {
            consolidated: true,
        });
        this.house = this.tileset(0xa0, {});
        this.fortress = this.tileset(0xa4, {});
        this.labyrinth = this.tileset(0xa4, {});
        this.iceCave = this.tileset(0xa8, {});
        this.tower = this.tileset(0xac, {});
        for (const key in this) {
            const value = this[key];
            if (value instanceof Metatileset)
                value.name = key;
        }
    }
    tileset(id, opts) {
        const ts = new Metatileset(this.rom, id, opts);
        this._all.push(ts);
        return ts;
    }
    [Symbol.iterator]() {
        return this._all[Symbol.iterator]();
    }
}
export class Metatileset {
    constructor(rom, tilesetId, data) {
        this.rom = rom;
        this.tilesetId = tilesetId;
        this.data = data;
        this._screens = new Set();
        this._cache = undefined;
    }
    [Symbol.iterator]() {
        return this._screens[Symbol.iterator]();
    }
    get cache() {
        if (!this._cache)
            this._cache = new NeighborCache(this);
        return this._cache;
    }
    get tileset() {
        return this.rom.tilesets[this.tilesetId];
    }
    get empty() {
        const e = this.cache.empty;
        if (!e)
            throw new Error(`No empty screen for ${this.name}`);
        return e;
    }
    effects() {
        return this.tileset.effects();
    }
    getTile(id) {
        return this.tileset.getTile(id);
    }
    addScreen(screen) {
        this._screens.add(screen);
        screen.unsafeAddTileset(this);
        this.invalidate();
    }
    deleteScreen(screen) {
        this._screens.delete(screen);
        screen.unsafeRemoveTileset(this);
        this.invalidate();
    }
    getMetascreens(screenId) {
        var _a;
        return (_a = this.cache.fromId.get(screenId)) !== null && _a !== void 0 ? _a : [];
    }
    getExits(type) {
        return this.cache.exits.get(type);
    }
    getMetascreensFromTileString(tile) {
        return this.cache.tiles.has(tile) ? this.cache.tiles.get(tile) : [];
    }
    getScreensWithOnlyFeatures(...features) {
        let mask = 0;
        for (const feature of features) {
            mask |= featureMask[feature];
        }
        const screens = [];
        for (const s of this) {
            if (!(s.features & ~mask))
                screens.push(s);
        }
        return screens;
    }
    withMod(tile, mod) {
        const out = [];
        for (const s of this.cache.tiles.get(tile)) {
            if (s.data.mod === mod)
                out.push(s);
        }
        return out;
    }
    unreachableVariant(screen) {
        for (const s of this) {
            if (s.sid === screen.sid && s.isEmpty())
                return s;
        }
        return screen;
    }
    isBannedVertical(above, below) {
        return this.cache.bannedNeighbors[0].has(above.uid << 16 | below.uid);
    }
    isBannedHorizontal(left, right) {
        return this.cache.bannedNeighbors[1].has(left.uid << 16 | right.uid);
    }
    invalidate() {
        this._cache = undefined;
    }
}
export var Dir;
(function (Dir) {
    Dir.N = 0;
    Dir.W = 1;
    Dir.S = 2;
    Dir.E = 3;
})(Dir || (Dir = {}));
class NeighborCache {
    constructor(tileset) {
        var _a, _b;
        this.tileset = tileset;
        this.fromId = new DefaultMap(() => []);
        this.exits = new DefaultMap(() => []);
        this.tiles = new DefaultMap(() => []);
        this.bannedNeighbors = [new Set(), new Set()];
        let empty = undefined;
        for (const s of tileset) {
            if (s.sid >= 0)
                this.fromId.get(s.sid).push(s);
            if (!empty &&
                s.data.edges === '    ' &&
                s.data.placement !== 'manual' &&
                s.hasFeature('empty') &&
                !((_a = s.data.exits) === null || _a === void 0 ? void 0 : _a.length)) {
                empty = s;
            }
            for (const exit of (_b = s.data.exits) !== null && _b !== void 0 ? _b : []) {
                this.exits.get(exit.type).push(s);
            }
            const tiles = typeof s.data.tile === 'string' ? [s.data.tile] : s.data.tile;
            for (const tile of tiles !== null && tiles !== void 0 ? tiles : []) {
                this.tiles.get(tile.replace(/\|/g, '')).push(s);
            }
            if (s.hasFeature('spikes') || s.hasFeature('ramp') ||
                s.hasFeature('overpass') || s.hasFeature('pit') ||
                s.isEmpty()) {
                this.banDeadEndNeighbor(s);
            }
            const ms = tileset.rom.metascreens;
            this.banDeadEndNeighbor(ms.branchNWE_wall, 1);
            this.banNeighbor(ms.deadEndS_stairs, ms.deadEndN_stairs, 2);
            this.banNeighbor(ms.deadEndNS_stairs, ms.deadEndN_stairs, 2);
            this.banNeighbor(ms.deadEndS_stairs, ms.deadEndNS_stairs, 2);
            this.banNeighbor(ms.deadEndNS_stairs, ms.deadEndNS_stairs, 2);
        }
        this.empty = empty !== null && empty !== void 0 ? empty : tileset.rom.metascreens.caveEmpty;
    }
    banDeadEndNeighbor(s, dirs = 15) {
        var _a, _b;
        for (const t of this.tileset) {
            if (!t.hasFeature('deadend'))
                continue;
            for (let dir = 0; dir < 4; dir++) {
                const mask = 1 << dir;
                if (!(dirs & mask))
                    continue;
                if (((_a = s.data.edges) === null || _a === void 0 ? void 0 : _a[dir]) !== ' ' && ((_b = t.data.edges) === null || _b === void 0 ? void 0 : _b[dir ^ 2]) !== ' ') {
                    this.banNeighbor(s, t, dir);
                }
            }
        }
    }
    banNeighbor(s, t, dir) {
        this.bannedNeighbors[dir & 1]
            .add((dir & 2 ? s : t).uid << 16 | (dir & 2 ? t : s).uid);
    }
}
//# sourceMappingURL=data:application/json;base64,