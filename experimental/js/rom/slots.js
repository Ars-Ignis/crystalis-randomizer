import { seq } from './util.js';
class ChestSlot {
    constructor(slot, location, spawn) {
        this.slot = slot;
        this.location = location;
        this.spawn = spawn;
    }
    set(rom, item) {
        const spawn = rom.locations[this.location].spawns[this.spawn];
        spawn.id = item;
        if (item >= 0x70)
            spawn.patternBank = 1;
        if (rom.spoiler) {
            rom.spoiler.addSlot(this.slot, `Chest in ${rom.locations[this.location].name}`, item);
        }
    }
}
class HardcodedSlot {
    constructor(slot, address, name) {
        this.slot = slot;
        this.address = address;
        this.name = name;
    }
    set(rom, item) {
        rom.prg[this.address] = item;
        if (this.name && rom.spoiler)
            rom.spoiler.addSlot(this.slot, this.name || '', item);
    }
}
class BossDropSlot {
    constructor(slot, boss) {
        this.slot = slot;
        this.boss = boss;
    }
    set(rom, item) {
        if (item >= 0x70)
            throw new Error('no mimics on bosses');
        rom.bossKills[this.boss].itemDrop = item;
        if (rom.spoiler) {
            rom.spoiler.addSlot(this.slot, rom.bosses.fromBossKill(this.boss).name, item);
        }
    }
}
class ActionGrantSlot {
    constructor(slot, key) {
        this.slot = slot;
        this.key = key;
    }
    set(rom, item) {
        if (item >= 0x70)
            throw new Error('no mimics on action grants');
        rom.itemGets.actionGrants.set(this.key, item);
        if (rom.spoiler) {
            const names = {
                0x84: 'Whirlpool trigger',
                0xb2: 'Mt Sabre summit trigger',
                0xb4: '',
            };
            const name = this.key < 0x80 ?
                rom.items[this.key].messageName + ' trade-in' :
                names[this.key];
            if (name) {
                rom.spoiler.addSlot(this.slot, name, item);
            }
        }
    }
}
class PersonDataSlot {
    constructor(slot, person, index) {
        this.slot = slot;
        this.person = person;
        this.index = index;
    }
    set(rom, item) {
        if (item >= 0x70)
            throw new Error(`no mimics on people`);
        rom.npcs[this.person].data[this.index] = item;
        if (rom.spoiler) {
            const npc = rom.npcs[this.person];
            let name = npc && npc.name;
            if (npc && npc.itemNames) {
                const itemName = npc.itemNames[this.index];
                name = itemName ? name + ' ' + itemName : undefined;
            }
            rom.spoiler.addSlot(this.slot, name || '', item);
        }
    }
}
class Slots {
    constructor(rom) {
        this.rom = rom;
        const slots = seq(0x80, () => []);
        function addSlot(slot) {
            slots[slot.slot].push(slot);
        }
        for (const loc of rom.locations) {
            if (!loc.used)
                continue;
            for (let i = 0; i < loc.spawns.length; i++) {
                const spawn = loc.spawns[i];
                if (spawn.isChest())
                    addSlot(new ChestSlot(spawn.id, loc.id, i));
            }
        }
        for (const npc of rom.npcs) {
            if (!npc.used || !npc.hasDialog)
                continue;
            for (const ds of npc.localDialogs.values()) {
                for (const d of ds) {
                    switch (d.message.action) {
                        case 0x03:
                        case 0x0a:
                            addSlot(new PersonDataSlot(npc.data[0], npc.id, 0));
                            break;
                        case 0x11:
                            addSlot(new PersonDataSlot(npc.data[1], npc.id, 1));
                            break;
                        case 0x09:
                            if (npc.data[1] < 0x80) {
                                addSlot(new PersonDataSlot(npc.data[1], npc.id, 1));
                            }
                            break;
                    }
                }
            }
        }
        for (const boss of rom.bosses) {
            if (boss.kill === 3 || boss.kill === 13)
                continue;
            if (boss.kill != null && boss.drop != null) {
                addSlot(new BossDropSlot(boss.drop, boss.kill));
            }
        }
        for (const [key, orig] of rom.itemGets.actionGrants) {
            addSlot(new ActionGrantSlot(orig, key));
        }
        for (const [addr, name] of hardcodedItems) {
            addSlot(new HardcodedSlot(this.rom.prg[addr], addr, name));
        }
        extraSlots.forEach(addSlot);
        this.slots = slots;
    }
    update(fill) {
        for (let i = 0; i < fill.length; i++) {
            if (fill[i] == null)
                continue;
            for (const slot of this.slots[i]) {
                slot.set(this.rom, fill[i]);
            }
        }
        const flags = this.rom.itemGets.map(() => []);
        for (const itemget of this.rom.itemGets) {
            const { id } = itemget;
            for (const flag of itemget.flags) {
                if (flag === -1)
                    continue;
                const target = preservedItemGetFlags.has(flag) ? id : fill[id];
                (flags[target] || []).push(flag);
            }
        }
        for (const itemget of this.rom.itemGets) {
            itemget.flags = flags[itemget.id];
        }
    }
}
const hardcodedItems = [
    [0x367f4, 'Stom fight'],
    [0x3d18f, 'Slimed Kensu'],
    [0x3d1f9, 'Asina'],
    [0x3d2af, 'Stoned Akahana'],
    [0x3d337, 'Rage'],
];
const extraSlots = [
    new PersonDataSlot(0x36, 0x63, 1),
];
export function update(rom, fill) {
    new Slots(rom).update(fill);
}
const preservedItemGetFlags = new Set([
    0x024,
    0x08b,
    0x2f4,
    0x2f5,
    0x2f6,
    0x2f7,
    0x2f8,
    0x2f9,
    0x2fa,
    0x2fb,
    0x2fc,
    0x2fd,
    0x2fe,
    0x2ff,
]);
//# sourceMappingURL=data:application/json;base64,