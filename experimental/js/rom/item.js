import { Entity, EntityArray } from './entity.js';
import { MessageId } from './messageid.js';
import { hex, readString, tuple, ITEM_USE_FLAGS, ITEM_CONDITION_FLAGS } from './util.js';
import { Address, Segment } from './util.js';
import { assertNever } from '../util.js';
const { $0e, $0f, $10, $1a } = Segment;
const ITEM_USE_JUMP_TABLE = Address.of($0e, 0x8399);
const ITEM_USE_DATA_TABLE = Address.of($0e, 0x9be2);
const ITEM_DATA_TABLE = Address.of($10, 0x8ff0);
const SELECTED_ITEM_TABLE = Address.of($10, 0x903b);
const MENU_NAME_TABLE = Address.of($10, 0x9086);
const ARMOR_DEFENSE_TABLE = Address.of($1a, 0x8bc0);
const SHIELD_DEFENSE_TABLE = Address.of($1a, 0x8bc9);
const UNIQUE_ITEM_SCALING_TABLE = Address.of($0f, 0xa110);
const MENU_NAME_ENCODE = [
    ['Sword', '\x0a\x0b\x0c'],
    [' of ', '\x5c\x5d'],
    ['Bracelet', '\x3c\x3d\x3e\x5b'],
    ['Shield', '\x0d\x0e\x0f'],
    ['Armor', '\x7b\x11\x12'],
    ['Magic', '\x23\x25\x28'],
    ['Power', '\x13\x14\x15'],
    ['Item', '\x16\x17\x5e'],
];
export class Item extends Entity {
    constructor(items, id, opts = {}) {
        super(items.rom, id);
        this.items = items;
        const rom = this.rom;
        items[id] = this;
        this.itemUseData = [];
        this.trades = opts.trades || [];
        this.use = opts.use || false;
        this.weight = opts.weight || 1;
        this.valueAddr =
            opts.valueAddr != null ? Address.of($0e, opts.valueAddr) : undefined;
        if (this.valueAddr != null)
            this.value = this.valueAddr.read(rom.prg);
        if (this.use) {
            this.itemUseJump =
                this.itemUseJumpPointer.readAddress(rom.prg, $0e, $0f);
            const entries = items.itemUseJumps[this.itemUseJump.org];
            if (!entries)
                throw new Error(`Bad ItemUseJump: ${this.itemUseJump}`);
            let itemUseOffset = this.itemUseDataPointer.readAddress(rom.prg, $0e, $0f);
            for (const entry of entries) {
                const data = ItemUse.from(entry, rom.prg, itemUseOffset);
                this.itemUseData.push(data);
                itemUseOffset = itemUseOffset.plus(data.length);
            }
        }
        this.itemDataValue = this.itemDataPointer.read(rom.prg);
        this.selectedItemValue = this.selectedItemPointer.read(rom.prg);
        const menuNameBase = this.menuNamePointer.readAddress(rom.prg);
        this.menuName =
            MENU_NAME_ENCODE.reduce((s, [d, e]) => s.replace(e, d), readString(rom.prg, menuNameBase.offset, 0xff));
    }
    get messageName() {
        return this.rom.messages.itemNames[this.id];
    }
    set messageName(name) {
        this.rom.messages.itemNames[this.id] = name;
    }
    get basePrice() {
        return this.rom.shops.basePrices[this.id];
    }
    set basePrice(price) {
        this.rom.shops.basePrices[this.id] = price;
    }
    get itemUseJumpPointer() {
        return ITEM_USE_JUMP_TABLE.plus(this.id << 1);
    }
    get itemUseDataPointer() {
        return ITEM_USE_DATA_TABLE.plus(this.id << 1);
    }
    get itemDataPointer() {
        return ITEM_DATA_TABLE.plus(this.id);
    }
    get selectedItemPointer() {
        return SELECTED_ITEM_TABLE.plus(this.id);
    }
    get menuNamePointer() {
        return MENU_NAME_TABLE.plus(this.id << 1);
    }
    itemUseMessages() {
        const messages = new Map();
        for (const { message } of this.itemUseData) {
            messages.set(message.mid(), message);
        }
        return [...messages.values()];
    }
    setName(name) {
        this.messageName = this.menuName = name;
    }
    get palette() { return this.itemDataValue & 3; }
    set palette(p) { this.itemDataValue = this.itemDataValue & ~3 | (p & 3); }
    get unique() { return !!(this.itemDataValue & 0x40); }
    set unique(u) { this.itemDataValue = this.itemDataValue & ~0x40 | (u ? 0x40 : 0); }
    get worn() { return !!(this.itemDataValue & 0x20); }
    set worn(w) { this.itemDataValue = this.itemDataValue & ~0x20 | (w ? 0x20 : 0); }
    get solid() { return !!(this.itemDataValue & 0x80); }
    set solid(s) { this.itemDataValue = this.itemDataValue & ~0x80 | (s ? 0x80 : 0); }
    assemble(a) {
        this.itemDataPointer.loc(a);
        a.byte(this.itemDataValue);
        this.selectedItemPointer.loc(a);
        a.byte(this.selectedItemValue);
        const menuNameEncoded = MENU_NAME_ENCODE.reduce((s, [d, e]) => s.replace(d, e), this.menuName);
        a.segment($10);
        a.reloc(`ItemMenuName_${hex(this.id)}`);
        const menuNameAddr = a.pc();
        a.byte(menuNameEncoded, 0xff);
        this.menuNamePointer.loc(a);
        a.word(menuNameAddr);
        if (this.itemUseJump) {
            this.itemUseJumpPointer.loc(a);
            a.word(this.itemUseJump.org);
            const itemUseData = [];
            for (const use of this.itemUseData) {
                itemUseData.push(...use.bytes());
            }
            a.segment($0e.name, $0f.name);
            a.reloc(`ItemUseData_${hex(this.id)}`);
            const usePtr = a.pc();
            a.byte(...itemUseData);
            this.itemUseDataPointer.loc(a);
            a.word(usePtr);
        }
        if (this.valueAddr) {
            this.valueAddr.loc(a);
            a.byte(this.value);
        }
    }
    isMagic() {
        return this.id >= 0x41 && this.id <= 0x48;
    }
}
export class ItemUse {
    constructor(kind, want, message, flags) {
        this.kind = kind;
        this.want = want;
        this.message = message;
        this.flags = flags;
    }
    static from(kind, data, addr) {
        let { offset } = addr;
        let want = 0;
        if (kind === 'expect' || kind === 'screen') {
            want = data[offset + 1] << 8 | data[offset];
            offset += 2;
        }
        else if (kind === 'flag') {
            const flags = ITEM_CONDITION_FLAGS.read(data, offset);
            if (!flags.length)
                flags.push(~0);
            if (flags.length > 1)
                throw new Error(`Flag list too long: ${flags}`);
            want = flags[0];
            offset += 2;
        }
        else if (kind === 'location') {
            want = data[offset++];
        }
        else if (kind !== 'empty') {
            assertNever(kind);
        }
        const message = MessageId.from(data, offset);
        const flags = ITEM_USE_FLAGS.read(data, offset + 2);
        return new ItemUse(kind, want, message, flags);
    }
    bytes() {
        const bytes = [];
        if (this.kind === 'expect' || this.kind === 'screen') {
            bytes.push(this.want & 0xff, (this.want >>> 8) & 0xff);
        }
        else if (this.kind === 'flag') {
            const flagBytes = ITEM_CONDITION_FLAGS.bytes([this.want]);
            if (flagBytes.length !== 2)
                throw new Error(`bad data: ${flagBytes}`);
            bytes.push(...flagBytes);
        }
        else if (this.kind === 'location') {
            bytes.push(this.want);
        }
        else if (this.kind !== 'empty') {
            assertNever(this.kind);
        }
        bytes.push(...this.message.data);
        bytes.push(...ITEM_USE_FLAGS.bytes(this.flags));
        return bytes;
    }
    tradeNpc() {
        if (this.kind !== 'expect')
            return null;
        if ((this.want >>> 8) !== 1)
            return null;
        return this.want & 0xff;
    }
    get length() {
        const header = this.kind === 'empty' ? 0 : this.kind === 'location' ? 1 : 2;
        return 2 * (1 + Math.max(1, this.flags.length)) + header;
    }
}
class Shield extends Item {
    get defense() {
        return this.items.shieldDefense[this.id - 0x0c];
    }
    set defense(def) {
        this.items.shieldDefense[this.id - 0x0c] = def;
    }
}
class Armor extends Item {
    get defense() {
        return this.items.armorDefense[this.id - 0x14];
    }
    set defense(def) {
        this.items.armorDefense[this.id - 0x14] = def;
    }
}
export class Items extends EntityArray {
    constructor(rom) {
        super(0x49);
        this.rom = rom;
        this.itemUseJumps = DEFAULT_ITEM_USE_JUMPS;
        this.SwordOfWind = new Item(this, 0x00);
        this.SwordOfFire = new Item(this, 0x01);
        this.SwordOfWater = new Item(this, 0x02);
        this.SwordOfThunder = new Item(this, 0x03);
        this.Crystalis = new Item(this, 0x04);
        this.BallOfWind = new Item(this, 0x05);
        this.TornadoBracelet = new Item(this, 0x06);
        this.BallOfFire = new Item(this, 0x07);
        this.FlameBracelet = new Item(this, 0x08);
        this.BallOfWater = new Item(this, 0x09);
        this.BlizzardBracelet = new Item(this, 0x0a);
        this.BallOfThunder = new Item(this, 0x0b);
        this.StormBracelet = new Item(this, 0x0c);
        this.CarapaceShield = new Shield(this, 0x0d);
        this.BronzeShield = new Shield(this, 0x0e);
        this.PlatinumShield = new Shield(this, 0x0f);
        this.MirroredShield = new Shield(this, 0x10);
        this.CeramicShield = new Shield(this, 0x11);
        this.SacredShield = new Shield(this, 0x12);
        this.BattleShield = new Shield(this, 0x13);
        this.PsychoShield = new Shield(this, 0x14);
        this.TannedHide = new Armor(this, 0x15);
        this.LeatherArmor = new Armor(this, 0x16);
        this.BronzeArmor = new Armor(this, 0x17);
        this.PlatinumArmor = new Armor(this, 0x18);
        this.SoldierSuit = new Armor(this, 0x19);
        this.CeramicSuit = new Armor(this, 0x1a);
        this.BattleArmor = new Armor(this, 0x1b);
        this.PsychoArmor = new Armor(this, 0x1c);
        this.MedicalHerb = new Item(this, 0x1d, { use: true,
            trades: [0],
            valueAddr: 0x84ea });
        this.Antidote = new Item(this, 0x1e, { use: true });
        this.LysisPlant = new Item(this, 0x1f, { use: true });
        this.FruitOfLime = new Item(this, 0x20, { use: true });
        this.FruitOfPower = new Item(this, 0x21, { use: true,
            valueAddr: 0x850c });
        this.MagicRing = new Item(this, 0x22, { use: true });
        this.FruitOfRepun = new Item(this, 0x23, { use: true });
        this.WarpBoots = new Item(this, 0x24, { use: true });
        this.StatueOfOnyx = new Item(this, 0x25, { use: true, trades: [0] });
        this.OpelStatue = new Item(this, 0x26, { use: true });
        this.InsectFlute = new Item(this, 0x27, { use: true });
        this.FluteOfLime = new Item(this, 0x28, { use: true,
            trades: [0, 1, 2, 3] });
        this.GasMask = new Item(this, 0x29);
        this.PowerRing = new Item(this, 0x2a);
        this.WarriorRing = new Item(this, 0x2b);
        this.IronNecklace = new Item(this, 0x2c);
        this.DeosPendant = new Item(this, 0x2d);
        this.RabbitBoots = new Item(this, 0x2e);
        this.LeatherBoots = new Item(this, 0x2f);
        this.ShieldRing = new Item(this, 0x30);
        this.AlarmFlute = new Item(this, 0x31, { use: true, trades: [0, 1] });
        this.WindmillKey = new Item(this, 0x32, { use: true });
        this.KeyToPrison = new Item(this, 0x33, { use: true });
        this.KeyToStyx = new Item(this, 0x34, { use: true });
        this.FogLamp = new Item(this, 0x35, { use: true, trades: [0] });
        this.ShellFlute = new Item(this, 0x36, { use: true });
        this.EyeGlasses = new Item(this, 0x37, { use: true });
        this.BrokenStatue = new Item(this, 0x38, { use: true });
        this.GlowingLamp = new Item(this, 0x39, { use: true });
        this.StatueOfGold = new Item(this, 0x3a, { use: true });
        this.LovePendant = new Item(this, 0x3b, { use: true, trades: [0] });
        this.KirisaPlant = new Item(this, 0x3c, { use: true, trades: [0] });
        this.IvoryStatue = new Item(this, 0x3d, { use: true, trades: [0] });
        this.BowOfMoon = new Item(this, 0x3e, { use: true });
        this.BowOfSun = new Item(this, 0x3f, { use: true });
        this.BowOfTruth = new Item(this, 0x40, { use: true });
        this.Refresh = new Item(this, 0x41);
        this.Paralysis = new Item(this, 0x42);
        this.Telepathy = new Item(this, 0x43);
        this.Teleport = new Item(this, 0x44);
        this.Recover = new Item(this, 0x45);
        this.Barrier = new Item(this, 0x46);
        this.Change = new Item(this, 0x47);
        this.Flight = new Item(this, 0x48);
        this.armorDefense = tuple(rom.prg, ARMOR_DEFENSE_TABLE.offset, 9);
        this.shieldDefense = tuple(rom.prg, SHIELD_DEFENSE_TABLE.offset, 9);
    }
    write() {
        const a = this.rom.assembler();
        ARMOR_DEFENSE_TABLE.loc(a);
        a.byte(...this.armorDefense);
        SHIELD_DEFENSE_TABLE.loc(a);
        a.byte(...this.shieldDefense);
        const uniqueTable = new Array(10).fill(0);
        for (const item of this) {
            item.assemble(a);
            if (item.unique)
                uniqueTable[item.id >>> 3] |= (1 << (item.id & 7));
        }
        UNIQUE_ITEM_SCALING_TABLE.loc(a);
        a.byte(...uniqueTable);
        return [a.module()];
    }
}
const DEFAULT_ITEM_USE_JUMPS = {
    0x8439: ['expect'],
    0x8442: ['screen'],
    0x8450: ['empty'],
    0x8451: ['screen'],
    0x845f: ['location'],
    0x8491: ['expect'],
    0x84a9: ['expect', 'expect'],
    0x84b3: ['location'],
    0x84d0: ['expect'],
    0x84db: [],
    0x84e0: ['expect', 'empty'],
    0x8507: ['empty'],
    0x851d: ['empty'],
    0x8524: ['empty'],
    0x852f: ['empty'],
    0x853a: ['empty'],
    0x854a: ['empty'],
    0x8564: ['empty'],
    0x8565: ['expect'],
    0x856b: ['flag'],
    0x8585: ['empty'],
    0x859e: ['expect', 'expect', 'expect', 'expect'],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFdBQVcsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNoRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUN0QixjQUFjLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDL0QsT0FBTyxFQUFDLE9BQU8sRUFBUSxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFakQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUV2QyxNQUFNLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFDLEdBQUcsT0FBTyxDQUFDO0FBRXJDLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEQsTUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNwRCxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRCxNQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3BELE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRWhELE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEQsTUFBTSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEdB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bUJBQWMsR0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsbUJBQWMsR0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsa0JBQWEsR0FBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsaUJBQVksR0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsaUJBQVksR0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsaUJBQVksR0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFMUMsZUFBVSxHQUFTLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxpQkFBWSxHQUFPLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxnQkFBVyxHQUFRLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxrQkFBYSxHQUFNLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxnQkFBVyxHQUFRLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxnQkFBVyxHQUFRLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxnQkFBVyxHQUFRLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxnQkFBVyxHQUFRLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV6QyxnQkFBVyxHQUFRLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSTtZQUNULE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNYLFNBQVMsRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO1FBQzdELGFBQVEsR0FBVyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDckQsZUFBVSxHQUFTLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUNyRCxnQkFBVyxHQUFRLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUNyRCxpQkFBWSxHQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSTtZQUNULFNBQVMsRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO1FBQzdELGNBQVMsR0FBVSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDckQsaUJBQVksR0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDckQsY0FBUyxHQUFVLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUVyRCxpQkFBWSxHQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUNsRSxlQUFVLEdBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3JELGdCQUFXLEdBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBRXJELGdCQUFXLEdBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJO1lBQ1QsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBRWhFLFlBQU8sR0FBWSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEMsY0FBUyxHQUFVLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QyxnQkFBVyxHQUFRLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QyxpQkFBWSxHQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QyxnQkFBVyxHQUFRLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QyxnQkFBVyxHQUFRLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QyxpQkFBWSxHQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QyxlQUFVLEdBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhDLGVBQVUsR0FBUyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ3JFLGdCQUFXLEdBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3JELGdCQUFXLEdBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3JELGNBQVMsR0FBVSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDckQsWUFBTyxHQUFZLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUNsRSxlQUFVLEdBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3JELGVBQVUsR0FBUyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDckQsaUJBQVksR0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDckQsZ0JBQVcsR0FBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDckQsaUJBQVksR0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDckQsZ0JBQVcsR0FBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDbEUsZ0JBQVcsR0FBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFB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LE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQztJQUVsQixNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFFakIsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDO0lBRWxCLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQztJQUVwQixNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFFbEIsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztJQUU1QixNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUM7SUFFcEIsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDO0lBRWxCLE1BQU0sRUFBRSxFQUFFO0lBRVYsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQztJQUUzQixNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFFakIsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDO0lBRWpCLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQztJQUVqQixNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFFakIsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDO0lBRWpCLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQztJQUVqQixNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFFakIsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDO0lBRWxCLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUVoQixNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFFakIsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO0NBQ2pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Fzc2VtYmxlcn0gZnJvbSAnLi4vYXNtL2Fzc2VtYmxlci5qcyc7XG5pbXBvcnQge01vZHVsZX0gZnJvbSAnLi4vYXNtL21vZHVsZS5qcyc7XG5pbXBvcnQge0VudGl0eSwgRW50aXR5QXJyYXl9IGZyb20gJy4vZW50aXR5LmpzJztcbmltcG9ydCB7TWVzc2FnZUlkfSBmcm9tICcuL21lc3NhZ2VpZC5qcyc7XG5pbXBvcnQge2hleCwgcmVhZFN0cmluZywgdHVwbGUsXG4gICAgICAgIElURU1fVVNFX0ZMQUdTLCBJVEVNX0NPTkRJVElPTl9GTEFHU30gZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCB7QWRkcmVzcywgRGF0YSwgU2VnbWVudH0gZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuaW1wb3J0IHthc3NlcnROZXZlcn0gZnJvbSAnLi4vdXRpbC5qcyc7XG5cbmNvbnN0IHskMGUsICQwZiwgJDEwLCAkMWF9ID0gU2VnbWVudDtcblxuY29uc3QgSVRFTV9VU0VfSlVNUF9UQUJMRSA9IEFkZHJlc3Mub2YoJDBlLCAweDgzOTkpO1xuY29uc3QgSVRFTV9VU0VfREFUQV9UQUJMRSA9IEFkZHJlc3Mub2YoJDBlLCAweDliZTIpO1xuY29uc3QgSVRFTV9EQVRBX1RBQkxFID0gQWRkcmVzcy5vZigkMTAsIDB4OGZmMCk7XG5jb25zdCBTRUxFQ1RFRF9JVEVNX1RBQkxFID0gQWRkcmVzcy5vZigkMTAsIDB4OTAzYik7XG5jb25zdCBNRU5VX05BTUVfVEFCTEUgPSBBZGRyZXNzLm9mKCQxMCwgMHg5MDg2KTtcblxuY29uc3QgQVJNT1JfREVGRU5TRV9UQUJMRSA9IEFkZHJlc3Mub2YoJDFhLCAweDhiYzApO1xuY29uc3QgU0hJRUxEX0RFRkVOU0VfVEFCTEUgPSBBZGRyZXNzLm9mKCQxYSwgMHg4YmM5KTtcbmNvbnN0IFVOSVFVRV9JVEVNX1NDQUxJTkdfVEFCTEUgPSBBZGRyZXNzLm9mKCQwZiwgMHhhMTEwKTtcblxuLy8gTWFwIHRvIHBhdHRlcm4gZW50cmllcyBmb3IgY29tYmluYXRpb25zIG9mIGxldHRlcnMuXG5jb25zdCBNRU5VX05BTUVfRU5DT0RFID0gW1xuICBbJ1N3b3JkJywgJ1xceDBhXFx4MGJcXHgwYyddLFxuICBbJyBvZiAnLCAnXFx4NWNcXHg1ZCddLFxuICBbJ0JyYWNlbGV0JywgJ1xceDNjXFx4M2RcXHgzZVxceDViJ10sXG4gIFsnU2hpZWxkJywgJ1xceDBkXFx4MGVcXHgwZiddLFxuICBbJ0FybW9yJywgJ1xceDdiXFx4MTFcXHgxMiddLFxuICBbJ01hZ2ljJywgJ1xceDIzXFx4MjVcXHgyOCddLFxuICBbJ1Bvd2VyJywgJ1xceDEzXFx4MTRcXHgxNSddLFxuICBbJ0l0ZW0nLCAnXFx4MTZcXHgxN1xceDVlJ10sXG5dO1xuXG5pbnRlcmZhY2UgSXRlbU9wdGlvbnMge1xuICB0cmFkZXM/OiBudW1iZXJbXTtcbiAgdXNlPzogYm9vbGVhbjtcbiAgd2VpZ2h0PzogbnVtYmVyO1xuICAvLyBhZGRyZXNzICh3aXRoaW4gc2VnbWVudCAwZSkgb2YgdGhlIHZhbHVlIHNwZWNpZnlpbmcgaG93IG11Y2ggdG8gaGVhbC5cbiAgdmFsdWVBZGRyPzogbnVtYmVyO1xufVxuXG4vLyBBbiBpdGVtOyBub3RlIHRoYXQgc29tZSB0YWJsZXMgZ28gdXAgdG8gJDQ5IG9yIGV2ZW4gJDRhIC0gdGhlc2UgY2FuIGJiZSBpZ25vcmVkXG5leHBvcnQgY2xhc3MgSXRlbSBleHRlbmRzIEVudGl0eSB7XG5cbiAgaXRlbVVzZUp1bXA/OiBBZGRyZXNzO1xuICBpdGVtVXNlRGF0YTogSXRlbVVzZVtdO1xuXG4gIGl0ZW1EYXRhVmFsdWU6IG51bWJlcjsgLy8gOjAzIGlzIHBhbGV0dGUsIDo4MCBpcyBzd29yZCBhbmQgbWFnaWMgKHNvbGlkIGJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDo0MCBpcyB1bmlxdWUsIDoyMCBpcyB3b3JuIChzd29yZC9hbW9yL29yYi9yaW5nL21hZ2ljKVxuICAvLyBvbmx5IHVzZWQgZm9yIGRpc2FibGluZyBvcGVsIHN0YXR1ZSB1c2VcbiAgc2VsZWN0ZWRJdGVtVmFsdWU6IG51bWJlcjtcblxuICAvLyBQUk9CTEVNIC0gcmVhZCBpbiBvbmUgZm9ybWF0LCB3cml0ZSBpbiBhbm90aGVyLi4uP1xuICBtZW51TmFtZTogc3RyaW5nO1xuXG4gIHRyYWRlczogbnVtYmVyW107XG4gIHVzZTogYm9vbGVhbjtcblxuICB2YWx1ZUFkZHI/OiBBZGRyZXNzO1xuICB2YWx1ZT86IG51bWJlcjtcblxuICAvLyBXZWlnaHQgZm9yIHNodWZmbGluZyAtIGhpZ2hlciBudW1iZXJzIHdpbGwgYmUgcGxhY2VkIGVhcmxpZXIuXG4gIHdlaWdodDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGl0ZW1zOiBJdGVtcywgaWQ6IG51bWJlciwgb3B0czogSXRlbU9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKGl0ZW1zLnJvbSwgaWQpO1xuICAgIGNvbnN0IHJvbSA9IHRoaXMucm9tO1xuICAgIGl0ZW1zW2lkXSA9IHRoaXM7XG4gICAgdGhpcy5pdGVtVXNlRGF0YSA9IFtdO1xuICAgIHRoaXMudHJhZGVzID0gb3B0cy50cmFkZXMgfHwgW107XG4gICAgdGhpcy51c2UgPSBvcHRzLnVzZSB8fCBmYWxzZTtcbiAgICB0aGlzLndlaWdodCA9IG9wdHMud2VpZ2h0IHx8IDE7XG4gICAgdGhpcy52YWx1ZUFkZHIgPVxuICAgICAgICBvcHRzLnZhbHVlQWRkciAhPSBudWxsID8gQWRkcmVzcy5vZigkMGUsIG9wdHMudmFsdWVBZGRyKSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodGhpcy52YWx1ZUFkZHIgIT0gbnVsbCkgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWVBZGRyLnJlYWQocm9tLnByZyk7XG5cbiAgICBpZiAodGhpcy51c2UpIHtcbiAgICAgIHRoaXMuaXRlbVVzZUp1bXAgPVxuICAgICAgICAgIHRoaXMuaXRlbVVzZUp1bXBQb2ludGVyLnJlYWRBZGRyZXNzKHJvbS5wcmcsICQwZSwgJDBmKTtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBpdGVtcy5pdGVtVXNlSnVtcHNbdGhpcy5pdGVtVXNlSnVtcC5vcmddO1xuICAgICAgaWYgKCFlbnRyaWVzKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBJdGVtVXNlSnVtcDogJHt0aGlzLml0ZW1Vc2VKdW1wfWApO1xuICAgICAgbGV0IGl0ZW1Vc2VPZmZzZXQgPVxuICAgICAgICAgIHRoaXMuaXRlbVVzZURhdGFQb2ludGVyLnJlYWRBZGRyZXNzKHJvbS5wcmcsICQwZSwgJDBmKTtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICBjb25zdCBkYXRhID0gSXRlbVVzZS5mcm9tKGVudHJ5LCByb20ucHJnLCBpdGVtVXNlT2Zmc2V0KTtcbiAgICAgICAgdGhpcy5pdGVtVXNlRGF0YS5wdXNoKGRhdGEpO1xuICAgICAgICBpdGVtVXNlT2Zmc2V0ID0gaXRlbVVzZU9mZnNldC5wbHVzKGRhdGEubGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLml0ZW1EYXRhVmFsdWUgPSB0aGlzLml0ZW1EYXRhUG9pbnRlci5yZWFkKHJvbS5wcmcpO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtVmFsdWUgPSB0aGlzLnNlbGVjdGVkSXRlbVBvaW50ZXIucmVhZChyb20ucHJnKTtcblxuICAgIGNvbnN0IG1lbnVOYW1lQmFzZSA9IHRoaXMubWVudU5hbWVQb2ludGVyLnJlYWRBZGRyZXNzKHJvbS5wcmcpO1xuICAgIHRoaXMubWVudU5hbWUgPVxuICAgICAgICBNRU5VX05BTUVfRU5DT0RFLnJlZHVjZSgocywgW2QsIGVdKSA9PiBzLnJlcGxhY2UoZSwgZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRTdHJpbmcocm9tLnByZywgbWVudU5hbWVCYXNlLm9mZnNldCwgMHhmZikpO1xuXG4gICAgLy8gY29uc3QgdHJhZGVJbkNvdW50ID0gVFJBREVfSU5TLmdldChpZCk7XG4gICAgLy8gdGhpcy50cmFkZUluID1cbiAgICAvLyAgICAgdHJhZGVJbkNvdW50ID8gdHVwbGUocm9tLnByZywgdGhpcy5pdGVtVXNlRGF0YUJhc2UsIDYgKiB0cmFkZUluQ291bnQpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gY29uc29sZS5sb2coYEl0ZW0gJHt0aGlzLm1lbnVOYW1lfSBiYXNlIHByaWNlICR7dGhpcy5iYXNlUHJpY2V9YCk7XG4gICAgLy8gVE9ETyAtIHJvbS51bmlxdWVJdGVtVGFibGVBZGRyZXNzXG4gICAgLy8gIC0+IGN1cnJlbnQgaGFyZC1jb2RlZCBpbiBwYXRjaC5pZGVudGlmeUtleUl0ZW1zRm9yRGlmZmljdWx0eUJ1ZmZzXG4gIH1cblxuICBnZXQgbWVzc2FnZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5yb20ubWVzc2FnZXMuaXRlbU5hbWVzW3RoaXMuaWRdO1xuICB9XG4gIHNldCBtZXNzYWdlTmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLnJvbS5tZXNzYWdlcy5pdGVtTmFtZXNbdGhpcy5pZF0gPSBuYW1lO1xuICB9XG5cbiAgZ2V0IGJhc2VQcmljZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnJvbS5zaG9wcy5iYXNlUHJpY2VzW3RoaXMuaWRdO1xuICB9XG4gIHNldCBiYXNlUHJpY2UocHJpY2U6IG51bWJlcikge1xuICAgIHRoaXMucm9tLnNob3BzLmJhc2VQcmljZXNbdGhpcy5pZF0gPSBwcmljZTtcbiAgfVxuXG4gIGdldCBpdGVtVXNlSnVtcFBvaW50ZXIoKTogQWRkcmVzcyB7XG4gICAgcmV0dXJuIElURU1fVVNFX0pVTVBfVEFCTEUucGx1cyh0aGlzLmlkIDw8IDEpO1xuICB9XG5cbiAgZ2V0IGl0ZW1Vc2VEYXRhUG9pbnRlcigpOiBBZGRyZXNzIHtcbiAgICByZXR1cm4gSVRFTV9VU0VfREFUQV9UQUJMRS5wbHVzKHRoaXMuaWQgPDwgMSk7XG4gIH1cblxuICBnZXQgaXRlbURhdGFQb2ludGVyKCk6IEFkZHJlc3Mge1xuICAgIHJldHVybiBJVEVNX0RBVEFfVEFCTEUucGx1cyh0aGlzLmlkKTtcbiAgfVxuXG4gIGdldCBzZWxlY3RlZEl0ZW1Qb2ludGVyKCk6IEFkZHJlc3Mge1xuICAgIHJldHVybiBTRUxFQ1RFRF9JVEVNX1RBQkxFLnBsdXModGhpcy5pZCk7XG4gIH1cblxuICBnZXQgbWVudU5hbWVQb2ludGVyKCk6IEFkZHJlc3Mge1xuICAgIHJldHVybiBNRU5VX05BTUVfVEFCTEUucGx1cyh0aGlzLmlkIDw8IDEpO1xuICB9XG5cbiAgaXRlbVVzZU1lc3NhZ2VzKCk6IE1lc3NhZ2VJZFtdIHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IG5ldyBNYXA8c3RyaW5nLCBNZXNzYWdlSWQ+KCk7XG4gICAgZm9yIChjb25zdCB7bWVzc2FnZX0gb2YgdGhpcy5pdGVtVXNlRGF0YSkge1xuICAgICAgbWVzc2FnZXMuc2V0KG1lc3NhZ2UubWlkKCksIG1lc3NhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gWy4uLm1lc3NhZ2VzLnZhbHVlcygpXTtcbiAgfVxuXG4gIHNldE5hbWUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5tZXNzYWdlTmFtZSA9IHRoaXMubWVudU5hbWUgPSBuYW1lO1xuICB9XG5cbiAgLy8gUGFsZXR0ZSBmb3IgbWVudSBpY29uXG4gIGdldCBwYWxldHRlKCk6IG51bWJlciB7IHJldHVybiB0aGlzLml0ZW1EYXRhVmFsdWUgJiAzOyB9XG4gIHNldCBwYWxldHRlKHA6IG51bWJlcikgeyB0aGlzLml0ZW1EYXRhVmFsdWUgPSB0aGlzLml0ZW1EYXRhVmFsdWUgJiB+MyB8IChwICYgMyk7IH1cblxuICAvLyBVbmlxdWUgaXRlbTogY2Fubm90IGJlIGRyb3BwZWQgb3Igc29sZFxuICBnZXQgdW5pcXVlKCk6IGJvb2xlYW4geyByZXR1cm4gISEodGhpcy5pdGVtRGF0YVZhbHVlICYgMHg0MCk7IH1cbiAgc2V0IHVuaXF1ZSh1OiBib29sZWFuKSB7IHRoaXMuaXRlbURhdGFWYWx1ZSA9IHRoaXMuaXRlbURhdGFWYWx1ZSAmIH4weDQwIHwgKHUgPyAweDQwIDogMCk7IH1cblxuICAvLyBXb3JuIGl0ZW0gKHN3b3JkL2FybW9yL29yYi9yaW5nL21hZ2ljKSAtIG5vdCBjbGVhciB3aGVyZSB0aGlzIGlzIHVzZWRcbiAgZ2V0IHdvcm4oKTogYm9vbGVhbiB7IHJldHVybiAhISh0aGlzLml0ZW1EYXRhVmFsdWUgJiAweDIwKTsgfVxuICBzZXQgd29ybih3OiBib29sZWFuKSB7IHRoaXMuaXRlbURhdGFWYWx1ZSA9IHRoaXMuaXRlbURhdGFWYWx1ZSAmIH4weDIwIHwgKHcgPyAweDIwIDogMCk7IH1cblxuICAvLyBTb2xpZCBiYWNrZ3JvdW5kIChzd29yZC9tYWdpYylcbiAgZ2V0IHNvbGlkKCk6IGJvb2xlYW4geyByZXR1cm4gISEodGhpcy5pdGVtRGF0YVZhbHVlICYgMHg4MCk7IH1cbiAgc2V0IHNvbGlkKHM6IGJvb2xlYW4pIHsgdGhpcy5pdGVtRGF0YVZhbHVlID0gdGhpcy5pdGVtRGF0YVZhbHVlICYgfjB4ODAgfCAocyA/IDB4ODAgOiAwKTsgfVxuXG4gIC8vIGdldCBpdGVtVXNlRGF0YSgpOiBVaW50OEFycmF5IHtcbiAgLy8gICAvLyBOT1RFOiB0aGlzIGlzIGhhY2t5LCBpdCBzaG91bGQgcmVhbGx5IGJlIGxlc3MgdGhhbiAyNCwgYW5kIHZhcmlhYmxlIVxuICAvLyAgIC8vIE1vcmVvdmVyLCBzb21lIGl0ZW1zIGhhdmUgb3ZlcmxhcHBpbmcgZGF0YSwgd2hpY2ggaXMgYXdrd2FyZC5cbiAgLy8gICAvLyBTbyByZWFsbHkgd2UgbmVlZCBzZXBhcmF0ZSBJdGVtVXNlIGFuZCBJdGVtSnVtcCBlbnRpdGllcyBhbmQgdGhlbiBqdXN0XG4gIC8vICAgLy8gcG9pbnQgdG8gd2hpY2ggb25lIHdlIHdhbnQgaGVyZS5cbiAgLy8gICByZXR1cm4gdGhpcy5yb20ucHJnLnN1YmFycmF5KHRoaXMuaXRlbVVzZURhdGFCYXNlLCAyNCk7XG4gIC8vIH1cblxuICBhc3NlbWJsZShhOiBBc3NlbWJsZXIpIHtcbiAgICB0aGlzLml0ZW1EYXRhUG9pbnRlci5sb2MoYSk7XG4gICAgYS5ieXRlKHRoaXMuaXRlbURhdGFWYWx1ZSk7XG4gICAgdGhpcy5zZWxlY3RlZEl0ZW1Qb2ludGVyLmxvYyhhKTtcbiAgICBhLmJ5dGUodGhpcy5zZWxlY3RlZEl0ZW1WYWx1ZSk7XG5cbiAgICBjb25zdCBtZW51TmFtZUVuY29kZWQgPVxuICAgICAgICBNRU5VX05BTUVfRU5DT0RFLnJlZHVjZSgocywgW2QsIGVdKSA9PiBzLnJlcGxhY2UoZCwgZSksIHRoaXMubWVudU5hbWUpO1xuICAgIGEuc2VnbWVudCgkMTApO1xuICAgIGEucmVsb2MoYEl0ZW1NZW51TmFtZV8ke2hleCh0aGlzLmlkKX1gKTtcbiAgICBjb25zdCBtZW51TmFtZUFkZHIgPSBhLnBjKCk7XG4gICAgYS5ieXRlKG1lbnVOYW1lRW5jb2RlZCwgMHhmZik7XG5cbiAgICB0aGlzLm1lbnVOYW1lUG9pbnRlci5sb2MoYSk7XG4gICAgYS53b3JkKG1lbnVOYW1lQWRkcik7XG5cbiAgICBpZiAodGhpcy5pdGVtVXNlSnVtcCkge1xuICAgICAgdGhpcy5pdGVtVXNlSnVtcFBvaW50ZXIubG9jKGEpO1xuICAgICAgYS53b3JkKHRoaXMuaXRlbVVzZUp1bXAub3JnKTtcblxuICAgICAgY29uc3QgaXRlbVVzZURhdGE6IG51bWJlcltdID0gW107XG4gICAgICBmb3IgKGNvbnN0IHVzZSBvZiB0aGlzLml0ZW1Vc2VEYXRhKSB7XG4gICAgICAgIGl0ZW1Vc2VEYXRhLnB1c2goLi4udXNlLmJ5dGVzKCkpO1xuICAgICAgfVxuXG4gICAgICBhLnNlZ21lbnQoJDBlLm5hbWUsICQwZi5uYW1lKTtcbiAgICAgIGEucmVsb2MoYEl0ZW1Vc2VEYXRhXyR7aGV4KHRoaXMuaWQpfWApO1xuICAgICAgY29uc3QgdXNlUHRyID0gYS5wYygpO1xuICAgICAgYS5ieXRlKC4uLml0ZW1Vc2VEYXRhKTtcbiAgICAgIHRoaXMuaXRlbVVzZURhdGFQb2ludGVyLmxvYyhhKVxuICAgICAgYS53b3JkKHVzZVB0cik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWVBZGRyKSB7XG4gICAgICB0aGlzLnZhbHVlQWRkci5sb2MoYSk7XG4gICAgICBhLmJ5dGUodGhpcy52YWx1ZSEpO1xuICAgIH1cblxuICAgIC8vIHdyaXRlci53cml0ZShbLi4uc3RyaW5nVG9CeXRlcyh0aGlzLm1lc3NhZ2VOYW1lKSwgMF0sXG4gICAgLy8gMHgyODAwMCwgMHgyOWZmZiwgYEl0ZW1NZXNzYWdlTmFtZSAke2hleCh0aGlzLmlkKX1gKSxcbiAgICAvLyB3cml0ZUxpdHRsZUVuZGlhbih3cml0ZXIucm9tLCB0aGlzLm1lc3NhZ2VOYW1lUG9pbnRlciwgbWVzc2FnZUFkZHJlc3MgLSAweDIwMDAwKTtcbiAgfVxuXG4gIGlzTWFnaWMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaWQgPj0gMHg0MSAmJiB0aGlzLmlkIDw9IDB4NDg7XG4gIH1cbn1cblxuLy8gVHJhZGUtaW4gc2xvdHMgY291bGQgYmUgY3VzdG9taXplZCBxdWl0ZSBhIGJpdDpcbi8vICAtIE5QQ1xuLy8gIC0gaXRlbSByZXF1aXJlZFxuLy8gIC0gaXRlbSBnaXZlblxuLy8gIC0gZmxhZ3MgZ2l2ZW5cbi8vICAtIGxvY2F0aW9uXG4vLyBldGMuLi5cbi8vIGNvbnN0IFRSQURFX0lOUyA9IG5ldyBNYXAoW1xuLy8gICBbMHgxZCwgMV0sIC8vIG1lZGljYWwgaGVyYlxuLy8gICBbMHgyNSwgMV0sIC8vIHN0YXR1ZSBvZiBvbnl4XG4vLyAgIFsweDI4LCA0XSwgLy8gZmx1dGUgb2YgbGltZSAoZmlyc3QgdHdvIHVudXNlZClcbi8vICAgWzB4MzEsIDJdLCAvLyBhbGFybSBmbHV0ZVxuLy8gICBbMHgzNSwgMV0sIC8vIGZvZyBsYW1wXG4vLyAgIFsweDNiLCAxXSwgLy8gbG92ZSBwZW5kYW50XG4vLyAgIFsweDNjLCAxXSwgLy8ga2lyaXNhIHBsYW50XG4vLyAgIFsweDNkLCAxXSwgLy8gaXZvcnkgc3RhdHVlXG4gIC8vIFRPRE8gLSBjb25zaWRlciBtb3Zpbmcgc2xlZXBpbmcgcGVvcGxlP1xuICAvLyAgICAgIC0tPiB3b3VsZCB3YW50IHRvIHB1dCBzb21ldGhpbmcgaW4gdGhlaXIgcGxhY2U/XG4gIC8vICAgICAgICAgIC0gbWF5YmUgZXZlbiBhIGJvc3MgaW4gY2xvc2UgcXVhcnRlcnMgYXJlYT9cbiAgLy8gVE9ETyAtIG1heWJlIE5QQyBzaG91bGQgaGF2ZSBhbiBcIml0ZW0gd2FudGVkXCIgcHJvcGVydHk/XG4vLyBdKTtcblxuLy8gSXRlbVVzZSBkYXRhIGFyZSBpbiBzdGFuemFzIHdpdGggMC0yIGJ5dGUgaGVhZGVycy5cbi8vIFRoZSBzdHJ1Y3R1cmUgaXMgZGV0ZXJtaW5lZCBieSB0aGUgSXRlbVVzZUp1bXAsXG4vLyB3aGljaCBleHBlY3RzIHRoZSB2YXJpb3VzIGhlYWRlcnMuXG5cbnR5cGUgSXRlbVVzZUtpbmQgPSAnZXhwZWN0JyB8ICdzY3JlZW4nIHwgJ2ZsYWcnIHwgJ2xvY2F0aW9uJyB8ICdlbXB0eSc7XG5cbmV4cG9ydCBjbGFzcyBJdGVtVXNlIHtcbiAgY29uc3RydWN0b3IocHVibGljIGtpbmQ6IEl0ZW1Vc2VLaW5kLFxuICAgICAgICAgICAgICBwdWJsaWMgd2FudDogbnVtYmVyLCAvLyBub3RlOiBpbnRlcnByZXRhdGlvbiBkZXBlbmRzIG9uIGtpbmQuXG4gICAgICAgICAgICAgIHB1YmxpYyBtZXNzYWdlOiBNZXNzYWdlSWQsXG4gICAgICAgICAgICAgIHB1YmxpYyBmbGFnczogbnVtYmVyW10pIHt9XG5cbiAgc3RhdGljIGZyb20oa2luZDogSXRlbVVzZUtpbmQsIGRhdGE6IERhdGE8bnVtYmVyPiwgYWRkcjogQWRkcmVzcykge1xuICAgIGxldCB7b2Zmc2V0fSA9IGFkZHI7XG4gICAgbGV0IHdhbnQgPSAwO1xuICAgIGlmIChraW5kID09PSAnZXhwZWN0JyB8fCBraW5kID09PSAnc2NyZWVuJykge1xuICAgICAgd2FudCA9IGRhdGFbb2Zmc2V0ICsgMV0gPDwgOCB8IGRhdGFbb2Zmc2V0XTtcbiAgICAgIG9mZnNldCArPSAyO1xuICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ2ZsYWcnKSB7XG4gICAgICBjb25zdCBmbGFncyA9IElURU1fQ09ORElUSU9OX0ZMQUdTLnJlYWQoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIGlmICghZmxhZ3MubGVuZ3RoKSBmbGFncy5wdXNoKH4wKTtcbiAgICAgIGlmIChmbGFncy5sZW5ndGggPiAxKSB0aHJvdyBuZXcgRXJyb3IoYEZsYWcgbGlzdCB0b28gbG9uZzogJHtmbGFnc31gKTtcbiAgICAgIHdhbnQgPSBmbGFnc1swXTtcbiAgICAgIG9mZnNldCArPSAyO1xuICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ2xvY2F0aW9uJykge1xuICAgICAgd2FudCA9IGRhdGFbb2Zmc2V0KytdO1xuICAgIH0gZWxzZSBpZiAoa2luZCAhPT0gJ2VtcHR5Jykge1xuICAgICAgYXNzZXJ0TmV2ZXIoa2luZCk7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBNZXNzYWdlSWQuZnJvbShkYXRhLCBvZmZzZXQpO1xuICAgIGNvbnN0IGZsYWdzID0gSVRFTV9VU0VfRkxBR1MucmVhZChkYXRhLCBvZmZzZXQgKyAyKTtcbiAgICByZXR1cm4gbmV3IEl0ZW1Vc2Uoa2luZCwgd2FudCwgbWVzc2FnZSwgZmxhZ3MpO1xuICB9XG5cbiAgYnl0ZXMoKTogbnVtYmVyW10ge1xuICAgIGNvbnN0IGJ5dGVzID0gW107XG4gICAgaWYgKHRoaXMua2luZCA9PT0gJ2V4cGVjdCcgfHwgdGhpcy5raW5kID09PSAnc2NyZWVuJykge1xuICAgICAgYnl0ZXMucHVzaCh0aGlzLndhbnQgJiAweGZmLCAodGhpcy53YW50ID4+PiA4KSAmIDB4ZmYpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5raW5kID09PSAnZmxhZycpIHtcbiAgICAgIGNvbnN0IGZsYWdCeXRlcyA9IElURU1fQ09ORElUSU9OX0ZMQUdTLmJ5dGVzKFt0aGlzLndhbnRdKTtcbiAgICAgIGlmIChmbGFnQnl0ZXMubGVuZ3RoICE9PSAyKSB0aHJvdyBuZXcgRXJyb3IoYGJhZCBkYXRhOiAke2ZsYWdCeXRlc31gKTtcbiAgICAgIGJ5dGVzLnB1c2goLi4uZmxhZ0J5dGVzKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMua2luZCA9PT0gJ2xvY2F0aW9uJykge1xuICAgICAgYnl0ZXMucHVzaCh0aGlzLndhbnQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5raW5kICE9PSAnZW1wdHknKSB7XG4gICAgICBhc3NlcnROZXZlcih0aGlzLmtpbmQpO1xuICAgIH0gXG4gICAgYnl0ZXMucHVzaCguLi50aGlzLm1lc3NhZ2UuZGF0YSk7XG4gICAgYnl0ZXMucHVzaCguLi5JVEVNX1VTRV9GTEFHUy5ieXRlcyh0aGlzLmZsYWdzKSk7XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSBOUEMgaWQgZm9yIGFuIGV4cGVjdCBOUEMgdXNlLCBvdGhlcndpc2UgbnVsbC5cbiAgdHJhZGVOcGMoKTogbnVtYmVyfG51bGwge1xuICAgIGlmICh0aGlzLmtpbmQgIT09ICdleHBlY3QnKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoKHRoaXMud2FudCA+Pj4gOCkgIT09IDEpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLndhbnQgJiAweGZmO1xuICB9XG5cbiAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgIGNvbnN0IGhlYWRlciA9IHRoaXMua2luZCA9PT0gJ2VtcHR5JyA/IDAgOiB0aGlzLmtpbmQgPT09ICdsb2NhdGlvbicgPyAxIDogMjtcbiAgICByZXR1cm4gMiAqICgxICsgTWF0aC5tYXgoMSwgdGhpcy5mbGFncy5sZW5ndGgpKSArIGhlYWRlcjtcbiAgfVxufVxuXG5jbGFzcyBTaGllbGQgZXh0ZW5kcyBJdGVtIHtcbiAgZ2V0IGRlZmVuc2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5zaGllbGREZWZlbnNlW3RoaXMuaWQgLSAweDBjXTtcbiAgfVxuICBzZXQgZGVmZW5zZShkZWY6IG51bWJlcikge1xuICAgIHRoaXMuaXRlbXMuc2hpZWxkRGVmZW5zZVt0aGlzLmlkIC0gMHgwY10gPSBkZWY7XG4gIH1cbn1cblxuY2xhc3MgQXJtb3IgZXh0ZW5kcyBJdGVtIHtcbiAgZ2V0IGRlZmVuc2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5hcm1vckRlZmVuc2VbdGhpcy5pZCAtIDB4MTRdO1xuICB9XG4gIHNldCBkZWZlbnNlKGRlZjogbnVtYmVyKSB7XG4gICAgdGhpcy5pdGVtcy5hcm1vckRlZmVuc2VbdGhpcy5pZCAtIDB4MTRdID0gZGVmO1xuICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIEl0ZW1zIGV4dGVuZHMgRW50aXR5QXJyYXk8SXRlbT4ge1xuICAvLyBOT1RFOiB0aGlzIG11c3QgYmUgaW5pdGlhbGl6ZWQgZmlyc3QuXG4gIHJlYWRvbmx5IGl0ZW1Vc2VKdW1wcyA9IERFRkFVTFRfSVRFTV9VU0VfSlVNUFM7XG5cbiAgYXJtb3JEZWZlbnNlOiBudW1iZXJbXTtcbiAgc2hpZWxkRGVmZW5zZTogbnVtYmVyW107XG5cbiAgLy8gU3dvcmRzXG4gIHJlYWRvbmx5IFN3b3JkT2ZXaW5kICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDAwKTtcbiAgcmVhZG9ubHkgU3dvcmRPZkZpcmUgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MDEpO1xuICByZWFkb25seSBTd29yZE9mV2F0ZXIgICAgID0gbmV3IEl0ZW0odGhpcywgMHgwMik7XG4gIHJlYWRvbmx5IFN3b3JkT2ZUaHVuZGVyICAgPSBuZXcgSXRlbSh0aGlzLCAweDAzKTtcbiAgcmVhZG9ubHkgQ3J5c3RhbGlzICAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MDQpO1xuICAvLyBQb3dlcnNcbiAgcmVhZG9ubHkgQmFsbE9mV2luZCAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MDUpO1xuICByZWFkb25seSBUb3JuYWRvQnJhY2VsZXQgID0gbmV3IEl0ZW0odGhpcywgMHgwNik7XG4gIHJlYWRvbmx5IEJhbGxPZkZpcmUgICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDA3KTtcbiAgcmVhZG9ubHkgRmxhbWVCcmFjZWxldCAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MDgpO1xuICByZWFkb25seSBCYWxsT2ZXYXRlciAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgwOSk7XG4gIHJlYWRvbmx5IEJsaXp6YXJkQnJhY2VsZXQgPSBuZXcgSXRlbSh0aGlzLCAweDBhKTtcbiAgcmVhZG9ubHkgQmFsbE9mVGh1bmRlciAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MGIpO1xuICByZWFkb25seSBTdG9ybUJyYWNlbGV0ICAgID0gbmV3IEl0ZW0odGhpcywgMHgwYyk7XG4gIC8vIFNoaWVsZHNcbiAgcmVhZG9ubHkgQ2FyYXBhY2VTaGllbGQgICA9IG5ldyBTaGllbGQodGhpcywgMHgwZCk7XG4gIHJlYWRvbmx5IEJyb256ZVNoaWVsZCAgICAgPSBuZXcgU2hpZWxkKHRoaXMsIDB4MGUpO1xuICByZWFkb25seSBQbGF0aW51bVNoaWVsZCAgID0gbmV3IFNoaWVsZCh0aGlzLCAweDBmKTtcbiAgcmVhZG9ubHkgTWlycm9yZWRTaGllbGQgICA9IG5ldyBTaGllbGQodGhpcywgMHgxMCk7XG4gIHJlYWRvbmx5IENlcmFtaWNTaGllbGQgICAgPSBuZXcgU2hpZWxkKHRoaXMsIDB4MTEpO1xuICByZWFkb25seSBTYWNyZWRTaGllbGQgICAgID0gbmV3IFNoaWVsZCh0aGlzLCAweDEyKTtcbiAgcmVhZG9ubHkgQmF0dGxlU2hpZWxkICAgICA9IG5ldyBTaGllbGQodGhpcywgMHgxMyk7XG4gIHJlYWRvbmx5IFBzeWNob1NoaWVsZCAgICAgPSBuZXcgU2hpZWxkKHRoaXMsIDB4MTQpO1xuICAvLyBBcm1vclxuICByZWFkb25seSBUYW5uZWRIaWRlICAgICAgID0gbmV3IEFybW9yKHRoaXMsIDB4MTUpO1xuICByZWFkb25seSBMZWF0aGVyQXJtb3IgICAgID0gbmV3IEFybW9yKHRoaXMsIDB4MTYpO1xuICByZWFkb25seSBCcm9uemVBcm1vciAgICAgID0gbmV3IEFybW9yKHRoaXMsIDB4MTcpO1xuICByZWFkb25seSBQbGF0aW51bUFybW9yICAgID0gbmV3IEFybW9yKHRoaXMsIDB4MTgpO1xuICByZWFkb25seSBTb2xkaWVyU3VpdCAgICAgID0gbmV3IEFybW9yKHRoaXMsIDB4MTkpO1xuICByZWFkb25seSBDZXJhbWljU3VpdCAgICAgID0gbmV3IEFybW9yKHRoaXMsIDB4MWEpO1xuICByZWFkb25seSBCYXR0bGVBcm1vciAgICAgID0gbmV3IEFybW9yKHRoaXMsIDB4MWIpO1xuICByZWFkb25seSBQc3ljaG9Bcm1vciAgICAgID0gbmV3IEFybW9yKHRoaXMsIDB4MWMpO1xuICAvLyBDb25zdW1hYmxlc1xuICByZWFkb25seSBNZWRpY2FsSGVyYiAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgxZCwge3VzZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFkZXM6IFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUFkZHI6IDB4ODRlYX0pO1xuICByZWFkb25seSBBbnRpZG90ZSAgICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgxZSwge3VzZTogdHJ1ZX0pO1xuICByZWFkb25seSBMeXNpc1BsYW50ICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgxZiwge3VzZTogdHJ1ZX0pO1xuICByZWFkb25seSBGcnVpdE9mTGltZSAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgyMCwge3VzZTogdHJ1ZX0pO1xuICByZWFkb25seSBGcnVpdE9mUG93ZXIgICAgID0gbmV3IEl0ZW0odGhpcywgMHgyMSwge3VzZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUFkZHI6IDB4ODUwY30pO1xuICByZWFkb25seSBNYWdpY1JpbmcgICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgyMiwge3VzZTogdHJ1ZX0pO1xuICByZWFkb25seSBGcnVpdE9mUmVwdW4gICAgID0gbmV3IEl0ZW0odGhpcywgMHgyMywge3VzZTogdHJ1ZX0pO1xuICByZWFkb25seSBXYXJwQm9vdHMgICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgyNCwge3VzZTogdHJ1ZX0pO1xuICAvLyBRdWVzdCBpdGVtcyAoMSlcbiAgcmVhZG9ubHkgU3RhdHVlT2ZPbnl4ICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MjUsIHt1c2U6IHRydWUsIHRyYWRlczogWzBdfSk7XG4gIHJlYWRvbmx5IE9wZWxTdGF0dWUgICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDI2LCB7dXNlOiB0cnVlfSk7XG4gIHJlYWRvbmx5IEluc2VjdEZsdXRlICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDI3LCB7dXNlOiB0cnVlfSk7XG4gIC8vIFRPRE8gLSBjb25zaWRlciBvbmx5IHVzaW5nIDIsIDM/ICAwIGFuZCAxIGFyZSB1bnVzZWQuLi5cbiAgcmVhZG9ubHkgRmx1dGVPZkxpbWUgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MjgsIHt1c2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGVzOiBbMCwgMSwgMiwgM119KTtcbiAgLy8gV29ybiBpdGVtc1xuICByZWFkb25seSBHYXNNYXNrICAgICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgyOSk7XG4gIHJlYWRvbmx5IFBvd2VyUmluZyAgICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDJhKTtcbiAgcmVhZG9ubHkgV2FycmlvclJpbmcgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MmIpO1xuICByZWFkb25seSBJcm9uTmVja2xhY2UgICAgID0gbmV3IEl0ZW0odGhpcywgMHgyYyk7XG4gIHJlYWRvbmx5IERlb3NQZW5kYW50ICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDJkKTtcbiAgcmVhZG9ubHkgUmFiYml0Qm9vdHMgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MmUpO1xuICByZWFkb25seSBMZWF0aGVyQm9vdHMgICAgID0gbmV3IEl0ZW0odGhpcywgMHgyZik7XG4gIHJlYWRvbmx5IFNoaWVsZFJpbmcgICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDMwKTtcbiAgLy8gUXVlc3QgaXRlbXMgKDIpXG4gIHJlYWRvbmx5IEFsYXJtRmx1dGUgICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDMxLCB7dXNlOiB0cnVlLCB0cmFkZXM6IFswLCAxXX0pO1xuICByZWFkb25seSBXaW5kbWlsbEtleSAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgzMiwge3VzZTogdHJ1ZX0pO1xuICByZWFkb25seSBLZXlUb1ByaXNvbiAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgzMywge3VzZTogdHJ1ZX0pO1xuICByZWFkb25seSBLZXlUb1N0eXggICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgzNCwge3VzZTogdHJ1ZX0pO1xuICByZWFkb25seSBGb2dMYW1wICAgICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgzNSwge3VzZTogdHJ1ZSwgdHJhZGVzOiBbMF19KTtcbiAgcmVhZG9ubHkgU2hlbGxGbHV0ZSAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MzYsIHt1c2U6IHRydWV9KTtcbiAgcmVhZG9ubHkgRXllR2xhc3NlcyAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MzcsIHt1c2U6IHRydWV9KTtcbiAgcmVhZG9ubHkgQnJva2VuU3RhdHVlICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MzgsIHt1c2U6IHRydWV9KTtcbiAgcmVhZG9ubHkgR2xvd2luZ0xhbXAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4MzksIHt1c2U6IHRydWV9KTtcbiAgcmVhZG9ubHkgU3RhdHVlT2ZHb2xkICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4M2EsIHt1c2U6IHRydWV9KTtcbiAgcmVhZG9ubHkgTG92ZVBlbmRhbnQgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4M2IsIHt1c2U6IHRydWUsIHRyYWRlczogWzBdfSk7XG4gIHJlYWRvbmx5IEtpcmlzYVBsYW50ICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDNjLCB7dXNlOiB0cnVlLCB0cmFkZXM6IFswXX0pO1xuICByZWFkb25seSBJdm9yeVN0YXR1ZSAgICAgID0gbmV3IEl0ZW0odGhpcywgMHgzZCwge3VzZTogdHJ1ZSwgdHJhZGVzOiBbMF19KTtcbiAgcmVhZG9ubHkgQm93T2ZNb29uICAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4M2UsIHt1c2U6IHRydWV9KTtcbiAgcmVhZG9ubHkgQm93T2ZTdW4gICAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4M2YsIHt1c2U6IHRydWV9KTtcbiAgcmVhZG9ubHkgQm93T2ZUcnV0aCAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4NDAsIHt1c2U6IHRydWV9KTtcbiAgLy8gTWFnaWNcbiAgcmVhZG9ubHkgUmVmcmVzaCAgICAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4NDEpO1xuICByZWFkb25seSBQYXJhbHlzaXMgICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHg0Mik7XG4gIHJlYWRvbmx5IFRlbGVwYXRoeSAgICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDQzKTtcbiAgcmVhZG9ubHkgVGVsZXBvcnQgICAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4NDQpO1xuICByZWFkb25seSBSZWNvdmVyICAgICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHg0NSk7XG4gIHJlYWRvbmx5IEJhcnJpZXIgICAgICAgICAgPSBuZXcgSXRlbSh0aGlzLCAweDQ2KTtcbiAgcmVhZG9ubHkgQ2hhbmdlICAgICAgICAgICA9IG5ldyBJdGVtKHRoaXMsIDB4NDcpO1xuICByZWFkb25seSBGbGlnaHQgICAgICAgICAgID0gbmV3IEl0ZW0odGhpcywgMHg0OCk7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcm9tOiBSb20pIHtcbiAgICBzdXBlcigweDQ5KTtcbiAgICB0aGlzLmFybW9yRGVmZW5zZSA9IHR1cGxlKHJvbS5wcmcsIEFSTU9SX0RFRkVOU0VfVEFCTEUub2Zmc2V0LCA5KTtcbiAgICB0aGlzLnNoaWVsZERlZmVuc2UgPSB0dXBsZShyb20ucHJnLCBTSElFTERfREVGRU5TRV9UQUJMRS5vZmZzZXQsIDkpO1xuICB9XG5cbiAgd3JpdGUoKTogTW9kdWxlW10ge1xuICAgIGNvbnN0IGEgPSB0aGlzLnJvbS5hc3NlbWJsZXIoKTtcbiAgICBBUk1PUl9ERUZFTlNFX1RBQkxFLmxvYyhhKTtcbiAgICBhLmJ5dGUoLi4udGhpcy5hcm1vckRlZmVuc2UpO1xuICAgIFNISUVMRF9ERUZFTlNFX1RBQkxFLmxvYyhhKTtcbiAgICBhLmJ5dGUoLi4udGhpcy5zaGllbGREZWZlbnNlKTtcblxuICAgIC8vIFVuaXF1ZSBpdGVtcyB0YWJsZSBmb3IgZGlmZmljdWx0eVxuICAgIGNvbnN0IHVuaXF1ZVRhYmxlID0gbmV3IEFycmF5KDEwKS5maWxsKDApO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzKSB7XG4gICAgICBpdGVtLmFzc2VtYmxlKGEpO1xuICAgICAgaWYgKGl0ZW0udW5pcXVlKSB1bmlxdWVUYWJsZVtpdGVtLmlkID4+PiAzXSB8PSAoMSA8PCAoaXRlbS5pZCAmIDcpKTtcbiAgICB9XG4gICAgVU5JUVVFX0lURU1fU0NBTElOR19UQUJMRS5sb2MoYSk7XG4gICAgYS5ieXRlKC4uLnVuaXF1ZVRhYmxlKTtcbiAgICByZXR1cm4gW2EubW9kdWxlKCldO1xuICB9XG59XG5cbi8vIEtleSBpcyAub3JnIGFkZHJlc3MgaW4gc2VnbWVudCAwZSAoaS5lLiBvZmZzZXQgMWN4eHgpXG5jb25zdCBERUZBVUxUX0lURU1fVVNFX0pVTVBTOiB7W2FkZHI6IG51bWJlcl06IEl0ZW1Vc2VLaW5kW119ID0ge1xuICAvLyAzYiBsb3ZlIHBlbmRhbnRcbiAgMHg4NDM5OiBbJ2V4cGVjdCddLFxuICAvLyA0MCBib3cgb2YgdHJ1dGhcbiAgMHg4NDQyOiBbJ3NjcmVlbiddLFxuICAvLyAyNiBvcGVsIHN0YXR1ZVxuICAweDg0NTA6IFsnZW1wdHknXSxcbiAgLy8gM2UgYm93IG9mIG1vb24sIDNmIGJvdyBvZiBzdW5cbiAgMHg4NDUxOiBbJ3NjcmVlbiddLFxuICAvLyAzMiB3aW5kbWlsbCBrZXksIDM3IGV5ZSBnbGFzc2VzXG4gIDB4ODQ1ZjogWydsb2NhdGlvbiddLFxuICAvLyAzMyBwcmlzb24ga2V5LCAzNCBzdHh5LCAzNSBmb2cgbGFtcCwgM2Mga2lyaXNhIHBsYW50LCAzZCBpdm9yeSBzdGF0dWVcbiAgMHg4NDkxOiBbJ2V4cGVjdCddLFxuICAvLyAzMSBhbGFybSBmbHV0ZVxuICAweDg0YTk6IFsnZXhwZWN0JywgJ2V4cGVjdCddLFxuICAvLyAyNyBpbnNlY3QgZmx1dGVcbiAgMHg4NGIzOiBbJ2xvY2F0aW9uJ10sXG4gIC8vIDNhIHN0YXR1ZSBvZiBnb2xkXG4gIDB4ODRkMDogWydleHBlY3QnXSxcbiAgLy8gaW52YWxpZFxuICAweDg0ZGI6IFtdLFxuICAvLyAxZCBtZWRpY2FsIGhlcmJcbiAgMHg4NGUwOiBbJ2V4cGVjdCcsICdlbXB0eSddLFxuICAvLyAyMSBmcnVpdCBvZiBwb3dlclxuICAweDg1MDc6IFsnZW1wdHknXSxcbiAgLy8gMjIgbWFnaWMgcmluZ1xuICAweDg1MWQ6IFsnZW1wdHknXSxcbiAgLy8gMWUgYW50aWRvdGVcbiAgMHg4NTI0OiBbJ2VtcHR5J10sXG4gIC8vIDFmIGx5c2lzIHBsYW50XG4gIDB4ODUyZjogWydlbXB0eSddLFxuICAvLyAyMCBmcnVpdCBvZiBsaW1lXG4gIDB4ODUzYTogWydlbXB0eSddLFxuICAvLyAyMyBmcnVpdCBvZiByZXB1blxuICAweDg1NGE6IFsnZW1wdHknXSxcbiAgLy8gMjQgd2FycCBib290cyAtPiBydHNcbiAgMHg4NTY0OiBbJ2VtcHR5J10sXG4gIC8vIDI1IHN0YXR1ZSBvZiBvbnl4XG4gIDB4ODU2NTogWydleHBlY3QnXSxcbiAgLy8gMzYgc2hlbGwgZmx1dGVcbiAgMHg4NTZiOiBbJ2ZsYWcnXSxcbiAgLy8gMzkgZ2xvd2luZyBsYW1wXG4gIDB4ODU4NTogWydlbXB0eSddLFxuICAvLyAyOCBmbHV0ZSBvZiBsaW1lXG4gIDB4ODU5ZTogWydleHBlY3QnLCAnZXhwZWN0JywgJ2V4cGVjdCcsICdleHBlY3QnXSxcbn07XG4iXX0=