import { featureMask } from './metascreendata.js';
import { DefaultMap } from '../util.js';
export class Metascreen {
    constructor(rom, uid, data) {
        var _a, _b, _c, _d, _e;
        this.rom = rom;
        this.uid = uid;
        this.data = data;
        this._tilesets = new Set();
        this.used = false;
        this.neighbors = [
            new DefaultMap((s) => this._checkNeighbor(s, 0)),
            new DefaultMap((s) => this._checkNeighbor(s, 1)),
        ];
        for (const tileset of Object.values(data.tilesets)) {
            if (!tileset.requires)
                this.used = true;
        }
        let features = 0;
        for (const feature of (_a = data.feature) !== null && _a !== void 0 ? _a : []) {
            const mask = featureMask[feature];
            if (mask != null)
                features |= mask;
        }
        for (const exit of (_b = data.exits) !== null && _b !== void 0 ? _b : []) {
            if (exit.type === 'stair:down' || exit.type === 'stair:up') {
                features |= featureMask[exit.type];
            }
        }
        this._features = features;
        this._isEmpty = Boolean(features & featureMask['empty']);
        this.flag = data.flag;
        const cxn = [[[]], [[]], [[]], [[]]];
        this.connections = cxn;
        for (let i = 0; i < 4; i++) {
            let poiIndex = 0;
            let exitIndex = 0;
            let cur = cxn[i][0];
            for (const term of (_c = this.data.connect) !== null && _c !== void 0 ? _c : '') {
                if (connectionBlocks[i].includes(term)) {
                    cxn[i].push(cur = []);
                    continue;
                }
                let delta;
                if (connectionBlockSet.has(term))
                    continue;
                if (term === 'p') {
                    delta = 0xf0 | poiIndex++;
                }
                else if (term === 'x') {
                    delta = 0xe0 | exitIndex++;
                }
                else {
                    const num = parseInt(term, 16);
                    if (!num)
                        throw new Error(`bad term: '${term}'`);
                    const channel = (num & 3) << (num & 4);
                    const offset = num & 8 ? (num & 4 ? 0x0100 : 0x1000) : 0;
                    delta = channel | offset;
                }
                cur.push(delta);
            }
            while (poiIndex < ((_d = this.data.poi) === null || _d === void 0 ? void 0 : _d.length)) {
                cur.push(0xf0 | poiIndex++);
            }
            while (exitIndex < ((_e = this.data.exits) === null || _e === void 0 ? void 0 : _e.length)) {
                cur.push(0xe0 | exitIndex++);
            }
        }
    }
    get features() {
        return this._features;
    }
    get manual() {
        return Boolean(this._features & manualFeatureMask);
    }
    get counted() {
        return Boolean(this._features & countedFeatureMask);
    }
    hasFeature(feature) {
        return Boolean(this._features & featureMask[feature]);
    }
    hasFeatures(features) {
        return (this._features & features) === features;
    }
    withFeature(feature) {
        throw new Error();
    }
    isEmpty() {
        return this._isEmpty;
    }
    hasStair() {
        return Boolean(this._features & (featureMask['stair:up'] |
            featureMask['stair:down']));
    }
    withObstruction() {
        throw new Error();
    }
    isCompatibleWithTileset(id) {
        for (const tileset of this._tilesets) {
            if (tileset.tilesetId === id)
                return true;
        }
        return false;
    }
    replace(from, to) {
        const { tiles } = this.screen;
        for (let i = 0; i < tiles.length; i++) {
            if (tiles[i] === from)
                tiles[i] = to;
        }
        return this;
    }
    remove() {
        for (const tileset of this.tilesets()) {
            tileset.deleteScreen(this);
        }
    }
    tilesets() {
        const tilesets = [];
        for (const key in this.data.tilesets) {
            tilesets.push(this.rom.metatilesets[key]);
        }
        return tilesets;
    }
    setGridTile(...tile) {
        this.data.tile = tile;
        for (const tileset of this.tilesets()) {
            tileset.invalidate();
        }
    }
    get sid() {
        return this.data.id;
    }
    set sid(sid) {
        if (this.sid === sid)
            return;
        this.rom.metascreens.renumber(this.sid, sid);
    }
    get screen() {
        const { sid, rom: { screens } } = this;
        return sid < 0 ? screens.unallocated[~sid] : screens[sid];
    }
    unsafeSetId(sid) {
        this.data.id = sid;
        for (const tileset of this._tilesets) {
            tileset.invalidate();
        }
    }
    unsafeAddTileset(tileset) {
        this._tilesets.add(tileset);
    }
    unsafeRemoveTileset(tileset) {
        this._tilesets.delete(tileset);
    }
    edgeExits() {
        var _a;
        let mask = 0;
        for (const e of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            const dir = edgeTypeMap[e.type];
            if (dir != null)
                mask |= (1 << dir);
        }
        return mask;
    }
    edgeIndex(edgeType) {
        var _a;
        let index = 0;
        const edge = (_a = this.data.edges) !== null && _a !== void 0 ? _a : '';
        for (let i = 0; i < 4; i++) {
            if (edge[i] === ' ')
                continue;
            if (edge[i] !== edgeType)
                return undefined;
            index |= (1 << i);
        }
        return index;
    }
    findExitType(tile, single, seamless) {
        var _a, _b;
        for (const exit of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            if (exit.type.startsWith('seamless') !== seamless)
                continue;
            const t0 = single && exit.type === 'edge:bottom' && tile >= 0xc0 ?
                tile + 0x20 : tile;
            if (exit.exits.includes(t0) || ((_b = exit.allowedExits) !== null && _b !== void 0 ? _b : []).includes(t0)) {
                return exit;
            }
        }
        return undefined;
    }
    findExitByType(type) {
        const exit = this.data.exits.find(e => e.type === type);
        if (!exit)
            throw new Error(`no exit ${type}`);
        return exit;
    }
    findEntranceType(coord, single) {
        var _a, _b;
        for (const exit of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            if (exit.type.startsWith('seamless'))
                continue;
            const c0 = single && exit.type === 'edge:bottom' && coord >= 0xbf00 ?
                coord + 0x2000 : coord;
            const t0 = (c0 & 0xf0) >> 4 | (c0 & 0xf000) >> 8;
            if (exit.entrance === c0 ||
                exit.exits.includes(t0) || ((_b = exit.allowedExits) !== null && _b !== void 0 ? _b : []).includes(t0)) {
                return exit.type;
            }
        }
        return undefined;
    }
    addCustomFlag(defaultValue) {
        this.flag = defaultValue ? 'custom:true' : 'custom:false';
    }
    checkNeighbor(that, dir) {
        const a = dir & 2 ? this : that;
        const b = dir & 2 ? that : this;
        return a.neighbors[dir & 1].get(b);
    }
    _checkNeighbor(that, dir) {
        const e1 = this.data.edges;
        const e2 = that.data.edges;
        if (e1 && e2) {
            const opp = dir ^ 2;
            if (e1[opp] !== '*' && e1[opp] === e2[dir])
                return true;
        }
        return false;
    }
}
const edgeTypeMap = {
    'edge:top': 0,
    'edge:left': 1,
    'edge:bottom': 2,
    'edge:right': 3,
};
const connectionBlocks = [
    '|:',
    '|:=-',
    '|',
    '|=',
];
const connectionBlockSet = new Set(['|', ':', '-', '=']);
const manualFeatures = new Set([
    'arena', 'portoa1', 'portoa2', 'portoa3', 'lake', 'overpass', 'underpass',
    'lighthouse', 'cabin', 'windmill', 'altar', 'pyramid', 'crypt',
]);
const countedFeatures = new Set([
    'pit', 'spikes', 'bridge', 'wall', 'ramp', 'whirlpool',
]);
const manualFeatureMask = [...manualFeatures].map(f => featureMask[f]).reduce((a, b) => a | b);
const countedFeatureMask = [...countedFeatures].map(f => featureMask[f]).reduce((a, b) => a | b);
//# sourceMappingURL=data:application/json;base64,