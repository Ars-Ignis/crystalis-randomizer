let uidCounter = 0;
export class Metascreen {
    constructor(rom, data) {
        this.rom = rom;
        this.data = data;
        this.uid = ++uidCounter;
        this._features = new Set();
        this.used = false;
        this.screenId = data.id;
        for (const tileset of Object.values(data.tilesets)) {
            if (!tileset.requires)
                this.used = true;
        }
        for (const feature of data.feature || []) {
            this._features.add(feature);
        }
    }
    features() {
        return this._features.values();
    }
    hasFeature(feature) {
        return this._features.has(feature);
    }
    replace(from, to) {
        if (this.screenId == null)
            throw new Error(`cannot replace unused screen`);
        const scr = this.rom.screens[this.screenId];
        for (let i = 0; i < scr.tiles.length; i++) {
            if (scr.tiles[i] === from)
                scr.tiles[i] = to;
        }
        return this;
    }
    remove() {
        for (const key in this.data.tilesets) {
            const tileset = this.rom.metatilesets[key];
            tileset.screens.delete(this);
        }
    }
    get id() {
        return this.data.id;
    }
    set id(id) {
        if (this.id === id)
            return;
        this.rom.metascreens.renumber(this.id, id);
    }
    get screen() {
        const { id, rom: { screens } } = this;
        return id < 0 ? screens.unallocated[~id] : screens[id];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YXNjcmVlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vbWV0YXNjcmVlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFFbkIsTUFBTSxPQUFPLFVBQVU7SUFXckIsWUFBcUIsR0FBUSxFQUFXLElBQW9CO1FBQXZDLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFBVyxTQUFJLEdBQUosSUFBSSxDQUFnQjtRQVRuRCxRQUFHLEdBQUcsRUFBRSxVQUFVLENBQUM7UUFFWCxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQVcsQ0FBQztRQUVoRCxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBTVgsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3hCLEtBQUssTUFBTSxPQUFPLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE9BQVEsQ0FBQyxRQUFRO2dCQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQzFDO1FBQ0QsS0FBSyxNQUFNLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFBRTtZQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxVQUFVLENBQUMsT0FBZ0I7UUFDekIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBS0QsT0FBTyxDQUFDLElBQVksRUFBRSxFQUFVO1FBQzlCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUk7Z0JBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDOUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNO1FBRUosS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNwQyxNQUFNLE9BQU8sR0FDVCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUF5QixDQUFnQixDQUFDO1lBQ3BFLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVELElBQUksRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksRUFBRSxDQUFDLEVBQVU7UUFDZixJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRTtZQUFFLE9BQU87UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE1BQU0sRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUMsT0FBTyxFQUFDLEVBQUMsR0FBRyxJQUFJLENBQUM7UUFDbEMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZlYXR1cmUsIE1ldGFzY3JlZW5EYXRhfSBmcm9tICcuL21ldGFzY3JlZW5kYXRhLmpzJztcbmltcG9ydCB7TWV0YXRpbGVzZXQsIE1ldGF0aWxlc2V0c30gZnJvbSAnLi9tZXRhdGlsZXNldC5qcyc7XG5pbXBvcnQge1NjcmVlbn0gZnJvbSAnLi9zY3JlZW4uanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5cbmxldCB1aWRDb3VudGVyID0gMDtcblxuZXhwb3J0IGNsYXNzIE1ldGFzY3JlZW4ge1xuICByZWFkb25seSBzY3JlZW5JZD86IG51bWJlcjtcbiAgcmVhZG9ubHkgdWlkID0gKyt1aWRDb3VudGVyO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2ZlYXR1cmVzID0gbmV3IFNldDxGZWF0dXJlPigpO1xuXG4gIHVzZWQgPSBmYWxzZTtcblxuICBmbGFnPzogJ2Fsd2F5cycgfCAnY2FsbSc7XG5cbiAgLy8gVE9ETyAtIG1ha2UgZGF0YSBwcml2YXRlP1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSByb206IFJvbSwgcmVhZG9ubHkgZGF0YTogTWV0YXNjcmVlbkRhdGEpIHtcbiAgICB0aGlzLnNjcmVlbklkID0gZGF0YS5pZDtcbiAgICBmb3IgKGNvbnN0IHRpbGVzZXQgb2YgT2JqZWN0LnZhbHVlcyhkYXRhLnRpbGVzZXRzKSkge1xuICAgICAgaWYgKCF0aWxlc2V0IS5yZXF1aXJlcykgdGhpcy51c2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBmZWF0dXJlIG9mIGRhdGEuZmVhdHVyZSB8fCBbXSkge1xuICAgICAgdGhpcy5fZmVhdHVyZXMuYWRkKGZlYXR1cmUpO1xuICAgIH1cbiAgfVxuXG4gIGZlYXR1cmVzKCk6IEl0ZXJhYmxlPEZlYXR1cmU+IHtcbiAgICByZXR1cm4gdGhpcy5fZmVhdHVyZXMudmFsdWVzKCk7XG4gIH1cblxuICBoYXNGZWF0dXJlKGZlYXR1cmU6IEZlYXR1cmUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZmVhdHVyZXMuaGFzKGZlYXR1cmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2Ugb2NjdXJyZW5jZXMgb2YgYSBtZXRhdGlsZSB3aXRoaW4gdGhpcyBzY3JlZW4uXG4gICAqL1xuICByZXBsYWNlKGZyb206IG51bWJlciwgdG86IG51bWJlcik6IE1ldGFzY3JlZW4ge1xuICAgIGlmICh0aGlzLnNjcmVlbklkID09IG51bGwpIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHJlcGxhY2UgdW51c2VkIHNjcmVlbmApO1xuICAgIGNvbnN0IHNjciA9IHRoaXMucm9tLnNjcmVlbnNbdGhpcy5zY3JlZW5JZF07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY3IudGlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzY3IudGlsZXNbaV0gPT09IGZyb20pIHNjci50aWxlc1tpXSA9IHRvO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICAvLyBSZW1vdmUgc2VsZiBmcm9tIGFsbCBtZXRhdGlsZXNldHMuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5kYXRhLnRpbGVzZXRzKSB7XG4gICAgICBjb25zdCB0aWxlc2V0ID1cbiAgICAgICAgICB0aGlzLnJvbS5tZXRhdGlsZXNldHNba2V5IGFzIGtleW9mIE1ldGF0aWxlc2V0c10gYXMgTWV0YXRpbGVzZXQ7XG4gICAgICB0aWxlc2V0LnNjcmVlbnMuZGVsZXRlKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpZCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmRhdGEuaWQ7XG4gIH1cblxuICBzZXQgaWQoaWQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLmlkID09PSBpZCkgcmV0dXJuO1xuICAgIHRoaXMucm9tLm1ldGFzY3JlZW5zLnJlbnVtYmVyKHRoaXMuaWQsIGlkKTtcbiAgfVxuXG4gIGdldCBzY3JlZW4oKTogU2NyZWVuIHtcbiAgICBjb25zdCB7aWQsIHJvbToge3NjcmVlbnN9fSA9IHRoaXM7XG4gICAgcmV0dXJuIGlkIDwgMCA/IHNjcmVlbnMudW5hbGxvY2F0ZWRbfmlkXSA6IHNjcmVlbnNbaWRdO1xuICB9XG59XG4iXX0=