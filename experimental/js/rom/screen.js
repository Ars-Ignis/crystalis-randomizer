import { Entity } from './entity.js';
import { tuple } from './util.js';
export class Screen extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.used = true;
        const base = (id > 0xff ? 0x40 + id : id) << 8;
        this.tiles = tuple(rom.prg, base, 0xf0);
    }
    clone(newId) {
        const clone = new Screen(this.rom, newId);
        clone.used = this.used;
        clone.tiles = [...this.tiles];
        return clone;
    }
    allTilesSet() {
        return new Set(this.tiles);
    }
    set2d(start, data) {
        const x0 = start & 0xf;
        const y0 = start >>> 4;
        for (let y = 0; y < data.length; y++) {
            const row = data[y];
            for (let x = 0; x < row.length; x++) {
                const tile = row[x];
                if (tile != null)
                    this.tiles[(y0 + y) << 4 | (x0 + x)] = tile;
            }
        }
    }
    write(writer) {
        let base = this.id << 8;
        if (this.id > 0xff) {
            if (!this.rom.compressedMapData) {
                base += 0x4000;
            }
            else {
                base = (this.id & 0xff00) << 5 | (this.id & 0xff) << 8;
            }
        }
        if ((base & 0xfe000) !== 0x14000) {
            writer.rom.subarray(base, base + 0xf0).set(this.tiles);
        }
        else {
            writer.rom.subarray(base, base + 0xc0).set(this.tiles.slice(0, 0xc0));
        }
    }
}
export class Screens extends Array {
    constructor(rom) {
        super(0x103);
        this.rom = rom;
        this.unallocated = [];
        for (let i = 0; i < 0x103; i++) {
            this[i] = new Screen(rom, i);
        }
    }
    getScreen(id) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        return arr[i] || (arr[i] = new Screen(this.rom, id));
    }
    setScreen(id, screen) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        arr[i] = screen;
    }
    deleteScreen(id) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        delete arr[i];
    }
}
//# sourceMappingURL=data:application/json;base64,