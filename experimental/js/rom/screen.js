import { Entity } from './entity.js';
import { tuple } from './util.js';
export class Screen extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.base = (id > 0xff ? 0x40 + id : id) << 8;
        this.tiles = tuple(rom.prg, this.base, 0xf0);
    }
    allTilesSet() {
        return new Set(this.tiles);
    }
    write(writer) {
        if (this.id < 0x100) {
            writer.rom.subarray(this.base, this.base + 0xf0).set(this.tiles);
        }
        else {
            for (let i = 0; i < 0xc0; i++) {
                writer.rom[this.base + i] = this.tiles[i];
            }
        }
    }
    setTiles(start, tiles) {
        for (const row of tiles) {
            for (let i = 0; i < row.length; i++) {
                const tile = row[i];
                if (tile != null)
                    this.tiles[start + i] = tile;
            }
            start += 16;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3JvbS9zY3JlZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBSWhDLE1BQU0sT0FBTyxNQUFPLFNBQVEsTUFBTTtJQUtoQyxZQUFZLEdBQVEsRUFBRSxFQUFVO1FBQzlCLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBVUQsV0FBVztRQUNULE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBYztRQUNsQixJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xFO2FBQU07WUFHTCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQztTQUNGO0lBQ0gsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhLEVBQUUsS0FBZ0M7UUFDdEQsS0FBSyxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQUU7WUFDdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25DLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxJQUFJLElBQUksSUFBSTtvQkFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDaEQ7WUFDRCxLQUFLLElBQUksRUFBRSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0NBR0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VudGl0eX0gZnJvbSAnLi9lbnRpdHkuanMnO1xuaW1wb3J0IHt0dXBsZX0gZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCB7V3JpdGVyfSBmcm9tICcuL3dyaXRlci5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxuZXhwb3J0IGNsYXNzIFNjcmVlbiBleHRlbmRzIEVudGl0eSB7XG5cbiAgYmFzZTogbnVtYmVyO1xuICB0aWxlczogbnVtYmVyW107IC8vIGFsd2F5cyAxNXgxNlxuXG4gIGNvbnN0cnVjdG9yKHJvbTogUm9tLCBpZDogbnVtYmVyKSB7XG4gICAgc3VwZXIocm9tLCBpZCk7XG4gICAgdGhpcy5iYXNlID0gKGlkID4gMHhmZiA/IDB4NDAgKyBpZCA6IGlkKSA8PCA4O1xuICAgIC8vIG1ldGF0aWxlIGluZGV4XG4gICAgdGhpcy50aWxlcyA9IHR1cGxlKHJvbS5wcmcsIHRoaXMuYmFzZSwgMHhmMCk7XG4gIH1cblxuICAvLyB0aWxlKHk6IG51bWJlciwgeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgLy8gICByZXR1cm4gdGhpcy50aWxlc1t5IDw8IDQgfCB4XTtcbiAgLy8gfVxuXG4gIC8vIG1ldGF0aWxlKHksIHgpOiBNZXRhdGlsZSB7XG4gIC8vICAgcmV0dXJuIHRoaXMucm9tLm1ldGF0aWxlc1t0aGlzLnRpbGVzW3ldW3hdXTtcbiAgLy8gfVxuXG4gIGFsbFRpbGVzU2V0KCk6IFNldDxudW1iZXI+IHtcbiAgICByZXR1cm4gbmV3IFNldCh0aGlzLnRpbGVzKTtcbiAgfVxuXG4gIHdyaXRlKHdyaXRlcjogV3JpdGVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaWQgPCAweDEwMCkge1xuICAgICAgd3JpdGVyLnJvbS5zdWJhcnJheSh0aGlzLmJhc2UsIHRoaXMuYmFzZSArIDB4ZjApLnNldCh0aGlzLnRpbGVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2UgcmV1c2UgdGhlIGxhc3QgMiByb3dzIG9mIGV4dGVuZGVkIHNjcmVlbnMgKGNvdmVyZWQgYnkgSFVEKSBmb3JcbiAgICAgIC8vIGdsb2JhbCBmbGFncyBpbiB0aGUgcm9tLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAweGMwOyBpKyspIHtcbiAgICAgICAgd3JpdGVyLnJvbVt0aGlzLmJhc2UgKyBpXSA9IHRoaXMudGlsZXNbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0VGlsZXMoc3RhcnQ6IG51bWJlciwgdGlsZXM6IEFycmF5PEFycmF5PG51bWJlcnxudWxsPj4pIHtcbiAgICBmb3IgKGNvbnN0IHJvdyBvZiB0aWxlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHJvd1tpXTtcbiAgICAgICAgaWYgKHRpbGUgIT0gbnVsbCkgdGhpcy50aWxlc1tzdGFydCArIGldID0gdGlsZTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ICs9IDE2O1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE8gLSBhY2Nlc3NvcnMgZm9yIHdoaWNoIHBhbGV0dGVzLCB0aWxlc2V0cywgYW5kIHBhdHRlcm5zIGFyZSB1c2VkL2FsbG93ZWRcbn1cblxuLy8gTWV0YXRpbGUgZG9lc24ndCBtZWFuIG11Y2ggd2l0aG91dCB0aWxlc2V0LCBwYXR0ZXJucywgZXRjLlxuLy8gbWF5IG5lZWQgdG8gcmV0aGluayB0aGlzIG9uZSwgbWFrZSBpdCBhIHRyYW5zaWVudCBvYmplY3QgdGhhdCBkZXBzIG9uIG90aGVycy5cbi8vIGNsYXNzIE1ldGF0aWxlIHtcbi8vICAgY29uc3RydWN0b3Iocm9tLCBpZCkge1xuLy8gICAgIHRoaXMucm9tID0gcm9tO1xuLy8gICAgIHRoaXMuaWQgPSBpZDtcbi8vICAgfVxuLy8gfVxuIl19