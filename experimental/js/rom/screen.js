import { Entity } from './entity.js';
import { tuple } from './util.js';
export class Screen extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.base = (id > 0xff ? 0x40 + id : id) << 8;
        this.tiles = tuple(rom.prg, this.base, 0xf0);
    }
    allTilesSet() {
        return new Set(this.tiles);
    }
    write() {
        const a = this.rom.assembler();
        if (this.id < 0x100) {
            a.segment((this.id >> 5).toString(16).padStart(2, '0'));
            a.org(0x8000 | (this.id & 0x3f) << 8);
            a.byte(...this.tiles);
        }
        else {
            a.segment('0a');
            a.org(0x8000 | (this.id & 0x3) << 8);
            a.byte(...this.tiles.slice(0, 0xc0));
        }
        return [a.module()];
    }
    setTiles(start, tiles) {
        for (const row of tiles) {
            for (let i = 0; i < row.length; i++) {
                const tile = row[i];
                if (tile != null)
                    this.tiles[start + i] = tile;
            }
            start += 16;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3JvbS9zY3JlZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRWhDLE1BQU0sT0FBTyxNQUFPLFNBQVEsTUFBTTtJQUtoQyxZQUFZLEdBQVEsRUFBRSxFQUFVO1FBQzlCLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBVUQsV0FBVztRQUNULE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMvQixJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFO1lBQ25CLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDeEQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBR3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN0QztRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWEsRUFBRSxLQUFnQztRQUN0RCxLQUFLLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRTtZQUN2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixJQUFJLElBQUksSUFBSSxJQUFJO29CQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzthQUNoRDtZQUNELEtBQUssSUFBSSxFQUFFLENBQUM7U0FDYjtJQUNILENBQUM7Q0FHRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9kdWxlfSBmcm9tICcuLi9hc20vbW9kdWxlLmpzJztcbmltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuaW1wb3J0IHtFbnRpdHl9IGZyb20gJy4vZW50aXR5LmpzJztcbmltcG9ydCB7dHVwbGV9IGZyb20gJy4vdXRpbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTY3JlZW4gZXh0ZW5kcyBFbnRpdHkge1xuXG4gIGJhc2U6IG51bWJlcjtcbiAgdGlsZXM6IG51bWJlcltdOyAvLyBhbHdheXMgMTV4MTZcblxuICBjb25zdHJ1Y3Rvcihyb206IFJvbSwgaWQ6IG51bWJlcikge1xuICAgIHN1cGVyKHJvbSwgaWQpO1xuICAgIHRoaXMuYmFzZSA9IChpZCA+IDB4ZmYgPyAweDQwICsgaWQgOiBpZCkgPDwgODtcbiAgICAvLyBtZXRhdGlsZSBpbmRleFxuICAgIHRoaXMudGlsZXMgPSB0dXBsZShyb20ucHJnLCB0aGlzLmJhc2UsIDB4ZjApO1xuICB9XG5cbiAgLy8gdGlsZSh5OiBudW1iZXIsIHg6IG51bWJlcik6IG51bWJlciB7XG4gIC8vICAgcmV0dXJuIHRoaXMudGlsZXNbeSA8PCA0IHwgeF07XG4gIC8vIH1cblxuICAvLyBtZXRhdGlsZSh5LCB4KTogTWV0YXRpbGUge1xuICAvLyAgIHJldHVybiB0aGlzLnJvbS5tZXRhdGlsZXNbdGhpcy50aWxlc1t5XVt4XV07XG4gIC8vIH1cblxuICBhbGxUaWxlc1NldCgpOiBTZXQ8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG5ldyBTZXQodGhpcy50aWxlcyk7XG4gIH1cblxuICB3cml0ZSgpOiBNb2R1bGVbXSB7XG4gICAgY29uc3QgYSA9IHRoaXMucm9tLmFzc2VtYmxlcigpO1xuICAgIGlmICh0aGlzLmlkIDwgMHgxMDApIHtcbiAgICAgIGEuc2VnbWVudCgodGhpcy5pZCA+PiA1KS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG4gICAgICBhLm9yZygweDgwMDAgfCAodGhpcy5pZCAmIDB4M2YpIDw8IDgpO1xuICAgICAgYS5ieXRlKC4uLnRoaXMudGlsZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhLnNlZ21lbnQoJzBhJyk7IC8vIDE0MDAwXG4gICAgICBhLm9yZygweDgwMDAgfCAodGhpcy5pZCAmIDB4MykgPDwgOClcbiAgICAgIC8vIHdlIHJldXNlIHRoZSBsYXN0IDIgcm93cyBvZiBleHRlbmRlZCBzY3JlZW5zIChjb3ZlcmVkIGJ5IEhVRCkgZm9yXG4gICAgICAvLyBnbG9iYWwgZmxhZ3MgaW4gdGhlIHJvbS5cbiAgICAgIGEuYnl0ZSguLi50aGlzLnRpbGVzLnNsaWNlKDAsIDB4YzApKTtcbiAgICB9XG4gICAgcmV0dXJuIFthLm1vZHVsZSgpXTtcbiAgfVxuXG4gIHNldFRpbGVzKHN0YXJ0OiBudW1iZXIsIHRpbGVzOiBBcnJheTxBcnJheTxudW1iZXJ8bnVsbD4+KSB7XG4gICAgZm9yIChjb25zdCByb3cgb2YgdGlsZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSByb3dbaV07XG4gICAgICAgIGlmICh0aWxlICE9IG51bGwpIHRoaXMudGlsZXNbc3RhcnQgKyBpXSA9IHRpbGU7XG4gICAgICB9XG4gICAgICBzdGFydCArPSAxNjtcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPIC0gYWNjZXNzb3JzIGZvciB3aGljaCBwYWxldHRlcywgdGlsZXNldHMsIGFuZCBwYXR0ZXJucyBhcmUgdXNlZC9hbGxvd2VkXG59XG5cbi8vIE1ldGF0aWxlIGRvZXNuJ3QgbWVhbiBtdWNoIHdpdGhvdXQgdGlsZXNldCwgcGF0dGVybnMsIGV0Yy5cbi8vIG1heSBuZWVkIHRvIHJldGhpbmsgdGhpcyBvbmUsIG1ha2UgaXQgYSB0cmFuc2llbnQgb2JqZWN0IHRoYXQgZGVwcyBvbiBvdGhlcnMuXG4vLyBjbGFzcyBNZXRhdGlsZSB7XG4vLyAgIGNvbnN0cnVjdG9yKHJvbSwgaWQpIHtcbi8vICAgICB0aGlzLnJvbSA9IHJvbTtcbi8vICAgICB0aGlzLmlkID0gaWQ7XG4vLyAgIH1cbi8vIH1cbiJdfQ==