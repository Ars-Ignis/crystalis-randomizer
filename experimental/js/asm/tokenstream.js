const MAX_DEPTH = 100;
export class TokenStream {
    constructor() {
        this.stack = [];
    }
    next() {
        var _a;
        while (this.stack.length) {
            const [tok, front] = this.stack[this.stack.length - 1];
            if (front.length)
                return front.pop();
            const line = (_a = tok) === null || _a === void 0 ? void 0 : _a.next();
            if (line)
                return line;
            this.stack.pop();
        }
        return undefined;
    }
    unshift(...lines) {
        if (!this.stack.length)
            throw new Error(`Cannot unshift after EOF`);
        const front = this.stack[this.stack.length - 1][1];
        for (let i = lines.length - 1; i >= 0; i--) {
            front.push(lines[i]);
        }
    }
    enter(tokens) {
        const frame = [undefined, []];
        if (tokens)
            frame[0] = tokens;
        this.stack.push(frame);
        if (this.stack.length > MAX_DEPTH)
            throw new Error(`Stack overflow`);
    }
    exit() {
        this.stack.pop();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvYXNtL3Rva2Vuc3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQztBQUV0QixNQUFNLE9BQU8sV0FBVztJQUF4QjtRQUNVLFVBQUssR0FBWSxFQUFFLENBQUM7SUF3QzlCLENBQUM7SUF0Q0MsSUFBSTs7UUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3hCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN2RCxJQUFJLEtBQUssQ0FBQyxNQUFNO2dCQUFFLE9BQU8sS0FBSyxDQUFDLEdBQUcsRUFBRyxDQUFDO1lBQ3RDLE1BQU0sSUFBSSxTQUFHLEdBQUcsMENBQUUsSUFBSSxFQUFFLENBQUM7WUFDekIsSUFBSSxJQUFJO2dCQUFFLE9BQU8sSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDbEI7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQUcsS0FBZ0I7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUNwRSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztJQU9ELEtBQUssQ0FBQyxNQUFvQjtRQUN4QixNQUFNLEtBQUssR0FBVSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyQyxJQUFJLE1BQU07WUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBR0QsSUFBSTtRQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbkIsQ0FBQztDQUlGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUb2tlbiwgVG9rZW5Tb3VyY2V9IGZyb20gJy4vdG9rZW4uanMnO1xuXG50eXBlIEZyYW1lID0gW1Rva2VuU291cmNlfHVuZGVmaW5lZCwgVG9rZW5bXVtdXTtcblxuY29uc3QgTUFYX0RFUFRIID0gMTAwO1xuXG5leHBvcnQgY2xhc3MgVG9rZW5TdHJlYW0gaW1wbGVtZW50cyBUb2tlblNvdXJjZSB7XG4gIHByaXZhdGUgc3RhY2s6IEZyYW1lW10gPSBbXTtcblxuICBuZXh0KCk6IFRva2VuW118dW5kZWZpbmVkIHtcbiAgICB3aGlsZSAodGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFt0b2ssIGZyb250XSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChmcm9udC5sZW5ndGgpIHJldHVybiBmcm9udC5wb3AoKSE7XG4gICAgICBjb25zdCBsaW5lID0gdG9rPy5uZXh0KCk7XG4gICAgICBpZiAobGluZSkgcmV0dXJuIGxpbmU7XG4gICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdW5zaGlmdCguLi5saW5lczogVG9rZW5bXVtdKSB7XG4gICAgaWYgKCF0aGlzLnN0YWNrLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdW5zaGlmdCBhZnRlciBFT0ZgKTtcbiAgICBjb25zdCBmcm9udCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVsxXTtcbiAgICBmb3IgKGxldCBpID0gbGluZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGZyb250LnB1c2gobGluZXNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGFzeW5jIGluY2x1ZGUoZmlsZTogc3RyaW5nKSB7XG4gIC8vICAgY29uc3QgY29kZSA9IGF3YWl0IHRoaXMudGFzay5wYXJlbnQucmVhZEZpbGUoZmlsZSk7XG4gIC8vICAgdGhpcy5zdGFjay5wdXNoKFtuZXcgVG9rZW5pemVyKGNvZGUsIGZpbGUsIHRoaXMudGFzay5vcHRzKSwgIFtdXSk7XG4gIC8vIH1cbiAgLy8gRW50ZXIgYSBtYWNybyBzY29wZS5cbiAgZW50ZXIodG9rZW5zPzogVG9rZW5Tb3VyY2UpIHtcbiAgICBjb25zdCBmcmFtZTogRnJhbWUgPSBbdW5kZWZpbmVkLCBbXV07XG4gICAgaWYgKHRva2VucykgZnJhbWVbMF0gPSB0b2tlbnM7XG4gICAgdGhpcy5zdGFjay5wdXNoKGZyYW1lKTtcbiAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPiBNQVhfREVQVEgpIHRocm93IG5ldyBFcnJvcihgU3RhY2sgb3ZlcmZsb3dgKTtcbiAgfVxuXG4gIC8vIEV4aXQgYSBtYWNybyBzY29wZSBwcmVtYXR1cmVseS5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICB9XG4gIC8vIG9wdGlvbnMoKTogVG9rZW5pemVyLk9wdGlvbnMge1xuICAvLyAgIHJldHVybiB0aGlzLnRhc2sub3B0cztcbiAgLy8gfVxufVxuXG5cbi8vIFRPRE8gLSBwcm9iYWJseSBubyBuZWVkIGZvciBhbnl0aGluZyB0aGF0IGRlbGVnYXRlcyB0byBhbiBBc3luY1RTLi4uP1xuIl19