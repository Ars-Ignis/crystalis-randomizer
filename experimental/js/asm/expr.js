import { Token } from './token.js';
export var Expr;
(function (Expr) {
    function traverse(expr, f) {
        function rec(e) {
            if (!e.args)
                return e;
            return { ...e, args: e.args.map(c => t(c, e)) };
        }
        ;
        function t(e, p) {
            const source = e.source;
            e = f(e, rec, p);
            if (source && !e.source)
                e.source = source;
            return e;
        }
        return t(expr);
    }
    Expr.traverse = traverse;
    function traversePost(expr, f) {
        return traverse(expr, (expr, rec) => f(rec(expr)));
    }
    Expr.traversePost = traversePost;
    function evaluate(expr) {
        var _a, _b, _c, _d;
        switch (expr.op) {
            case '.move':
            case 'im':
            case 'sym':
                return expr;
            case 'num':
                if (((_a = expr.meta) === null || _a === void 0 ? void 0 : _a.rel) && expr.meta.org != null) {
                    const { rel, ...meta } = expr.meta;
                    return { op: 'num', num: expr.num + meta.org, meta };
                }
                return expr;
            case '.max': return sameChunk(expr, Math.max);
            case '.min': return sameChunk(expr, Math.min);
            default:
        }
        if (((_b = expr.args) === null || _b === void 0 ? void 0 : _b.length) === 1) {
            switch (expr.op) {
                case '+': return expr.args[0];
                case '-': return unary(expr, x => -x);
                case '~': return unary(expr, x => ~x);
                case '!': return unary(expr, x => +!x);
                case '<': return unary(expr, x => x & 0xff);
                case '>': return unary(expr, x => (x >> 8) & 0xff);
                case '^': return _d = num((_c = expr.args[0].meta) === null || _c === void 0 ? void 0 : _c.bank), (_d !== null && _d !== void 0 ? _d : expr);
                default: throw new Error(`Unknown unary operator: ${expr.op}`);
            }
        }
        switch (expr.op) {
            case '+': return plus(expr);
            case '-': return minus(expr);
            case '*': return binary(expr, (a, b) => a * b);
            case '/': return binary(expr, (a, b) => Math.floor(a / b));
            case '.mod': return binary(expr, (a, b) => a % b);
            case '&': return binary(expr, (a, b) => a & b);
            case '|': return binary(expr, (a, b) => a | b);
            case '^': return binary(expr, (a, b) => a ^ b);
            case '<<': return binary(expr, (a, b) => a << b);
            case '>>': return binary(expr, (a, b) => a >>> b);
            case '<': return binary(expr, (a, b) => +(a < b));
            case '<=': return binary(expr, (a, b) => +(a <= b));
            case '>': return binary(expr, (a, b) => +(a > b));
            case '>=': return binary(expr, (a, b) => +(a >= b));
            case '=': return binary(expr, (a, b) => +(a == b));
            case '<>': return binary(expr, (a, b) => +(a != b));
            case '&&': return binary(expr, (a, b) => a && b);
            case '||': return binary(expr, (a, b) => a || b);
            case '.xor': return binary(expr, (a, b) => !a && b || !b && a || 0);
            default: throw new Error(`Unknown operator: ${expr.op}`);
        }
    }
    Expr.evaluate = evaluate;
    function identifier(expr) {
        if (expr.op === 'sym' && expr.sym)
            return expr.sym;
        throw new Error(`Expected identifier but got op: ${expr.op}`);
    }
    Expr.identifier = identifier;
    function parseOnly(tokens, index = 0) {
        const [expr, i] = parse(tokens, index);
        if (i < tokens.length) {
            throw new Error(`Garbage after expression: ${Token.nameAt(tokens[i])}`);
        }
        else if (!expr) {
            throw new Error(`No expression?`);
        }
        return expr;
    }
    Expr.parseOnly = parseOnly;
    function parse(tokens, index = 0) {
        var _a;
        const ops = [];
        const exprs = [];
        function popOp() {
            const [op, [, , arity]] = ops.pop();
            const args = exprs.splice(exprs.length - arity, arity);
            if (args.length !== arity)
                throw new Error('shunting parse failed?');
            exprs.push(fixSize({ op, args }));
        }
        let val = true;
        let i = index;
        for (; i < tokens.length; i++) {
            const front = tokens[i];
            if (val) {
                if (front.token === 'cs' || front.token === 'op') {
                    const mapped = NAME_MAP.get(front.str);
                    const prefix = PREFIXOPS.get((mapped !== null && mapped !== void 0 ? mapped : front.str));
                    if (prefix) {
                        ops.push([front.str, prefix]);
                    }
                    else if (front.token === 'cs') {
                        const op = front.str;
                        if (!FUNCTIONS.has(op)) {
                            throw new Error(`No such function: ${Token.nameAt(front)}`);
                        }
                        const next = tokens[i + 1];
                        if (((_a = next) === null || _a === void 0 ? void 0 : _a.token) !== 'lp') {
                            throw new Error(`Bad funcall: ${Token.nameAt((next !== null && next !== void 0 ? next : front))}`);
                        }
                        const close = Token.findBalanced(tokens, i + 1);
                        if (close < 0) {
                            throw new Error(`Never closed: ${Token.nameAt(next)}`);
                        }
                        const args = [];
                        for (const arg of Token.parseArgList(tokens, i + 2, close)) {
                            args.push(parseOnly(arg));
                        }
                        i = close;
                        exprs.push(fixSize({ op, args }));
                        val = false;
                    }
                    else if (Token.eq(front, Token.STAR)) {
                        exprs.push({ op: 'sym', sym: '*' });
                        val = false;
                    }
                    else {
                        throw new Error(`Unknown prefix operator: ${Token.nameAt(front)}`);
                    }
                }
                else if (front.token === 'lp') {
                    const close = Token.findBalanced(tokens, i);
                    if (close < 0) {
                        throw new Error(`No close paren: ${Token.nameAt(front)}`);
                    }
                    const e = parseOnly(tokens.slice(i + 1, close));
                    exprs.push(e);
                    i = close;
                    val = false;
                }
                else if (front.token === 'ident') {
                    exprs.push({ op: 'sym', sym: front.str });
                    val = false;
                }
                else if (front.token === 'num') {
                    const num = front.num;
                    exprs.push({ op: 'num', num, meta: size(num) });
                    val = false;
                }
                else {
                    throw new Error(`Bad expression token: ${Token.nameAt(front)}`);
                }
            }
            else {
                if (Token.eq(front, Token.COMMA)) {
                    break;
                }
                if (front.token === 'cs' || front.token === 'op') {
                    const mapped = NAME_MAP.get(front.str);
                    const op = BINOPS.get((mapped !== null && mapped !== void 0 ? mapped : front.str));
                    if (!op)
                        break;
                    while (ops.length) {
                        const top = ops[ops.length - 1];
                        const cmp = compareOp(top[1], op);
                        if (cmp < 0)
                            break;
                        if (cmp === 0) {
                            throw new Error(`Mixing ${top[0]} and ${front.str} needs explicit parens.${Token.at(front)}`);
                        }
                        popOp();
                    }
                    ops.push([front.str, op]);
                    val = true;
                }
                else {
                    break;
                }
            }
        }
        while (ops.length)
            popOp();
        if (exprs.length !== 1)
            throw new Error(`shunting parse failed?`);
        if (tokens[index].source)
            exprs[0].source = tokens[index].source;
        return [exprs[0], i];
    }
    Expr.parse = parse;
    function sameChunk(expr, f) {
        throw new Error();
    }
    function num(num) {
        if (num == null)
            return undefined;
        return { op: 'num', num, meta: size(num) };
    }
    function unary(expr, f) {
        const arg = expr.args[0];
        if (!isAbs(arg))
            return expr;
        const num = f(arg.num);
        return { op: 'num', num, meta: size(num) };
    }
    function binary(expr, f) {
        const [a, b] = expr.args;
        if (!isAbs(a) || !isAbs(b))
            return expr;
        const num = f(a.num, b.num);
        return { op: 'num', num, meta: size(num) };
    }
    function plus(expr) {
        var _a, _b, _c, _d, _e, _f;
        const [a, b] = expr.args;
        if (a.op !== 'num' || b.op !== 'num')
            return expr;
        const out = { op: 'num', num: a.num + b.num };
        if (a.meta || b.meta) {
            if (((_a = a.meta) === null || _a === void 0 ? void 0 : _a.rel) && ((_b = b.meta) === null || _b === void 0 ? void 0 : _b.rel))
                return expr;
            if ((_c = a.meta) === null || _c === void 0 ? void 0 : _c.rel) {
                out.meta = a.meta;
            }
            else if ((_d = b.meta) === null || _d === void 0 ? void 0 : _d.rel) {
                out.meta = b.meta;
            }
        }
        if (!((_e = out.meta) === null || _e === void 0 ? void 0 : _e.rel) && ((_f = out.meta) === null || _f === void 0 ? void 0 : _f.size) == null) {
            (out.meta || (out.meta = {})).size = size(out.num).size;
        }
        return out;
    }
    function minus(expr) {
        var _a, _b, _c, _d, _e;
        const [a, b] = expr.args;
        if (a.op !== 'num' || b.op !== 'num')
            return expr;
        const out = { op: 'num', num: a.num - b.num };
        if ((_a = b.meta) === null || _a === void 0 ? void 0 : _a.rel) {
            return ((_b = a.meta) === null || _b === void 0 ? void 0 : _b.rel) && a.meta.chunk === b.meta.chunk ? out : expr;
        }
        if ((_c = a.meta) === null || _c === void 0 ? void 0 : _c.rel)
            out.meta = a.meta;
        if (!((_d = out.meta) === null || _d === void 0 ? void 0 : _d.rel) && ((_e = out.meta) === null || _e === void 0 ? void 0 : _e.size) == null) {
            (out.meta || (out.meta = {})).size = size(out.num).size;
        }
        return out;
    }
    function isAbs(expr) {
        var _a;
        return expr.op === 'num' && !((_a = expr.meta) === null || _a === void 0 ? void 0 : _a.rel);
    }
})(Expr || (Expr = {}));
function compareOp(top, next) {
    if (top[0] > next[0])
        return 1;
    if (top[0] < next[0])
        return -1;
    if (top[1] !== next[1])
        return 0;
    return top[1];
}
const BINARY = 2;
const UNARY = 1;
export const BINOPS = new Map([
    ['*', [5, 4, BINARY]],
    ['/', [5, 4, BINARY]],
    ['.mod', [5, 3, BINARY]],
    ['&', [5, 2, BINARY]],
    ['^', [5, 1, BINARY]],
    ['<<', [5, 0, BINARY]],
    ['>>', [5, 0, BINARY]],
    ['+', [4, 2, BINARY]],
    ['-', [4, 2, BINARY]],
    ['|', [4, 1, BINARY]],
    ['<', [3, 0, BINARY]],
    ['<=', [3, 0, BINARY]],
    ['>', [3, 0, BINARY]],
    ['>=', [3, 0, BINARY]],
    ['=', [3, 0, BINARY]],
    ['<>', [3, 0, BINARY]],
    ['&&', [2, 3, BINARY]],
    ['.xor', [2, 2, BINARY]],
    ['||', [2, 1, BINARY]],
]);
const PREFIXOPS = new Map([
    ['+', [9, -1, UNARY]],
    ['-', [9, -1, UNARY]],
    ['~', [9, -1, UNARY]],
    ['<', [9, -1, UNARY]],
    ['>', [9, -1, UNARY]],
    ['^', [9, -1, UNARY]],
    ['!', [2, -1, UNARY]],
]);
const FUNCTIONS = new Set([
    '.byteat',
    '.wordat',
    '.max', '.min',
]);
const NAME_MAP = new Map([
    ['.bitand', '&'],
    ['.bitxor', '^'],
    ['.bitor', '|'],
    ['.shl', '<<'],
    ['.shr', '>>'],
    ['.and', '&&'],
    ['.or', '||'],
    ['.bitnot', '~'],
    ['.lobyte', '<'],
    ['.hibyte', '>'],
    ['.bankbyte', '^'],
    ['.not', '!'],
]);
const SIZE_TRANSFORMS = new Map([
    ['^', (...args) => args.length === 1 ? 1 : Math.max(...args)],
    ['<', () => 1],
    ['>', () => 1],
    ['!', () => 1],
    ['<=', () => 1],
    ['>=', () => 1],
    ['<>', () => 1],
    ['=', () => 1],
    ['&', Math.max],
    ['&&', Math.max],
    ['|', Math.max],
    ['||', Math.max],
    ['.xor', Math.max],
    ['.max', Math.max],
    ['.min', Math.max],
]);
function fixSize(expr) {
    var _a;
    const xform = SIZE_TRANSFORMS.get(expr.op);
    const size = (_a = xform) === null || _a === void 0 ? void 0 : _a(...expr.args.map(e => { var _a; return Number((_a = e.meta) === null || _a === void 0 ? void 0 : _a.size); }));
    if (size)
        (expr.meta || (expr.meta = {})).size = size;
    return expr;
}
function size(num) {
    return { size: 0 <= num && num < 256 ? 1 : 2 };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9hc20vZXhwci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWEsS0FBSyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBa0I3QyxNQUFNLEtBQVcsSUFBSSxDQTJUcEI7QUEzVEQsV0FBaUIsSUFBSTtJQXNCbkIsU0FBZ0IsUUFBUSxDQUFDLElBQVUsRUFBRSxDQUFZO1FBQy9DLFNBQVMsR0FBRyxDQUFDLENBQU87WUFDbEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJO2dCQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sRUFBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztRQUNoRCxDQUFDO1FBQUEsQ0FBQztRQUNGLFNBQVMsQ0FBQyxDQUFDLENBQU8sRUFBRSxDQUFRO1lBQzFCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDeEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLElBQUksTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDM0MsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDO1FBQ0QsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakIsQ0FBQztJQVplLGFBQVEsV0FZdkIsQ0FBQTtJQUVELFNBQWdCLFlBQVksQ0FBQyxJQUFVLEVBQUUsQ0FBTTtRQUM3QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxD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TSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0QsS0FBSyxNQUFNLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbEQsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0MsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0MsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0MsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbEQsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakQsS0FBSyxNQUFNLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FB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SUFDckIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUV0QixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUd2QixDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBdUI7SUFFOUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFD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TyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBUyxJQUFJLENBQUMsR0FBVztJQUN2QixPQUFPLEVBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztBQUMvQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTb3VyY2VJbmZvLCBUb2tlbn0gZnJvbSAnLi90b2tlbi5qcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhwciB7XG4gIC8vIG9wZXJhdG9yIChlLmcuICcrJyBvciAnLm1heCcpIG9yICdzeW0nLCAnbnVtJywgb3IgJ2ltJ1xuICAvLyAgLSBzeW06IGFuIG9mZnNldCBpbnRvIHRoZSBzeW1ib2xzIGFycmF5IChvciB0aGUgbmFtZSBpbiAnc3ltJylcbiAgLy8gIC0gbnVtOiBhIG51bWJlciBsaXRlcmFsLCBvciBhbiBvZmZzZXQgaW50byB0aGUgc3ltYm9scyBhcnJheS5cbiAgLy8gIC0gaW06IGFuIGltcG9ydCBmcm9tIGFub3RoZXIgb2JqZWN0IGZpbGUgKHVzZXMgJ3N5bScpLlxuICAvLyBUT0RPIC0gd2hhdCBhYm91dCBkaWZmZXJlbnQgYWRkcmVzcyB0eXBlcz8gYmFuayBoaW50L2V0Yz9cbiAgLy8gICAgICAtIGRvZXMgYmFuayBoaW50IG5lZWQgdG8gZ2V0IHN0b3JlZCBpbiB0aGUgb2JqZWN0IGZpbGU/XG4gIC8vICAgICAgICAtIHByb2JhYmx5IG5vdC4uLj9cbiAgb3A6IHN0cmluZztcbiAgYXJncz86IEV4cHJbXTtcbiAgbnVtPzogbnVtYmVyO1xuICBtZXRhPzogRXhwci5NZXRhO1xuICBzeW0/OiBzdHJpbmc7XG4gIHNvdXJjZT86IFNvdXJjZUluZm87XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRXhwciB7XG5cbiAgLyoqIEV4dHJhIGluZm9ybWF0aW9uIGZvciAnbnVtJyB2YWx1ZXMuICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTWV0YSB7XG4gICAgLyoqIFdoZXRoZXIgdGhpcyBpcyByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIGNodW5rLiAqL1xuICAgIHJlbD86IGJvb2xlYW47XG4gICAgLyoqIFJlbGF0aXZlIGNodW5rIHRoZSB2YWx1ZSBpcyBkZWZpbmVkIGluLiAqL1xuICAgIGNodW5rPzogbnVtYmVyO1xuICAgIC8qKiBPcmcgdmFsdWUgb2YgY2h1bmssIGlmIGtub3duLiAqL1xuICAgIG9yZz86IG51bWJlcjtcbiAgICAvKiogQmFuayB2YWx1ZSBvZiBjaHVuaywgaWYga25vd24uICovXG4gICAgYmFuaz86IG51bWJlcjtcbiAgICAvKiogT2Zmc2V0IHZhbHVlIG9mIGNodW5rLCBpZiBrbm93bi4gKi9cbiAgICBvZmZzZXQ/OiBudW1iZXI7XG4gICAgLyoqIFNpemUgaGludCBmb3IgbnVtYmVyLiAqL1xuICAgIHNpemU/OiBudW1iZXI7XG4gIH1cblxuICB0eXBlIFJlYyA9IChleHByOiBFeHByKSA9PiBFeHByOyAvLyByZWN1cnNlcyBpbnRvIGNoaWxkcmVuXG4gIHR5cGUgVHJhdmVyc2VyID0gKGV4cHI6IEV4cHIsIHJlYzogUmVjLCBwYXJlbnQ/OiBFeHByKSA9PiBFeHByO1xuXG4gIC8qKiBQZXJmb3JtcyBhIHBvc3Qtb3JkZXIgdHJhdmVyc2FsLiAqL1xuICBleHBvcnQgZnVuY3Rpb24gdHJhdmVyc2UoZXhwcjogRXhwciwgZjogVHJhdmVyc2VyKSB7XG4gICAgZnVuY3Rpb24gcmVjKGU6IEV4cHIpIHtcbiAgICAgIGlmICghZS5hcmdzKSByZXR1cm4gZTtcbiAgICAgIHJldHVybiB7Li4uZSwgYXJnczogZS5hcmdzLm1hcChjID0+IHQoYywgZSkpfTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHQoZTogRXhwciwgcD86IEV4cHIpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IGUuc291cmNlO1xuICAgICAgZSA9IGYoZSwgcmVjLCBwKTtcbiAgICAgIGlmIChzb3VyY2UgJiYgIWUuc291cmNlKSBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXR1cm4gdChleHByKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZVBvc3QoZXhwcjogRXhwciwgZjogUmVjKTogRXhwciB7XG4gICAgcmV0dXJuIHRyYXZlcnNlKGV4cHIsIChleHByLCByZWMpID0+IGYocmVjKGV4cHIpKSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZXZhbHVhdGUoZXhwcjogRXhwcik6IEV4cHIge1xuICAgIHN3aXRjaCAoZXhwci5vcCkgeyAvLyB2YXItYXJnIGZ1bmN0aW9uc1xuICAgICAgY2FzZSAnLm1vdmUnOlxuICAgICAgY2FzZSAnaW0nOlxuICAgICAgY2FzZSAnc3ltJzpcbiAgICAgICAgcmV0dXJuIGV4cHI7XG4gICAgICBjYXNlICdudW0nOlxuICAgICAgICBpZiAoZXhwci5tZXRhPy5yZWwgJiYgZXhwci5tZXRhLm9yZyAhPSBudWxsKSB7XG4gICAgICAgICAgY29uc3Qge3JlbCwgLi4ubWV0YX0gPSBleHByLm1ldGE7XG4gICAgICAgICAgLy8gVE9ETyAtIHB1bGwgc2l6ZSBmcm9tIG1ldGE/XG4gICAgICAgICAgcmV0dXJuIHtvcDogJ251bScsIG51bTogZXhwci5udW0hICsgbWV0YS5vcmchLCBtZXRhfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICAgIGNhc2UgJy5tYXgnOiByZXR1cm4gc2FtZUNodW5rKGV4cHIsIE1hdGgubWF4KTtcbiAgICAgIGNhc2UgJy5taW4nOiByZXR1cm4gc2FtZUNodW5rKGV4cHIsIE1hdGgubWluKTtcbiAgICAgIGRlZmF1bHQ6IC8vIGZhbGwgdGhyb3VnaCB0byBsYXRlciBjaGVja3NcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHVuYXJpZXNcbiAgICBpZiAoZXhwci5hcmdzPy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHN3aXRjaCAoZXhwci5vcCkge1xuICAgICAgICBjYXNlICcrJzogcmV0dXJuIGV4cHIuYXJncyFbMF07XG4gICAgICAgIGNhc2UgJy0nOiByZXR1cm4gdW5hcnkoZXhwciwgeCA9PiAteCk7XG4gICAgICAgIGNhc2UgJ34nOiByZXR1cm4gdW5hcnkoZXhwciwgeCA9PiB+eCk7XG4gICAgICAgIGNhc2UgJyEnOiByZXR1cm4gdW5hcnkoZXhwciwgeCA9PiArIXgpO1xuICAgICAgICBjYXNlICc8JzogcmV0dXJuIHVuYXJ5KGV4cHIsIHggPT4geCAmIDB4ZmYpO1xuICAgICAgICBjYXNlICc+JzogcmV0dXJuIHVuYXJ5KGV4cHIsIHggPT4gKHggPj4gOCkgJiAweGZmKTtcbiAgICAgICAgY2FzZSAnXic6IHJldHVybiBudW0oZXhwci5hcmdzIVswXS5tZXRhPy5iYW5rKSA/PyBleHByO1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdW5hcnkgb3BlcmF0b3I6ICR7ZXhwci5vcH1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV4cHIub3ApIHtcbiAgICAgIGNhc2UgJysnOiByZXR1cm4gcGx1cyhleHByKTtcbiAgICAgIGNhc2UgJy0nOiByZXR1cm4gbWludXMoZXhwcik7XG4gICAgICBjYXNlICcqJzogcmV0dXJuIGJpbmFyeShleHByLCAoYSwgYikgPT4gYSAqIGIpO1xuICAgICAgY2FzZSAnLyc6IHJldHVybiBiaW5hcnkoZXhwciwgKGEsIGIpID0+IE1hdGguZmxvb3IoYSAvIGIpKTtcbiAgICAgIGNhc2UgJy5tb2QnOiByZXR1cm4gYmluYXJ5KGV4cHIsIChhLCBiKSA9PiBhICUgYik7XG4gICAgICBjYXNlICcmJzogcmV0dXJuIGJpbmFyeShleHByLCAoYSwgYikgPT4gYSAmIGIpO1xuICAgICAgY2FzZSAnfCc6IHJldHVybiBiaW5hcnkoZXhwciwgKGEsIGIpID0+IGEgfCBiKTtcbiAgICAgIGNhc2UgJ14nOiByZXR1cm4gYmluYXJ5KGV4cHIsIChhLCBiKSA9PiBhIF4gYik7XG4gICAgICBjYXNlICc8PCc6IHJldHVybiBiaW5hcnkoZXhwciwgKGEsIGIpID0+IGEgPDwgYik7XG4gICAgICBjYXNlICc+Pic6IHJldHVybiBiaW5hcnkoZXhwciwgKGEsIGIpID0+IGEgPj4+IGIpO1xuICAgICAgY2FzZSAnPCc6IHJldHVybiBiaW5hcnkoZXhwciwgKGEsIGIpID0+ICsoYSA8IGIpKTtcbiAgICAgIGNhc2UgJzw9JzogcmV0dXJuIGJpbmFyeShleHByLCAoYSwgYikgPT4gKyhhIDw9IGIpKTtcbiAgICAgIGNhc2UgJz4nOiByZXR1cm4gYmluYXJ5KGV4cHIsIChhLCBiKSA9PiArKGEgPiBiKSk7XG4gICAgICBjYXNlICc+PSc6IHJldHVybiBiaW5hcnkoZXhwciwgKGEsIGIpID0+ICsoYSA+PSBiKSk7XG4gICAgICBjYXNlICc9JzogcmV0dXJuIGJpbmFyeShleHByLCAoYSwgYikgPT4gKyhhID09IGIpKTtcbiAgICAgIGNhc2UgJzw+JzogcmV0dXJuIGJpbmFyeShleHByLCAoYSwgYikgPT4gKyhhICE9IGIpKTtcbiAgICAgIGNhc2UgJyYmJzogcmV0dXJuIGJpbmFyeShleHByLCAoYSwgYikgPT4gYSAmJiBiKTtcbiAgICAgIGNhc2UgJ3x8JzogcmV0dXJuIGJpbmFyeShleHByLCAoYSwgYikgPT4gYSB8fCBiKTtcbiAgICAgIGNhc2UgJy54b3InOiByZXR1cm4gYmluYXJ5KGV4cHIsIChhLCBiKSA9PiAhYSAmJiBiIHx8ICFiICYmIGEgfHwgMCk7XG4gICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gb3BlcmF0b3I6ICR7ZXhwci5vcH1gKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaWRlbnRpZmllcihleHByOiBFeHByKTogc3RyaW5nIHtcbiAgICBpZiAoZXhwci5vcCA9PT0gJ3N5bScgJiYgZXhwci5zeW0pIHJldHVybiBleHByLnN5bTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGlkZW50aWZpZXIgYnV0IGdvdCBvcDogJHtleHByLm9wfWApO1xuICB9XG5cbiAgLy8gLyoqIFJldHVybnMgdGhlIGlkZW50aWZpZXIuICovXG4gIC8vIGV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyKGV4cHI6IEV4cHIpOiBzdHJpbmcge1xuICAvLyAgIGNvbnN0IHRlcm1zOiBzdHJpbmdbXSA9IFtdO1xuICAvLyAgIGFwcGVuZChleHByKTtcbiAgLy8gICByZXR1cm4gdGVybXMuam9pbignOjonKTtcbiAgLy8gICBmdW5jdGlvbiBhcHBlbmQoZTogRXhwcikge1xuICAvLyAgICAgaWYgKGUub3AgPT09ICdpZGVudCcpIHtcbiAgLy8gICAgICAgdGVybXMucHVzaChlLnN5bSEpO1xuICAvLyAgICAgfSBlbHNlIGlmIChlLm9wID09PSAnOjonKSB7XG4gIC8vICAgICAgIGlmIChlLmFyZ3MhLmxlbmd0aCA9PT0gMSkgdGVybXMucHVzaCgnJyk7XG4gIC8vICAgICAgIGUuYXJncyEuZm9yRWFjaChhcHBlbmQpO1xuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBpZGVudGlmaWVyIGJ1dCBnb3Qgb3A6ICR7ZS5vcH1gKTtcbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vIH1cblxuICAvKiogUGFyc2UgYSBzaW5nbGUgZXhwcmVzc2lvbiwgbXVzdCBvY2N1cHkgdGhlIHJlc3Qgb2YgdGhlIGxpbmUuICovXG4gIGV4cG9ydCBmdW5jdGlvbiBwYXJzZU9ubHkodG9rZW5zOiBUb2tlbltdLCBpbmRleCA9IDApOiBFeHByIHtcbiAgICBjb25zdCBbZXhwciwgaV0gPSBwYXJzZSh0b2tlbnMsIGluZGV4KTtcbiAgICBpZiAoaSA8IHRva2Vucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgR2FyYmFnZSBhZnRlciBleHByZXNzaW9uOiAke1Rva2VuLm5hbWVBdCh0b2tlbnNbaV0pfWApO1xuICAgIH0gZWxzZSBpZiAoIWV4cHIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gZXhwcmVzc2lvbj9gKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICAvLyBSZXR1cm5zIFt1bmRlZmluZWQsIC0xXSBpZiBhIGJhZCBwYXJzZS5cbiAgLy8gR2l2ZSB1cCBvbiBub3JtYWwgcGFyc2luZywganVzdCB1c2UgYSBzaHVudGluZyB5YXJkIGFnYWluLi4uXG4gIC8vICAtIGJ1dCBoYW5kbGUgcGFyZW5zIHJlY3Vyc2l2ZWx5LlxuICBleHBvcnQgZnVuY3Rpb24gcGFyc2UodG9rZW5zOiBUb2tlbltdLCBpbmRleCA9IDApOiBbRXhwcnx1bmRlZmluZWQsIG51bWJlcl0ge1xuLy9jb25zb2xlLmxvZygnUEFSU0U6IHRva2Vucz0nLCB0b2tlbnMsICdpbmRleD0nLCBpbmRleCk7XG4vL3RyeSB7IHRocm93IG5ldyBFcnJvcigpOyB9IGNhdGNoIChlKSB7IGNvbnNvbGUubG9nKGUuc3RhY2spOyB9XG4gICAgY29uc3Qgb3BzOiBbc3RyaW5nLCBPcGVyYXRvck1ldGFdW10gPSBbXTtcbiAgICBjb25zdCBleHByczogRXhwcltdID0gW107XG5cbiAgICBmdW5jdGlvbiBwb3BPcCgpIHtcbiAgICAgIGNvbnN0IFtvcCwgWywsIGFyaXR5XV0gPSBvcHMucG9wKCkhO1xuLy9jb25zb2xlLmxvZygncG9wJywgb3AsIGFyaXR5KTtcbiAgICAgIGNvbnN0IGFyZ3MgPSBleHBycy5zcGxpY2UoZXhwcnMubGVuZ3RoIC0gYXJpdHksIGFyaXR5KTtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gYXJpdHkpIHRocm93IG5ldyBFcnJvcignc2h1bnRpbmcgcGFyc2UgZmFpbGVkPycpO1xuICAgICAgZXhwcnMucHVzaChmaXhTaXplKHtvcCwgYXJnc30pKTtcbiAgICB9XG5cbiAgICBsZXQgdmFsID0gdHJ1ZTtcbiAgICBsZXQgaSA9IGluZGV4O1xuICAgIGZvciAoOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmcm9udCA9IHRva2Vuc1tpXTtcbi8vY29uc29sZS5sb2coJ2V4cHJzOicsZXhwcnMsJ29wczonLG9wcywndG9rOicsZnJvbnQpO1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICAvLyBsb29raW5nIGZvciBhIHZhbHVlOiBsaXRlcmFsLCBiYWxhbmNlZCBwYXJlbnMsIG9yIHByZWZpeCBvcC5cbiAgICAgICAgaWYgKGZyb250LnRva2VuID09PSAnY3MnIHx8IGZyb250LnRva2VuID09PSAnb3AnKSB7XG4gICAgICAgICAgY29uc3QgbWFwcGVkID0gTkFNRV9NQVAuZ2V0KGZyb250LnN0cik7XG4gICAgICAgICAgY29uc3QgcHJlZml4ID0gUFJFRklYT1BTLmdldChtYXBwZWQgPz8gZnJvbnQuc3RyKTtcbiAgICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICBvcHMucHVzaChbZnJvbnQuc3RyLCBwcmVmaXhdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZyb250LnRva2VuID09PSAnY3MnKSB7XG4gICAgICAgICAgICBjb25zdCBvcCA9IGZyb250LnN0cjtcbiAgICAgICAgICAgIGlmICghRlVOQ1RJT05TLmhhcyhvcCkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIGZ1bmN0aW9uOiAke1Rva2VuLm5hbWVBdChmcm9udCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gdG9rZW5zW2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChuZXh0Py50b2tlbiAhPT0gJ2xwJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJhZCBmdW5jYWxsOiAke1Rva2VuLm5hbWVBdChuZXh0ID8/IGZyb250KX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNsb3NlID0gVG9rZW4uZmluZEJhbGFuY2VkKHRva2VucywgaSArIDEpO1xuICAgICAgICAgICAgaWYgKGNsb3NlIDwgMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5ldmVyIGNsb3NlZDogJHtUb2tlbi5uYW1lQXQobmV4dCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhcmdzOiBFeHByW10gPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXJnIG9mIFRva2VuLnBhcnNlQXJnTGlzdCh0b2tlbnMsIGkgKyAyLCBjbG9zZSkpIHtcbiAgICAgICAgICAgICAgYXJncy5wdXNoKHBhcnNlT25seShhcmcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSBjbG9zZTtcbiAgICAgICAgICAgIGV4cHJzLnB1c2goZml4U2l6ZSh7b3AsIGFyZ3N9KSk7XG4gICAgICAgICAgICB2YWwgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKFRva2VuLmVxKGZyb250LCBUb2tlbi5TVEFSKSkge1xuICAgICAgICAgICAgZXhwcnMucHVzaCh7b3A6ICdzeW0nLCBzeW06ICcqJ30pO1xuICAgICAgICAgICAgdmFsID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwcmVmaXggb3BlcmF0b3I6ICR7VG9rZW4ubmFtZUF0KGZyb250KX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZnJvbnQudG9rZW4gPT09ICdscCcpIHtcbiAgICAgICAgICAvLyBmaW5kIGJhbGFuY2VkIHBhcmVuc1xuICAgICAgICAgIGNvbnN0IGNsb3NlID0gVG9rZW4uZmluZEJhbGFuY2VkKHRva2VucywgaSk7XG4gICAgICAgICAgaWYgKGNsb3NlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBjbG9zZSBwYXJlbjogJHtUb2tlbi5uYW1lQXQoZnJvbnQpfWApO1xuICAgICAgICAgIH0gLy8gcmV0dXJuIFt1bmRlZmluZWQsIC0xXTtcbiAgICAgICAgICBjb25zdCBlID0gcGFyc2VPbmx5KHRva2Vucy5zbGljZShpICsgMSwgY2xvc2UpKTtcbiAgICAgICAgICBleHBycy5wdXNoKGUpO1xuICAgICAgICAgIGkgPSBjbG9zZTtcbiAgICAgICAgICB2YWwgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChmcm9udC50b2tlbiA9PT0gJ2lkZW50Jykge1xuICAgICAgICAgIC8vIGFkZCBzeW1ib2xcbiAgICAgICAgICBleHBycy5wdXNoKHtvcDogJ3N5bScsIHN5bTogZnJvbnQuc3RyfSk7XG4gICAgICAgICAgLy8gVE9ETyAtIHVzZSBzY29wZSBpbmZvcm1hdGlvbiB0byBkZXRlcm1pbmUgc2l6ZT9cbiAgICAgICAgICB2YWwgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChmcm9udC50b2tlbiA9PT0gJ251bScpIHtcbiAgICAgICAgICAvLyBhZGQgbnVtYmVyXG4gICAgICAgICAgY29uc3QgbnVtID0gZnJvbnQubnVtO1xuICAgICAgICAgIGV4cHJzLnB1c2goe29wOiAnbnVtJywgbnVtLCBtZXRhOiBzaXplKG51bSl9KTtcbiAgICAgICAgICB2YWwgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBiYWQgdG9rZW4/P1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQmFkIGV4cHJlc3Npb24gdG9rZW46ICR7VG9rZW4ubmFtZUF0KGZyb250KX1gKTtcbiAgICAgICAgICAvLyByZXR1cm4gW3VuZGVmaW5lZCwgLTFdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBsb29raW5nIGZvciBhbiBpbmZpeCBvcGVyYXRvciBvciBFT0wuXG4gICAgICAgIGlmIChUb2tlbi5lcShmcm9udCwgVG9rZW4uQ09NTUEpIC8qIHx8IFRva2VuLmVxKGZyb250LCBUb2tlbi5SUCkgKi8pIHtcbiAgICAgICAgICAvLyBUT0RPIC0gaXMgcnBhcmVuIG9rYXk/IHVzdWFsbHkgc2hvdWxkIGhhdmUgZXh0cmFjdGVkIHRoZSBiYWxhbmNlZFxuICAgICAgICAgIC8vIHBhcmVuIG91dCBmaXJzdD9cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbnQudG9rZW4gPT09ICdjcycgfHwgZnJvbnQudG9rZW4gPT09ICdvcCcpIHtcbiAgICAgICAgICBjb25zdCBtYXBwZWQgPSBOQU1FX01BUC5nZXQoZnJvbnQuc3RyKTtcbiAgICAgICAgICBjb25zdCBvcCA9IEJJTk9QUy5nZXQobWFwcGVkID8/IGZyb250LnN0cik7XG4gICAgICAgICAgaWYgKCFvcCkgYnJlYWs7IC8vIHdlJ3JlIGF0IHRoZSBlbmQuLi4/ICBvciBpZiBubyBvcC5cbiAgICAgICAgICAvLyBzZWUgaWYgYW55dGhpbmcgdG8gdGhlIGxlZnQgaXMgZmFzdGVyLlxuICAgICAgICAgIHdoaWxlIChvcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSBvcHNbb3BzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgY29uc3QgY21wID0gY29tcGFyZU9wKHRvcFsxXSwgb3ApO1xuICAgICAgICAgICAgaWYgKGNtcCA8IDApIGJyZWFrO1xuICAgICAgICAgICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICBgTWl4aW5nICR7dG9wWzBdfSBhbmQgJHtmcm9udC5zdHJ9IG5lZWRzIGV4cGxpY2l0IHBhcmVucy4ke1xuICAgICAgICAgICAgICAgICAgIFRva2VuLmF0KGZyb250KX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcE9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wcy5wdXNoKFtmcm9udC5zdHIsIG9wXSk7XG4gICAgICAgICAgdmFsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL3Rocm93IG5ldyBFcnJvcihgR2FyYmFnZSBhZnRlciBleHByZXNzaW9uOiAke1Rva2VuLm5hbWVBdChmcm9udCl9YCk7XG4vL2NvbnNvbGUubG9nKCdiYWQgdmFsdWUnLCBpLCBmcm9udCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4vL2NvbnNvbGUubG9nKCdleHByczonLGV4cHJzLCdvcHM6JyxvcHMpO1xuICAgIC8vIE5vdyBwb3AgYWxsIHRoZSBvcHNcbiAgICB3aGlsZSAob3BzLmxlbmd0aCkgcG9wT3AoKTtcbi8vY29uc29sZS5sb2coJ3Bvc3QtcG9wOicsIGV4cHJzKTtcbiAgICBpZiAoZXhwcnMubGVuZ3RoICE9PSAxKSB0aHJvdyBuZXcgRXJyb3IoYHNodW50aW5nIHBhcnNlIGZhaWxlZD9gKTtcbiAgICBpZiAodG9rZW5zW2luZGV4XS5zb3VyY2UpIGV4cHJzWzBdLnNvdXJjZSA9IHRva2Vuc1tpbmRleF0uc291cmNlO1xuICAgIHJldHVybiBbZXhwcnNbMF0sIGldO1xuICB9XG5cblxuICAvLyB3b3JrcyBvbiBhYnNvbHV0ZSBudW1iZXJzLCBvciByZWxhdGl2ZSBudW1iZXJzIGlmIGFsbCBpbiBzYW1lIGNodW5rLlxuICAvLyBtYXkgbm90IG1peCByZWxhdGl2ZSArIGFic29sdXRlLlxuICBmdW5jdGlvbiBzYW1lQ2h1bmsoZXhwcjogRXhwciwgZjogKC4uLm51bXM6IG51bWJlcltdKSA9PiBudW1iZXIpOiBFeHByIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG51bShudW06IG51bWJlcnx1bmRlZmluZWQpOiBFeHByfHVuZGVmaW5lZCB7XG4gICAgaWYgKG51bSA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7b3A6ICdudW0nLCBudW0sIG1ldGE6IHNpemUobnVtKX07XG4gIH1cblxuICBmdW5jdGlvbiB1bmFyeShleHByOiBFeHByLCBmOiAoeDogbnVtYmVyKSA9PiBudW1iZXIpOiBFeHByIHtcbiAgICAvLyByZXF1aXJlIGFic29sdXRlXG4gICAgY29uc3QgYXJnID0gZXhwci5hcmdzIVswXTtcbiAgICBpZiAoIWlzQWJzKGFyZykpIHJldHVybiBleHByO1xuICAgIGNvbnN0IG51bSA9IGYoYXJnLm51bSEpO1xuICAgIHJldHVybiB7b3A6ICdudW0nLCBudW0sIG1ldGE6IHNpemUobnVtKX07XG4gIH1cblxuICBmdW5jdGlvbiBiaW5hcnkoZXhwcjogRXhwciwgZjogKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiBudW1iZXIpOiBFeHByIHtcbiAgICAvLyByZXF1aXJlIGJvdGggdG8gYmUgYWJzb2x1dGVcbiAgICBjb25zdCBbYSwgYl0gPSBleHByLmFyZ3MhO1xuICAgIGlmICghaXNBYnMoYSkgfHwgIWlzQWJzKGIpKSByZXR1cm4gZXhwcjtcbiAgICBjb25zdCBudW0gPSBmKGEubnVtISwgYi5udW0hKTtcbiAgICByZXR1cm4ge29wOiAnbnVtJywgbnVtLCBtZXRhOiBzaXplKG51bSl9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGx1cyhleHByOiBFeHByKTogRXhwciB7XG4gICAgLy8gYWxsb3cgc29tZSByZWxhdGl2ZSwgYnV0IG9ubHkgaWYgYWRkaW5nIGEgbm9uLWFkZHJlc3M/XG4gICAgY29uc3QgW2EsIGJdID0gZXhwci5hcmdzITtcbiAgICBpZiAoYS5vcCAhPT0gJ251bScgfHwgYi5vcCAhPT0gJ251bScpIHJldHVybiBleHByO1xuICAgIGNvbnN0IG91dDogRXhwciA9IHtvcDogJ251bScsIG51bTogYS5udW0hICsgYi5udW0hfTtcbiAgICBpZiAoYS5tZXRhIHx8IGIubWV0YSkge1xuICAgICAgaWYgKGEubWV0YT8ucmVsICYmIGIubWV0YT8ucmVsKSByZXR1cm4gZXhwcjsgLy8gYmFzaWNhbGx5IG5vbnNlbnNlXG4gICAgICBpZiAoYS5tZXRhPy5yZWwpIHtcbiAgICAgICAgb3V0Lm1ldGEgPSBhLm1ldGE7XG4gICAgICB9IGVsc2UgaWYgKGIubWV0YT8ucmVsKSB7XG4gICAgICAgIG91dC5tZXRhID0gYi5tZXRhO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW91dC5tZXRhPy5yZWwgJiYgb3V0Lm1ldGE/LnNpemUgPT0gbnVsbCkge1xuICAgICAgKG91dC5tZXRhIHx8IChvdXQubWV0YSA9IHt9KSkuc2l6ZSA9IHNpemUob3V0Lm51bSEpLnNpemU7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBtaW51cyhleHByOiBFeHByKTogRXhwciB7XG4gICAgLy8gYWxsb3cgcmVsIC0gcmVsIGZvciBkZWx0YVxuICAgIGNvbnN0IFthLCBiXSA9IGV4cHIuYXJncyE7XG4gICAgaWYgKGEub3AgIT09ICdudW0nIHx8IGIub3AgIT09ICdudW0nKSByZXR1cm4gZXhwcjtcbiAgICBjb25zdCBvdXQ6IEV4cHIgPSB7b3A6ICdudW0nLCBudW06IGEubnVtISAtIGIubnVtIX07XG4gICAgaWYgKGIubWV0YT8ucmVsKSB7XG4gICAgICByZXR1cm4gYS5tZXRhPy5yZWwgJiYgYS5tZXRhLmNodW5rID09PSBiLm1ldGEuY2h1bmsgPyBvdXQgOiBleHByO1xuICAgIH1cbiAgICBpZiAoYS5tZXRhPy5yZWwpIG91dC5tZXRhID0gYS5tZXRhO1xuICAgIGlmICghb3V0Lm1ldGE/LnJlbCAmJiBvdXQubWV0YT8uc2l6ZSA9PSBudWxsKSB7XG4gICAgICAob3V0Lm1ldGEgfHwgKG91dC5tZXRhID0ge30pKS5zaXplID0gc2l6ZShvdXQubnVtISkuc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQWJzKGV4cHI6IEV4cHIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZXhwci5vcCA9PT0gJ251bScgJiYgIWV4cHIubWV0YT8ucmVsO1xuICB9XG59XG5cblxuXG4vLyBSZXR1cm5zID4wIGlmIHRvcCBpcyBmYXN0ZXIsIDwwIGlmIHRvcCBpcyBzbG93ZXIsIGFuZCAwIGlmIGNhbid0IG1peFxuZnVuY3Rpb24gY29tcGFyZU9wKHRvcDogT3BlcmF0b3JNZXRhLCBuZXh0OiBPcGVyYXRvck1ldGEpOiBudW1iZXIge1xuICBpZiAodG9wWzBdID4gbmV4dFswXSkgcmV0dXJuIDE7XG4gIGlmICh0b3BbMF0gPCBuZXh0WzBdKSByZXR1cm4gLTE7XG4gIGlmICh0b3BbMV0gIT09IG5leHRbMV0pIHJldHVybiAwO1xuICByZXR1cm4gdG9wWzFdO1xufVxuXG5cbi8vIHByZWNlZGVuY2UsIGFzc29jaWF0aXZpdHksIGFyaXR5XG50eXBlIE9wZXJhdG9yTWV0YSA9IHJlYWRvbmx5IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbmNvbnN0IEJJTkFSWSA9IDI7XG5jb25zdCBVTkFSWSA9IDE7XG5leHBvcnQgY29uc3QgQklOT1BTID0gbmV3IE1hcDxzdHJpbmcsIE9wZXJhdG9yTWV0YT4oW1xuICAvLyBTY29waW5nIG9wZXJhdG9yXG4gIC8vIFsnOjonLCBbOCwgMSwgQklOQVJZXV0sXG4gIC8vIE1lbW9yeSBoaW50c1xuICAvL1snOicsIFs2LCAwXV0sXG4gIC8vIE11bHRpcGxpY2F0aXZlIG9wZXJhdG9yczogbm90ZSB0aGF0IGJpdHdpc2UgYW5kIGFyaXRobWV0aWMgY2Fubm90IGFzc29jaWF0ZVxuICBbJyonLCBbNSwgNCwgQklOQVJZXV0sXG4gIFsnLycsIFs1LCA0LCBCSU5BUlldXSxcbiAgWycubW9kJywgWzUsIDMsIEJJTkFSWV1dLFxuICBbJyYnLCBbNSwgMiwgQklOQVJZXV0sXG4gIFsnXicsIFs1LCAxLCBCSU5BUlldXSxcbiAgWyc8PCcsIFs1LCAwLCBCSU5BUlldXSxcbiAgWyc+PicsIFs1LCAwLCBCSU5BUlldXSxcbiAgLy8gQXJpdGhtZXRpYyBvcGVyYXRvcnM6IG5vdGUgdGhhdCBiaXR3aXNlIGFuZCBhcml0aG1ldGljIGNhbm5vdCBhc3NvY2lhdGVcbiAgWycrJywgWzQsIDIsIEJJTkFSWV1dLFxuICBbJy0nLCBbNCwgMiwgQklOQVJZXV0sXG4gIFsnfCcsIFs0LCAxLCBCSU5BUlldXSxcbiAgLy8gQ29tcGFyaXNvbiBvcGVyYXRvcnNcbiAgWyc8JywgWzMsIDAsIEJJTkFSWV1dLFxuICBbJzw9JywgWzMsIDAsIEJJTkFSWV1dLFxuICBbJz4nLCBbMywgMCwgQklOQVJZXV0sXG4gIFsnPj0nLCBbMywgMCwgQklOQVJZXV0sXG4gIFsnPScsIFszLCAwLCBCSU5BUlldXSxcbiAgWyc8PicsIFszLCAwLCBCSU5BUlldXSxcbiAgLy8gTG9naWNhbCBvcGVyYXRvcnM6IGRpZmZlcmVudCBraW5kcyBjYW5ub3QgYXNzb2NpYXRlXG4gIFsnJiYnLCBbMiwgMywgQklOQVJZXV0sXG4gIFsnLnhvcicsIFsyLCAyLCBCSU5BUlldXSxcbiAgWyd8fCcsIFsyLCAxLCBCSU5BUlldXSxcbiAgLy8gQ29tbWFcbiAgLy9bJywnLCBbMSwgMV1dLFxuXSk7XG5cbmNvbnN0IFBSRUZJWE9QUyA9IG5ldyBNYXA8c3RyaW5nLCBPcGVyYXRvck1ldGE+KFtcbiAgLy8gWyc6OicsIFs5LCAtMSwgVU5BUlldXSwgLy8gZ2xvYmFsIHNjb3BlXG4gIFsnKycsIFs5LCAtMSwgVU5BUlldXSxcbiAgWyctJywgWzksIC0xLCBVTkFSWV1dLFxuICBbJ34nLCBbOSwgLTEsIFVOQVJZXV0sXG4gIFsnPCcsIFs5LCAtMSwgVU5BUlldXSxcbiAgWyc+JywgWzksIC0xLCBVTkFSWV1dLFxuICBbJ14nLCBbOSwgLTEsIFVOQVJZXV0sXG4gIFsnIScsIFsyLCAtMSwgVU5BUlldXSxcbl0pO1xuXG4vLyBUT0RPIC0gc2tpcDEgYW5kIHNraXAyIG1hY3Jvc1xuLy8gLm1hY3JvIHNraXAxXG4vLyAgIC5ieXRlICQyY1xuLy8gLmVuZG1hY3JvXG4vLyAubWFjcm8gc2tpcDJcbi8vICAgLmJ5dGUgJDRjXG4vLyAgIC5hc3NlcnQgLmJ5dGVhdCgqICsgMikgPCAkMjAgLm9yIFxcXG4vLyAgICAgICAgICAgLmJ5dGVhdCgqICsgMikgPj0gJDYwIC5vciBcXFxuLy8gICAgICAgICAgIC5ieXRlYXQoKiArIDEpICYgJDA3IC5pbiBbMiwzLDRdXG4vLyAuZW5kbWFjcm9cbi8vIE5PVEU6IGRhbmdlcm91cyByZWFkcyBhcmUgMjAwMiwgMjAwNCwgMjAwNyAocGx1cyBtaXJyb3JzKSwgNDAxNVxuLy8gVGhlbiB0aGUgYXNzZW1ibGVyIG5lZWRzIHRvIHVuZGVyc3RhbmQgdGhlIGZsb3cgb2YgdGhlc2UgdHdvIG9wcy4uLlxuLy8gb3IganVzdCBkaXNhc3NlbWJsZSBpdCBvbiB0aGUgZmx5P1xuY29uc3QgRlVOQ1RJT05TID0gbmV3IFNldDxzdHJpbmc+KFtcbiAgJy5ieXRlYXQnLFxuICAnLndvcmRhdCcsXG4gICcubWF4JywgJy5taW4nLFxuXSk7XG5cbmNvbnN0IE5BTUVfTUFQID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oW1xuICBbJy5iaXRhbmQnLCAnJiddLFxuICBbJy5iaXR4b3InLCAnXiddLFxuICBbJy5iaXRvcicsICd8J10sXG4gIFsnLnNobCcsICc8PCddLFxuICBbJy5zaHInLCAnPj4nXSxcbiAgWycuYW5kJywgJyYmJ10sXG4gIFsnLm9yJywgJ3x8J10sXG4gIFsnLmJpdG5vdCcsICd+J10sXG4gIFsnLmxvYnl0ZScsICc8J10sXG4gIFsnLmhpYnl0ZScsICc+J10sXG4gIFsnLmJhbmtieXRlJywgJ14nXSwgLy8gPz8/IGhvdyB0byBpbXBsZW1lbnQgb24gbnVtYmVyP1xuICBbJy5ub3QnLCAnISddLFxuXSk7XG5cbmNvbnN0IFNJWkVfVFJBTlNGT1JNUyA9IG5ldyBNYXA8c3RyaW5nLCAoLi4uYXJnczogbnVtYmVyW10pID0+IG51bWJlcj4oW1xuICAvLyB1bmFyeTogYmFuayBieXRlOyBiaW5hcnk6IGJpdHhvclxuICBbJ14nLCAoLi4uYXJncykgPT4gYXJncy5sZW5ndGggPT09IDEgPyAxIDogTWF0aC5tYXgoLi4uYXJncyldLFxuICBbJzwnLCAoKSA9PiAxXSwgLy8gdW5hcnkgKGxvYnl0ZSkgYW5kIGJpbmFyeSAoY21wKSBib3RoIHNpbmdsZS1ieXRlXG4gIFsnPicsICgpID0+IDFdLCAvLyB1bmFyeSAoaGlieXRlKSBhbmQgYmluYXJ5IChjbXApIGJvdGggc2luZ2xlLWJ5dGVcbiAgWychJywgKCkgPT4gMV0sIC8vIG5vdCBhbHdheXMgMCBvciAxXG4gIFsnPD0nLCAoKSA9PiAxXSwgLy8gY21wXG4gIFsnPj0nLCAoKSA9PiAxXSwgLy8gY21wXG4gIFsnPD4nLCAoKSA9PiAxXSwgLy8gY21wXG4gIFsnPScsICgpID0+IDFdLCAvLyBjbXBcbiAgLy8gYml0d2lzZSBhbmQgbG9naWNhbCBvcGVyYXRvciByZXR1cm4gbWF4XG4gIFsnJicsIE1hdGgubWF4XSxcbiAgWycmJicsIE1hdGgubWF4XSxcbiAgWyd8JywgTWF0aC5tYXhdLFxuICBbJ3x8JywgTWF0aC5tYXhdLFxuICBbJy54b3InLCBNYXRoLm1heF0sXG4gIFsnLm1heCcsIE1hdGgubWF4XSxcbiAgWycubWluJywgTWF0aC5tYXhdLCAvLyBjb3VsZCB1c2UgbWluLCBidXQgbWF5IG5vdCBiZSBzYWZlIHcvIG5lZ2F0aXZlc1xuXSk7XG4gIFxuZnVuY3Rpb24gZml4U2l6ZShleHByOiBFeHByKTogRXhwciB7XG4gIGNvbnN0IHhmb3JtID0gU0laRV9UUkFOU0ZPUk1TLmdldChleHByLm9wKTtcbiAgY29uc3Qgc2l6ZSA9IHhmb3JtPy4oLi4uZXhwci5hcmdzIS5tYXAoZSA9PiBOdW1iZXIoZS5tZXRhPy5zaXplKSkpO1xuICBpZiAoc2l6ZSkgKGV4cHIubWV0YSB8fCAoZXhwci5tZXRhID0ge30pKS5zaXplID0gc2l6ZTtcbiAgcmV0dXJuIGV4cHI7XG59XG5cbmZ1bmN0aW9uIHNpemUobnVtOiBudW1iZXIpOiBFeHByLk1ldGEge1xuICByZXR1cm4ge3NpemU6IDAgPD0gbnVtICYmIG51bSA8IDI1NiA/IDEgOiAyfTtcbn1cblxuLy8gZnVuY3Rpb24gZmFpbChtc2c6IHN0cmluZyk6IG5ldmVyIHtcbi8vICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4vLyB9XG4iXX0=