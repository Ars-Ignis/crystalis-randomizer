import { Token } from './token.js';
const DEBUG = false;
export class Define {
    constructor(overloads) {
        this.overloads = overloads;
    }
    canOverload() {
        return this.overloads[this.overloads.length - 1].canOverload();
    }
    append(define) {
        if (!this.canOverload()) {
            const prevDef = this.overloads[this.overloads.length - 1].definition;
            const at = prevDef ? Token.at(prevDef) : '';
            const prev = at.replace(/at/, 'previously defined at');
            const nextDef = define.overloads[0].definition;
            const next = nextDef ? Token.nameAt(nextDef) : '';
            throw new Error(`Non-overloadable: ${next}${prev}`);
        }
        this.overloads.push(...define.overloads);
    }
    expand(tokens, start) {
        const reasons = [];
        for (const overload of this.overloads) {
            const result = overload.expand(tokens, start);
            if (Array.isArray(result))
                return result;
            reasons.push(result);
        }
        if (DEBUG)
            console.error(reasons.join('\n'));
        return undefined;
    }
    static from(macro) {
        var _a;
        if (!Token.eq(macro[0], Token.DEFINE))
            throw new Error(`invalid`);
        if (((_a = macro[1]) === null || _a === void 0 ? void 0 : _a.token) !== 'ident')
            throw new Error(`invalid`);
        const paramStart = macro[2];
        let overload;
        if (!paramStart) {
            overload = new TexStyleDefine([], [], macro[1]);
        }
        else if (paramStart.token === 'grp') {
            overload = new TexStyleDefine(paramStart.inner, macro.slice(3), macro[1]);
        }
        else if (paramStart.token === 'lp') {
            const paramEnd = Token.findBalanced(macro, 2);
            if (paramEnd < 0) {
                throw new Error(`Expected close paren ${Token.nameAt(macro[2])}`);
            }
            overload =
                new CStyleDefine(Token.identsFromCList(macro.slice(3, paramEnd)), macro.slice(paramEnd + 1), macro[1]);
        }
        else {
            overload = new TexStyleDefine([], macro.slice(2), macro[1]);
        }
        return new Define([overload]);
    }
}
function produce(tokens, start, end, replacements, production) {
    const splice = [];
    let overflow = [];
    let line = splice;
    for (const tok of production) {
        if (tok.token === 'ident') {
            const param = replacements.get(tok.str);
            if (param) {
                line.push(...param);
                continue;
            }
        }
        else if (Token.eq(tok, Token.DOT_EOL)) {
            overflow.push(line = []);
            continue;
        }
        const source = tok.source && tokens[0].source ?
            { ...tok.source, parent: tokens[0].source } :
            tok.source || tokens[0].source;
        line.push(source ? { ...tok, source } : tok);
    }
    overflow = overflow.filter(l => l.length);
    if (overflow.length && end < tokens.length) {
        return 'cannot expand .eol without consuming to end of line';
    }
    tokens.splice(start, end - start, ...splice);
    return overflow;
}
class CStyleDefine {
    constructor(params, production, definition) {
        this.params = params;
        this.production = production;
        this.definition = definition;
    }
    expand(tokens, start) {
        let i = start + 1;
        let splice = this.params.length ? tokens.length : start;
        let end = splice;
        const replacements = new Map();
        if (start < tokens.length && Token.eq(Token.LP, tokens[i])) {
            end = Token.findBalanced(tokens, i);
            if (end < 0) {
                return 'missing close paren for enclosed C-style expansion';
            }
            splice = end + 1;
            i++;
        }
        const args = Token.parseArgList(tokens, i, end);
        if (args.length > this.params.length) {
            return 'too many args';
        }
        for (i = 0; i < this.params.length; i++) {
            let arg = args[i] || [];
            const front = arg[0];
            if (arg.length === 1 && front.token === 'grp') {
                arg = front.inner;
            }
            replacements.set(this.params[i], arg);
        }
        return produce(tokens, start, splice, replacements, this.production);
    }
    canOverload() { return Boolean(this.params.length); }
}
class TexStyleDefine {
    constructor(pattern, production, definition) {
        this.pattern = pattern;
        this.production = production;
        this.definition = definition;
    }
    expand(tokens, start) {
        var _a;
        let i = start + 1;
        const replacements = new Map();
        for (let patPos = 0; patPos < this.pattern.length; patPos++) {
            const pat = this.pattern[patPos];
            if (pat.token === 'ident') {
                const delim = this.pattern[patPos + 1];
                if (!delim || ((_a = delim) === null || _a === void 0 ? void 0 : _a.token) === 'ident') {
                    const tok = tokens[i++];
                    if (!tok)
                        return `missing undelimited argument ${Token.name(pat)}`;
                    replacements.set(pat.str, tok.token === 'grp' ? tok.inner : [tok]);
                }
                else {
                    const end = Token.eq(delim, Token.DOT_EOL) ?
                        tokens.length : Token.find(tokens, delim, i);
                    if (end < 0)
                        return `could not find delimiter ${Token.name(delim)}`;
                    replacements.set(pat.str, tokens.slice(i, end));
                    i = end;
                }
            }
            else if (Token.eq(pat, Token.DOT_EOL)) {
                if (i < tokens.length)
                    return `could not match .eol`;
            }
            else {
                if (!Token.eq(tokens[i++], pat)) {
                    return `could not match: ${Token.name(pat)}`;
                }
            }
        }
        return produce(tokens, start, i, replacements, this.production);
    }
    canOverload() { return Boolean(this.pattern.length); }
}
//# sourceMappingURL=data:application/json;base64,