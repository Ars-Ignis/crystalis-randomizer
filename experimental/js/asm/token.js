import { assertNever } from '../util.js';
export var TokenSource;
(function (TokenSource) {
    class Abstract {
        next() {
            while (true) {
                if (!this.sink)
                    this.sink = this.pump();
                const { value, done } = this.sink.next();
                if (!done)
                    return value;
                this.sink = undefined;
            }
        }
    }
    TokenSource.Abstract = Abstract;
    function concat(...sources) {
        let source;
        return {
            next: () => {
                while (true) {
                    if (!source)
                        source = sources.shift();
                    if (!source)
                        return undefined;
                    const line = source.next();
                    if (line)
                        return line;
                    source = undefined;
                }
            },
        };
    }
    TokenSource.concat = concat;
})(TokenSource || (TokenSource = {}));
export var Token;
(function (Token) {
    Token.LB = { token: 'lb' };
    Token.LC = { token: 'lc' };
    Token.LP = { token: 'lp' };
    Token.RB = { token: 'rb' };
    Token.RC = { token: 'rc' };
    Token.RP = { token: 'rp' };
    Token.EOL = { token: 'eol' };
    Token.EOF = { token: 'eof' };
    Token.DEFINE = { token: 'cs', str: '.define' };
    Token.DOT_EOL = { token: 'cs', str: '.eol' };
    Token.ELSE = { token: 'cs', str: '.else' };
    Token.ELSEIF = { token: 'cs', str: '.elseif' };
    Token.ENDIF = { token: 'cs', str: '.endif' };
    Token.ENDMAC = { token: 'cs', str: '.endmac' };
    Token.ENDMACRO = { token: 'cs', str: '.endmacro' };
    Token.ENDREP = { token: 'cs', str: '.endrep' };
    Token.ENDREPEAT = { token: 'cs', str: '.endrepeat' };
    Token.ENDPROC = { token: 'cs', str: '.endproc' };
    Token.ENDSCOPE = { token: 'cs', str: '.endscope' };
    Token.LOCAL = { token: 'cs', str: '.local' };
    Token.MACRO = { token: 'cs', str: '.macro' };
    Token.REPEAT = { token: 'cs', str: '.repeat' };
    Token.SET = { token: 'cs', str: '.set' };
    Token.SKIP = { token: 'cs', str: '.skip' };
    Token.BYTE = { token: 'cs', str: '.byte' };
    Token.WORD = { token: 'cs', str: '.word' };
    Token.COLON = { token: 'op', str: ':' };
    Token.COMMA = { token: 'op', str: ',' };
    Token.STAR = { token: 'op', str: '*' };
    Token.IMMEDIATE = { token: 'op', str: '#' };
    Token.ASSIGN = { token: 'op', str: '=' };
    function match(left, right) {
        if (left.token !== right.token)
            return false;
        if (left.token === 'num' || left.token === 'str')
            return true;
        if (left.str !== right.str)
            return false;
        return true;
    }
    Token.match = match;
    function eq(left, right) {
        if (!left || !right)
            return false;
        if (left.token !== right.token)
            return false;
        if (left.token === 'grp')
            return false;
        if (left.str !== right.str)
            return false;
        if (left.num !== right.num)
            return false;
        return true;
    }
    Token.eq = eq;
    function name(arg) {
        switch (arg.token) {
            case 'num': return `NUM[$${arg.num.toString(16)}]`;
            case 'str': return `STR[$${arg.str}]`;
            case 'lb': return `[`;
            case 'rb': return `]`;
            case 'grp': return `{`;
            case 'lc': return `{`;
            case 'rc': return `}`;
            case 'lp': return `(`;
            case 'rp': return `)`;
            case 'eol': return `EOL`;
            case 'eof': return `EOF`;
            case 'ident':
                return arg.str;
            case 'cs':
            case 'op':
                return `${arg.str.toUpperCase()}`;
            default:
                assertNever(arg);
        }
    }
    Token.name = name;
    function at(arg) {
        const s = arg.source;
        if (!s)
            return '';
        const parent = s.parent ? at({ source: s.parent }) : '';
        return `\n  at ${s.file}:${s.line}:${s.column}${parent}`;
    }
    Token.at = at;
    function nameAt(arg) {
        return name(arg) + at(arg);
    }
    Token.nameAt = nameAt;
    function expectEol(token, name = 'end of line') {
        if (token)
            throw new Error(`Expected ${name}: ${Token.nameAt(token)}`);
    }
    Token.expectEol = expectEol;
    function expect(want, token, prev) {
        if (!token) {
            if (!prev)
                throw new Error(`Expected ${name(want)}`);
            throw new Error(`Expected ${name(want)} after ${nameAt(token)}`);
        }
        if (!eq(want, token)) {
            throw new Error(`Expected ${name(want)}: ${nameAt(token)}`);
        }
    }
    Token.expect = expect;
    function expectIdentifier(token, prev) {
        return expectStringToken('ident', 'identifier', token, prev);
    }
    Token.expectIdentifier = expectIdentifier;
    function expectString(token, prev) {
        return expectStringToken('str', 'constant string', token, prev);
    }
    Token.expectString = expectString;
    function expectStringToken(want, name, token, prev) {
        if (!token) {
            if (!prev)
                throw new Error(`Expected ${name}`);
            throw new Error(`Expected ${name} after ${nameAt(prev)}`);
        }
        if (token.token !== want) {
            throw new Error(`Expected ${name}: ${nameAt(token)}`);
        }
        return token.str;
    }
    function identsFromCList(list) {
        var _a;
        if (!list.length)
            return [];
        const out = [];
        for (let i = 0; i <= list.length; i += 2) {
            const ident = list[i];
            if (((_a = ident) === null || _a === void 0 ? void 0 : _a.token) !== 'ident') {
                if (ident)
                    throw new Error(`Expected identifier: ${nameAt(ident)}`);
                const last = list[list.length - 1];
                throw new Error(`Expected identifier after ${nameAt(last)}`);
            }
            else if (i + 1 < list.length && !eq(list[i + 1], Token.COMMA)) {
                const sep = list[i + 1];
                throw new Error(`Expected comma: ${nameAt(sep)}`);
            }
            out.push(ident.str);
        }
        return out;
    }
    Token.identsFromCList = identsFromCList;
    function findBalanced(tokens, i) {
        const open = tokens[i++].token;
        if (open !== 'lp' && open !== 'lb')
            throw new Error(`non-grouping token`);
        const close = open === 'lp' ? 'rp' : 'rb';
        let depth = 1;
        for (; i < tokens.length; i++) {
            const tok = tokens[i].token;
            depth += Number(tok === open) - Number(tok === close);
            if (!depth)
                return i;
        }
        return -1;
    }
    Token.findBalanced = findBalanced;
    function parseArgList(tokens, start = 0, end = tokens.length) {
        let arg = [];
        const args = [arg];
        let parens = 0;
        for (let i = start; i < end; i++) {
            const token = tokens[i];
            if (!parens && eq(token, Token.COMMA)) {
                args.push(arg = []);
            }
            else {
                arg.push(token);
                if (eq(token, Token.LP))
                    parens++;
                if (eq(token, Token.RP)) {
                    if (--parens < 0)
                        throw new Error(`Unbalanced paren${at(token)}`);
                }
            }
        }
        return args;
    }
    Token.parseArgList = parseArgList;
    function parseAttrList(tokens, start) {
        const out = new Map();
        let key;
        let val = [];
        if (start >= tokens.length)
            return out;
        if (!eq(tokens[start], Token.COLON)) {
            throw new Error(`Unexpected: ${nameAt(tokens[start])}`);
        }
        for (let i = start + 1; i < tokens.length; i++) {
            const tok = tokens[i];
            if (eq(tok, Token.COLON)) {
                if (key == null)
                    throw new Error(`Missing key${at(tok)}`);
                out.set(key, val);
                key = undefined;
                val = [];
            }
            else if (key == null) {
                key = expectIdentifier(tok);
            }
            else {
                val.push(tok);
            }
        }
        if (key != null) {
            out.set(key, val);
        }
        else {
            expectIdentifier(undefined, tokens[tokens.length - 1]);
        }
        return out;
    }
    Token.parseAttrList = parseAttrList;
    function findComma(tokens, start) {
        const index = find(tokens, Token.COMMA, start);
        return index < 0 ? tokens.length : index;
    }
    Token.findComma = findComma;
    function find(tokens, want, start) {
        for (let i = start; i < tokens.length; i++) {
            if (eq(tokens[i], want))
                return i;
        }
        return -1;
    }
    Token.find = find;
    function count(ts) {
        let total = 0;
        for (const t of ts) {
            if (t.token === 'grp') {
                total += 2 + count(t.inner);
            }
            else {
                total++;
            }
        }
        return total;
    }
    Token.count = count;
    function isRegister(t, reg) {
        return t.token === 'ident' && t.str.toLowerCase() === reg;
    }
    Token.isRegister = isRegister;
    function str(t) {
        switch (t.token) {
            case 'cs':
            case 'ident':
            case 'str':
            case 'op':
                return t.str;
        }
        throw new Error(`Non-string token: ${Token.nameAt(t)}`);
    }
    Token.str = str;
    function strip(t) {
        delete t.source;
        return t;
    }
    Token.strip = strip;
})(Token || (Token = {}));
export const TOKENFUNCS = new Set([
    '.blank',
    '.const',
    '.defined',
    '.left',
    '.match',
    '.mid',
    '.right',
    '.tcount',
    '.xmatch',
]);
export const DIRECTIVES = [
    '.define',
    '.else',
    '.elseif',
    '.endif',
    '.endmacro',
    '.endproc',
    '.endscope',
    '.ident',
    '.if',
    '.ifblank',
    '.ifdef',
    '.ifnblank',
    '.ifndef',
    '.ifnref',
    '.ifref',
    '.include',
    '.local',
    '.macro',
    '.proc',
    '.scope',
    '.skip',
];
//# sourceMappingURL=data:application/json;base64,