import { CaveShuffle, CryptEntranceShuffle, WideCaveShuffle } from '../maze/cave.js';
import { Random } from '../random.js';
import { bridgeCaveShuffle } from '../maze/doublecave.js';
import { CycleCaveShuffle, TightCycleCaveShuffle } from '../maze/cyclecave.js';
import { RiverCaveShuffle, StyxRiverCaveShuffle, WaterfallRiverCaveShuffle, OasisCaveShuffle, OasisEntranceCaveShuffle } from '../maze/rivercave.js';
import { SwampShuffle, addSwampDoors } from '../maze/swamp.js';
import { SaberaPalaceShuffle } from '../maze/twostage.js';
import { LabyrinthShuffle, fixLabyrinthScreens } from '../maze/goa.js';
import { PyramidShuffle } from '../maze/pyramid.js';
import { wideArenaExits } from '../rom/screenfix.js';
import { KarmineBasementShuffle, karmine } from '../maze/karmine.js';
import { MazeShuffles } from '../maze/maze.js';
export function shuffleMazes(rom, flags, random) {
    const $ = rom.locations;
    prepareScreens(rom, random);
    const shuffles = new MazeShuffles(rom, random);
    shuffles.add(new CaveShuffle($.EastCave1), new CaveShuffle($.EastCave2), new CaveShuffle($.EastCave3), ...bridgeCaveShuffle($.SealedCave1, $.SealedCave2), new CaveShuffle($.SealedCave3), new CaveShuffle($.SealedCave4), new CaveShuffle($.SealedCave5), new CaveShuffle($.SealedCave6), new CaveShuffle($.SealedCave7), new CaveShuffle($.SealedCave8), new CaveShuffle($.WindmillCave), new CaveShuffle($.ZebuCave), new SwampShuffle($.Swamp), new CaveShuffle($.MtSabreWest_Cave1), new CaveShuffle($.MtSabreWest_Cave2), new CaveShuffle($.MtSabreWest_Cave3), new CaveShuffle($.MtSabreWest_Cave4), new CaveShuffle($.MtSabreWest_Cave5), new CaveShuffle($.MtSabreWest_Cave6), new CycleCaveShuffle($.MtSabreWest_Cave7), new CaveShuffle($.MtSabreNorth_Cave1), new CaveShuffle($.MtSabreNorth_Cave2), new CaveShuffle($.MtSabreNorth_Cave3), new CaveShuffle($.MtSabreNorth_Cave4), new CaveShuffle($.MtSabreNorth_Cave5), new CaveShuffle($.MtSabreNorth_Cave6), new CaveShuffle($.MtSabreNorth_Cave7), new CaveShuffle($.MtSabreNorth_Cave8), new CaveShuffle($.MtSabreNorth_Cave9), new CaveShuffle($.MtSabreNorth_LeftCell2), new CaveShuffle($.MtSabreNorth_SummitCave), new CaveShuffle($.KirisaPlantCave1), new CaveShuffle($.KirisaPlantCave2), new CaveShuffle($.KirisaPlantCave3), new CaveShuffle($.FogLampCave1), new CaveShuffle($.FogLampCave2), new CaveShuffle($.FogLampCave3), new TightCycleCaveShuffle($.FogLampCaveDeadEnd), ...bridgeCaveShuffle($.FogLampCave5, $.FogLampCave4, true), ...bridgeCaveShuffle($.FogLampCave7, $.FogLampCave6), new CycleCaveShuffle($.WaterfallCave1), new CaveShuffle($.WaterfallCave2), new WideCaveShuffle($.WaterfallCave3), new WaterfallRiverCaveShuffle($.WaterfallCave4), new RiverCaveShuffle($.EvilSpiritIsland2).requirePitDestination(), new CycleCaveShuffle($.EvilSpiritIsland3), new RiverCaveShuffle($.EvilSpiritIsland4), new SaberaPalaceShuffle($.SaberaPalace1).requirePitDestination(), new CaveShuffle($.SaberaPalace2), new CaveShuffle($.SaberaPalace2_West), new CaveShuffle($.JoelSecretPassage), new CaveShuffle($.MtHydra_Cave1), new CaveShuffle($.MtHydra_Cave2), new CaveShuffle($.MtHydra_Cave3), new CaveShuffle($.MtHydra_Cave4), new CaveShuffle($.MtHydra_Cave5), new CaveShuffle($.MtHydra_Cave6), new WideCaveShuffle($.MtHydra_Cave7), new CaveShuffle($.MtHydra_Cave8), new CaveShuffle($.MtHydra_Cave9), new CaveShuffle($.MtHydra_Cave10), new WideCaveShuffle($.Styx1), new StyxRiverCaveShuffle($.Styx2).requirePitDestination(), new CaveShuffle($.Styx3), new OasisCaveShuffle($.OasisCaveMain), new CaveShuffle($.DesertCave1), new CaveShuffle($.DesertCave2), new CaveShuffle($.Pyramid_Branch), new PyramidShuffle($.Pyramid_Main), new CryptEntranceShuffle($.Crypt_Entrance), new WideCaveShuffle($.Crypt_Hall1), new CaveShuffle($.Crypt_DeadEndLeft), new CaveShuffle($.Crypt_DeadEndRight), new CaveShuffle($.Crypt_Branch), new CaveShuffle($.Crypt_Hall2), new LabyrinthShuffle($.GoaFortress_Kelbesque), new RiverCaveShuffle($.GoaFortress_Sabera), new CaveShuffle($.GoaFortress_Mado1).requirePitDestination(), new CaveShuffle($.GoaFortress_Mado2), new CaveShuffle($.GoaFortress_Mado3), new CaveShuffle($.GoaFortress_Karmine1), new CaveShuffle($.GoaFortress_Karmine2), new CaveShuffle($.GoaFortress_Karmine4), new KarmineBasementShuffle($.GoaFortress_Karmine6), ...karmine($.GoaFortress_Karmine3, $.GoaFortress_Karmine5, $.GoaFortress_Kensu), new OasisEntranceCaveShuffle($.OasisCave_Entrance));
    shuffles.shuffleAll();
}
export function prepareScreens(rom, random = new Random(1)) {
    wideArenaExits(rom);
    addSwampDoors(rom);
    fixLabyrinthScreens(rom, random);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZW1hemVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3Bhc3Mvc2h1ZmZsZW1hemVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQ2pDLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBSWxELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFdEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLHlCQUF5QixFQUNqRSxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBUSxFQUFFLEtBQWMsRUFBRSxNQUFjO0lBU25FLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7SUFFeEIsY0FBYyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FB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LEVBQ3BDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUN2QyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsRUFDdkMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEVBQ3ZDLElBQUksc0JBQXNCLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEVBQ2xELEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsb0JBQW9CLEVBQzlDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUMvQixJQUFJLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUluRCxDQUFDO0lBQ0YsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEdBQVEsRUFBRSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzdELGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsbUJBQW1CLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGbGFnU2V0IH0gZnJvbSAnLi4vZmxhZ3NldC5qcyc7XG5pbXBvcnQgeyBDYXZlU2h1ZmZsZSwgQ3J5cHRFbnRyYW5jZVNodWZmbGUsXG4gICAgICAgICBXaWRlQ2F2ZVNodWZmbGUgfSBmcm9tICcuLi9tYXplL2NhdmUuanMnO1xuLy8gaW1wb3J0IHtleHRlbmRHb2FTY3JlZW5zLyosIHNodWZmbGVHb2ExKi99IGZyb20gJy4uL21hemUvZ29hLmpzJztcbi8vaW1wb3J0IHtzaHVmZmxlU3dhbXB9IGZyb20gJy4uL21hemUvc3dhbXAuanMnO1xuLy9pbXBvcnQge3NodWZmbGVQeXJhbWlkfSBmcm9tICcuLi9tYXplL3B5cmFtaWQuanMnO1xuaW1wb3J0IHsgUmFuZG9tIH0gZnJvbSAnLi4vcmFuZG9tLmpzJztcbmltcG9ydCB7IFJvbSB9IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQgeyBicmlkZ2VDYXZlU2h1ZmZsZSB9IGZyb20gJy4uL21hemUvZG91YmxlY2F2ZS5qcyc7XG5pbXBvcnQgeyBDeWNsZUNhdmVTaHVmZmxlLCBUaWdodEN5Y2xlQ2F2ZVNodWZmbGUgfSBmcm9tICcuLi9tYXplL2N5Y2xlY2F2ZS5qcyc7XG5pbXBvcnQgeyBSaXZlckNhdmVTaHVmZmxlLCBTdHl4Uml2ZXJDYXZlU2h1ZmZsZSwgV2F0ZXJmYWxsUml2ZXJDYXZlU2h1ZmZsZSxcbiAgICAgICAgIE9hc2lzQ2F2ZVNodWZmbGUsIE9hc2lzRW50cmFuY2VDYXZlU2h1ZmZsZSB9IGZyb20gJy4uL21hemUvcml2ZXJjYXZlLmpzJztcbmltcG9ydCB7IFN3YW1wU2h1ZmZsZSwgYWRkU3dhbXBEb29ycyB9IGZyb20gJy4uL21hemUvc3dhbXAuanMnO1xuaW1wb3J0IHsgU2FiZXJhUGFsYWNlU2h1ZmZsZSB9IGZyb20gJy4uL21hemUvdHdvc3RhZ2UuanMnO1xuaW1wb3J0IHsgTGFieXJpbnRoU2h1ZmZsZSwgZml4TGFieXJpbnRoU2NyZWVucyB9IGZyb20gJy4uL21hemUvZ29hLmpzJztcbmltcG9ydCB7IFB5cmFtaWRTaHVmZmxlIH0gZnJvbSAnLi4vbWF6ZS9weXJhbWlkLmpzJztcbmltcG9ydCB7IHdpZGVBcmVuYUV4aXRzIH0gZnJvbSAnLi4vcm9tL3NjcmVlbmZpeC5qcyc7XG5pbXBvcnQgeyBLYXJtaW5lQmFzZW1lbnRTaHVmZmxlLCBrYXJtaW5lIH0gZnJvbSAnLi4vbWF6ZS9rYXJtaW5lLmpzJztcbmltcG9ydCB7IE1hemVTaHVmZmxlcyB9IGZyb20gJy4uL21hemUvbWF6ZS5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlTWF6ZXMocm9tOiBSb20sIGZsYWdzOiBGbGFnU2V0LCByYW5kb206IFJhbmRvbSkge1xuICAvLyBUT0RPIC0gY29uc29saWRhdGUgZnJlZSBmbGFncz8gIEZpbmQgYSBsaXN0IG9mIHdoYXQncyB1c2VkLi4uXG4gIC8vIFsuLi5uZXcgU2V0KHJvbS5sb2NhdGlvbnMuZmxhdE1hcChsID0+IGwuZmxhZ3MubWFwKGYgPT4gZi5mbGFnKVxuICAvLyAgICAgICAgICAgLmZpbHRlcihmID0+IGYgIT0gMHgyMDApLm1hcCh4PT54LnRvU3RyaW5nKDE2KSkpKV0uc29ydCgpXG4gIC8vIEFsc28gbWFwIG92ZXIgdHJpZ2dlcnMsIGRpYWxvZ3MgLSBmaW5kIHdoYXQncyBzZXQvY2xlYXJlZFxuICAvLyBBbHNvIDJmMCBpcyBjby1vcHRlZCBhcyBhbiBcImFsd2F5cyB0cnVlXCIgdHJpZ2dlci5cbiAgLy8gc2h1ZmZsZVB5cmFtaWQocm9tLCByYW5kb20pO1xuICAvLyBzaHVmZmxlU3dhbXAocm9tLCByYW5kb20pO1xuICAvLyBzaHVmZmxlR29hMShyb20sIHJhbmRvbSk7XG4gIGNvbnN0ICQgPSByb20ubG9jYXRpb25zO1xuXG4gIHByZXBhcmVTY3JlZW5zKHJvbSwgcmFuZG9tKTtcblxuICBjb25zdCBzaHVmZmxlcyA9IG5ldyBNYXplU2h1ZmZsZXMocm9tLCByYW5kb20pO1xuICBzaHVmZmxlcy5hZGQoXG4gICAgLy8gbmV3IFRvd25TaHVmZmxlKCQuTGVhZiksXG4gICAgLy8gbmV3IE92ZXJ3b3JsZFNodWZmbGUoJC5WYWxsZXlPZldpbmQpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLkVhc3RDYXZlMSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuRWFzdENhdmUyKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5FYXN0Q2F2ZTMpLFxuICAgIC4uLmJyaWRnZUNhdmVTaHVmZmxlKCQuU2VhbGVkQ2F2ZTEsICQuU2VhbGVkQ2F2ZTIpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLlNlYWxlZENhdmUzKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5TZWFsZWRDYXZlNCksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuU2VhbGVkQ2F2ZTUpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLlNlYWxlZENhdmU2KSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5TZWFsZWRDYXZlNyksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuU2VhbGVkQ2F2ZTgpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLldpbmRtaWxsQ2F2ZSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuWmVidUNhdmUpLFxuICAgIC8vIG5ldyBPdmVyd29ybGRTaHVmZmxlKCQuQ29yZGVsUGxhaW5XZXN0LCAkLkNvcmRlbFBsYWluRWFzdCksXG4gICAgLy8gbmV3IFRvd25TaHVmZmxlKCQuQnJ5bm1hZXIpLFxuICAgIC8vIG5ldyBUb3duU2h1ZmZsZSgkLkFtYXpvbmVzKSxcbiAgICBuZXcgU3dhbXBTaHVmZmxlKCQuU3dhbXApLFxuICAgIC8vIG5ldyBUb3duU2h1ZmZsZSgkLk9hayksXG4gICAgLy8gbmV3IEpvaW5lZE1vdW50YWluU2h1ZmZsZSgkLk10U2FicmVXZXN0X1VwcGVyLCAkLk10U2FicmVXZXN0X0xvd2VyKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdFNhYnJlV2VzdF9DYXZlMSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuTXRTYWJyZVdlc3RfQ2F2ZTIpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLk10U2FicmVXZXN0X0NhdmUzKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdFNhYnJlV2VzdF9DYXZlNCksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuTXRTYWJyZVdlc3RfQ2F2ZTUpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLk10U2FicmVXZXN0X0NhdmU2KSxcbiAgICBuZXcgQ3ljbGVDYXZlU2h1ZmZsZSgkLk10U2FicmVXZXN0X0NhdmU3KSxcbiAgICAvLyBuZXcgU3BsaXRNb3VudGFpblNodWZmbGUoJC5NdFNhYnJlTm9ydGhfTWFpbiwgJC5NdFNhYnJlTm9ydGhfTWlkZGxlKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdFNhYnJlTm9ydGhfQ2F2ZTEpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLk10U2FicmVOb3J0aF9DYXZlMiksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuTXRTYWJyZU5vcnRoX0NhdmUzKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdFNhYnJlTm9ydGhfQ2F2ZTQpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLk10U2FicmVOb3J0aF9DYXZlNSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuTXRTYWJyZU5vcnRoX0NhdmU2KSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdFNhYnJlTm9ydGhfQ2F2ZTcpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLk10U2FicmVOb3J0aF9DYXZlOCksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuTXRTYWJyZU5vcnRoX0NhdmU5KSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdFNhYnJlTm9ydGhfTGVmdENlbGwyKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdFNhYnJlTm9ydGhfU3VtbWl0Q2F2ZSksXG4gICAgLy8gbmV3IE92ZXJ3b3JsZFNodWZmbGUoJC5XYXRlcmZhbGxWYWxsZXlOb3J0aCwgJC5XYXRlcmZhbGxWYWxsZXlTb3V0aCksXG4gICAgLy8gbmV3IE92ZXJ3b3JsZFNodWZmbGUoJC5MaW1lVHJlZVZhbGxleSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuS2lyaXNhUGxhbnRDYXZlMSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuS2lyaXNhUGxhbnRDYXZlMiksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuS2lyaXNhUGxhbnRDYXZlMyksXG4gICAgLy8gbmV3IE92ZXJ3b3JsZFNodWZmbGUoJC5LaXJpc2FNZWFkb3cpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLkZvZ0xhbXBDYXZlMSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuRm9nTGFtcENhdmUyKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5Gb2dMYW1wQ2F2ZTMpLFxuICAgIG5ldyBUaWdodEN5Y2xlQ2F2ZVNodWZmbGUoJC5Gb2dMYW1wQ2F2ZURlYWRFbmQpLFxuICAgIC4uLmJyaWRnZUNhdmVTaHVmZmxlKCQuRm9nTGFtcENhdmU1LCAkLkZvZ0xhbXBDYXZlNCwgdHJ1ZSAvKnJldmVyc2VkKi8pLFxuICAgIC4uLmJyaWRnZUNhdmVTaHVmZmxlKCQuRm9nTGFtcENhdmU3LCAkLkZvZ0xhbXBDYXZlNiksXG4gICAgLy8gbmV3IFRvd25TaHVmZmxlKCQuUG9ydG9hKSxcbiAgICBuZXcgQ3ljbGVDYXZlU2h1ZmZsZSgkLldhdGVyZmFsbENhdmUxKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5XYXRlcmZhbGxDYXZlMiksXG4gICAgbmV3IFdpZGVDYXZlU2h1ZmZsZSgkLldhdGVyZmFsbENhdmUzKSxcbiAgICBuZXcgV2F0ZXJmYWxsUml2ZXJDYXZlU2h1ZmZsZSgkLldhdGVyZmFsbENhdmU0KSxcbiAgICAvLyBuZXcgVG93ZXJTaHVmZmxlKCQuVG93ZXIxLCAkLlRvd2VyMiwgJC5Ub3dlcjMsICQuVG93ZXJPdXRzaWRlTWVzaWEpLFxuICAgIC8vIG5ldyBTZWFTaHVmZmxlKCQuQW5ncnlTZWEpLFxuICAgIC8vIG5ldyBDaGFubmVsU2h1ZmZsZSgkLlVuZGVyZ3JvdW5kQ2hhbm5lbCksXG4gICAgLy8gbmV3IFRvd25TaHVmZmxlKCQuWm9tYmllVG93biksXG4gICAgLy8gbmV3IENoYW5uZWxTaHVmZmxlKCQuRXZpbFNwaXJpdElzbGFuZDEpLFxuICAgIG5ldyBSaXZlckNhdmVTaHVmZmxlKCQuRXZpbFNwaXJpdElzbGFuZDIpLnJlcXVpcmVQaXREZXN0aW5hdGlvbigpLFxuICAgIG5ldyBDeWNsZUNhdmVTaHVmZmxlKCQuRXZpbFNwaXJpdElzbGFuZDMpLCAvLyBwaXQ6ICQuRXZpbFNwaXJpdElzbGFuZDJcbiAgICBuZXcgUml2ZXJDYXZlU2h1ZmZsZSgkLkV2aWxTcGlyaXRJc2xhbmQ0KSxcbiAgICBuZXcgU2FiZXJhUGFsYWNlU2h1ZmZsZSgkLlNhYmVyYVBhbGFjZTEpLnJlcXVpcmVQaXREZXN0aW5hdGlvbigpLFxuICAgIC8vIC8vIFRPRE8gLSBjb25zaWRlciBqdXN0IG1ha2luZyB0aGlzIGludG8gdHdvIHNlcGFyYXRlIG1hcHM/XG4gICAgbmV3IENhdmVTaHVmZmxlKCQuU2FiZXJhUGFsYWNlMiksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuU2FiZXJhUGFsYWNlMl9XZXN0KSxcbiAgICAvLyAvLyBuZXcgU3BsaXRQaXRTaHVmZmxlKCQuU2FiZXJhUGFsYWNlMiwgJC5TYWJlcmFQYWxhY2UxKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5Kb2VsU2VjcmV0UGFzc2FnZSksXG4gICAgLy8gbmV3IFRvd25TaHVmZmxlKCQuSm9lbCksXG4gICAgLy8gbmV3IFRvd25TaHVmZmxlKCQuU3dhbiksXG4gICAgLy8gbmV3IE92ZXJ3b3JsZFNodWZmbGUoJC5Hb2FWYWxsZXkpLFxuICAgIC8vIG5ldyBNb3VudGFpblNodWZmbGUoJC5NdEh5ZHJhKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdEh5ZHJhX0NhdmUxKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdEh5ZHJhX0NhdmUyKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdEh5ZHJhX0NhdmUzKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdEh5ZHJhX0NhdmU0KSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdEh5ZHJhX0NhdmU1KSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5NdEh5ZHJhX0NhdmU2KSxcbiAgICBuZXcgV2lkZUNhdmVTaHVmZmxlKCQuTXRIeWRyYV9DYXZlNyksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuTXRIeWRyYV9DYXZlOCksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuTXRIeWRyYV9DYXZlOSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuTXRIeWRyYV9DYXZlMTApLFxuICAgIG5ldyBXaWRlQ2F2ZVNodWZmbGUoJC5TdHl4MSksXG4gICAgLy8gLy8gVE9ETyAtIGNvbnNpZGVyIHNwbGl0dGluZyB0aGlzIG1hcCwgdG9vIVxuICAgIG5ldyBTdHl4Uml2ZXJDYXZlU2h1ZmZsZSgkLlN0eXgyKS5yZXF1aXJlUGl0RGVzdGluYXRpb24oKSxcbiAgICAvLyAvL25ldyBTdHl4Uml2ZXJDYXZlU2h1ZmZsZSgkLlN0eXgyX0Vhc3QpLFxuICAgIC8vIC8vIG5ldyBTdHl4Uml2ZXJDYXZlU2h1ZmZsZSgkLlN0eXgyKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5TdHl4MyksIC8vIHBpdDogJC5TdHl4MlxuICAgIC8vIG5ldyBUb3duU2h1ZmZsZSgkLlNoeXJvbiksXG4gICAgLy8gbmV3IFRvd25TaHVmZmxlKCQuR29hKSxcbiAgICAvLyBuZXcgT3ZlcndvcmxkU2h1ZmZsZSgkLkRlc2VydDEpLFxuICAgIG5ldyBPYXNpc0NhdmVTaHVmZmxlKCQuT2FzaXNDYXZlTWFpbiksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuRGVzZXJ0Q2F2ZTEpLFxuICAgIC8vIG5ldyBUb3duU2h1ZmZsZSgkLlNhaGFyYSksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuRGVzZXJ0Q2F2ZTIpLFxuICAgIC8vIG5ldyBPdmVyd29ybGRTaHVmZmxlKCQuU2FoYXJhTWVhZG93KSxcbiAgICAvLyBuZXcgT3ZlcndvcmxkU2h1ZmZsZSgkLkRlc2VydDIpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLlB5cmFtaWRfQnJhbmNoKSxcbiAgICBuZXcgUHlyYW1pZFNodWZmbGUoJC5QeXJhbWlkX01haW4pLFxuICAgIG5ldyBDcnlwdEVudHJhbmNlU2h1ZmZsZSgkLkNyeXB0X0VudHJhbmNlKSxcbiAgICBuZXcgV2lkZUNhdmVTaHVmZmxlKCQuQ3J5cHRfSGFsbDEpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLkNyeXB0X0RlYWRFbmRMZWZ0KSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5DcnlwdF9EZWFkRW5kUmlnaHQpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLkNyeXB0X0JyYW5jaCksIC8vIGRvd246IENyeXB0X0RlYWRFbmRMZWZ0IGFuZCBEZWFkRW5kUmlnaHRcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5DcnlwdF9IYWxsMiksIC8vIGRvd246ICQuQ3J5cHRfQnJhbmNoXG4gICAgbmV3IExhYnlyaW50aFNodWZmbGUoJC5Hb2FGb3J0cmVzc19LZWxiZXNxdWUpLFxuICAgIG5ldyBSaXZlckNhdmVTaHVmZmxlKCQuR29hRm9ydHJlc3NfU2FiZXJhKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5Hb2FGb3J0cmVzc19NYWRvMSkucmVxdWlyZVBpdERlc3RpbmF0aW9uKCksXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuR29hRm9ydHJlc3NfTWFkbzIpLCAvLyBkb3duc3RhaXJzOiAkLkdvYUZvcnRyZXNzX01hZG8xXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuR29hRm9ydHJlc3NfTWFkbzMpLCAvLyBkb3duc3RhaXJzOiAkLkdvYUZvcnRyZXNzX01hZG8xXG4gICAgbmV3IENhdmVTaHVmZmxlKCQuR29hRm9ydHJlc3NfS2FybWluZTEpLFxuICAgIG5ldyBDYXZlU2h1ZmZsZSgkLkdvYUZvcnRyZXNzX0thcm1pbmUyKSxcbiAgICBuZXcgQ2F2ZVNodWZmbGUoJC5Hb2FGb3J0cmVzc19LYXJtaW5lNCksXG4gICAgbmV3IEthcm1pbmVCYXNlbWVudFNodWZmbGUoJC5Hb2FGb3J0cmVzc19LYXJtaW5lNiksXG4gICAgLi4ua2FybWluZSgkLkdvYUZvcnRyZXNzX0thcm1pbmUzLCAkLkdvYUZvcnRyZXNzX0thcm1pbmU1LFxuICAgICAgICAgICAgICAgJC5Hb2FGb3J0cmVzc19LZW5zdSksXG4gICAgbmV3IE9hc2lzRW50cmFuY2VDYXZlU2h1ZmZsZSgkLk9hc2lzQ2F2ZV9FbnRyYW5jZSksXG4gICAgLy9uZXcgS2FybWluZVVwc3RhaXJzU2h1ZmZsZSgkLkdvYUZvcnRyZXNzX0thcm1pbmUzLCAkLkdvYUZvcnRyZXNzX0thcm1pbmU1KSxcbiAgICAvLyBuZXcgR29hS2FybWluZVNodWZmbGUoJC5Hb2FGb3J0cmVzc19LYXJtaW5lMywgJC5Hb2FGb3J0cmVzc19LYXJtaW5lNSxcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgJC5Hb2FGb3J0cmVzc19LZW5zdSwgJC5Hb2FGb3J0cmVzc19LYXJtaW5lNiksXG4gICk7XG4gIHNodWZmbGVzLnNodWZmbGVBbGwoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVTY3JlZW5zKHJvbTogUm9tLCByYW5kb20gPSBuZXcgUmFuZG9tKDEpKSB7XG4gIHdpZGVBcmVuYUV4aXRzKHJvbSk7XG4gIGFkZFN3YW1wRG9vcnMocm9tKTtcbiAgZml4TGFieXJpbnRoU2NyZWVucyhyb20sIHJhbmRvbSk7XG59XG4iXX0=