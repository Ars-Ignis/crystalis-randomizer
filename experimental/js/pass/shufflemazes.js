import { CaveShuffle, CryptEntranceShuffle, KarmineBasementShuffle, WideCaveShuffle } from '../maze/cave.js';
import { Random } from '../random.js';
import { BridgeCaveShuffle } from '../maze/doublecave.js';
import { CycleCaveShuffle, TightCycleCaveShuffle } from '../maze/cyclecave.js';
import { RiverCaveShuffle, StyxRiverCaveShuffle, WaterfallRiverCaveShuffle, OasisCaveShuffle } from '../maze/rivercave.js';
import { SwampShuffle, addSwampDoors } from '../maze/swamp.js';
import { SaberaPalaceShuffle } from '../maze/twostage.js';
import { LabyrinthShuffle, fixLabyrinthScreens } from '../maze/goa.js';
import { PyramidShuffle } from '../maze/pyramid.js';
import { wideArenaExits } from '../rom/screenfix.js';
export function shuffleMazes(rom, flags, random) {
    const $ = rom.locations;
    prepareScreens(rom, random);
    const shuffles = [
        new CaveShuffle($.EastCave1),
        new CaveShuffle($.EastCave2),
        new CaveShuffle($.EastCave3),
        new BridgeCaveShuffle($.SealedCave2, $.SealedCave1),
        new CaveShuffle($.SealedCave3),
        new CaveShuffle($.SealedCave4),
        new CaveShuffle($.SealedCave5),
        new CaveShuffle($.SealedCave6),
        new CaveShuffle($.SealedCave7),
        new CaveShuffle($.SealedCave8),
        new CaveShuffle($.WindmillCave),
        new CaveShuffle($.ZebuCave),
        new SwampShuffle($.Swamp),
        new CaveShuffle($.MtSabreWest_Cave1),
        new CaveShuffle($.MtSabreWest_Cave2),
        new CaveShuffle($.MtSabreWest_Cave3),
        new CaveShuffle($.MtSabreWest_Cave4),
        new CaveShuffle($.MtSabreWest_Cave5),
        new CaveShuffle($.MtSabreWest_Cave6),
        new CycleCaveShuffle($.MtSabreWest_Cave7),
        new CaveShuffle($.MtSabreNorth_Cave1),
        new CaveShuffle($.MtSabreNorth_Cave2),
        new CaveShuffle($.MtSabreNorth_Cave3),
        new CaveShuffle($.MtSabreNorth_Cave4),
        new CaveShuffle($.MtSabreNorth_Cave5),
        new CaveShuffle($.MtSabreNorth_Cave6),
        new CaveShuffle($.MtSabreNorth_Cave7),
        new CaveShuffle($.MtSabreNorth_Cave8),
        new CaveShuffle($.MtSabreNorth_Cave9),
        new CaveShuffle($.MtSabreNorth_LeftCell2),
        new CaveShuffle($.MtSabreNorth_SummitCave),
        new CaveShuffle($.KirisaPlantCave1),
        new CaveShuffle($.KirisaPlantCave2),
        new CaveShuffle($.KirisaPlantCave3),
        new CaveShuffle($.FogLampCave1),
        new CaveShuffle($.FogLampCave2),
        new CaveShuffle($.FogLampCave3),
        new TightCycleCaveShuffle($.FogLampCaveDeadEnd),
        new BridgeCaveShuffle($.FogLampCave4, $.FogLampCave5, true),
        new BridgeCaveShuffle($.FogLampCave6, $.FogLampCave7),
        new CycleCaveShuffle($.WaterfallCave1),
        new CaveShuffle($.WaterfallCave2),
        new WideCaveShuffle($.WaterfallCave3),
        new WaterfallRiverCaveShuffle($.WaterfallCave4),
        new RiverCaveShuffle($.EvilSpiritIsland2).requirePitDestination(),
        new CycleCaveShuffle($.EvilSpiritIsland3),
        new RiverCaveShuffle($.EvilSpiritIsland4),
        new SaberaPalaceShuffle($.SaberaPalace1).requirePitDestination(),
        new CaveShuffle($.SaberaPalace2),
        new CaveShuffle($.SaberaPalace2_West),
        new CaveShuffle($.JoelSecretPassage),
        new CaveShuffle($.MtHydra_Cave1),
        new CaveShuffle($.MtHydra_Cave2),
        new CaveShuffle($.MtHydra_Cave3),
        new CaveShuffle($.MtHydra_Cave4),
        new CaveShuffle($.MtHydra_Cave5),
        new CaveShuffle($.MtHydra_Cave6),
        new WideCaveShuffle($.MtHydra_Cave7),
        new CaveShuffle($.MtHydra_Cave8),
        new CaveShuffle($.MtHydra_Cave9),
        new CaveShuffle($.MtHydra_Cave10),
        new WideCaveShuffle($.Styx1),
        new StyxRiverCaveShuffle($.Styx2).requirePitDestination(),
        new CaveShuffle($.Styx3),
        new OasisCaveShuffle($.OasisCaveMain),
        new CaveShuffle($.DesertCave1),
        new CaveShuffle($.DesertCave2),
        new CaveShuffle($.Pyramid_Branch),
        new PyramidShuffle($.Pyramid_Main),
        new CryptEntranceShuffle($.Crypt_Entrance),
        new WideCaveShuffle($.Crypt_Hall1),
        new CaveShuffle($.Crypt_DeadEndLeft),
        new CaveShuffle($.Crypt_DeadEndRight),
        new CaveShuffle($.Crypt_Branch),
        new CaveShuffle($.Crypt_Hall2),
        new LabyrinthShuffle($.GoaFortress_Kelbesque),
        new RiverCaveShuffle($.GoaFortress_Sabera),
        new CaveShuffle($.GoaFortress_Mado1).requirePitDestination(),
        new CaveShuffle($.GoaFortress_Mado2),
        new CaveShuffle($.GoaFortress_Mado3),
        new CaveShuffle($.GoaFortress_Karmine1),
        new CaveShuffle($.GoaFortress_Karmine2),
        new CaveShuffle($.GoaFortress_Karmine4),
        new KarmineBasementShuffle($.GoaFortress_Karmine6),
    ];
    for (const shuffle of shuffles) {
        shuffle.shuffle(random);
    }
    for (const loc of $) {
        loc.meta.shufflePits(random);
    }
}
export function prepareScreens(rom, random = new Random(1)) {
    wideArenaExits(rom);
    addSwampDoors(rom);
    fixLabyrinthScreens(rom, random);
}
//# sourceMappingURL=data:application/json;base64,