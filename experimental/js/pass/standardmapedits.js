import { Entrance, Exit, Flag, Spawn } from '../rom/location.js';
export function standardMapEdits(rom, opts) {
    if (opts.eastCave) {
        eastCave(rom, opts.eastCave);
    }
    else if (opts.classicLimeTreeToLeaf) {
        connectLimeTreeToLeaf(rom);
    }
    addTowerExit(rom);
    reversibleSwanGate(rom);
    closeCaveEntrances(rom);
}
(function (standardMapEdits) {
    function generateOptions(flags, random) {
        const options = {};
        if (flags.addEastCave()) {
            options.eastCave = {};
            const exits = ['cordel', 'lime', 'goa', 'desert'];
            let i = random.nextInt(4);
            [options.eastCave.exit1] = exits.splice(i, 1);
            options.eastCave.exit2 = random.pick(exits);
        }
        else if (flags.connectLimeTreeToLeaf()) {
            options.classicLimeTreeToLeaf = true;
        }
        return options;
    }
    standardMapEdits.generateOptions = generateOptions;
})(standardMapEdits || (standardMapEdits = {}));
function eastCave(rom, opts) {
    const { locations: { EastCave1, EastCave2, EastCave3, SealedCave1, ValleyOfWind }, } = rom;
    rom.locations.allocate(rom.locations.EastCave1);
    rom.locations.allocate(rom.locations.EastCave2);
    if (opts.exit2)
        rom.locations.allocate(rom.locations.EastCave3);
    EastCave1.screens = [[0x9c, 0x84, 0x80, 0x83, 0x9c],
        [0x80, 0x81, 0x83, 0x86, 0x80],
        [0x83, 0x88, 0x89, 0x80, 0x80],
        [0x81, 0x8c, 0x85, 0x82, 0x84],
        [0x9e, 0x85, 0x9c, 0x98, 0x86]];
    EastCave2.screens = [[0x9c, 0x84, 0x9b, 0x80, 0x9b],
        [0x80, 0x81, 0x81, 0x80, 0x81],
        [0x80, 0x87, 0x8b, 0x8a, 0x86],
        [0x80, 0x8c, 0x80, 0x85, 0x84],
        [0x9c, 0x86, 0x80, 0x80, 0x9a]];
    for (const l of [EastCave1, EastCave2, EastCave3]) {
        l.bgm = l.originalBgm = 0x17;
        l.entrances = [];
        l.exits = [];
        l.pits = [];
        l.spawns = [];
        l.flags = [];
        l.height = l.screens.length;
        l.width = l.screens[0].length;
        l.extended = 0;
        l.tilePalettes = [0x1a, 0x1b, 0x05];
        l.originalTilePalettes = [0x1a, 0x1b, 0x05];
        l.tileset = 0x88;
        l.tileEffects = 0xb5;
        l.tilePatterns = [0x14, 0x02];
        l.spritePatterns = [...SealedCave1.spritePatterns];
        l.spritePalettes = [...SealedCave1.spritePalettes];
    }
    ValleyOfWind.writeScreens2d(0x23, [
        [0x11, 0x0d],
        [0x09, ~0xc2]
    ]);
    rom.tileEffects[0].effects[0xc0] = 0;
    EastCave1.connect(0x43, EastCave2, 0x44);
    EastCave1.connect(0x40, ValleyOfWind, 0x34);
    if (opts.exit1) {
        EastCave1.screens[0][4] = 0x97;
        connectEastCaveExit(EastCave1, 0x04, opts.exit1);
    }
    if (opts.exit2) {
        rom.locations.allocate(EastCave3);
        EastCave3.screens = [[0x9a],
            [0x8f],
            [0x9e]];
        EastCave3.height = 3;
        EastCave3.width = 1;
        EastCave3.spawns.push(Spawn.from([0x18, 0x07, 0x23, 0x00]));
        EastCave3.flags.push(Flag.of({ screen: 0x10, flag: rom.flags.alloc(0x200) }));
        EastCave2.screens[4][0] = 0x99;
        EastCave2.connect(0x40, EastCave3, ~0x00);
        connectEastCaveExit(EastCave3, 0x20, opts.exit2);
    }
    EastCave1.spawns.push(Spawn.of({ screen: 0x21, tile: 0x87, timed: true, id: 0x2 }), Spawn.of({ screen: 0x12, tile: 0x88, timed: false, id: 0x2 }), Spawn.of({ screen: 0x13, tile: 0x89, timed: true, id: 0x2 }), Spawn.of({ screen: 0x32, tile: 0x68, timed: false, id: 0x2 }), Spawn.of({ screen: 0x41, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x33, tile: 0x98, timed: true, id: 0x2 }), Spawn.of({ screen: 0x03, tile: 0x88, timed: true, id: 0x2 }));
    EastCave2.spawns.push(Spawn.of({ screen: 0x01, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x11, tile: 0x48, timed: false, id: 0x2 }), Spawn.of({ screen: 0x12, tile: 0x77, timed: true, id: 0x2 }), Spawn.of({ screen: 0x14, tile: 0x28, timed: false, id: 0x2 }), Spawn.of({ screen: 0x23, tile: 0x85, timed: true, id: 0x2 }), Spawn.of({ screen: 0x31, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x33, tile: 0x8a, timed: false, id: 0x2 }), Spawn.of({ screen: 0x34, tile: 0x98, timed: true, id: 0x2 }), Spawn.of({ screen: 0x41, tile: 0x82, timed: true, id: 0x2 }), Spawn.of({ y: 0x110, x: 0x478, type: 2, id: 0x31 }), Spawn.of({ y: 0x070, x: 0x108, type: 2, id: 0x70 }));
    rom.npcs.WindmillGuard.data[1] = 0x59;
}
function connectEastCaveExit(loc, scr, exit) {
    let dest;
    let destScr;
    switch (exit) {
        case 'lime':
            dest = loc.rom.locations.LimeTreeValley;
            destScr = 0x10;
            dest.resizeScreens(0, 1, 0, 0);
            dest.writeScreens2d(0x00, [
                [0x0c, 0x11],
                [~0x15, 0x36],
                [0x0e, 0x0f]
            ]);
            break;
        case 'cordel':
            dest = loc.rom.locations.CordelPlainEast;
            destScr = 0x55;
            dest.writeScreens2d(0x55, [
                [~0x15, 0x36],
                [0x0e, 0x0f]
            ]);
            break;
        case 'goa':
            dest = loc.rom.locations.GoaValley;
            destScr = 0x11;
            dest.writeScreens2d(0x01, [
                [0x0c, 0x0d],
                [~0x15, 0x35]
            ]);
            break;
        case 'desert':
            dest = loc.rom.locations.Desert2;
            destScr = 0x53;
            dest.writeScreens2d(0x53, [[~0xc2]]);
            break;
    }
    loc.connect(scr, dest, destScr);
}
function connectLimeTreeToLeaf(rom) {
    const { ValleyOfWind, LimeTreeValley } = rom.locations;
    ValleyOfWind.screens[5][4] = 0x10;
    LimeTreeValley.screens[1][0] = 0x1a;
    LimeTreeValley.screens[2][0] = 0x0c;
    const windEntrance = ValleyOfWind.entrances.push(Entrance.of({ x: 0x4ef, y: 0x578 })) - 1;
    const limeEntrance = LimeTreeValley.entrances.push(Entrance.of({ x: 0x010, y: 0x1c0 })) - 1;
    ValleyOfWind.exits.push(Exit.of({ x: 0x4f0, y: 0x560, dest: 0x42, entrance: limeEntrance }), Exit.of({ x: 0x4f0, y: 0x570, dest: 0x42, entrance: limeEntrance }));
    LimeTreeValley.exits.push(Exit.of({ x: 0x000, y: 0x1b0, dest: 0x03, entrance: windEntrance }), Exit.of({ x: 0x000, y: 0x1c0, dest: 0x03, entrance: windEntrance }));
}
function addTowerExit(rom) {
    const { TowerEntrance, Crypt_Teleporter } = rom.locations;
    const entrance = Crypt_Teleporter.entrances.length;
    const dest = Crypt_Teleporter.id;
    Crypt_Teleporter.entrances.push(Entrance.of({ tile: 0x68 }));
    TowerEntrance.exits.push(Exit.of({ tile: 0x57, dest, entrance }));
    TowerEntrance.exits.push(Exit.of({ tile: 0x58, dest, entrance }));
}
function reversibleSwanGate(rom) {
    const { flags: { OpenedSwanGate }, locations: { SwanGate }, npcs: { SoldierGuard }, } = rom;
    SwanGate.spawns.push(Spawn.of({ xt: 0x0a, yt: 0x02, type: 1, id: 0x2d }), Spawn.of({ xt: 0x0b, yt: 0x02, type: 1, id: 0x2d }));
    SoldierGuard.localDialogs.get(SwanGate.id)[0].flags.push(OpenedSwanGate.id);
}
function closeCaveEntrances(rom) {
    const { flags: { AlwaysTrue, OpenedSealedCave, OpenedPrison }, locations: { CordelPlainEast, CordelPlainWest, Desert2, KirisaMeadow, SaharaOutsideCave, ValleyOfWind, WaterfallValleyNorth, WaterfallValleySouth, }, } = rom;
    ValleyOfWind.entrances[1].y += 16;
    rom.swapMetatiles([0x90], [0x07, [0x01, 0x00], ~0xc1], [0x0e, [0x02, 0x00], ~0xc1], [0x20, [0x03, 0x0a], ~0xd7], [0x21, [0x04, 0x0a], ~0xd7]);
    rom.swapMetatiles([0x94, 0x9c], [0x68, [0x01, 0x00], ~0xc1], [0x83, [0x02, 0x00], ~0xc1], [0x88, [0x03, 0x0a], ~0xd7], [0x89, [0x04, 0x0a], ~0xd7]);
    rom.screens[0x0a].tiles[0x38] = 0x01;
    rom.screens[0x0a].tiles[0x39] = 0x02;
    rom.screens[0x0a].tiles[0x48] = 0x03;
    rom.screens[0x0a].tiles[0x49] = 0x04;
    rom.screens[0x15].tiles[0x79] = 0x01;
    rom.screens[0x15].tiles[0x7a] = 0x02;
    rom.screens[0x15].tiles[0x89] = 0x03;
    rom.screens[0x15].tiles[0x8a] = 0x04;
    rom.screens[0x19].tiles[0x48] = 0x01;
    rom.screens[0x19].tiles[0x49] = 0x02;
    rom.screens[0x19].tiles[0x58] = 0x03;
    rom.screens[0x19].tiles[0x59] = 0x04;
    rom.screens[0x3e].tiles[0x56] = 0x01;
    rom.screens[0x3e].tiles[0x57] = 0x02;
    rom.screens[0x3e].tiles[0x66] = 0x03;
    rom.screens[0x3e].tiles[0x67] = 0x04;
    const flagsToClear = [
        [ValleyOfWind, 0x30],
        [WaterfallValleyNorth, 0x14],
        [WaterfallValleySouth, 0x74],
        [KirisaMeadow, 0x10],
        [SaharaOutsideCave, 0x00],
        [Desert2, 0x41],
    ];
    for (const [loc, yx] of flagsToClear) {
        loc.flags.push(Flag.of({ yx, flag: AlwaysTrue.id }));
    }
    CordelPlainWest.flags.push(Flag.of({ yx: 0x30, flag: OpenedSealedCave.id }));
    CordelPlainEast.flags.push(Flag.of({ yx: 0x30, flag: OpenedSealedCave.id }));
    WaterfallValleyNorth.flags.push(Flag.of({ yx: 0x00, flag: OpenedPrison.id }));
    const explosion = Spawn.of({ y: 0x060, x: 0x060, type: 4, id: 0x2c });
    const keyTrigger = Spawn.of({ y: 0x070, x: 0x070, type: 2, id: 0xad });
    WaterfallValleyNorth.spawns.splice(1, 0, explosion);
    WaterfallValleyNorth.spawns.push(keyTrigger);
}
//# sourceMappingURL=data:application/json;base64,