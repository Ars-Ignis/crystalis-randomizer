export function shuffleTrades(rom, flags, random) {
    if (!flags.randomizeTrades())
        return;
    const { StatueOfOnyx, FogLamp, LovePendant, KirisaPlant, IvoryStatue } = rom.items;
    const map = new Map();
    const items = [
        [StatueOfOnyx, 0, 'Akahana'],
        [FogLamp, 0, 'Fisherman'],
        [LovePendant, 0, 'Kensu'],
        [KirisaPlant, 0, 'Aryllis'],
        [IvoryStatue, 0, 'Slimed Kensu'],
    ];
    const npcs = items.map(([item, trade, npcName]) => {
        if (item.trades.indexOf(trade) < 0 || trade >= item.itemUseData.length) {
            throw new Error(`not a trade: ${item} ${trade}`);
        }
        const use = item.itemUseData[trade];
        return [use, item.id, npcName];
    });
    random.shuffle(npcs);
    for (const [item, trade] of items) {
        const [use, originalItem, npcName] = npcs.pop();
        item.itemUseData[trade] = use;
        if (rom.spoiler)
            rom.spoiler.addTrade(item.id, item.messageName, npcName);
        if (use.want === 0x123) {
            rom.prg[0x3d4b5] = item.id - 0x1c;
        }
        else if (use.want === 0x164) {
            [...rom.npcs[0x64].spawnConditions.values()][0][0] = 0x200 | item.id;
        }
        map.set(originalItem, item.id);
    }
    rom.itemGets.actionGrants =
        new Map([...rom.itemGets.actionGrants]
            .map(([k, v]) => { var _a; return [(_a = map.get(k), (_a !== null && _a !== void 0 ? _a : k)), v]; }));
    const rage = rom.items[random.nextInt(4)];
    rom.npcs[0xc3].localDialogs.get(-1)[0].condition = 0x200 | rage.id;
    if (rom.spoiler)
        rom.spoiler.addTrade(rage.id, rage.messageName, 'Rage');
    rom.npcs[0x38].localDialogs.get(-1)[3].condition = 0x200 | rage.id;
    const tornel = rom.items[random.nextInt(4) * 2 + 6];
    for (const ds of rom.npcs[0x5f].localDialogs.values()) {
        for (let i = 2; i < ds.length; i++) {
            if (ds[i].message.action === 3) {
                ds[i - 2].condition = ~(0x200 | (tornel.id - 1));
                ds[i - 1].condition = ~(0x200 | tornel.id);
                if (rom.spoiler) {
                    rom.spoiler.addTrade(tornel.id, tornel.messageName, 'Tornel');
                }
                break;
            }
        }
    }
}
export function buildTradeInMap(rom) {
    const map = new Map();
    for (const item of rom.items) {
        for (const trade of item.trades) {
            map.set(item.itemUseData[trade].want & 0xff, item.id);
        }
    }
    return map;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZXRyYWRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL3NodWZmbGV0cmFkZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsTUFBTSxVQUFVLGFBQWEsQ0FBQyxHQUFRLEVBQUUsS0FBYyxFQUFFLE1BQWM7SUFDcEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUU7UUFBRSxPQUFPO0lBQ3JDLE1BQU0sRUFBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFDbEMsV0FBVyxFQUFFLFdBQVcsRUFBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFHN0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7SUFFdEMsTUFBTSxLQUFLLEdBQW1EO1FBQzVELENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUM7UUFDNUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQztRQUN6QixDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDO1FBQ3pCLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUM7UUFDM0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FBQztLQUV4QixDQUFDO0lBQ1gsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO1FBQ2hELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUN0RSxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNsRDtRQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENB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SSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBRTlCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7b0JBQ2YsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2lCQUMvRDtnQkFDRCxNQUFNO2FBQ1A7U0FDRjtLQUNGO0FBQ0gsQ0FBQztBQUlELE1BQU0sVUFBVSxlQUFlLENBQUMsR0FBUTtJQUN0QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLEtBQUssTUFBTSxJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRTtRQUM1QixLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZEO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZsYWdTZXR9IGZyb20gJy4uL2ZsYWdzZXQuanMnO1xuaW1wb3J0IHtSYW5kb219IGZyb20gJy4uL3JhbmRvbS5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7SXRlbX0gZnJvbSAnLi4vcm9tL2l0ZW0uanMnO1xuXG4vLyBTaHVmZmxlIHRoZSBwYWxldHRlcy5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlVHJhZGVzKHJvbTogUm9tLCBmbGFnczogRmxhZ1NldCwgcmFuZG9tOiBSYW5kb20pIHtcbiAgaWYgKCFmbGFncy5yYW5kb21pemVUcmFkZXMoKSkgcmV0dXJuO1xuICBjb25zdCB7U3RhdHVlT2ZPbnl4LCBGb2dMYW1wLCBMb3ZlUGVuZGFudCxcbiAgICAgICAgIEtpcmlzYVBsYW50LCBJdm9yeVN0YXR1ZX0gPSByb20uaXRlbXM7XG5cbiAgLy8gTWFwIHRoZSBvcmlnaW5hbCB0cmFkZSB0byB0aGUgbmV3IHRyYWRlLCBmb3IgdXBkYXRpbmcgYWN0aW9uR3JhbnRzLlxuICBjb25zdCBtYXAgPSBuZXcgTWFwPG51bWJlciwgbnVtYmVyPigpO1xuXG4gIGNvbnN0IGl0ZW1zOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFtJdGVtLCBudW1iZXIsIHN0cmluZ10+ID0gW1xuICAgIFtTdGF0dWVPZk9ueXgsIDAsICdBa2FoYW5hJ10sXG4gICAgW0ZvZ0xhbXAsIDAsICdGaXNoZXJtYW4nXSxcbiAgICBbTG92ZVBlbmRhbnQsIDAsICdLZW5zdSddLFxuICAgIFtLaXJpc2FQbGFudCwgMCwgJ0FyeWxsaXMnXSxcbiAgICBbSXZvcnlTdGF0dWUsIDAsICdTbGltZWQgS2Vuc3UnXSxcbiAgICAvLyBbRmx1dGVPZkxpbWUsIDMsICdTdG9uZWQgQWthaGFuYSddLFxuICBdIGFzIGNvbnN0O1xuICBjb25zdCBucGNzID0gaXRlbXMubWFwKChbaXRlbSwgdHJhZGUsIG5wY05hbWVdKSA9PiB7XG4gICAgaWYgKGl0ZW0udHJhZGVzLmluZGV4T2YodHJhZGUpIDwgMCB8fCB0cmFkZSA+PSBpdGVtLml0ZW1Vc2VEYXRhLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3QgYSB0cmFkZTogJHtpdGVtfSAke3RyYWRlfWApO1xuICAgIH1cbiAgICBjb25zdCB1c2UgPSBpdGVtLml0ZW1Vc2VEYXRhW3RyYWRlXTsgLy8gdXNlLndhbnQgPT09IE5QQyBpZCB8IDEwMFxuICAgIHJldHVybiBbdXNlLCBpdGVtLmlkIC8qIG9yaWdpbmFsIGl0ZW0gKi8sIG5wY05hbWVdIGFzIGNvbnN0O1xuICB9KTtcbiAgcmFuZG9tLnNodWZmbGUobnBjcyk7XG5cbiAgZm9yIChjb25zdCBbaXRlbSwgdHJhZGVdIG9mIGl0ZW1zKSB7XG4gICAgY29uc3QgW3VzZSwgb3JpZ2luYWxJdGVtLCBucGNOYW1lXSA9IG5wY3MucG9wKCkhO1xuICAgIGl0ZW0uaXRlbVVzZURhdGFbdHJhZGVdID0gdXNlO1xuICAgIGlmIChyb20uc3BvaWxlcikgcm9tLnNwb2lsZXIuYWRkVHJhZGUoaXRlbS5pZCwgaXRlbS5tZXNzYWdlTmFtZSwgbnBjTmFtZSk7XG4gICAgaWYgKHVzZS53YW50ID09PSAweDEyMykgeyAvLyBhcnlsbGlzIGl0ZW0gcmVxdWlyZXMgYmVpbmcgYSBnaXJsXG4gICAgICAvLyBUT0RPIC0gY29uc2lkZXIgbW92aW5nIHRoaXMgdG8gSXRlbS53cml0ZT9cbiAgICAgIHJvbS5wcmdbMHgzZDRiNV0gPSBpdGVtLmlkIC0gMHgxYztcbiAgICB9IGVsc2UgaWYgKHVzZS53YW50ID09PSAweDE2NCkgeyAvLyBmaXNoZXJtYW4gc3Bhd25zIGJhc2VkIG9uIGl0ZW1cbiAgICAgIFsuLi5yb20ubnBjc1sweDY0XS5zcGF3bkNvbmRpdGlvbnMudmFsdWVzKCldWzBdWzBdID0gMHgyMDAgfCBpdGVtLmlkO1xuICAgIH1cbiAgICBtYXAuc2V0KG9yaWdpbmFsSXRlbSwgaXRlbS5pZCk7XG4gIH1cblxuICAvLyBGaXggdXAgdGhlIGFjdGlvbkdyYW50c1xuICByb20uaXRlbUdldHMuYWN0aW9uR3JhbnRzID1cbiAgICAgIG5ldyBNYXAoWy4uLnJvbS5pdGVtR2V0cy5hY3Rpb25HcmFudHNdXG4gICAgICAgICAgICAgIC5tYXAoKFtrLCB2XSkgPT4gW21hcC5nZXQoaykgPz8gaywgdl0pKTtcblxuICAvLyBBbHNvIHJhbmRvbWl6ZSBSYWdlIGFuZCBUb3JuZWxcbiAgY29uc3QgcmFnZSA9IHJvbS5pdGVtc1tyYW5kb20ubmV4dEludCg0KV07XG4gIHJvbS5ucGNzWzB4YzNdLmxvY2FsRGlhbG9ncy5nZXQoLTEpIVswXS5jb25kaXRpb24gPSAweDIwMCB8IHJhZ2UuaWQ7XG4gIGlmIChyb20uc3BvaWxlcikgcm9tLnNwb2lsZXIuYWRkVHJhZGUocmFnZS5pZCwgcmFnZS5tZXNzYWdlTmFtZSwgJ1JhZ2UnKTtcbiAgLy8gUG9ydG9hIHF1ZWVuIDM4IHRha2VzIHRoZSBzYW1lIHN3b3JkIGFzIFJhZ2VcbiAgcm9tLm5wY3NbMHgzOF0ubG9jYWxEaWFsb2dzLmdldCgtMSkhWzNdLmNvbmRpdGlvbiA9IDB4MjAwIHwgcmFnZS5pZDtcblxuICBjb25zdCB0b3JuZWwgPSByb20uaXRlbXNbcmFuZG9tLm5leHRJbnQoNCkgKiAyICsgNl07XG4gIGZvciAoY29uc3QgZHMgb2Ygcm9tLm5wY3NbMHg1Zl0ubG9jYWxEaWFsb2dzLnZhbHVlcygpKSB7XG4gICAgZm9yIChsZXQgaSA9IDI7IGkgPCBkcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRzW2ldLm1lc3NhZ2UuYWN0aW9uID09PSAzKSB7XG4gICAgICAgIC8vIE5PVEU6IGJyYWNlbGV0IGdvZXMgZmlyc3RcbiAgICAgICAgZHNbaSAtIDJdLmNvbmRpdGlvbiA9IH4oMHgyMDAgfCAodG9ybmVsLmlkIC0gMSkpO1xuICAgICAgICBkc1tpIC0gMV0uY29uZGl0aW9uID0gfigweDIwMCB8IHRvcm5lbC5pZCk7XG4gICAgICAgIGlmIChyb20uc3BvaWxlcikge1xuICAgICAgICAgIHJvbS5zcG9pbGVyLmFkZFRyYWRlKHRvcm5lbC5pZCwgdG9ybmVsLm1lc3NhZ2VOYW1lLCAnVG9ybmVsJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIE5PVEUgLSB0aGlzIGlzIGNvcGllZCBmcm9tIGZpeGRpYWxvZ1xuLyoqIEJ1aWxkcyBhIG1hcCBmcm9tIE5QQyBpZCB0byB3YW50ZWQgaXRlbSBpZC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFRyYWRlSW5NYXAocm9tOiBSb20pOiBNYXA8bnVtYmVyLCBudW1iZXI+IHtcbiAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2Ygcm9tLml0ZW1zKSB7XG4gICAgZm9yIChjb25zdCB0cmFkZSBvZiBpdGVtLnRyYWRlcykge1xuICAgICAgbWFwLnNldChpdGVtLml0ZW1Vc2VEYXRhW3RyYWRlXS53YW50ICYgMHhmZiwgaXRlbS5pZCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXA7XG59XG4iXX0=