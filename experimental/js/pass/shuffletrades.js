export function shuffleTrades(rom, flags, random) {
    if (!flags.randomizeTrades())
        return;
    const items = [
        [rom.items[0x25], 0, 'Akahana'],
        [rom.items[0x35], 0, 'Fisherman'],
        [rom.items[0x3b], 0, 'Kensu'],
        [rom.items[0x3c], 0, 'Aryllis'],
        [rom.items[0x3d], 0, 'Slimed Kensu'],
    ];
    const npcs = [];
    for (const [item, offset, npcName] of items) {
        if (!item.tradeIn)
            throw new Error(`Expected trade-in for ${item.id}`);
        npcs.push([npcName, item.tradeIn.slice(offset, offset + 6)]);
    }
    random.shuffle(npcs);
    for (const [item, offset] of items) {
        const [npcName, npc] = npcs.pop();
        item.tradeIn.splice(offset, 6, ...npc);
        if (rom.spoiler)
            rom.spoiler.addTrade(item.id, item.messageName, npcName);
        if (npc[0] === 0x23) {
            rom.prg[0x3d4b5] = item.id - 0x1c;
        }
    }
    const rage = rom.items[random.nextInt(4)];
    rom.npcs[0xc3].localDialogs.get(-1)[0].condition = 0x200 | rage.id;
    if (rom.spoiler)
        rom.spoiler.addTrade(rage.id, rage.messageName, 'Rage');
    rom.npcs[0x38].localDialogs.get(-1)[3].condition = 0x200 | rage.id;
    const tornel = rom.items[random.nextInt(4) * 2 + 6];
    for (const ds of rom.npcs[0x5f].localDialogs.values()) {
        for (let i = 2; i < ds.length; i++) {
            if (ds[i].message.action === 3) {
                ds[i - 2].condition = ~(0x200 | (tornel.id - 1));
                ds[i - 1].condition = ~(0x200 | tornel.id);
                if (rom.spoiler) {
                    rom.spoiler.addTrade(tornel.id, tornel.messageName, 'Tornel');
                }
                break;
            }
        }
    }
}
export function buildTradeInMap(rom) {
    const map = new Map();
    for (const item of rom.items) {
        if (!item.tradeIn)
            continue;
        for (let i = 0; i < item.tradeIn.length; i += 6) {
            map.set(item.tradeIn[i], item.id);
        }
    }
    return map;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZXRyYWRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL3NodWZmbGV0cmFkZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxVQUFVLGFBQWEsQ0FBQyxHQUFRLEVBQUUsS0FBYyxFQUFFLE1BQWM7SUFDcEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUU7UUFBRSxPQUFPO0lBRXJDLE1BQU0sS0FBSyxHQUFHO1FBQ1osQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUM7UUFFL0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUM7UUFDakMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUM7UUFDN0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUM7UUFDL0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFjLENBQUM7S0FDNUIsQ0FBQztJQUVYLE1BQU0sSUFBSSxHQUE4QixFQUFFLENBQUM7SUFDM0MsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5RDtJ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LENBQUMsT0FBTztZQUFFLFNBQVM7UUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQztLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGbGFnU2V0fSBmcm9tICcuLi9mbGFnc2V0LmpzJztcbmltcG9ydCB7UmFuZG9tfSBmcm9tICcuLi9yYW5kb20uanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5cbi8vIFNodWZmbGUgdGhlIHBhbGV0dGVzLlxuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVUcmFkZXMocm9tOiBSb20sIGZsYWdzOiBGbGFnU2V0LCByYW5kb206IFJhbmRvbSkge1xuICBpZiAoIWZsYWdzLnJhbmRvbWl6ZVRyYWRlcygpKSByZXR1cm47XG5cbiAgY29uc3QgaXRlbXMgPSBbXG4gICAgW3JvbS5pdGVtc1sweDI1XSwgMCwgJ0FrYWhhbmEnXSwgICAgICAgICAgICAvLyBzdGF0dWUgb2Ygb255eFxuICAgIC8vIFtyb20uaXRlbXNbMHgyOF0sIDE4LCAnU3RvbmVkIEFrYWhhbmEnXSwgLy8gZmx1dGUgb2YgbGltZVxuICAgIFtyb20uaXRlbXNbMHgzNV0sIDAsICdGaXNoZXJtYW4nXSwgICAgICAgICAgLy8gZm9nIGxhbXBcbiAgICBbcm9tLml0ZW1zWzB4M2JdLCAwLCAnS2Vuc3UnXSwgICAgICAgICAgICAgIC8vIGxvdmUgcGVuZGFudFxuICAgIFtyb20uaXRlbXNbMHgzY10sIDAsICdBcnlsbGlzJ10sICAgICAgICAgICAgLy8ga2lyaXNhIHBsYW50XG4gICAgW3JvbS5pdGVtc1sweDNkXSwgMCwgJ1NsaW1lZCBLZW5zdSddLCAgICAgICAvLyBpdm9yeSBzdGF0dWVcbiAgXSBhcyBjb25zdDtcblxuICBjb25zdCBucGNzOiBBcnJheTxbc3RyaW5nLCBudW1iZXJbXV0+ID0gW107XG4gIGZvciAoY29uc3QgW2l0ZW0sIG9mZnNldCwgbnBjTmFtZV0gb2YgaXRlbXMpIHtcbiAgICBpZiAoIWl0ZW0udHJhZGVJbikgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCB0cmFkZS1pbiBmb3IgJHtpdGVtLmlkfWApO1xuICAgIC8vIHNhdmUgZXhwZWN0ZWQgTlBDLCBhbG9uZyB3aXRoIG1lc3NhZ2UgaWQgYW5kIGZsYWdcbiAgICBucGNzLnB1c2goW25wY05hbWUsIGl0ZW0udHJhZGVJbi5zbGljZShvZmZzZXQsIG9mZnNldCArIDYpXSk7XG4gIH1cblxuICByYW5kb20uc2h1ZmZsZShucGNzKTtcblxuICBmb3IgKGNvbnN0IFtpdGVtLCBvZmZzZXRdIG9mIGl0ZW1zKSB7XG4gICAgY29uc3QgW25wY05hbWUsIG5wY10gPSBucGNzLnBvcCgpITtcbiAgICBpdGVtLnRyYWRlSW4hLnNwbGljZShvZmZzZXQsIDYsIC4uLm5wYyk7XG4gICAgaWYgKHJvbS5zcG9pbGVyKSByb20uc3BvaWxlci5hZGRUcmFkZShpdGVtLmlkLCBpdGVtLm1lc3NhZ2VOYW1lLCBucGNOYW1lKTtcbiAgICBpZiAobnBjWzBdID09PSAweDIzKSB7IC8vIGFyeWxsaXMgaXRlbSByZXF1aXJlcyBiZWluZyBhIGdpcmxcbiAgICAgIHJvbS5wcmdbMHgzZDRiNV0gPSBpdGVtLmlkIC0gMHgxYztcbiAgICB9XG4gIH1cblxuICAvLyBBbHNvIHJhbmRvbWl6ZSBSYWdlIGFuZCBUb3JuZWxcbiAgY29uc3QgcmFnZSA9IHJvbS5pdGVtc1tyYW5kb20ubmV4dEludCg0KV07XG4gIHJvbS5ucGNzWzB4YzNdLmxvY2FsRGlhbG9ncy5nZXQoLTEpIVswXS5jb25kaXRpb24gPSAweDIwMCB8IHJhZ2UuaWQ7XG4gIGlmIChyb20uc3BvaWxlcikgcm9tLnNwb2lsZXIuYWRkVHJhZGUocmFnZS5pZCwgcmFnZS5tZXNzYWdlTmFtZSwgJ1JhZ2UnKTtcbiAgLy8gUG9ydG9hIHF1ZWVuIDM4IHRha2VzIHRoZSBzYW1lIHN3b3JkIGFzIFJhZ2VcbiAgcm9tLm5wY3NbMHgzOF0ubG9jYWxEaWFsb2dzLmdldCgtMSkhWzNdLmNvbmRpdGlvbiA9IDB4MjAwIHwgcmFnZS5pZDtcblxuICBjb25zdCB0b3JuZWwgPSByb20uaXRlbXNbcmFuZG9tLm5leHRJbnQoNCkgKiAyICsgNl07XG4gIGZvciAoY29uc3QgZHMgb2Ygcm9tLm5wY3NbMHg1Zl0ubG9jYWxEaWFsb2dzLnZhbHVlcygpKSB7XG4gICAgZm9yIChsZXQgaSA9IDI7IGkgPCBkcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRzW2ldLm1lc3NhZ2UuYWN0aW9uID09PSAzKSB7XG4gICAgICAgIC8vIE5PVEU6IGJyYWNlbGV0IGdvZXMgZmlyc3RcbiAgICAgICAgZHNbaSAtIDJdLmNvbmRpdGlvbiA9IH4oMHgyMDAgfCAodG9ybmVsLmlkIC0gMSkpO1xuICAgICAgICBkc1tpIC0gMV0uY29uZGl0aW9uID0gfigweDIwMCB8IHRvcm5lbC5pZCk7XG4gICAgICAgIGlmIChyb20uc3BvaWxlcikge1xuICAgICAgICAgIHJvbS5zcG9pbGVyLmFkZFRyYWRlKHRvcm5lbC5pZCwgdG9ybmVsLm1lc3NhZ2VOYW1lLCAnVG9ybmVsJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIE5PVEUgLSB0aGlzIGlzIGNvcGllZCBmcm9tIGZpeGRpYWxvZ1xuLyoqIEJ1aWxkcyBhIG1hcCBmcm9tIE5QQyBpZCB0byB3YW50ZWQgaXRlbSBpZC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFRyYWRlSW5NYXAocm9tOiBSb20pOiBNYXA8bnVtYmVyLCBudW1iZXI+IHtcbiAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2Ygcm9tLml0ZW1zKSB7XG4gICAgaWYgKCFpdGVtLnRyYWRlSW4pIGNvbnRpbnVlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbS50cmFkZUluLmxlbmd0aDsgaSArPSA2KSB7XG4gICAgICBtYXAuc2V0KGl0ZW0udHJhZGVJbltpXSwgaXRlbS5pZCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXA7XG59XG4iXX0=