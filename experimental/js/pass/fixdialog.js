import { hex } from '../rom/util.js';
import { buildTradeInMap } from './shuffletrades.js';
import { fail } from '../assert.js';
export function fixDialog(rom) {
    replaceMessage('03:06', ',', '');
    const tradeIns = buildTradeInMap(rom);
    const zebu = rom.npcs[0x5e];
    if (zebu.data[0] < 0x41)
        unmagic('00:1b');
    replaceMessage('00:1b', '[41:Refresh]', item(zebu.data[0]));
    const akahanaTradeIn = mustGet(tradeIns, 0x82);
    replaceMessage('02:01', 'an unusual statue', vague(akahanaTradeIn));
    replaceMessage('02:02', 'a statue', `the ${commonNoun(akahanaTradeIn)}`);
    const gasMaskSlot = actionGrant(akahanaTradeIn);
    replaceMessage('02:02', '[29:Gas Mask]', item(gasMaskSlot));
    const telepathySlot = rom.prg[0x367f4];
    if (telepathySlot < 0x41)
        unmagic('03:01');
    replaceMessage('03:01', '[43:Telepathy]', item(telepathySlot));
    const tornel = rom.npcs[0x5f];
    const tornelTradeIn = findTornelTradeIn(tornel);
    replaceMessage('03:01', '[06:Tornado Bracelet]', item(tornelTradeIn));
    replaceMessage('05:0a', '[06:Tornado Bracelet]', item(tornelTradeIn));
    replaceMessage('05:0a', '[44:Teleport]', item(tornel.data[0]));
    const fogLampTradeIn = tradeIns.get(0x64);
    if (fogLampTradeIn != null) {
        replaceMessage('09:01', '[35:Fog Lamp]', item(fogLampTradeIn));
        replaceMessage('09:04', '[35:Fog Lamp]', item(fogLampTradeIn));
        replaceMessage('09:05', '[35:Fog Lamp]', item(fogLampTradeIn));
        replaceMessage('09:06', 'lamp', commonNoun(fogLampTradeIn));
    }
    const queen = rom.npcs[0x38];
    replaceMessage('0a:0c', '[28:Flute of Lime]', item(queen.data[0]));
    replaceMessage('0a:0d', '[02:Sword of Water]', item(queen.localDialogs.get(-1)[3].condition & 0xff));
    const recoverSlot = rom.prg[0x3d1f9];
    if (recoverSlot < 0x41)
        unmagic('0b:01');
    replaceMessage('0b:01', '[45:Recover]', item(recoverSlot));
    const barrierSlot = actionGrant(0x84);
    if (barrierSlot < 0x41) {
        unmagic('0b:01');
        unmagic('1d:12');
    }
    replaceMessage('0b:01', '[46:Barrier]', item(barrierSlot));
    replaceMessage('1d:12', '[46:Barrier]', item(barrierSlot));
    let fogLampCaveLoot = findLoot(0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f);
    if (fogLampCaveLoot >= 0) {
        replaceMessage('0d:00', '[35:Fog Lamp]', item(fogLampCaveLoot));
    }
    else {
        replaceMessage('0d:00', 'that a [35:Fog Lamp] was', 'there was treasure');
    }
    const rageTradeIn = rom.npcs[0xc3].localDialogs.get(-1)[0].condition & 0xff;
    const rageItem = rom.prg[0x3d337];
    replaceMessage('0e:03', '[02:Sword of Water]', item(rageTradeIn));
    replaceMessage('0e:03', '[09:Ball of Water]', item(rageItem));
    replaceMessage('10:0c', 'that\'s', 'is');
    replaceMessage('10:0c', /, is in the\+lighthouse/, '');
    const aryllisTradeIn = tradeIns.get(0x23);
    if (aryllisTradeIn != null) {
        replaceMessage('12:05', '[3c:Kirisa Plant]', item(aryllisTradeIn));
        replaceMessage('12:10', 'the plant', `the ${commonNoun(aryllisTradeIn)}`);
        replaceMessage('12:10', '[3c:Kirisa Plant]', item(aryllisTradeIn));
        const clue = `Our illustrious chief seeks ${vague(aryllisTradeIn)}.`;
        replaceMessage('12:09', /[^]*/, clue);
        replaceMessage('12:0a', /[^]*/, clue);
    }
    const lovePendantTradeIn = mustGet(tradeIns, 0x74);
    replaceMessage('13:02', '[3b:Love Pendant]', item(lovePendantTradeIn));
    const changeSlot = actionGrant(lovePendantTradeIn);
    if (changeSlot < 0x41) {
        unmagic('13:02');
    }
    replaceMessage('13:02', '[47:Change]', item(changeSlot));
    const ivoryStatueTradeIn = tradeIns.get(0x75);
    if (ivoryStatueTradeIn != null) {
        replaceMessage('18:06', '[3d:Ivory Statue]', item(ivoryStatueTradeIn));
        replaceMessage('18:07', '[3d:Ivory Statue]', item(ivoryStatueTradeIn));
    }
    replaceMessage('18:06', `It's in a room`, '{0b:Karmine} is');
    const flightSlot = rom.prg[0x3d18f];
    if (flightSlot < 0x41)
        replaceMessage('18:07', 'teach', 'give');
    replaceMessage('18:07', '[48:Flight]', item(flightSlot));
    const paralysisSlot = actionGrant(0xb2);
    if (paralysisSlot < 0x41)
        unmagic('1c:10');
    replaceMessage('1c:10', '[42:Paralysis]', item(paralysisSlot));
    replaceMessage('20:06', 'Statue of Gold', item(actionGrant(0x39)));
    function unmagic(mid) {
        replaceMessage(mid, /teach\s+you\s+the\s+magic\s+of/, 'bestow upon you the');
    }
    function item(id) {
        const item = itemget(id);
        return `[${hex(item.id)}:${item.messageName}]`;
    }
    function replaceMessage(mid, pat, repl) {
        const [part, index] = mid.split(':').map(x => parseInt(x, 16));
        const msg = rom.messages.parts[part][index];
        msg.text = msg.text.replace(pat, repl);
    }
    function findLoot(...locs) {
        for (const id of locs) {
            const loc = rom.locations[id];
            for (const spawn of loc.spawns) {
                if (spawn.isChest() && spawn.id < 0x48 && itemget(spawn.id).unique) {
                    return spawn.id;
                }
            }
        }
        return -1;
    }
    function itemget(id) {
        const itemget = rom.itemGets[id];
        return rom.items[itemget.itemId];
    }
    function actionGrant(key) {
        const grant = rom.itemGets.actionGrants.get(key);
        if (grant == null)
            throw new Error(`Missing actionGrant for ${hex(key)}`);
        return grant;
    }
}
function findTornelTradeIn(tornel) {
    for (const ds of tornel.localDialogs.values()) {
        for (let i = 2; i < ds.length; i++) {
            const item = ~ds[i].condition;
            if (item > 0x204 && item <= 0x20c && !(item & 1))
                return item & 0xff;
        }
    }
    return 0x06;
}
function vague(id) {
    switch (id) {
        case 0x25: return 'an unusual statue';
        case 0x28: return 'a rare instrument';
        case 0x35: return 'a brilliant lamp';
        case 0x3b: return 'a beautiful charm';
        case 0x3c: return 'a fragrant plant';
        case 0x3d: return 'an exotic statue';
    }
    fail();
    return 'a valuable item';
}
function commonNoun(id) {
    switch (id) {
        case 0x25: return 'statue';
        case 0x28: return 'instrument';
        case 0x35: return 'lamp';
        case 0x3b: return 'pendant';
        case 0x3c: return 'plant';
        case 0x3d: return 'statue';
    }
    fail();
    return 'item';
}
function mustGet(map, key) {
    const result = map.get(key);
    if (result == null)
        throw new Error(`Expected value for ${key}`);
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4ZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3Bhc3MvZml4ZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUdsQyxNQUFNLFVBQVUsU0FBUyxDQUFDLEdBQVE7SUFFaEMsY0FBYyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFakMsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBR3RDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUk7UUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVELE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0MsY0FBYyxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNwRSxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFekUsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hELGNBQWMsQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxXQUFX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SUFDRCxJQUFJLEVBQUUsQ0FBQztJQUNQLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBTyxHQUFjLEVBQUUsR0FBTTtJQUMzQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLElBQUksTUFBTSxJQUFJLElBQUk7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7SXRlbX0gZnJvbSAnLi4vcm9tL2l0ZW0uanMnO1xuaW1wb3J0IHtOcGN9IGZyb20gJy4uL3JvbS9ucGMuanMnO1xuaW1wb3J0IHtoZXh9IGZyb20gJy4uL3JvbS91dGlsLmpzJztcbmltcG9ydCB7YnVpbGRUcmFkZUluTWFwfSBmcm9tICcuL3NodWZmbGV0cmFkZXMuanMnO1xuaW1wb3J0IHtmYWlsfSBmcm9tICcuLi9hc3NlcnQuanMnO1xuXG4vKiogRmluZHMgcmVmZXJlbmNlcyB0byBnaXZlbiBpdGVtcyBhbmQgcmVwbGFjZXMgaXQgd2l0aCB0aGUgYWN0dWFsIGl0ZW1zLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpeERpYWxvZyhyb206IFJvbSkge1xuICAvLyBTdG9tJ3MgXCJJJ2xsLCBiZSB3YWl0aW5nLi4uXCIgZGlhbG9nIC0gdGhlIGNvbW1hIGlzIGp1c3Qgd3JvbmcuXG4gIHJlcGxhY2VNZXNzYWdlKCcwMzowNicsICcsJywgJycpO1xuXG4gIGNvbnN0IHRyYWRlSW5zID0gYnVpbGRUcmFkZUluTWFwKHJvbSk7XG4gIC8vIE5PVEU6IHdlIG5lZWQgdG8gaGFyZGNvZGUgb3JpZ2luYWwgbmFtZXMgaW4gY2FzZSB0aGV5IHdlcmUgc2h1ZmZsZWQuXG5cbiAgY29uc3QgemVidSA9IHJvbS5ucGNzWzB4NWVdO1xuICBpZiAoemVidS5kYXRhWzBdIDwgMHg0MSkgdW5tYWdpYygnMDA6MWInKTtcbiAgcmVwbGFjZU1lc3NhZ2UoJzAwOjFiJywgJ1s0MTpSZWZyZXNoXScsIGl0ZW0oemVidS5kYXRhWzBdKSk7XG5cbiAgY29uc3QgYWthaGFuYVRyYWRlSW4gPSBtdXN0R2V0KHRyYWRlSW5zLCAweDgyKTtcbiAgcmVwbGFjZU1lc3NhZ2UoJzAyOjAxJywgJ2FuIHVudXN1YWwgc3RhdHVlJywgdmFndWUoYWthaGFuYVRyYWRlSW4pKTtcbiAgcmVwbGFjZU1lc3NhZ2UoJzAyOjAyJywgJ2Egc3RhdHVlJywgYHRoZSAke2NvbW1vbk5vdW4oYWthaGFuYVRyYWRlSW4pfWApO1xuXG4gIGNvbnN0IGdhc01hc2tTbG90ID0gYWN0aW9uR3JhbnQoYWthaGFuYVRyYWRlSW4pOyAvLyBvcGVsIHN0YXR1ZVxuICByZXBsYWNlTWVzc2FnZSgnMDI6MDInLCAnWzI5OkdhcyBNYXNrXScsIGl0ZW0oZ2FzTWFza1Nsb3QpKTtcblxuICBjb25zdCB0ZWxlcGF0aHlTbG90ID0gcm9tLnByZ1sweDM2N2Y0XTtcbiAgaWYgKHRlbGVwYXRoeVNsb3QgPCAweDQxKSB1bm1hZ2ljKCcwMzowMScpO1xuICByZXBsYWNlTWVzc2FnZSgnMDM6MDEnLCAnWzQzOlRlbGVwYXRoeV0nLCBpdGVtKHRlbGVwYXRoeVNsb3QpKTtcblxuICBjb25zdCB0b3JuZWwgPSByb20ubnBjc1sweDVmXTtcbiAgY29uc3QgdG9ybmVsVHJhZGVJbiA9IGZpbmRUb3JuZWxUcmFkZUluKHRvcm5lbCk7XG4gIHJlcGxhY2VNZXNzYWdlKCcwMzowMScsICdbMDY6VG9ybmFkbyBCcmFjZWxldF0nLCBpdGVtKHRvcm5lbFRyYWRlSW4pKTtcbiAgcmVwbGFjZU1lc3NhZ2UoJzA1OjBhJywgJ1swNjpUb3JuYWRvIEJyYWNlbGV0XScsIGl0ZW0odG9ybmVsVHJhZGVJbikpO1xuICByZXBsYWNlTWVzc2FnZSgnMDU6MGEnLCAnWzQ0OlRlbGVwb3J0XScsIGl0ZW0odG9ybmVsLmRhdGFbMF0pKTtcblxuICBjb25zdCBmb2dMYW1wVHJhZGVJbiA9IHRyYWRlSW5zLmdldCgweDY0KTtcbiAgaWYgKGZvZ0xhbXBUcmFkZUluICE9IG51bGwpIHtcbiAgICByZXBsYWNlTWVzc2FnZSgnMDk6MDEnLCAnWzM1OkZvZyBMYW1wXScsIGl0ZW0oZm9nTGFtcFRyYWRlSW4pKTtcbiAgICByZXBsYWNlTWVzc2FnZSgnMDk6MDQnLCAnWzM1OkZvZyBMYW1wXScsIGl0ZW0oZm9nTGFtcFRyYWRlSW4pKTtcbiAgICByZXBsYWNlTWVzc2FnZSgnMDk6MDUnLCAnWzM1OkZvZyBMYW1wXScsIGl0ZW0oZm9nTGFtcFRyYWRlSW4pKTtcbiAgICByZXBsYWNlTWVzc2FnZSgnMDk6MDYnLCAnbGFtcCcsIGNvbW1vbk5vdW4oZm9nTGFtcFRyYWRlSW4pKTtcbiAgfVxuXG4gIGNvbnN0IHF1ZWVuID0gcm9tLm5wY3NbMHgzOF07XG4gIHJlcGxhY2VNZXNzYWdlKCcwYTowYycsICdbMjg6Rmx1dGUgb2YgTGltZV0nLCBpdGVtKHF1ZWVuLmRhdGFbMF0pKTtcbiAgcmVwbGFjZU1lc3NhZ2UoJzBhOjBkJywgJ1swMjpTd29yZCBvZiBXYXRlcl0nLFxuICAgICAgICAgICAgICAgICBpdGVtKHF1ZWVuLmxvY2FsRGlhbG9ncy5nZXQoLTEpIVszXS5jb25kaXRpb24gJiAweGZmKSk7XG4gIC8vIFRPRE8gLSBjb25zaWRlciByZXBsYWNpbmcgMGE6MGQgYnV0IHdlIG5lZWQgdG8gYWxzbyByZXBsYWNlIGNvbmRpdGlvbj9cbiAgY29uc3QgcmVjb3ZlclNsb3QgPSByb20ucHJnWzB4M2QxZjldOyAvLyBUT0RPIC0gY29uc29saWRhdGUgaW4gdGFibGU/XG4gIGlmIChyZWNvdmVyU2xvdCA8IDB4NDEpIHVubWFnaWMoJzBiOjAxJyk7XG4gIHJlcGxhY2VNZXNzYWdlKCcwYjowMScsICdbNDU6UmVjb3Zlcl0nLCBpdGVtKHJlY292ZXJTbG90KSk7XG5cbiAgY29uc3QgYmFycmllclNsb3QgPSBhY3Rpb25HcmFudCgweDg0KTtcbiAgaWYgKGJhcnJpZXJTbG90IDwgMHg0MSkge1xuICAgIHVubWFnaWMoJzBiOjAxJyk7XG4gICAgdW5tYWdpYygnMWQ6MTInKTtcbiAgfVxuICByZXBsYWNlTWVzc2FnZSgnMGI6MDEnLCAnWzQ2OkJhcnJpZXJdJywgaXRlbShiYXJyaWVyU2xvdCkpO1xuICByZXBsYWNlTWVzc2FnZSgnMWQ6MTInLCAnWzQ2OkJhcnJpZXJdJywgaXRlbShiYXJyaWVyU2xvdCkpO1xuXG4gIC8vIExvb2sgZm9yIGEga2V5IGl0ZW0gaW4gdGhlIGZvZyBsYW1wL2tpcmlzYSBwbGFudCBjYXZlcy5cbiAgbGV0IGZvZ0xhbXBDYXZlTG9vdCA9IGZpbmRMb290KDB4NDQsIDB4NDUsIDB4NDYsIDB4NDcsIDB4NDgsIDB4NDksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDRhLCAweDRiLCAweDRjLCAweDRkLCAweDRlLCAweDRmKTtcbiAgaWYgKGZvZ0xhbXBDYXZlTG9vdCA+PSAwKSB7XG4gICAgcmVwbGFjZU1lc3NhZ2UoJzBkOjAwJywgJ1szNTpGb2cgTGFtcF0nLCBpdGVtKGZvZ0xhbXBDYXZlTG9vdCkpO1xuICB9IGVsc2Uge1xuICAgIHJlcGxhY2VNZXNzYWdlKCcwZDowMCcsICd0aGF0IGEgWzM1OkZvZyBMYW1wXSB3YXMnLCAndGhlcmUgd2FzIHRyZWFzdXJlJyk7XG4gIH1cblxuICBjb25zdCByYWdlVHJhZGVJbiA9IHJvbS5ucGNzWzB4YzNdLmxvY2FsRGlhbG9ncy5nZXQoLTEpIVswXS5jb25kaXRpb24gJiAweGZmO1xuICBjb25zdCByYWdlSXRlbSA9IHJvbS5wcmdbMHgzZDMzN107XG4gIHJlcGxhY2VNZXNzYWdlKCcwZTowMycsICdbMDI6U3dvcmQgb2YgV2F0ZXJdJywgaXRlbShyYWdlVHJhZGVJbikpO1xuICByZXBsYWNlTWVzc2FnZSgnMGU6MDMnLCAnWzA5OkJhbGwgb2YgV2F0ZXJdJywgaXRlbShyYWdlSXRlbSkpO1xuXG4gIC8vIFRPRE8gLSBtZXNzYWdlIDEwOjBjIGlzIG9ubHkgaGFsZi1jb3JyZWN0LiAgSWYgaXRlbSBuYW1lcyBhcmUgcmFuZG9taXplZFxuICAvLyB0aGVuIGV2ZW4gd2l0aG91dCBhIGxvY2F0aW9uIHRoZSBtZXNzYWdlIGlzIHN0aWxsIHVzZWZ1bC4gIFNvIGp1c3QgZG8gdGhhdFxuICAvLyBmb3Igbm93LCBhbmQgd2UgY2FuIGZpbmQgYSB3YXkgdG8gaGludCBsYXRlci5cbiAgcmVwbGFjZU1lc3NhZ2UoJzEwOjBjJywgJ3RoYXRcXCdzJywgJ2lzJyk7XG4gIHJlcGxhY2VNZXNzYWdlKCcxMDowYycsIC8sIGlzIGluIHRoZVxcK2xpZ2h0aG91c2UvLCAnJyk7XG5cbiAgY29uc3QgYXJ5bGxpc1RyYWRlSW4gPSB0cmFkZUlucy5nZXQoMHgyMyk7XG4gIGlmIChhcnlsbGlzVHJhZGVJbiAhPSBudWxsKSB7XG4gICAgcmVwbGFjZU1lc3NhZ2UoJzEyOjA1JywgJ1szYzpLaXJpc2EgUGxhbnRdJywgaXRlbShhcnlsbGlzVHJhZGVJbikpO1xuICAgIHJlcGxhY2VNZXNzYWdlKCcxMjoxMCcsICd0aGUgcGxhbnQnLCBgdGhlICR7Y29tbW9uTm91bihhcnlsbGlzVHJhZGVJbil9YCk7XG4gICAgcmVwbGFjZU1lc3NhZ2UoJzEyOjEwJywgJ1szYzpLaXJpc2EgUGxhbnRdJywgaXRlbShhcnlsbGlzVHJhZGVJbikpO1xuICAgIC8vIFRPRE8gLSByZWZzIGluIDEyOjA5IGFuZCAxMjowYSBoYXZlIGxvY2F0aW9uLCB0b28uXG4gICAgLy8gcmVwbGFjZU1lc3NhZ2UoJzEyOjA5JywgL1xccypcXG4uKi8sICcuJyk7XG4gICAgLy8gcmVwbGFjZU1lc3NhZ2UoJzEyOjBhJywgL1xccypcXG4uKi8sICcuJyk7XG4gICAgY29uc3QgY2x1ZSA9IGBPdXIgaWxsdXN0cmlvdXMgY2hpZWYgc2Vla3MgJHt2YWd1ZShhcnlsbGlzVHJhZGVJbil9LmA7XG4gICAgcmVwbGFjZU1lc3NhZ2UoJzEyOjA5JywgL1teXSovLCBjbHVlKTtcbiAgICByZXBsYWNlTWVzc2FnZSgnMTI6MGEnLCAvW15dKi8sIGNsdWUpO1xuICB9XG5cbiAgY29uc3QgbG92ZVBlbmRhbnRUcmFkZUluID0gbXVzdEdldCh0cmFkZUlucywgMHg3NCk7XG4gIHJlcGxhY2VNZXNzYWdlKCcxMzowMicsICdbM2I6TG92ZSBQZW5kYW50XScsIGl0ZW0obG92ZVBlbmRhbnRUcmFkZUluKSk7XG4gIGNvbnN0IGNoYW5nZVNsb3QgPSBhY3Rpb25HcmFudChsb3ZlUGVuZGFudFRyYWRlSW4pO1xuICBpZiAoY2hhbmdlU2xvdCA8IDB4NDEpIHtcbiAgICB1bm1hZ2ljKCcxMzowMicpO1xuICB9XG4gIHJlcGxhY2VNZXNzYWdlKCcxMzowMicsICdbNDc6Q2hhbmdlXScsIGl0ZW0oY2hhbmdlU2xvdCkpO1xuXG4gIGNvbnN0IGl2b3J5U3RhdHVlVHJhZGVJbiA9IHRyYWRlSW5zLmdldCgweDc1KTtcbiAgaWYgKGl2b3J5U3RhdHVlVHJhZGVJbiAhPSBudWxsKSB7XG4gICAgcmVwbGFjZU1lc3NhZ2UoJzE4OjA2JywgJ1szZDpJdm9yeSBTdGF0dWVdJywgaXRlbShpdm9yeVN0YXR1ZVRyYWRlSW4pKTtcbiAgICByZXBsYWNlTWVzc2FnZSgnMTg6MDcnLCAnWzNkOkl2b3J5IFN0YXR1ZV0nLCBpdGVtKGl2b3J5U3RhdHVlVHJhZGVJbikpO1xuICB9XG4gIHJlcGxhY2VNZXNzYWdlKCcxODowNicsIGBJdCdzIGluIGEgcm9vbWAsICd7MGI6S2FybWluZX0gaXMnKTtcbiAgY29uc3QgZmxpZ2h0U2xvdCA9IHJvbS5wcmdbMHgzZDE4Zl07IC8vIFRPRE8gLSBjb25zb2xpZGF0ZT9cbiAgaWYgKGZsaWdodFNsb3QgPCAweDQxKSByZXBsYWNlTWVzc2FnZSgnMTg6MDcnLCAndGVhY2gnLCAnZ2l2ZScpO1xuICByZXBsYWNlTWVzc2FnZSgnMTg6MDcnLCAnWzQ4OkZsaWdodF0nLCBpdGVtKGZsaWdodFNsb3QpKTtcblxuICBjb25zdCBwYXJhbHlzaXNTbG90ID0gYWN0aW9uR3JhbnQoMHhiMik7XG4gIGlmIChwYXJhbHlzaXNTbG90IDwgMHg0MSkgdW5tYWdpYygnMWM6MTAnKTtcbiAgcmVwbGFjZU1lc3NhZ2UoJzFjOjEwJywgJ1s0MjpQYXJhbHlzaXNdJywgaXRlbShwYXJhbHlzaXNTbG90KSk7XG5cbiAgLy8gVE9ETyAtIHNodWZmbGUgd2hpY2ggaXRlbSByZWNvbnN0cnVjdHMgd2hpY2ggb3RoZXI/XG4gIHJlcGxhY2VNZXNzYWdlKCcyMDowNicsICdTdGF0dWUgb2YgR29sZCcsIGl0ZW0oYWN0aW9uR3JhbnQoMHgzOSkpKTtcblxuICAvLyBUT0RPIC0gY29uc2lkZXIgd2FycGluZyBvbiBhIHJhbmRvbSBzd29yZD8gLSBtZXNzYWdlIDFjOjExXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uIHVubWFnaWMobWlkOiBzdHJpbmcpIHtcbiAgICByZXBsYWNlTWVzc2FnZShtaWQsIC90ZWFjaFxccyt5b3VcXHMrdGhlXFxzK21hZ2ljXFxzK29mLywgJ2Jlc3RvdyB1cG9uIHlvdSB0aGUnKTtcbiAgfVxuICBmdW5jdGlvbiBpdGVtKGlkOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGl0ZW0gPSBpdGVtZ2V0KGlkKTtcbiAgICByZXR1cm4gYFske2hleChpdGVtLmlkKX06JHtpdGVtLm1lc3NhZ2VOYW1lfV1gO1xuICB9XG4gIGZ1bmN0aW9uIHJlcGxhY2VNZXNzYWdlKG1pZDogc3RyaW5nLCBwYXQ6IHN0cmluZyB8IFJlZ0V4cCwgcmVwbDogc3RyaW5nKSB7XG4gICAgY29uc3QgW3BhcnQsIGluZGV4XSA9IG1pZC5zcGxpdCgnOicpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDE2KSk7XG4gICAgY29uc3QgbXNnID0gcm9tLm1lc3NhZ2VzLnBhcnRzW3BhcnRdW2luZGV4XTtcbiAgICBtc2cudGV4dCA9IG1zZy50ZXh0LnJlcGxhY2UocGF0LCByZXBsKTtcbiAgfVxuICBmdW5jdGlvbiBmaW5kTG9vdCguLi5sb2NzOiBudW1iZXJbXSkge1xuICAgIGZvciAoY29uc3QgaWQgb2YgbG9jcykge1xuICAgICAgY29uc3QgbG9jID0gcm9tLmxvY2F0aW9uc1tpZF07XG4gICAgICBmb3IgKGNvbnN0IHNwYXduIG9mIGxvYy5zcGF3bnMpIHtcbiAgICAgICAgaWYgKHNwYXduLmlzQ2hlc3QoKSAmJiBzcGF3bi5pZCA8IDB4NDggJiYgaXRlbWdldChzcGF3bi5pZCkudW5pcXVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNwYXduLmlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuICBmdW5jdGlvbiBpdGVtZ2V0KGlkOiBudW1iZXIpOiBJdGVtIHtcbiAgICBjb25zdCBpdGVtZ2V0ID0gcm9tLml0ZW1HZXRzW2lkXTtcbiAgICByZXR1cm4gcm9tLml0ZW1zW2l0ZW1nZXQuaXRlbUlkXTtcbiAgfVxuICBmdW5jdGlvbiBhY3Rpb25HcmFudChrZXk6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgZ3JhbnQgPSByb20uaXRlbUdldHMuYWN0aW9uR3JhbnRzLmdldChrZXkpO1xuICAgIGlmIChncmFudCA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgYWN0aW9uR3JhbnQgZm9yICR7aGV4KGtleSl9YCk7XG4gICAgcmV0dXJuIGdyYW50O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRUb3JuZWxUcmFkZUluKHRvcm5lbDogTnBjKTogbnVtYmVyIHtcbiAgLy8gRXhwZWN0ZWQgc3RydWN0dXJlOlxuICAvLyAgIC4uLlxuICAvLyAgIE5PVCBicmFjZWxldCAtPiAuLi5cbiAgLy8gICBOT1QgYmFsbCAtPiAuLi5cbiAgLy8gICAtPiBnaXZlIGl0ZW1cbiAgZm9yIChjb25zdCBkcyBvZiB0b3JuZWwubG9jYWxEaWFsb2dzLnZhbHVlcygpKSB7XG4gICAgZm9yIChsZXQgaSA9IDI7IGkgPCBkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IH5kc1tpXS5jb25kaXRpb247XG4gICAgICAvLyBMb29rIGZvciBhbnkgbmVnYXRpdmUgY29uZGl0aW9uIG9uIGEgYnJhY2VsZXQgKGRvZXNuJ3QgbWF0dGVyIHdoZXJlKVxuICAgICAgaWYgKGl0ZW0gPiAweDIwNCAmJiBpdGVtIDw9IDB4MjBjICYmICEoaXRlbSAmIDEpKSByZXR1cm4gaXRlbSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiAweDA2OyAvLyBkZWZhdWx0IHRvIHRvcm5hZG8gYnJhY2VsZXRcbn1cblxuZnVuY3Rpb24gdmFndWUoaWQ6IG51bWJlcik6IHN0cmluZyB7XG4gIHN3aXRjaCAoaWQpIHtcbiAgICBjYXNlIDB4MjU6IHJldHVybiAnYW4gdW51c3VhbCBzdGF0dWUnO1xuICAgIGNhc2UgMHgyODogcmV0dXJuICdhIHJhcmUgaW5zdHJ1bWVudCc7XG4gICAgY2FzZSAweDM1OiByZXR1cm4gJ2EgYnJpbGxpYW50IGxhbXAnO1xuICAgIGNhc2UgMHgzYjogcmV0dXJuICdhIGJlYXV0aWZ1bCBjaGFybSc7XG4gICAgY2FzZSAweDNjOiByZXR1cm4gJ2EgZnJhZ3JhbnQgcGxhbnQnO1xuICAgIGNhc2UgMHgzZDogcmV0dXJuICdhbiBleG90aWMgc3RhdHVlJztcbiAgfVxuICBmYWlsKCk7XG4gIHJldHVybiAnYSB2YWx1YWJsZSBpdGVtJztcbn1cblxuZnVuY3Rpb24gY29tbW9uTm91bihpZDogbnVtYmVyKTogc3RyaW5nIHtcbiAgc3dpdGNoIChpZCkge1xuICAgIGNhc2UgMHgyNTogcmV0dXJuICdzdGF0dWUnO1xuICAgIGNhc2UgMHgyODogcmV0dXJuICdpbnN0cnVtZW50JztcbiAgICBjYXNlIDB4MzU6IHJldHVybiAnbGFtcCc7XG4gICAgY2FzZSAweDNiOiByZXR1cm4gJ3BlbmRhbnQnO1xuICAgIGNhc2UgMHgzYzogcmV0dXJuICdwbGFudCc7XG4gICAgY2FzZSAweDNkOiByZXR1cm4gJ3N0YXR1ZSc7XG4gIH1cbiAgZmFpbCgpO1xuICByZXR1cm4gJ2l0ZW0nO1xufVxuXG5mdW5jdGlvbiBtdXN0R2V0PEssIFY+KG1hcDogTWFwPEssIFY+LCBrZXk6IEspOiBWIHtcbiAgY29uc3QgcmVzdWx0ID0gbWFwLmdldChrZXkpO1xuICBpZiAocmVzdWx0ID09IG51bGwpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdmFsdWUgZm9yICR7a2V5fWApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBmdW5jdGlvbiByZXBsYWNlRGlhbG9nKG5wYzogTnBjLCBvcmlnOiBudW1iZXIgfCBSZWdFeHAsIHJlcGxhY2VtZW50SWQ6IG51bWJlcikge1xuLy8gICBjb25zdCByb20gPSBucGMucm9tO1xuLy8gICBjb25zdCBwYXQgPSBvcmlnIGluc3RhbmNlb2YgUmVnRXhwID8gb3JpZyA6IHBhdHRlcm4ocm9tLml0ZW1zW29yaWddKTtcbi8vICAgY29uc3QgcmVwbCA9IHJlcGxhY2VtZW50KHJvbS5pdGVtc1tyZXBsYWNlbWVudElkXSk7XG4vLyAgIGZvciAoY29uc3QgZHMgb2YgbnBjLmxvY2FsRGlhbG9ncy52YWx1ZXMoKSkge1xuLy8gICAgIGZvciAoY29uc3QgZCBvZiBkcykge1xuLy8gICAgICAgY29uc3QgbWlkID0gZC5tZXNzYWdlO1xuLy8gICAgICAgcmVwbGFjZU1lc3NhZ2Uocm9tLCBtaWQucGFydCwgbWlkLmluZGV4LCBwYXQsIHJlcGwpO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuXG4vLyBjb25zdCBwYXR0ZXJuOiB7KGlkOiBudW1iZXIsIG5hbWU6IHN0cmluZyk6IFJlZ0V4cDtcbi8vICAgICAgICAgICAgICAgICAoaXRlbTogSXRlbSk6IFJlZ0V4cH0gPVxuLy8gICAgIChpdGVtOiBudW1iZXIgfCBJdGVtLCBuYW1lPzogc3RyaW5nKSA9PiB7XG4vLyAgICAgICBuYW1lID0gbmFtZSB8fCAoaXRlbSBhcyBJdGVtKS5tZXNzYWdlTmFtZTtcbi8vICAgICAgIGNvbnN0IGlkID0gaGV4KGl0ZW0gaW5zdGFuY2VvZiBJdGVtID8gaXRlbS5pZCA6IGl0ZW0pO1xuLy8gICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoYFxcXFxbJHtpZH06W15cXFxcXV0qXFxcXF18JHtuYW1lLnJlcGxhY2UoL1xccysvZywgJ1xcXFxzKycpfWAsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAnZycpO1xuLy8gICAgIH07XG5cbi8vIGZ1bmN0aW9uIHJlcGxhY2VtZW50KGl0ZW06IEl0ZW0pOiBzdHJpbmcge1xuLy8gICByZXR1cm4gYFske2hleChpdGVtLmlkKX06JHtpdGVtLm1lc3NhZ2VOYW1lfV1gO1xuLy8gfVxuIl19