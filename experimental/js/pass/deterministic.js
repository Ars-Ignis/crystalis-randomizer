import { Entrance, Exit, Flag, Spawn } from '../rom/location.js';
import { MessageId } from '../rom/messageid.js';
import { GlobalDialog, LocalDialog } from '../rom/npc.js';
import { ShopType } from '../rom/shop.js';
import { hex } from '../rom/util.js';
import { assert } from '../util.js';
const [] = [hex];
function write(arr, start, ...data) {
    for (let i = 0; i < data.length; i++) {
        arr[start + i] = data[i];
    }
}
export function deterministicPreParse(prg) {
    prg[0x1a594] = 0xff;
    prg[0x1cdc5] = 0xa8;
    prg[0x1a84c] = 0xff;
    prg[0x1e06b] &= 7;
    prg[0x1e06f] &= 7;
    prg[0x1e073] &= 7;
    prg[0x1e077] &= 7;
    prg[0x1e07b] &= 7;
    prg[0x1e084] &= 7;
    prg[0x1e09b] &= 7;
    prg[0x1e0b9] &= 7;
    prg[0x1e105] = 0x2f;
    prg[0x19bb1] = 0x70;
    prg[0x19bb5] = 0x71;
    prg[0x19a77] = 0x72;
    prg[0x19deb] = 0x73;
    prg[0x1a045] = 0x74;
    prg[0x1a0e1] = 0x75;
    prg[0x1a0e5] = 0x76;
    prg[0x1a0e9] = 0x77;
    prg[0x1a605] = 0x78;
    prg[0x1a3c1] = 0x79;
    prg[0x1a3c5] = 0x7a;
    prg[0x1a3c9] = 0x7b;
    write(prg, 0x1e0b7, 0xc0, 0x00);
    write(prg, 0x1c80d, 0xa2, 0xb3);
    prg[0x1aa86] = 0xfe;
}
export function deterministic(rom, flags) {
    addZombieWarp(rom);
    consolidateItemGrants(rom);
    addMezameTrigger(rom);
    normalizeSwords(rom, flags);
    fixCoinSprites(rom);
    fixChests(rom);
    autoBowOfTruth(rom);
    makeBraceletsProgressive(rom);
    addTowerExit(rom);
    reversibleSwanGate(rom);
    adjustGoaFortressTriggers(rom);
    preventNpcDespawns(rom, flags);
    leafElderInSabreHeals(rom);
    if (flags.requireHealedDolphinToRide())
        requireHealedDolphin(rom);
    if (flags.saharaRabbitsRequireTelepathy())
        requireTelepathyForDeo(rom);
    adjustItemNames(rom, flags);
    alarmFluteIsKeyItem(rom, flags);
    brokahanaWantsMado1(rom);
    if (flags.teleportOnThunderSword()) {
        teleportOnThunderSword(rom);
        rom.townWarp.thunderSwordWarp = [rom.locations.Shyron.id, 0x41];
    }
    else {
        noTeleportOnThunderSword(rom);
    }
    undergroundChannelLandBridge(rom);
    if (flags.fogLampNotRequired())
        fogLampNotRequired(rom, flags);
    if (flags.addEastCave()) {
        eastCave(rom, flags);
        if (flags.connectGoaToLeaf()) {
            connectGoaToLeaf(rom);
        }
    }
    else if (flags.connectLimeTreeToLeaf()) {
        connectLimeTreeToLeaf(rom);
    }
    evilSpiritIslandRequiresDolphin(rom);
    simplifyInvisibleChests(rom);
    addCordelWestTriggers(rom, flags);
    if (flags.disableRabbitSkip())
        fixRabbitSkip(rom);
    patchLimeTreeLake(rom);
    closeCaveEntrances(rom, flags);
    fixReverseWalls(rom);
    if (flags.chargeShotsOnly())
        disableStabs(rom);
    if (flags.orbsOptional())
        orbsOptional(rom);
    if (flags.noBowMode())
        noBowMode(rom);
    patchTooManyItemsMessage(rom);
}
function consolidateItemGrants(rom) {
    rom.items.GlowingLamp.itemUseData[0].message.action = 0x0b;
}
function addMezameTrigger(rom) {
    const trigger = rom.nextFreeTrigger();
    trigger.used = true;
    trigger.conditions = [~rom.flags.AlwaysTrue.id];
    trigger.message = MessageId.of({ action: 4 });
    trigger.flags = [rom.flags.AlwaysTrue.id];
    const mezame = rom.locations.MezameShrine;
    mezame.spawns.push(Spawn.of({ tile: 0x88, type: 2, id: trigger.id }));
}
function normalizeSwords(rom, flags) {
    rom.objects[0x10].atk = 3;
    rom.objects[0x11].atk = 6;
    rom.objects[0x12].atk = 8;
    rom.objects[0x18].atk = 3;
    rom.objects[0x13].atk = 5;
    rom.objects[0x19].atk = 5;
    rom.objects[0x17].atk = 7;
    rom.objects[0x1a].atk = 7;
    rom.objects[0x14].atk = 3;
    rom.objects[0x15].atk = 6;
    rom.objects[0x16].atk = 8;
    rom.objects[0x1c].atk = 3;
    rom.objects[0x1e].atk = 5;
    rom.objects[0x1b].atk = 7;
    rom.objects[0x1f].atk = 7;
    if (flags.slowDownTornado()) {
        const tornado = rom.objects[0x12];
        tornado.speed = 0x07;
        tornado.data[0x0c] = 0x60;
    }
}
function autoBowOfTruth(rom) {
    const trigger = rom.trigger(0xa0);
    trigger.used = true;
    trigger.conditions = [];
    trigger.flags = [];
    trigger.message = MessageId.of({ part: 0, index: 0, action: 0x15 });
}
function fixCoinSprites(rom) {
    for (const page of [0x60, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6f]) {
        for (const pat of [0, 1, 2]) {
            rom.patterns[page << 6 | pat].pixels = rom.patterns[0x5e << 6 | pat].pixels;
        }
    }
    rom.objects[0x0c].metasprite = 0xa9;
}
function fixReverseWalls(rom) {
    for (const t in [0x04, 0x05, 0x08, 0x09]) {
        rom.tileEffects[0xbc - 0xb3].effects[t] = 0x18;
        rom.tileEffects[0xb5 - 0xb3].effects[t] = 0x18;
    }
}
function undergroundChannelLandBridge(rom) {
    const { tiles } = rom.screens[0xa1];
    tiles[0x28] = 0x9f;
    tiles[0x37] = 0x23;
    tiles[0x38] = 0x23;
    tiles[0x39] = 0x21;
    tiles[0x47] = 0x8d;
    tiles[0x48] = 0x8f;
    tiles[0x56] = 0x99;
    tiles[0x57] = 0x9a;
    tiles[0x58] = 0x8c;
}
function fogLampNotRequired(rom, flags) {
    const { flags: { AlwaysTrue, InjuredDolphin, FogLamp, KensuInCabin, ReturnedFogLamp }, items: { ShellFlute }, locations: { BoatHouse, Portoa_FishermanHouse }, npcs, } = rom;
    const requireHealed = flags.requireHealedDolphinToRide();
    ShellFlute.itemUseData[0].want =
        requireHealed ? AlwaysTrue.id : InjuredDolphin.id;
    npcs.KensuInCabin.data[0] = 0x67;
    npcs.KensuInCabin.localDialogs.get(-1)[0].message.action = 0x0a;
    npcs.KensuInCabin.localDialogs.get(-1)[0].flags = [];
    npcs.KensuInCabin.spawnConditions.set(BoatHouse.id, [ReturnedFogLamp.id, ~KensuInCabin.id]);
    npcs.Fisherman.spawnConditions.set(Portoa_FishermanHouse.id, [FogLamp.id]);
    rom.itemGets[0x64].flags = [];
    rom.itemGets[0x67].copyFrom(rom.itemGets[0x64]);
}
function fixChests(rom) {
    for (const loc of rom.locations) {
        for (const s of loc.spawns) {
            if (s.isChest())
                s.timed = false;
        }
    }
}
function adjustGoaFortressTriggers(rom) {
    const l = rom.locations;
    l.GoaFortress_Kelbesque.spawns[0].x -= 16;
    l.GoaFortress_Zebu.spawns.splice(1, 1);
    l.GoaFortress_Tornel.spawns.splice(2, 1);
    l.GoaFortress_Asina.spawns.splice(2, 1);
    l.GoaFortress_Kensu.spawns.splice(3, 1);
    l.GoaFortress_Kensu.spawns.splice(1, 1);
}
function alarmFluteIsKeyItem(rom, flags) {
    const { items: { AlarmFlute }, flags: { TalkedToZebuStudent, ZebuStudent }, locations: { Leaf_StudentHouse, WaterfallCave4, ZebuCave }, npcs: { WindmillGuard, Zebu }, } = rom;
    rom.itemGets[0x31].inventoryRowStart = 0x20;
    AlarmFlute.unique = true;
    AlarmFlute.basePrice = 0;
    if (flags.zebuStudentGivesItem()) {
        WindmillGuard.data[1] = 0x31;
    }
    else {
        WindmillGuard.data[1] = 0xff;
        const dialog = WindmillGuard.dialog(Leaf_StudentHouse)[0];
        dialog.condition = ~TalkedToZebuStudent.id;
        dialog.flags.push(TalkedToZebuStudent.id);
        replace(Zebu.spawns(ZebuCave), ZebuStudent.id, TalkedToZebuStudent.id);
    }
    const replacements = [
        [0x21, 0.72],
        [0x1f, 0.9],
    ];
    let j = 0;
    for (const shop of rom.shops) {
        if (shop.type !== ShopType.TOOL)
            continue;
        for (let i = 0, len = shop.contents.length; i < len; i++) {
            if (shop.contents[i] !== 0x31)
                continue;
            const [item, priceRatio] = replacements[(j++) % replacements.length];
            shop.contents[i] = item;
            if (rom.shopDataTablesAddress) {
                shop.prices[i] = Math.round(shop.prices[i] * priceRatio);
            }
        }
    }
    rom.itemGets[0x5b].itemId = 0x1d;
    WaterfallCave4.spawn(0x19).id = 0x10;
}
function brokahanaWantsMado1(rom) {
    const { flags: { Karmine, Mado1 }, npcs: { Brokahana } } = rom;
    const dialog = assert(Brokahana.localDialogs.get(-1))[0];
    if (dialog.condition !== ~Karmine.id) {
        throw new Error(`Bad brokahana condition: ${dialog.condition}`);
    }
    dialog.condition = ~Mado1.id;
}
function requireHealedDolphin(rom) {
    const { flags: { InjuredDolphin, ShellFlute }, npcs: { Fisherman, FishermanDaughter }, } = rom;
    Fisherman.spawnConditions.set(0xd6, [ShellFlute.id, InjuredDolphin.id]);
    const daughterDialog = FishermanDaughter.localDialogs.get(-1);
    daughterDialog.unshift(daughterDialog[0].clone());
    daughterDialog[0].condition = ~InjuredDolphin.id;
    daughterDialog[1].condition = ~ShellFlute.id;
}
function requireTelepathyForDeo(rom) {
    const { flags: { Telepathy }, npcs: { Deo, SaharaBunny }, } = rom;
    SaharaBunny.globalDialogs.push(GlobalDialog.of(~Telepathy.id, [0x1a, 0x12]));
    Deo.globalDialogs.push(GlobalDialog.of(~Telepathy.id, [0x1a, 0x13]));
}
function teleportOnThunderSword(rom) {
    const { flags: { WarpShyron }, } = rom;
    rom.itemGets[0x03].flags.push(WarpShyron.id);
}
function noTeleportOnThunderSword(rom) {
    rom.itemGets[0x03].acquisitionAction.action = 0x16;
}
function adjustItemNames(rom, flags) {
    if (flags.leatherBootsGiveSpeed()) {
        const leatherBoots = rom.items[0x2f];
        leatherBoots.menuName = 'Speed Boots';
        leatherBoots.messageName = 'Speed Boots';
        if (flags.changeGasMaskToHazmatSuit()) {
            const gasMask = rom.items[0x29];
            gasMask.menuName = 'Hazmat Suit';
            gasMask.messageName = 'Hazmat Suit';
        }
    }
    for (let i = 0x05; i < 0x0c; i += 2) {
        rom.items[i].menuName = rom.items[i].menuName.replace('Ball', 'Orb');
        rom.items[i].messageName = rom.items[i].messageName.replace('Ball', 'Orb');
    }
}
function makeBraceletsProgressive(rom) {
    const { flags: { BallOfWind, TornadoBracelet }, npcs: { Tornel }, } = rom;
    const vanilla = Tornel.localDialogs.get(0x21);
    const patched = [
        vanilla[0],
        vanilla[2],
        vanilla[2].clone(),
        vanilla[1],
    ];
    patched[1].condition = ~TornadoBracelet.id;
    patched[2].condition = ~BallOfWind.id;
    patched[3].condition = ~0;
    Tornel.localDialogs.set(0x21, patched);
}
function simplifyInvisibleChests(rom) {
    const { CordelPlainEast, KirisaMeadow, UndergroundChannel } = rom.locations;
    for (const location of [CordelPlainEast, KirisaMeadow, UndergroundChannel]) {
        for (const spawn of location.spawns) {
            if (spawn.isChest())
                spawn.data[2] |= 0x20;
        }
    }
}
function addCordelWestTriggers(rom, flags) {
    const { CordelPlainEast, CordelPlainWest } = rom.locations;
    for (const spawn of CordelPlainEast.spawns) {
        if (spawn.isChest() || (flags.disableTeleportSkip() && spawn.isTrigger())) {
            CordelPlainWest.spawns.push(spawn.clone());
        }
    }
}
function fixRabbitSkip(rom) {
    for (const spawn of rom.locations.MtSabreNorth_Main.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x86) {
            if (spawn.x === 0x740) {
                spawn.x += 16;
                spawn.y += 16;
            }
        }
    }
}
function addTowerExit(rom) {
    const { TowerEntrance, Crypt_Teleporter } = rom.locations;
    const entrance = Crypt_Teleporter.entrances.length;
    const dest = Crypt_Teleporter.id;
    Crypt_Teleporter.entrances.push(Entrance.of({ tile: 0x68 }));
    TowerEntrance.exits.push(Exit.of({ tile: 0x57, dest, entrance }));
    TowerEntrance.exits.push(Exit.of({ tile: 0x58, dest, entrance }));
}
function connectLimeTreeToLeaf(rom) {
    const { ValleyOfWind, LimeTreeValley } = rom.locations;
    ValleyOfWind.screens[5][4] = 0x10;
    LimeTreeValley.screens[1][0] = 0x1a;
    LimeTreeValley.screens[2][0] = 0x0c;
    const windEntrance = ValleyOfWind.entrances.push(Entrance.of({ x: 0x4ef, y: 0x578 })) - 1;
    const limeEntrance = LimeTreeValley.entrances.push(Entrance.of({ x: 0x010, y: 0x1c0 })) - 1;
    ValleyOfWind.exits.push(Exit.of({ x: 0x4f0, y: 0x560, dest: 0x42, entrance: limeEntrance }), Exit.of({ x: 0x4f0, y: 0x570, dest: 0x42, entrance: limeEntrance }));
    LimeTreeValley.exits.push(Exit.of({ x: 0x000, y: 0x1b0, dest: 0x03, entrance: windEntrance }), Exit.of({ x: 0x000, y: 0x1c0, dest: 0x03, entrance: windEntrance }));
}
function closeCaveEntrances(rom, flags) {
    const { flags: { AlwaysTrue }, locations: { CordelPlainEast, CordelPlainWest, Desert2, GoaValley, KirisaMeadow, LimeTreeValley, SaharaOutsideCave, ValleyOfWind, WaterfallValleyNorth, WaterfallValleySouth, }, } = rom;
    ValleyOfWind.entrances[1].y += 16;
    rom.swapMetatiles([0x90], [0x07, [0x01, 0x00], ~0xc1], [0x0e, [0x02, 0x00], ~0xc1], [0x20, [0x03, 0x0a], ~0xd7], [0x21, [0x04, 0x0a], ~0xd7]);
    rom.swapMetatiles([0x94, 0x9c], [0x68, [0x01, 0x00], ~0xc1], [0x83, [0x02, 0x00], ~0xc1], [0x88, [0x03, 0x0a], ~0xd7], [0x89, [0x04, 0x0a], ~0xd7]);
    rom.screens[0x0a].tiles[0x38] = 0x01;
    rom.screens[0x0a].tiles[0x39] = 0x02;
    rom.screens[0x0a].tiles[0x48] = 0x03;
    rom.screens[0x0a].tiles[0x49] = 0x04;
    rom.screens[0x15].tiles[0x79] = 0x01;
    rom.screens[0x15].tiles[0x7a] = 0x02;
    rom.screens[0x15].tiles[0x89] = 0x03;
    rom.screens[0x15].tiles[0x8a] = 0x04;
    rom.screens[0x19].tiles[0x48] = 0x01;
    rom.screens[0x19].tiles[0x49] = 0x02;
    rom.screens[0x19].tiles[0x58] = 0x03;
    rom.screens[0x19].tiles[0x59] = 0x04;
    rom.screens[0x3e].tiles[0x56] = 0x01;
    rom.screens[0x3e].tiles[0x57] = 0x02;
    rom.screens[0x3e].tiles[0x66] = 0x03;
    rom.screens[0x3e].tiles[0x67] = 0x04;
    const flagsToClear = [
        [ValleyOfWind, 0x30],
        [CordelPlainWest, 0x30],
        [CordelPlainEast, 0x30],
        [WaterfallValleyNorth, 0x00],
        [WaterfallValleyNorth, 0x14],
        [WaterfallValleySouth, 0x74],
        [KirisaMeadow, 0x10],
        [SaharaOutsideCave, 0x00],
        [Desert2, 0x41],
    ];
    if (flags.addEastCave() && flags.connectLimeTreeToLeaf()) {
        flagsToClear.push([LimeTreeValley, 0x10]);
    }
    if (flags.connectGoaToLeaf()) {
        flagsToClear.push([GoaValley, 0x01]);
    }
    for (const [loc, yx] of flagsToClear) {
        loc.flags.push(Flag.of({ yx, flag: AlwaysTrue.id }));
    }
    function replaceFlag(loc, yx, flag) {
        for (const f of loc.flags) {
            if (f.yx === yx) {
                f.flag = flag;
                return;
            }
        }
        throw new Error(`Could not find flag to replace at ${loc}:${yx}`);
    }
    ;
    if (flags.paralysisRequiresPrisonKey()) {
        const windmillFlag = 0x2ee;
        replaceFlag(CordelPlainWest, 0x30, windmillFlag);
        replaceFlag(CordelPlainEast, 0x30, windmillFlag);
        replaceFlag(WaterfallValleyNorth, 0x00, 0x2d8);
        const explosion = Spawn.of({ y: 0x060, x: 0x060, type: 4, id: 0x2c });
        const keyTrigger = Spawn.of({ y: 0x070, x: 0x070, type: 2, id: 0xad });
        WaterfallValleyNorth.spawns.splice(1, 0, explosion);
        WaterfallValleyNorth.spawns.push(keyTrigger);
    }
}
function eastCave(rom, flags) {
    const { ValleyOfWind, LimeTreeValley, SealedCave1 } = rom.locations;
    const loc1 = rom.locations.allocate(rom.locations.EastCave1);
    const loc2 = rom.locations.allocate(rom.locations.EastCave2);
    const loc3 = rom.locations.EastCave3;
    loc1.screens = [[0x9c, 0x84, 0x80, 0x83, 0x9c],
        [0x80, 0x81, 0x83, 0x86, 0x80],
        [0x83, 0x88, 0x89, 0x80, 0x80],
        [0x81, 0x8c, 0x85, 0x82, 0x84],
        [0x9e, 0x85, 0x9c, 0x98, 0x86]];
    loc2.screens = [[0x9c, 0x84, 0x9b, 0x80, 0x9b],
        [0x80, 0x81, 0x81, 0x80, 0x81],
        [0x80, 0x87, 0x8b, 0x8a, 0x86],
        [0x80, 0x8c, 0x80, 0x85, 0x84],
        [0x9c, 0x86, 0x80, 0x80, 0x9a]];
    for (const l of [loc1, loc2, loc3]) {
        l.bgm = 0x17;
        l.entrances = [];
        l.exits = [];
        l.pits = [];
        l.spawns = [];
        l.flags = [];
        l.height = l.screens.length;
        l.width = l.screens[0].length;
        l.extended = 0;
        l.tilePalettes = [0x1a, 0x1b, 0x05];
        l.tileset = 0x88;
        l.tileEffects = 0xb5;
        l.tilePatterns = [0x14, 0x02];
        l.spritePatterns = [...SealedCave1.spritePatterns];
        l.spritePalettes = [...SealedCave1.spritePalettes];
    }
    ValleyOfWind.writeScreens2d(0x23, [
        [0x11, 0x0d],
        [0x09, 0xc2]
    ]);
    rom.tileEffects[0].effects[0xc0] = 0;
    loc1.connect(0x43, loc2, 0x44);
    loc1.connect(0x40, ValleyOfWind, 0x34);
    if (flags.connectLimeTreeToLeaf()) {
        LimeTreeValley.resizeScreens(0, 1, 0, 0);
        LimeTreeValley.writeScreens2d(0x00, [
            [0x0c, 0x11],
            [0x15, 0x36],
            [0x0e, 0x0f]
        ]);
        loc1.screens[0][4] = 0x97;
        loc1.connect(0x04, LimeTreeValley, 0x10);
    }
    loc1.spawns.push(Spawn.of({ screen: 0x21, tile: 0x87, timed: true, id: 0x2 }), Spawn.of({ screen: 0x12, tile: 0x88, timed: false, id: 0x2 }), Spawn.of({ screen: 0x13, tile: 0x89, timed: true, id: 0x2 }), Spawn.of({ screen: 0x32, tile: 0x68, timed: false, id: 0x2 }), Spawn.of({ screen: 0x41, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x33, tile: 0x98, timed: true, id: 0x2 }), Spawn.of({ screen: 0x03, tile: 0x88, timed: true, id: 0x2 }));
    loc2.spawns.push(Spawn.of({ screen: 0x01, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x11, tile: 0x48, timed: false, id: 0x2 }), Spawn.of({ screen: 0x12, tile: 0x77, timed: true, id: 0x2 }), Spawn.of({ screen: 0x14, tile: 0x28, timed: false, id: 0x2 }), Spawn.of({ screen: 0x23, tile: 0x85, timed: true, id: 0x2 }), Spawn.of({ screen: 0x31, tile: 0x88, timed: true, id: 0x2 }), Spawn.of({ screen: 0x33, tile: 0x8a, timed: false, id: 0x2 }), Spawn.of({ screen: 0x34, tile: 0x98, timed: true, id: 0x2 }), Spawn.of({ screen: 0x41, tile: 0x82, timed: true, id: 0x2 }));
    if (!flags.zebuStudentGivesItem()) {
        loc2.spawns.push(Spawn.of({ y: 0x110, x: 0x478, type: 2, id: 0x31 }));
    }
    if (flags.addExtraChecksToEastCave()) {
        loc2.spawns.push(Spawn.of({ y: 0x110, x: 0x478, type: 2, id: 0x59 }));
        loc2.spawns.push(Spawn.of({ y: 0x070, x: 0x108, type: 2, id: 0x70 }));
    }
}
function connectGoaToLeaf(rom) {
    const { GoaValley, EastCave2, EastCave3 } = rom.locations;
    GoaValley.writeScreens2d(0x00, [
        [0x0c, 0xc1, 0x0d],
        [0x0e, 0x37, 0x35]
    ]);
    rom.locations.allocate(EastCave3);
    EastCave3.screens = [[0x9a],
        [0x8f],
        [0x9e]];
    EastCave3.height = 3;
    EastCave3.width = 1;
    EastCave3.spawns.push(Spawn.from([0x18, 0x07, 0x23, 0x00]));
    EastCave3.flags.push(Flag.of({ screen: 0x10, flag: rom.flags.alloc(0x200) }));
    EastCave2.screens[4][0] = 0x99;
    EastCave2.connect(0x40, EastCave3, ~0x00);
    EastCave3.connect(0x20, GoaValley, 0x01);
}
function patchTooManyItemsMessage(rom) {
    rom.messages.parts[0x20][0x0f].text += '\nItem: [:ITEM:]';
}
function addZombieWarp(rom) {
    const { flags: { WarpZombie }, locations: { ZombieTown }, } = rom;
    rom.flags.insertZombieWarpFlag();
    const message = rom.messages.parts[0x21][0];
    message.text = [
        ' {1a:Leaf}      {16:Brynmaer} {1d:Oak} ',
        '{0c:Nadare}\'s  {1e:Portoa}   {14:Amazones} ',
        '{19:Joel}      Zombie   {20:Swan} ',
        '{23:Shyron}    {18:Goa}      {21:Sahara}',
    ].join('\n');
    const trigger = rom.nextFreeTrigger();
    trigger.used = true;
    trigger.conditions = [];
    trigger.message = MessageId.of({});
    trigger.flags = [WarpZombie.id];
    for (const spawn of ZombieTown.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x8a) {
            spawn.id = trigger.id;
        }
    }
    rom.townWarp.locations.splice(7, 0, ZombieTown.id);
    if (rom.townWarp.locations.pop() !== 0xff)
        throw new Error('unexpected');
}
function evilSpiritIslandRequiresDolphin(rom) {
    rom.trigger(0x8a).conditions = [~rom.flags.CurrentlyRidingDolphin.id];
    rom.messages.parts[0x1d][0x10].text = `The cave entrance appears
to be underwater. You'll
need to swim.`;
}
function reversibleSwanGate(rom) {
    const { flags: { OpenedSwanGate }, locations: { SwanGate }, npcs: { SoldierGuard }, } = rom;
    SwanGate.spawns.push(Spawn.of({ xt: 0x0a, yt: 0x02, type: 1, id: 0x2d }), Spawn.of({ xt: 0x0b, yt: 0x02, type: 1, id: 0x2d }));
    SoldierGuard.localDialogs.get(SwanGate.id)[0].flags.push(OpenedSwanGate.id);
}
function leafElderInSabreHeals(rom) {
    const leafElder = rom.npcs[0x0d];
    const summitDialog = leafElder.localDialogs.get(0x35)[0];
    summitDialog.message.action = 0x17;
}
function patchLimeTreeLake(rom) {
    rom.screens[0x74].setTiles(0x90, [
        [0x7c, 0x7f, 0x7c, 0x7f, 0x7c, 0x7f, 0x7c, 0x7d, 0x7e,
            0x7c, 0x7f, 0x7c, 0x7f, 0x7c, 0x7f, 0x7c],
        [0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, null, null,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30],
        [0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, null, null,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30],
    ]);
}
function preventNpcDespawns(rom, opts) {
    function remove(arr, elem) {
        const index = arr.indexOf(elem);
        if (index < 0)
            throw new Error(`Could not find element ${elem} in ${arr}`);
        arr.splice(index, 1);
    }
    function removeIf(arr, pred) {
        const index = arr.findIndex(pred);
        if (index < 0)
            throw new Error(`Could not find element in ${arr}`);
        arr.splice(index, 1);
    }
    const { locations: { BoatHouse, Brynmaer, Crypt_Draygon2, Joel_Shed, MtSabreNorth_SummitCave, MtSabreWest_Upper, PortoaPalace_ThroneRoom, Portoa_AsinaRoom, Portoa_FortuneTeller, Shyron_Temple, StomHouse, Swan_DanceHall, WindmillCave, WaterfallCave4, WaterfallValleyNorth, ZebuCave, ZombieTown_HouseBasement, }, items: { GlowingLamp, KeyToPrison, LovePendant, StatueOfOnyx, }, npcs: { Akahana, AkahanaInBrynmaer, Asina, AztecaInShyron, Clark, Draygon, FortuneTeller, Kensu, KensuInCabin, KensuInSwan, LeafRabbit, OakChild, OakElder, OakMother, PortoaPalaceFrontGuard, PortoaQueen, PortoaThroneRoomBackDoorGuard, Rage, Stom, StonedAkahana, Tornel, WindmillGuard, Zebu, }, flags, } = rom;
    KensuInSwan.link(Kensu.id);
    KensuInSwan.used = true;
    KensuInSwan.data = [...Kensu.data];
    Kensu.data[0] = GlowingLamp.id;
    Swan_DanceHall.spawns.find(s => s.isNpc() && s.id === Kensu.id).id =
        KensuInSwan.id;
    LovePendant.itemUseData[0].want = 0x100 | KensuInSwan.id;
    StonedAkahana.linkDialog(Akahana.id);
    AkahanaInBrynmaer.used = true;
    AkahanaInBrynmaer.link(Akahana.id);
    AkahanaInBrynmaer.data = [...Akahana.data];
    Brynmaer.spawns.find(s => s.isNpc() && s.id === Akahana.id).id =
        AkahanaInBrynmaer.id;
    StatueOfOnyx.itemUseData[0].want = 0x100 | AkahanaInBrynmaer.id;
    LeafRabbit.dialog()[2].condition = flags.RescuedLeafElder.id;
    LeafRabbit.dialog()[2].flags.push(flags.TalkedToLeafRabbit.id);
    LeafRabbit.dialog()[3].flags.push(flags.TalkedToLeafRabbit.id);
    WindmillGuard.spawns(WindmillCave)[1] =
        ~flags.WindmillGuardAlarmFluteTradein.id;
    remove(Akahana.spawns(WaterfallCave4), ~flags.BehindWhirlpool.id);
    remove(StonedAkahana.spawns(WaterfallCave4), ~flags.BehindWhirlpool.id);
    function reverseDialog(ds) {
        ds.reverse();
        for (let i = 0; i < ds.length; i++) {
            const next = ds[i + 1];
            ds[i].condition = next ? ~next.condition : ~0;
        }
    }
    ;
    OakElder.dialog()[0].message.action = 0x03;
    OakElder.dialog()[1].message.action = 0x03;
    OakElder.dialog()[2].message.action = 0x03;
    OakElder.dialog()[3].message.action = 0x03;
    (() => {
        const [killedInsect, gotItem, getItem, findChild] = OakMother.dialog();
        findChild.condition = ~flags.RescuedChild.id;
        gotItem.condition = ~0;
        OakMother.dialog().splice(0, 4, findChild, getItem, killedInsect, gotItem);
    })();
    for (const i of [0x20, 0x21, 0x22, 0x7c, 0x7d]) {
        reverseDialog(rom.npcs[i].dialog());
    }
    OakChild.dialog().unshift(...OakChild.dialog().splice(1, 1));
    PortoaThroneRoomBackDoorGuard.spawnConditions.set(PortoaPalace_ThroneRoom.id, [~flags.QueenNotInThroneRoom.id, ~flags.MesiaRecording.id]);
    PortoaPalaceFrontGuard.dialog()[1].condition = flags.MesiaRecording.id;
    PortoaQueen.dialog()[3].condition = flags.SwordOfWater.id;
    PortoaQueen.dialog()[3].message.action = 0x03;
    PortoaQueen.dialog()[4].flags.push(flags.PortoaQueenGoingAway.id);
    PortoaQueen.spawns(PortoaPalace_ThroneRoom)[1] = ~flags.MesiaRecording.id;
    PortoaQueen.spawns(Portoa_AsinaRoom)[0] = flags.MesiaRecording.id;
    PortoaQueen.dialog()[1].condition = flags.MesiaRecording.id;
    FortuneTeller.spawns(Portoa_FortuneTeller)[1] = ~flags.MesiaRecording.id;
    Clark.spawnConditions.set(ZombieTown_HouseBasement.id, [~flags.Clark.id]);
    Clark.spawnConditions.set(Joel_Shed.id, [flags.Clark.id]);
    Zebu.localDialogs.set(ZebuCave.id, [
        LocalDialog.of(~flags.TalkedToZebuInCave.id, [0x00, 0x1a], [flags.TalkedToZebuInCave.id]),
        LocalDialog.of(flags.LeafVillagersRescued.id, [0x00, 0x1d]),
        LocalDialog.of(flags.LeafAbduction.id, [0x00, 0x1c]),
        LocalDialog.of(flags.ZebuAtWindmill.id, [0x00, 0x1d]),
        LocalDialog.of(flags.UsedWindmillKey.id, [0x00, 0x1b, 0x03]),
        LocalDialog.of(~0, [0x00, 0x1d]),
    ]);
    remove(Zebu.spawns(ZebuCave), ~flags.BehindWhirlpool.id);
    Tornel.spawnConditions.delete(MtSabreWest_Upper.id);
    Stom.spawnConditions.delete(StomHouse.id);
    Asina.data[1] = rom.items.FluteOfLime.id;
    Asina.dialog(Portoa_AsinaRoom)[0].message.action = 0x11;
    Asina.dialog(Portoa_AsinaRoom)[2].message.action = 0x11;
    remove(Asina.spawns(Portoa_AsinaRoom), ~flags.CalmedAngrySea.id);
    KensuInCabin.spawnConditions.set(BoatHouse.id, [~flags.AbleToRideDolphin.id,
        flags.ReturnedFogLamp.id]);
    KensuInCabin.dialog()[0].message.action = 0x02;
    AztecaInShyron.spawns(Shyron_Temple).push(~flags.ShyronMassacre.id);
    rom.trigger(0x82).conditions.push(~flags.ShyronMassacre.id);
    Rage.dialog()[0].condition = flags.SwordOfWater.id;
    Draygon.spawnConditions.set(Crypt_Draygon2.id, [~flags.Draygon2.id]);
    Zebu.dialog(Shyron_Temple)
        .unshift(...Zebu.dialog(Shyron_Temple).splice(1, 1));
    rom.trigger(0x80).conditions = [
        ~flags.ShyronMassacre.id,
        flags.TalkedToZebuInShyron.id,
        flags.SwordOfThunder.id,
    ];
    rom.trigger(0x81).conditions = [];
    if (opts.barrierRequiresCalmSea()) {
        rom.trigger(0x84).conditions.push(flags.CalmedAngrySea.id);
    }
    rom.trigger(0x8c).conditions.push(flags.TalkedToZebuInCave.id);
    rom.trigger(0x8d).used = false;
    for (const spawn of MtSabreNorth_SummitCave.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x8d)
            spawn.id = 0xb2;
    }
    removeIf(WaterfallValleyNorth.spawns, spawn => spawn.isTrigger() && spawn.id === 0x8d);
    rom.trigger(0xb2).conditions.push(flags.Kelbesque1.id);
    rom.trigger(0xb2).flags.push(~flags.LeafVillagersCurrentlyAbducted.id, ~flags.LeafElderCurrentlyAbducted.id, flags.LeafVillagersRescued.id);
    rom.trigger(0x8c).conditions.push(~flags.Kelbesque1.id);
    rom.trigger(0x86).conditions.push(~flags.Kelbesque1.id);
    remove(KeyToPrison.itemUseData[0].flags, ~flags.LeafVillagersCurrentlyAbducted.id);
    rom.trigger(0xba).conditions[0] = ~flags.Teleport.id;
    rom.trigger(0xbb).conditions[1] = ~flags.MesiaRecording.id;
}
function disableStabs(rom) {
    for (const o of [0x08, 0x09, 0x27]) {
        rom.objects[o].collisionPlane = 0;
    }
    rom.npcs.Brokahana.data[0] = rom.items.FruitOfLime.id;
}
function orbsOptional(rom) {
    for (const obj of [0x10, 0x14, 0x18, 0x1d]) {
        rom.objects[obj].terrainSusceptibility &= ~0x04;
        rom.objects[obj].level = 2;
    }
}
function noBowMode(rom) {
    const { flags: { UsedBowOfTruth }, locations: { Crypt_Draygon2, Crypt_Hall2, MezameShrine }, } = rom;
    let trigger;
    for (const spawn of MezameShrine.spawns) {
        if (spawn.isTrigger() && spawn.tile === 0x88) {
            trigger = rom.trigger(spawn.id);
        }
    }
    if (!trigger)
        throw new Error(`Could not find start trigger`);
    trigger.flags.push(UsedBowOfTruth.id);
    rom.tileEffects[0xb9 - 0xb3].effects[0x58] = 0;
    MezameShrine.exits.push(Exit.of({ tile: 0x68, dest: Crypt_Draygon2.id, entrance: 0 }));
    for (let exit of Crypt_Draygon2.exits) {
        if (exit.dest === Crypt_Hall2.id) {
            exit.dest = MezameShrine.id;
            exit.entrance = 1;
        }
    }
    for (let exit of Crypt_Hall2.exits) {
        if (exit.dest === Crypt_Draygon2.id) {
            exit.dest = MezameShrine.id;
            exit.entrance = 0;
        }
    }
}
function replace(array, old, replacement) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] !== old)
            continue;
        array[i] = replacement;
        return;
    }
    throw new Error(`Could not find ${old} in ${array.join(',')}`);
}
//# sourceMappingURL=data:application/json;base64,