import { Entity, EntityArray } from './entity.js';
import { MessageId } from './messageid.js';
import { hex, readLittleEndian, readString, seq, writeLittleEndian, ITEM_USE_FLAGS, SPAWN_CONDITION_FLAGS } from './util.js';
import { assertNever } from '../util.js';
const ITEM_USE_JUMP_TABLE = 0x1c399;
const ITEM_USE_DATA_TABLE = 0x1dbe2;
const ITEM_DATA_TABLE = 0x20ff0;
const SELECTED_ITEM_TABLE = 0x2103b;
const VANILLA_PAWN_PRICE_TABLE = 0x21ec2;
const MENU_NAME_TABLE = 0x21086;
const MESSAGE_NAME_TABLE = 0x28a5c;
const MENU_NAME_ENCODE = [
    ['Sword', '\x0a\x0b\x0c'],
    [' of ', '\x5c\x5d'],
    ['Bracelet', '\x3c\x3d\x3e\x5b'],
    ['Shield', '\x0d\x0e\x0f'],
    ['Armor', '\x7b\x11\x12'],
    ['Magic', '\x23\x25\x28'],
    ['Power', '\x13\x14\x15'],
    ['Item', '\x16\x17\x5e'],
];
export class Item extends Entity {
    constructor(items, id, opts = {}) {
        super(items.rom, id);
        this.itemUseJump = 0;
        const rom = this.rom;
        items[id] = this;
        this.itemUseData = [];
        this.trades = opts.trades || [];
        this.use = opts.use || false;
        if (this.use) {
            this.itemUseJump = readLittleEndian(rom.prg, this.itemUseJumpPointer) + 0x14000;
            const entries = items.itemUseJumps[this.itemUseJump];
            if (!entries)
                throw new Error(`Bad ItemUseJump: ${this.itemUseJump}`);
            let itemUseOffset = readLittleEndian(rom.prg, this.itemUseDataPointer) + 0x14000;
            for (const entry of entries) {
                const data = ItemUse.from(entry, rom.prg, itemUseOffset);
                this.itemUseData.push(data);
                itemUseOffset += data.length;
            }
        }
        this.itemDataValue = rom.prg[this.itemDataPointer];
        this.selectedItemValue = rom.prg[this.selectedItemPointer];
        if (rom.shopDataTablesAddress != null) {
            const address = rom.shopDataTablesAddress +
                21 * rom.shopCount +
                2 * rom.scalingLevels +
                2 * (id - 0xd);
            this.basePrice = id >= 0xd && id < 0x27 ? readLittleEndian(rom.prg, address) : 0;
        }
        else {
            const address = VANILLA_PAWN_PRICE_TABLE + 2 * id;
            this.basePrice = readLittleEndian(rom.prg, address) * 2;
        }
        const messageNameBase = readLittleEndian(rom.prg, this.messageNamePointer) + 0x20000;
        this.messageName = readString(rom.prg, messageNameBase);
        const menuNameBase = readLittleEndian(rom.prg, this.menuNamePointer) + 0x18000;
        this.menuName = MENU_NAME_ENCODE.reduce((s, [d, e]) => s.replace(e, d), readString(rom.prg, menuNameBase, 0xff));
    }
    get itemUseJumpPointer() {
        return ITEM_USE_JUMP_TABLE + 2 * this.id;
    }
    get itemUseDataPointer() {
        return ITEM_USE_DATA_TABLE + 2 * this.id;
    }
    get itemDataPointer() {
        return ITEM_DATA_TABLE + this.id;
    }
    get selectedItemPointer() {
        return SELECTED_ITEM_TABLE + this.id;
    }
    get messageNamePointer() {
        return MESSAGE_NAME_TABLE + 2 * this.id;
    }
    get menuNamePointer() {
        return MENU_NAME_TABLE + 2 * this.id;
    }
    itemUseMessages() {
        const messages = new Map();
        for (const { message } of this.itemUseData) {
            messages.set(message.mid(), message);
        }
        return [...messages.values()];
    }
    setName(name) {
        this.messageName = this.menuName = name;
    }
    get palette() { return this.itemDataValue & 3; }
    set palette(p) { this.itemDataValue = this.itemDataValue & ~3 | (p & 3); }
    get unique() { return !!(this.itemDataValue & 0x40); }
    set unique(u) { this.itemDataValue = this.itemDataValue & ~0x40 | (u ? 0x40 : 0); }
    get worn() { return !!(this.itemDataValue & 0x20); }
    set worn(w) { this.itemDataValue = this.itemDataValue & ~0x20 | (w ? 0x20 : 0); }
    get solid() { return !!(this.itemDataValue & 0x80); }
    set solid(s) { this.itemDataValue = this.itemDataValue & ~0x80 | (s ? 0x80 : 0); }
    async write(writer) {
        writer.rom[this.itemDataPointer] = this.itemDataValue;
        writer.rom[this.selectedItemPointer] = this.selectedItemValue;
        if (this.rom.shopDataTablesAddress != null) {
            if (this.id >= 0xd && this.id < 0x27) {
                const address = this.rom.shopDataTablesAddress +
                    21 * this.rom.shopCount +
                    2 * this.rom.scalingLevels +
                    2 * (this.id - 0xd);
                writeLittleEndian(writer.rom, address, this.basePrice);
            }
        }
        else {
            const address = VANILLA_PAWN_PRICE_TABLE + 2 * this.id;
            writeLittleEndian(writer.rom, address, this.basePrice >>> 1);
        }
        const menuNameEncoded = MENU_NAME_ENCODE.reduce((s, [d, e]) => s.replace(d, e), this.menuName);
        const menuAddress = await writer.write([...stringToBytes(menuNameEncoded), 0xff], 0x20000, 0x21fff, `ItemMenuName ${hex(this.id)}`);
        writeLittleEndian(writer.rom, this.menuNamePointer, menuAddress - 0x18000);
        if (this.use) {
            writeLittleEndian(writer.rom, this.itemUseJumpPointer, this.itemUseJump - 0x14000);
            const itemUseData = [];
            for (const use of this.itemUseData) {
                itemUseData.push(...use.bytes());
            }
            const itemUseAddress = await writer.write(itemUseData, 0x1c000, 0x1ffff, `ItemUseData ${hex(this.id)}`);
            writeLittleEndian(writer.rom, this.itemUseDataPointer, itemUseAddress - 0x14000);
        }
    }
}
const stringToBytes = (s) => {
    return seq(s.length, i => s.charCodeAt(i));
};
export class ItemUse {
    constructor(kind, want, message, flags) {
        this.kind = kind;
        this.want = want;
        this.message = message;
        this.flags = flags;
    }
    static from(kind, data, offset) {
        let want = 0;
        if (kind === 'expect' || kind === 'screen') {
            want = data[offset + 1] << 8 | data[offset];
            offset += 2;
        }
        else if (kind === 'flag') {
            const flags = SPAWN_CONDITION_FLAGS.read(data, offset);
            if (!flags.length)
                flags.push(~0);
            if (flags.length > 1)
                throw new Error(`Flag list too long: ${flags}`);
            want = flags[0];
            offset += 2;
        }
        else if (kind === 'location') {
            want = data[offset++];
        }
        else if (kind !== 'empty') {
            assertNever(kind);
        }
        const message = MessageId.from(data, offset);
        const flags = ITEM_USE_FLAGS.read(data, offset + 2);
        return new ItemUse(kind, want, message, flags);
    }
    bytes() {
        const bytes = [];
        if (this.kind === 'expect' || this.kind === 'screen') {
            bytes.push(this.want & 0xff, (this.want >>> 8) & 0xff);
        }
        else if (this.kind === 'flag') {
            const flagBytes = SPAWN_CONDITION_FLAGS.bytes([this.want]);
            if (flagBytes.length !== 2)
                throw new Error(`bad data: ${flagBytes}`);
            bytes.push(...flagBytes);
        }
        else if (this.kind === 'location') {
            bytes.push(this.want);
        }
        else if (this.kind !== 'empty') {
            assertNever(this.kind);
        }
        bytes.push(...this.message.data);
        bytes.push(...ITEM_USE_FLAGS.bytes(this.flags));
        return bytes;
    }
    tradeNpc() {
        if (this.kind !== 'expect')
            return null;
        if ((this.want >>> 8) !== 1)
            return null;
        return this.want & 0xff;
    }
    get length() {
        const header = this.kind === 'empty' ? 0 : this.kind === 'location' ? 1 : 2;
        return 2 * (1 + Math.max(1, this.flags.length)) + header;
    }
}
export class Items extends EntityArray {
    constructor(rom) {
        super(0x49);
        this.rom = rom;
        this.itemUseJumps = DEFAULT_ITEM_USE_JUMPS;
        this.SwordOfWind = new Item(this, 0x00);
        this.SwordOfFire = new Item(this, 0x01);
        this.SwordOfWater = new Item(this, 0x02);
        this.SwordOfThunder = new Item(this, 0x03);
        this.Crystalis = new Item(this, 0x04);
        this.BallOfWind = new Item(this, 0x05);
        this.TornadoBracelet = new Item(this, 0x06);
        this.BallOfFire = new Item(this, 0x07);
        this.FlameBracelet = new Item(this, 0x08);
        this.BallOfWater = new Item(this, 0x09);
        this.BlizzardBracelet = new Item(this, 0x0a);
        this.BallOfThunder = new Item(this, 0x0b);
        this.StormBracelet = new Item(this, 0x0c);
        this.CarapaceShield = new Item(this, 0x0d);
        this.BronzeShield = new Item(this, 0x0e);
        this.PlatinumShield = new Item(this, 0x0f);
        this.MirroredShield = new Item(this, 0x10);
        this.CeramicShield = new Item(this, 0x11);
        this.SacredShield = new Item(this, 0x12);
        this.BattleShield = new Item(this, 0x13);
        this.PsychoShield = new Item(this, 0x14);
        this.TannedHide = new Item(this, 0x15);
        this.LeatherArmor = new Item(this, 0x16);
        this.BronzeArmor = new Item(this, 0x17);
        this.PlatinumArmor = new Item(this, 0x18);
        this.SoldierSuit = new Item(this, 0x19);
        this.CeramicSuit = new Item(this, 0x1a);
        this.BattleArmor = new Item(this, 0x1b);
        this.PsychoArmor = new Item(this, 0x1c);
        this.MedicalHerb = new Item(this, 0x1d, { use: true, trades: [0] });
        this.Antidote = new Item(this, 0x1e, { use: true });
        this.LysisPlant = new Item(this, 0x1f, { use: true });
        this.FruitOfLime = new Item(this, 0x20, { use: true });
        this.FruitOfPower = new Item(this, 0x21, { use: true });
        this.MagicRing = new Item(this, 0x22, { use: true });
        this.FruitOfRepun = new Item(this, 0x23, { use: true });
        this.WarpBoots = new Item(this, 0x24, { use: true });
        this.StatueOfOnyx = new Item(this, 0x25, { use: true, trades: [0] });
        this.OpelStatue = new Item(this, 0x26, { use: true });
        this.InsectFlute = new Item(this, 0x27, { use: true });
        this.FluteOfLime = new Item(this, 0x28, { use: true,
            trades: [0, 1, 2, 3] });
        this.GasMask = new Item(this, 0x29);
        this.PowerRing = new Item(this, 0x2a);
        this.WarriorRing = new Item(this, 0x2b);
        this.IronNecklace = new Item(this, 0x2c);
        this.DeosPendant = new Item(this, 0x2d);
        this.RabbitBoots = new Item(this, 0x2e);
        this.LeatherBoots = new Item(this, 0x2f);
        this.ShieldRing = new Item(this, 0x30);
        this.AlarmFlute = new Item(this, 0x31, { use: true, trades: [0, 1] });
        this.WindmillKey = new Item(this, 0x32, { use: true });
        this.KeyToPrison = new Item(this, 0x33, { use: true });
        this.KeyToStyx = new Item(this, 0x34, { use: true });
        this.FogLamp = new Item(this, 0x35, { use: true, trades: [0] });
        this.ShellFlute = new Item(this, 0x36, { use: true });
        this.EyeGlasses = new Item(this, 0x37, { use: true });
        this.BrokenStatue = new Item(this, 0x38, { use: true });
        this.GlowingLamp = new Item(this, 0x39, { use: true });
        this.StatueOfGold = new Item(this, 0x3a, { use: true });
        this.LovePendant = new Item(this, 0x3b, { use: true, trades: [0] });
        this.KirisaPlant = new Item(this, 0x3c, { use: true, trades: [0] });
        this.IvoryStatue = new Item(this, 0x3d, { use: true, trades: [0] });
        this.BowOfMoon = new Item(this, 0x3e, { use: true });
        this.BowOfSun = new Item(this, 0x3f, { use: true });
        this.BowOfTruth = new Item(this, 0x40, { use: true });
        this.Refresh = new Item(this, 0x41);
        this.Paralysis = new Item(this, 0x42);
        this.Telepathy = new Item(this, 0x43);
        this.Teleport = new Item(this, 0x44);
        this.Recover = new Item(this, 0x45);
        this.Barrier = new Item(this, 0x46);
        this.Change = new Item(this, 0x47);
        this.Flight = new Item(this, 0x48);
    }
    async write(writer) {
        const promises = [];
        for (const item of this) {
            promises.push(item.write(writer));
        }
        await Promise.all(promises);
    }
}
const DEFAULT_ITEM_USE_JUMPS = {
    0x1c439: ['expect'],
    0x1c442: ['screen'],
    0x1c450: ['empty'],
    0x1c451: ['screen'],
    0x1c45f: ['location'],
    0x1c491: ['expect'],
    0x1c4a9: ['expect', 'expect'],
    0x1c4b3: ['location'],
    0x1c4d0: ['expect'],
    0x1c4db: [],
    0x1c4e0: ['expect', 'empty'],
    0x1c507: ['empty'],
    0x1c51d: ['empty'],
    0x1c524: ['empty'],
    0x1c52f: ['empty'],
    0x1c53a: ['empty'],
    0x1c54a: ['empty'],
    0x1c564: ['empty'],
    0x1c565: ['expect'],
    0x1c56b: ['flag'],
    0x1c585: ['empty'],
    0x1c59e: ['expect', 'expect', 'expect', 'expect'],
};
//# sourceMappingURL=data:application/json;base64,