export var Path;
(function (Path) {
    function* generate(random, forward, right) {
        while (true) {
            yield generatePath(random, forward, right);
        }
    }
    Path.generate = generate;
})(Path || (Path = {}));
function* generatePath(random, forward, right) {
    function advance() {
        forward--;
        return 0;
    }
    function turnLeft() {
        [forward, right] = [-right, forward - 1];
        return -1;
    }
    function turnRight() {
        [forward, right] = [right, 1 - forward];
        return 1;
    }
    while (forward !== 1 || right !== 0) {
        if (forward > 0 && random.next() < 0.5) {
            yield advance();
            if (forward > 2 && random.next() < 0.5)
                yield advance();
            continue;
        }
        if (random.next() < (forward < 0 ? 0.1 : 0.5)) {
            yield advance();
            continue;
        }
        if (right > 0) {
            yield turnRight();
            continue;
        }
        if (right < 0) {
            yield turnLeft();
            continue;
        }
        yield (random.next() < 0.5 ? turnLeft() : turnRight());
    }
}
export var DirMask;
(function (DirMask) {
    function of(...dirs) {
        let mask = 0;
        for (let dir of dirs) {
            mask |= (1 << dir);
        }
        return mask;
    }
    DirMask.of = of;
})(DirMask || (DirMask = {}));
export var Dir;
(function (Dir) {
    Dir.ALL = [0, 1, 2, 3];
    Dir.DELTA = [-16, 1, 16, -1];
    function inv(dir) {
        return (dir ^ 2);
    }
    Dir.inv = inv;
    function edgeMask(dir) {
        return 0xf << (dir << 2);
    }
    Dir.edgeMask = edgeMask;
    function shift(dir) {
        return dir << 2;
    }
    Dir.shift = shift;
    function turn(dir, change) {
        return ((dir + change) & 3);
    }
    Dir.turn = turn;
    function* allEdge(dir, height, width) {
        const extent = dir ? height << 4 : width;
        const incr = dir & 1 ? 16 : 1;
        const start = dir === Dir.RIGHT ? width - 1 : dir === Dir.DOWN ? (height - 1) << 4 : 0;
        for (let i = start; i < extent; i += incr) {
            yield i;
        }
    }
    Dir.allEdge = allEdge;
    Dir.UP = 0;
    Dir.RIGHT = 1;
    Dir.DOWN = 2;
    Dir.LEFT = 3;
})(Dir || (Dir = {}));
export var Pos;
(function (Pos) {
    function plus(pos, dir) {
        return (pos + Dir.DELTA[dir]);
    }
    Pos.plus = plus;
    function relative(p1, d1, p2) {
        const dy = (p2 >>> 4) - (p1 >>> 4);
        const dx = (p2 & 0xf) - (p1 & 0xf);
        if (d1 === 0)
            return [-dy, dx];
        if (d1 === 1)
            return [dx, dy];
        if (d1 === 2)
            return [dy, -dx];
        if (d1 === 3)
            return [-dx, -dy];
        throw new Error(`impossible: ${d1}`);
    }
    Pos.relative = relative;
})(Pos || (Pos = {}));
export var Scr;
(function (Scr) {
    function edge(screen, dir) {
        return (screen >>> (dir << 2)) & 0xf;
    }
    Scr.edge = edge;
    function numExits(screen) {
        let count = 0;
        for (let i = 0; i < 4; i++) {
            if (screen & 0xf)
                count++;
            screen = (screen >>> 4);
        }
        return count;
    }
    Scr.numExits = numExits;
    function fromExits(dirMask, exitType) {
        let screen = 0;
        for (let i = 0; i < 4; i++) {
            screen <<= 4;
            if (dirMask & 8)
                screen |= exitType;
            dirMask = ((dirMask & 7) << 1);
        }
        return screen;
    }
    Scr.fromExits = fromExits;
})(Scr || (Scr = {}));
//# sourceMappingURL=data:application/json;base64,