import { AdHocSpawn } from './rom/adhocspawn.js';
import { BossKill } from './rom/bosskill.js';
import { Bosses } from './rom/bosses.js';
import { Hitbox } from './rom/hitbox.js';
import { Item } from './rom/item.js';
import { ItemGet } from './rom/itemget.js';
import { Locations } from './rom/locations.js';
import { Messages } from './rom/messages.js';
import { Metasprite } from './rom/metasprite.js';
import { Monster } from './rom/monster.js';
import { Npc } from './rom/npc.js';
import { Objects } from './rom/objects.js';
import { RomOption } from './rom/option.js';
import { Palette } from './rom/palette.js';
import { Pattern } from './rom/pattern.js';
import { Screen } from './rom/screen.js';
import { Shop } from './rom/shop.js';
import { Telepathy } from './rom/telepathy.js';
import { TileAnimation } from './rom/tileanimation.js';
import { TileEffects } from './rom/tileeffects.js';
import { Tileset } from './rom/tileset.js';
import { Trigger } from './rom/trigger.js';
import { hex, seq } from './rom/util.js';
import { WildWarp } from './rom/wildwarp.js';
import { Writer } from './rom/writer.js';
import { UnionFind } from './unionfind.js';
export class Rom {
    constructor(rom) {
        const prgSize = rom[4] * 0x4000;
        const prgStart = 0x10 + (rom[6] & 4 ? 512 : 0);
        const prgEnd = prgStart + prgSize;
        this.prg = rom.subarray(prgStart, prgEnd);
        this.chr = rom.subarray(prgEnd);
        this.shopCount = Rom.SHOP_COUNT.get(rom);
        this.scalingLevels = Rom.SCALING_LEVELS.get(rom);
        this.uniqueItemTableAddress = Rom.UNIQUE_ITEM_TABLE.get(rom);
        this.shopDataTablesAddress = Rom.SHOP_DATA_TABLES.get(rom);
        this.telepathyTablesAddress = Rom.TELEPATHY_TABLES.get(rom);
        this.omitItemGetDataSuffix = Rom.OMIT_ITEM_GET_DATA_SUFFIX.get(rom);
        this.omitLocalDialogSuffix = Rom.OMIT_LOCAL_DIALOG_SUFFIX.get(rom);
        this.compressedMapData = Rom.COMPRESSED_MAPDATA.get(rom);
        for (const [address, old, value] of ADJUSTMENTS) {
            if (this.prg[address] === old)
                this.prg[address] = value;
        }
        this.screens = seq(0x103, i => new Screen(this, i));
        this.tilesets = seq(12, i => new Tileset(this, i << 2 | 0x80));
        this.tileEffects = seq(11, i => new TileEffects(this, i + 0xb3));
        this.triggers = seq(0x43, i => new Trigger(this, 0x80 | i));
        this.patterns = seq(this.chr.length >> 4, i => new Pattern(this, i));
        this.palettes = seq(0x100, i => new Palette(this, i));
        this.locations = new Locations(this);
        this.tileAnimations = seq(4, i => new TileAnimation(this, i));
        this.hitboxes = seq(24, i => new Hitbox(this, i));
        this.objects = new Objects(this);
        this.adHocSpawns = seq(0x60, i => new AdHocSpawn(this, i));
        this.metasprites = seq(0x100, i => new Metasprite(this, i));
        this.messages = new Messages(this);
        this.telepathy = new Telepathy(this);
        this.itemGets = seq(0x71, i => new ItemGet(this, i));
        this.items = seq(0x49, i => new Item(this, i));
        this.shops = seq(44, i => new Shop(this, i));
        this.npcs = seq(0xcd, i => new Npc(this, i));
        this.bossKills = seq(0xe, i => new BossKill(this, i));
        this.bosses = new Bosses(this);
        this.wildWarp = new WildWarp(this);
    }
    trigger(id) {
        if (id < 0x80 || id > 0xff)
            throw new Error(`Bad trigger id $${hex(id)}`);
        return this.triggers[id & 0x7f];
    }
    tileset(id) {
        if (id < 0x80 || id > 0xac || id & 3)
            throw new Error(`Bad tileset id $${hex(id)}`);
        return this.tilesets[(id & 0x7f) >>> 2];
    }
    get projectiles() {
        const projectiles = new Set();
        for (const m of this.objects.filter(o => o instanceof Monster)) {
            if (m.child) {
                projectiles.add(this.objects[this.adHocSpawns[m.child].objectId]);
            }
        }
        return [...projectiles].sort((x, y) => (x.id - y.id));
    }
    get monsterGraphics() {
        const gfx = {};
        for (const l of this.locations) {
            if (!l.used || !l.hasSpawns)
                continue;
            for (const o of l.spawns) {
                if (!(o.data[2] & 7)) {
                    const slot = o.data[2] & 0x80 ? 1 : 0;
                    const id = hex(o.data[3] + 0x50);
                    const data = gfx[id] = gfx[id] || {};
                    data[`${slot}:${l.spritePatterns[slot].toString(16)}:${l.spritePalettes[slot].toString(16)}`]
                        = { pal: l.spritePalettes[slot],
                            pat: l.spritePatterns[slot],
                            slot,
                        };
                }
            }
        }
        return gfx;
    }
    get locationMonsters() {
        const m = {};
        for (const l of this.locations) {
            if (!l.used || !l.hasSpawns)
                continue;
            const s = m['$' + hex(l.id)] = {};
            for (const o of l.spawns) {
                if (!(o.data[2] & 7)) {
                    const slot = o.data[2] & 0x80 ? 1 : 0;
                    const id = o.data[3] + 0x50;
                    s[`${slot}:${id.toString(16)}`] =
                        (s[`${slot}:${id.toString(16)}`] || 0) + 1;
                }
            }
        }
        return m;
    }
    async writeData() {
        Rom.SHOP_COUNT.set(this.prg, this.shopCount);
        Rom.SCALING_LEVELS.set(this.prg, this.scalingLevels);
        Rom.UNIQUE_ITEM_TABLE.set(this.prg, this.uniqueItemTableAddress);
        Rom.SHOP_DATA_TABLES.set(this.prg, this.shopDataTablesAddress);
        Rom.OMIT_ITEM_GET_DATA_SUFFIX.set(this.prg, this.omitItemGetDataSuffix);
        Rom.OMIT_LOCAL_DIALOG_SUFFIX.set(this.prg, this.omitLocalDialogSuffix);
        Rom.COMPRESSED_MAPDATA.set(this.prg, this.compressedMapData);
        const writer = new Writer(this.prg, this.chr);
        writer.alloc(0x144f8, 0x17e00);
        writer.alloc(0x193f9, 0x1ac00);
        writer.alloc(0x1ae00, 0x1bd00);
        writer.alloc(0x1c77a, 0x1c95d);
        writer.alloc(0x1cae5, 0x1d8f4);
        writer.alloc(0x1dde6, 0x1e065);
        writer.alloc(0x1e200, 0x1e3c0);
        writer.alloc(0x2111a, 0x21468);
        writer.alloc(0x2a000, 0x2fc00);
        if (this.telepathyTablesAddress) {
            writer.alloc(0x1d8f4, 0x1db00);
        }
        else {
            writer.alloc(0x1da4c, 0x1db00);
        }
        const promises = [];
        const writeAll = (writables) => {
            for (const w of writables) {
                promises.push(w.write(writer));
            }
        };
        writeAll(this.locations);
        writeAll(this.objects);
        writeAll(this.hitboxes);
        writeAll(this.triggers);
        writeAll(this.npcs);
        writeAll(this.tilesets);
        writeAll(this.tileEffects);
        writeAll(this.screens);
        writeAll(this.adHocSpawns);
        writeAll(this.itemGets);
        writeAll(this.items);
        writeAll(this.shops);
        writeAll(this.bossKills);
        writeAll(this.patterns);
        this.wildWarp.write(writer);
        promises.push(this.telepathy.write(writer));
        promises.push(this.messages.write(writer));
        promises.push(writer.commit());
        await Promise.all(promises).then(() => undefined);
    }
    analyzeTiles() {
    }
    disjointTilesets() {
        const tilesetByScreen = [];
        for (const loc of this.locations) {
            if (!loc.used)
                continue;
            const tileset = loc.tileset;
            const ext = loc.extended ? 0x100 : 0;
            for (const row of loc.screens) {
                for (const s of row) {
                    (tilesetByScreen[s + ext] || (tilesetByScreen[s + ext] = new Set())).add(tileset);
                }
            }
        }
        const tiles = seq(256, () => new UnionFind());
        for (let s = 0; s < tilesetByScreen.length; s++) {
            if (!tilesetByScreen[s])
                continue;
            for (const t of this.screens[s].allTilesSet()) {
                tiles[t].union([...tilesetByScreen[s]]);
            }
        }
        for (let t = 0; t < tiles.length; t++) {
            const p = tiles[t].sets()
                .map((s) => [...s].map(hex).join(' '))
                .join(' | ');
            console.log(`Tile ${hex(t)}: ${p}`);
        }
    }
    swapMetatiles(tilesets, ...cycles) {
        const rev = new Map();
        const revArr = seq(0x100);
        const alt = new Map();
        const cpl = (x) => Array.isArray(x) ? x[0] : x < 0 ? ~x : x;
        for (const cycle of cycles) {
            for (let i = 0; i < cycle.length - 1; i++) {
                if (Array.isArray(cycle[i])) {
                    const arr = cycle[i];
                    alt.set(arr[0], arr[1]);
                    cycle[i] = arr[0];
                }
            }
            for (let i = 0; i < cycle.length - 1; i++) {
                const j = cycle[i];
                const k = cycle[i + 1];
                if (j < 0 || k < 0)
                    continue;
                rev.set(k, j);
                revArr[k] = j;
            }
        }
        const screens = new Set();
        const tileEffects = new Set();
        const tilesetsSet = new Set(tilesets);
        for (const l of this.locations) {
            if (!l.used)
                continue;
            if (!tilesetsSet.has(l.tileset))
                continue;
            tileEffects.add(l.tileEffects);
            for (const screen of l.allScreens()) {
                screens.add(screen);
            }
        }
        for (const screen of screens) {
            for (let i = 0, len = screen.tiles.length; i < len; i++) {
                screen.tiles[i] = revArr[screen.tiles[i]];
            }
        }
        for (const tsid of tilesetsSet) {
            const tileset = this.tilesets[(tsid & 0x7f) >>> 2];
            for (const cycle of cycles) {
                for (let i = 0; i < cycle.length - 1; i++) {
                    const a = cpl(cycle[i]);
                    const b = cpl(cycle[i + 1]);
                    for (let j = 0; j < 4; j++) {
                        tileset.tiles[j][a] = tileset.tiles[j][b];
                    }
                    tileset.attrs[a] = tileset.attrs[b];
                    if (b < 0x20 && tileset.alternates[b] !== b) {
                        if (a >= 0x20)
                            throw new Error(`Cannot unflag: ${tsid} ${a} ${b} ${tileset.alternates[b]}`);
                        tileset.alternates[a] = tileset.alternates[b];
                    }
                }
            }
            for (const [a, b] of alt) {
                tileset.alternates[a] = b;
            }
        }
        for (const teid of tileEffects) {
            const tileEffect = this.tileEffects[teid - 0xb3];
            for (const cycle of cycles) {
                for (let i = 0; i < cycle.length - 1; i++) {
                    const a = cpl(cycle[i]);
                    const b = cpl(cycle[i + 1]);
                    tileEffect.effects[a] = tileEffect.effects[b];
                }
            }
            for (const a of alt.keys()) {
                tileEffect.effects[a] |= 0x08;
            }
        }
    }
    static async load(patch, receiver) {
        const file = await pickFile(receiver);
        if (patch)
            await patch(file);
        return new Rom(file);
    }
}
Rom.OMIT_ITEM_GET_DATA_SUFFIX = RomOption.bit(0x142c0, 0);
Rom.OMIT_LOCAL_DIALOG_SUFFIX = RomOption.bit(0x142c0, 1);
Rom.COMPRESSED_MAPDATA = RomOption.bit(0x142c0, 2);
Rom.SHOP_COUNT = RomOption.byte(0x142c1);
Rom.SCALING_LEVELS = RomOption.byte(0x142c2);
Rom.UNIQUE_ITEM_TABLE = RomOption.address(0x142d0);
Rom.SHOP_DATA_TABLES = RomOption.address(0x142d3);
Rom.TELEPATHY_TABLES = RomOption.address(0x142d6);
function pickFile(receiver) {
    if (!receiver)
        receiver = picker => document.body.appendChild(picker);
    return new Promise((resolve) => {
        if (window.location.hash !== '#reset') {
            const data = localStorage.getItem('rom');
            if (data) {
                return resolve(Uint8Array.from(new Array(data.length / 2).fill(0).map((_, i) => Number.parseInt(data[2 * i] + data[2 * i + 1], 16))));
            }
        }
        const upload = document.createElement('input');
        document.body.appendChild(upload);
        upload.type = 'file';
        upload.addEventListener('change', () => {
            const file = upload.files[0];
            const reader = new FileReader();
            reader.addEventListener('loadend', () => {
                const arr = new Uint8Array(reader.result);
                const str = Array.from(arr, hex).join('');
                localStorage.setItem('rom', str);
                upload.remove();
                resolve(arr);
            });
            reader.readAsArrayBuffer(file);
        });
    });
}
export const EXPECTED_CRC32 = 0x1bd39032;
const ADJUSTMENTS = [
    [0x13646, 0x02, 0x06],
    [0x1456a, 0x00, 0xff],
    [0x14aeb, 0x09, 0xff],
    [0x14db9, 0x08, 0x80],
    [0x1545d, 0xff, 0x00],
    [0x15baf, 0xf0, 0x80],
    [0x15bb6, 0xdf, 0x80],
    [0x15bb7, 0x96, 0x80],
    [0x164ff, 0x0b, 0x0a],
    [0x1782a, 0x10, 0x01],
    [0x17857, 0x10, 0x01],
    [0x19f02, 0x40, 0x80],
    [0x19f03, 0x33, 0x32],
    [0x1cf05, 0x47, 0x48],
    [0x1d311, 0x20, 0xa0],
    [0x1d312, 0x30, 0x00],
    [0x1cff9, 0x60, 0xe0],
    [0x2ca90, 0x02, 0x00],
    [0x2f573, 0x02, 0x00],
    [0x2fae4, 0x5f, 0x00],
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL3JvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuQyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFakMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRW5DLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUM3QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0s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QUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBVTtRQUNoQixJQUFJLEVBQUUsR0FBRyxJQUFJLElB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SUFBSSxFQUFFLElBQUksQ0FBQztJQUVyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBRXJCLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFFckIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztJQUVyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBRXJCLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDckIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztJQUNyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBRXJCLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFFckIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztJQUNyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBRXJCLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDckIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztJQUVyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBRXJCLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDckIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztJQUdyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBRXJCLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFFckIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztJQUVyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWRIb2NTcGF3bn0gZnJvbSAnLi9yb20vYWRob2NzcGF3bi5qcyc7XG5pbXBvcnQge0Jvc3NLaWxsfSBmcm9tICcuL3JvbS9ib3Nza2lsbC5qcyc7XG5pbXBvcnQge0Jvc3Nlc30gZnJvbSAnLi9yb20vYm9zc2VzLmpzJztcbmltcG9ydCB7SGl0Ym94fSBmcm9tICcuL3JvbS9oaXRib3guanMnO1xuaW1wb3J0IHtJdGVtfSBmcm9tICcuL3JvbS9pdGVtLmpzJztcbmltcG9ydCB7SXRlbUdldH0gZnJvbSAnLi9yb20vaXRlbWdldC5qcyc7XG5pbXBvcnQge0xvY2F0aW9uc30gZnJvbSAnLi9yb20vbG9jYXRpb25zLmpzJztcbmltcG9ydCB7TWVzc2FnZXN9IGZyb20gJy4vcm9tL21lc3NhZ2VzLmpzJztcbmltcG9ydCB7TWV0YXNwcml0ZX0gZnJvbSAnLi9yb20vbWV0YXNwcml0ZS5qcyc7XG5pbXBvcnQge01vbnN0ZXJ9IGZyb20gJy4vcm9tL21vbnN0ZXIuanMnO1xuaW1wb3J0IHtOcGN9IGZyb20gJy4vcm9tL25wYy5qcyc7XG5pbXBvcnQge09iamVjdERhdGF9IGZyb20gJy4vcm9tL29iamVjdGRhdGEuanMnO1xuaW1wb3J0IHtPYmplY3RzfSBmcm9tICcuL3JvbS9vYmplY3RzLmpzJztcbmltcG9ydCB7Um9tT3B0aW9ufSBmcm9tICcuL3JvbS9vcHRpb24uanMnO1xuaW1wb3J0IHtQYWxldHRlfSBmcm9tICcuL3JvbS9wYWxldHRlLmpzJztcbmltcG9ydCB7UGF0dGVybn0gZnJvbSAnLi9yb20vcGF0dGVybi5qcyc7XG5pbXBvcnQge1NjcmVlbn0gZnJvbSAnLi9yb20vc2NyZWVuLmpzJztcbmltcG9ydCB7U2hvcH0gZnJvbSAnLi9yb20vc2hvcC5qcyc7XG5pbXBvcnQge1Nwb2lsZXJ9IGZyb20gJy4vcm9tL3Nwb2lsZXIuanMnO1xuaW1wb3J0IHtUZWxlcGF0aHl9IGZyb20gJy4vcm9tL3RlbGVwYXRoeS5qcyc7XG5pbXBvcnQge1RpbGVBbmltYXRpb259IGZyb20gJy4vcm9tL3RpbGVhbmltYXRpb24uanMnO1xuaW1wb3J0IHtUaWxlRWZmZWN0c30gZnJvbSAnLi9yb20vdGlsZWVmZmVjdHMuanMnO1xuaW1wb3J0IHtUaWxlc2V0fSBmcm9tICcuL3JvbS90aWxlc2V0LmpzJztcbmltcG9ydCB7VHJpZ2dlcn0gZnJvbSAnLi9yb20vdHJpZ2dlci5qcyc7XG5pbXBvcnQge2hleCwgc2VxfSBmcm9tICcuL3JvbS91dGlsLmpzJztcbmltcG9ydCB7V2lsZFdhcnB9IGZyb20gJy4vcm9tL3dpbGR3YXJwLmpzJztcbmltcG9ydCB7V3JpdGVyfSBmcm9tICcuL3JvbS93cml0ZXIuanMnO1xuaW1wb3J0IHtVbmlvbkZpbmR9IGZyb20gJy4vdW5pb25maW5kLmpzJztcblxuLy8gQSBrbm93biBsb2NhdGlvbiBmb3IgZGF0YSBhYm91dCBzdHJ1Y3R1cmFsIGNoYW5nZXMgd2UndmUgbWFkZSB0byB0aGUgcm9tLlxuLy8gVGhlIHRyaWNrIGlzIHRvIGZpbmQgYSBzdWl0YWJsZSByZWdpb24gb2YgUk9NIHRoYXQncyBib3RoIHVudXNlZCAqYW5kKlxuLy8gaXMgbm90IHBhcnRpY3VsYXJseSAqdXNhYmxlKiBmb3Igb3VyIHB1cnBvc2VzLiAgVGhlIGJvdHRvbSAzIHJvd3Mgb2YgdGhlXG4vLyB2YXJpb3VzIHNpbmdsZS1zY3JlZW4gbWFwcyBhcmUgYWxsIGVmZmVjdGl2ZWx5IHVudXNlZCwgc28gdGhhdCBnaXZlcyA0OFxuLy8gYnl0ZXMgcGVyIG1hcC4gIFNob3BzICgxNDAwMC4uMTQyZmYpIGFsc28gaGF2ZSBhIGdpYW50IGFyZWEgdXAgdG9wIHRoYXRcbi8vIGNvdWxkIHBvc3NpYmx5IGJlIHVzYWJsZSwgdGhvdWdoIHdlJ2QgbmVlZCB0byB0ZWFjaCB0aGUgdGlsZS1yZWFkaW5nIGNvZGVcbi8vIHRvIGlnbm9yZSB3aGF0ZXZlcidzIHdyaXR0ZW4gdGhlcmUsIHNpbmNlIGl0ICppcyogdmlzaWJsZSBiZWZvcmUgdGhlIG1lbnVcbi8vIHBvcHMgdXAuICBUaGVzZSBhcmUgYmlnIGVub3VnaCByZWdpb25zIHRoYXQgd2UgY291bGQgZXZlbiBjb25zaWRlciB1c2luZ1xuLy8gdGhlbSB2aWEgcGFnZS1zd2FwcGluZyB0byBnZXQgZXh0cmEgZGF0YSBpbiBhcmJpdHJhcnkgY29udGV4dHMuXG5cbi8vIFNob3BzIGFyZSBwYXJ0aWN1bGFybHkgbmljZSBiZWNhdXNlIHRoZXkncmUgYWxsIDAwIGluIHZhbmlsbGEuXG4vLyBPdGhlciBwb3NzaWJsZSByZWdpb25zOlxuLy8gICAtIDQ4IGJ5dGVzIGF0ICRmZmMwIChtZXphbWUgc2hyaW5lKSA9PiAkZmZlMCBpcyBhbGwgJGZmIGluIHZhbmlsbGEuXG5cbmV4cG9ydCBjbGFzcyBSb20ge1xuXG4gIC8vIFRoZXNlIHZhbHVlcyBjYW4gYmUgcXVlcmllZCB0byBkZXRlcm1pbmUgaG93IHRvIHBhcnNlIGFueSBnaXZlbiByb20uXG4gIC8vIFRoZXkncmUgYWxsIGFsd2F5cyB6ZXJvIGZvciB2YW5pbGxhXG4gIHN0YXRpYyByZWFkb25seSBPTUlUX0lURU1fR0VUX0RBVEFfU1VGRklYICAgID0gUm9tT3B0aW9uLmJpdCgweDE0MmMwLCAwKTtcbiAgc3RhdGljIHJlYWRvbmx5IE9NSVRfTE9DQUxfRElBTE9HX1NVRkZJWCAgICAgPSBSb21PcHRpb24uYml0KDB4MTQyYzAsIDEpO1xuICBzdGF0aWMgcmVhZG9ubHkgQ09NUFJFU1NFRF9NQVBEQVRBICAgICAgICAgICA9IFJvbU9wdGlvbi5iaXQoMHgxNDJjMCwgMik7XG4gIHN0YXRpYyByZWFkb25seSBTSE9QX0NPVU5UICAgICAgICAgICAgICAgICAgID0gUm9tT3B0aW9uLmJ5dGUoMHgxNDJjMSk7XG4gIHN0YXRpYyByZWFkb25seSBTQ0FMSU5HX0xFVkVMUyAgICAgICAgICAgICAgID0gUm9tT3B0aW9uLmJ5dGUoMHgxNDJjMik7XG4gIHN0YXRpYyByZWFkb25seSBVTklRVUVfSVRFTV9UQUJMRSAgICAgICAgICAgID0gUm9tT3B0aW9uLmFkZHJlc3MoMHgxNDJkMCk7XG4gIHN0YXRpYyByZWFkb25seSBTSE9QX0RBVEFfVEFCTEVTICAgICAgICAgICAgID0gUm9tT3B0aW9uLmFkZHJlc3MoMHgxNDJkMyk7XG4gIHN0YXRpYyByZWFkb25seSBURUxFUEFUSFlfVEFCTEVTICAgICAgICAgICAgID0gUm9tT3B0aW9uLmFkZHJlc3MoMHgxNDJkNik7XG5cbiAgcmVhZG9ubHkgcHJnOiBVaW50OEFycmF5O1xuICByZWFkb25seSBjaHI6IFVpbnQ4QXJyYXk7XG5cbiAgcmVhZG9ubHkgc2NyZWVuczogU2NyZWVuW107XG4gIHJlYWRvbmx5IHRpbGVzZXRzOiBUaWxlc2V0W107XG4gIHJlYWRvbmx5IHRpbGVFZmZlY3RzOiBUaWxlRWZmZWN0c1tdO1xuICByZWFkb25seSB0cmlnZ2VyczogVHJpZ2dlcltdO1xuICByZWFkb25seSBwYXR0ZXJuczogUGF0dGVybltdO1xuICByZWFkb25seSBwYWxldHRlczogUGFsZXR0ZVtdO1xuICByZWFkb25seSBsb2NhdGlvbnM6IExvY2F0aW9ucztcbiAgcmVhZG9ubHkgdGlsZUFuaW1hdGlvbnM6IFRpbGVBbmltYXRpb25bXTtcbiAgcmVhZG9ubHkgaGl0Ym94ZXM6IEhpdGJveFtdO1xuICByZWFkb25seSBvYmplY3RzOiBPYmplY3RzO1xuICByZWFkb25seSBhZEhvY1NwYXduczogQWRIb2NTcGF3bltdO1xuICByZWFkb25seSBtZXRhc3ByaXRlczogTWV0YXNwcml0ZVtdO1xuICByZWFkb25seSBpdGVtR2V0czogSXRlbUdldFtdO1xuICByZWFkb25seSBpdGVtczogSXRlbVtdO1xuICByZWFkb25seSBzaG9wczogU2hvcFtdO1xuICByZWFkb25seSBucGNzOiBOcGNbXTtcbiAgcmVhZG9ubHkgYm9zc0tpbGxzOiBCb3NzS2lsbFtdO1xuICByZWFkb25seSBib3NzZXM6IEJvc3NlcztcbiAgcmVhZG9ubHkgd2lsZFdhcnA6IFdpbGRXYXJwO1xuXG4gIHJlYWRvbmx5IHRlbGVwYXRoeTogVGVsZXBhdGh5O1xuICByZWFkb25seSBtZXNzYWdlczogTWVzc2FnZXM7XG5cbiAgc3BvaWxlcj86IFNwb2lsZXI7XG5cbiAgLy8gTk9URTogVGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIG1heSBiZSBjaGFuZ2VkIGJldHdlZW4gcmVhZGluZyBhbmQgd3JpdGluZ1xuICAvLyB0aGUgcm9tLiAgSWYgdGhpcyBoYXBwZW5zLCB0aGUgd3JpdHRlbiByb20gd2lsbCBoYXZlIGRpZmZlcmVudCBvcHRpb25zLlxuICAvLyBUaGlzIGlzIGFuIGVmZmVjdGl2ZSB3YXkgdG8gY29udmVydCBiZXR3ZWVuIHR3byBzdHlsZXMuXG5cbiAgLy8gTWF4IG51bWJlciBvZiBzaG9wcy4gIFZhcmlvdXMgYmxvY2tzIG9mIG1lbW9yeSByZXF1aXJlIGtub3dpbmcgdGhpcyBudW1iZXJcbiAgLy8gdG8gYWxsb2NhdGUuXG4gIHNob3BDb3VudDogbnVtYmVyO1xuICAvLyBOdW1iZXIgb2Ygc2NhbGluZyBsZXZlbHMuICBEZXRlcm1pbmVzIHRoZSBzaXplIG9mIHRoZSBzY2FsaW5nIHRhYmxlcy5cbiAgc2NhbGluZ0xldmVsczogbnVtYmVyO1xuXG4gIC8vIEFkZHJlc3MgdG8gcmVhZC93cml0ZSB0aGUgYml0ZmllbGQgaW5kaWNhdGluZyB1bmlxdWUgaXRlbXMuXG4gIHVuaXF1ZUl0ZW1UYWJsZUFkZHJlc3M6IG51bWJlcjtcbiAgLy8gQWRkcmVzcyBvZiBub3JtYWxpemVkIHByaWNlcyB0YWJsZSwgaWYgcHJlc2VudC4gIElmIHRoaXMgaXMgYWJzZW50IHRoZW4gd2VcbiAgLy8gYXNzdW1lIHByaWNlcyBhcmUgbm90IG5vcm1hbGl6ZWQgYW5kIGFyZSBhdCB0aGUgbm9ybWFsIHBhd24gc2hvcCBhZGRyZXNzLlxuICBzaG9wRGF0YVRhYmxlc0FkZHJlc3M6IG51bWJlcjtcbiAgLy8gQWRkcmVzcyBvZiByZWFycmFuZ2VkIHRlbGVwYXRoeSB0YWJsZXMuXG4gIHRlbGVwYXRoeVRhYmxlc0FkZHJlc3M6IG51bWJlcjtcbiAgLy8gV2hldGhlciB0aGUgdHJhaWxpbmcgJGZmIHNob3VsZCBiZSBvbWl0dGVkIGZyb20gdGhlIEl0ZW1HZXREYXRhIHRhYmxlLlxuICBvbWl0SXRlbUdldERhdGFTdWZmaXg6IGJvb2xlYW47XG4gIC8vIFdoZXRoZXIgdGhlIHRyYWlsaW5nIGJ5dGUgb2YgZWFjaCBMb2NhbERpYWxvZyBpcyBvbWl0dGVkLiAgVGhpcyBhZmZlY3RzXG4gIC8vIGJvdGggcmVhZGluZyBhbmQgd3JpdGluZyB0aGUgdGFibGUuICBNYXkgYmUgaW5mZXJyZWQgd2hpbGUgcmVhZGluZy5cbiAgb21pdExvY2FsRGlhbG9nU3VmZml4OiBib29sZWFuO1xuICAvLyBXaGV0aGVyIG1hcGRhdGEgaGFzIGJlZW4gY29tcHJlc3NlZC5cbiAgY29tcHJlc3NlZE1hcERhdGE6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3Iocm9tOiBVaW50OEFycmF5KSB7XG4gICAgY29uc3QgcHJnU2l6ZSA9IHJvbVs0XSAqIDB4NDAwMDtcbiAgICAvLyBOT1RFOiBjaHJTaXplID0gcm9tWzVdICogMHgyMDAwO1xuICAgIGNvbnN0IHByZ1N0YXJ0ID0gMHgxMCArIChyb21bNl0gJiA0ID8gNTEyIDogMCk7XG4gICAgY29uc3QgcHJnRW5kID0gcHJnU3RhcnQgKyBwcmdTaXplO1xuICAgIHRoaXMucHJnID0gcm9tLnN1YmFycmF5KHByZ1N0YXJ0LCBwcmdFbmQpO1xuICAgIHRoaXMuY2hyID0gcm9tLnN1YmFycmF5KHByZ0VuZCk7XG5cbiAgICB0aGlzLnNob3BDb3VudCA9IFJvbS5TSE9QX0NPVU5ULmdldChyb20pO1xuICAgIHRoaXMuc2NhbGluZ0xldmVscyA9IFJvbS5TQ0FMSU5HX0xFVkVMUy5nZXQocm9tKTtcbiAgICB0aGlzLnVuaXF1ZUl0ZW1UYWJsZUFkZHJlc3MgPSBSb20uVU5JUVVFX0lURU1fVEFCTEUuZ2V0KHJvbSk7XG4gICAgdGhpcy5zaG9wRGF0YVRhYmxlc0FkZHJlc3MgPSBSb20uU0hPUF9EQVRBX1RBQkxFUy5nZXQocm9tKTtcbiAgICB0aGlzLnRlbGVwYXRoeVRhYmxlc0FkZHJlc3MgPSBSb20uVEVMRVBBVEhZX1RBQkxFUy5nZXQocm9tKTtcbiAgICB0aGlzLm9taXRJdGVtR2V0RGF0YVN1ZmZpeCA9IFJvbS5PTUlUX0lURU1fR0VUX0RBVEFfU1VGRklYLmdldChyb20pO1xuICAgIHRoaXMub21pdExvY2FsRGlhbG9nU3VmZml4ID0gUm9tLk9NSVRfTE9DQUxfRElBTE9HX1NVRkZJWC5nZXQocm9tKTtcbiAgICB0aGlzLmNvbXByZXNzZWRNYXBEYXRhID0gUm9tLkNPTVBSRVNTRURfTUFQREFUQS5nZXQocm9tKTtcblxuICAgIC8vIGlmIChjcmMzMihyb20pID09PSBFWFBFQ1RFRF9DUkMzMikge1xuICAgIGZvciAoY29uc3QgW2FkZHJlc3MsIG9sZCwgdmFsdWVdIG9mIEFESlVTVE1FTlRTKSB7XG4gICAgICBpZiAodGhpcy5wcmdbYWRkcmVzc10gPT09IG9sZCkgdGhpcy5wcmdbYWRkcmVzc10gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBMb2FkIHVwIGEgYnVuY2ggb2YgZGF0YSB0YWJsZXMuICBUaGlzIHdpbGwgaW5jbHVkZSBhIGxhcmdlIG51bWJlciBvZiB0aGVcbiAgICAvLyBkYXRhIHRhYmxlcyBpbiB0aGUgUk9NLiAgVGhlIGlkZWEgaXMgdGhhdCB3ZSBjYW4gZWRpdCB0aGUgYXJyYXlzIGxvY2FsbHlcbiAgICAvLyBhbmQgdGhlbiBoYXZlIGEgXCJjb21taXRcIiBmdW5jdGlvbiB0aGF0IHJlYnVpbGRzIHRoZSBST00gd2l0aCB0aGUgbmV3XG4gICAgLy8gYXJyYXlzLiAgV2UgbWF5IG5lZWQgdG8gd3JpdGUgYSBcInBhZ2VkIGFsbG9jYXRvclwiIHRoYXQgY2FuIGFsbG9jYXRlXG4gICAgLy8gY2h1bmtzIG9mIFJPTSBpbiBhIGdpdmVuIHBhZ2UuICBQcm9iYWJseSB3YW50IHRvIHVzZSBhIGdyZWVkeSBhbGdvcml0aG1cbiAgICAvLyB3aGVyZSB3ZSBzdGFydCB3aXRoIHRoZSBiaWdnZXN0IGNodW5rIGFuZCBwdXQgaXQgaW4gdGhlIHNtYWxsZXN0IHNwb3RcbiAgICAvLyB0aGF0IGZpdHMgaXQuICBQcmVzdW1hYmx5IHdlIGtub3cgdGhlIHNpemVzIHVwIGZyb250IGV2ZW4gYmVmb3JlIHdlIGhhdmVcbiAgICAvLyBhbGwgdGhlIGFkZHJlc3Nlcywgc28gd2UgY291bGQgZG8gYWxsIHRoZSBhbGxvY2F0aW9uIGF0IG9uY2UgLSBwcm9iYWJseVxuICAgIC8vIHJldHVybmluZyBhIHRva2VuIGZvciBlYWNoIGFsbG9jYXRpb24gYW5kIHRoZW4gYWxsIHRva2VucyBnZXQgZmlsbGVkIGluXG4gICAgLy8gYXQgb25jZSAoYWN0dWFsIHByb21pc2VzIHdvdWxkIGJlIG1vcmUgdW53ZWlsZHkpLlxuICAgIC8vIFRyaWNreSAtIHdoYXQgYWJvdXQgc2hhcmVkIGVsZW1lbnRzIG9mIGRhdGEgdGFibGVzIC0gd2UgcHVsbCB0aGVtXG4gICAgLy8gc2VwYXJhdGVseSwgYnV0IHdlJ2xsIG5lZWQgdG8gcmUtY29hbGVzY2UgdGhlbS4gIEJ1dCB0aGlzIHJlcXVpcmVzXG4gICAgLy8ga25vd2luZyB0aGVpciBjb250ZW50cyBCRUZPUkUgYWxsb2NhdGluZyB0aGVpciBzcGFjZS4gIFNvIHdlIG5lZWQgdHdvXG4gICAgLy8gYWxsb2NhdGUgbWV0aG9kcyAtIG9uZSB3aGVyZSB0aGUgY29udGVudCBpcyBrbm93biBhbmQgb25lIHdoZXJlIG9ubHkgdGhlXG4gICAgLy8gbGVuZ3RoIGlzIGtub3duLlxuICAgIHRoaXMuc2NyZWVucyA9IHNlcSgweDEwMywgaSA9PiBuZXcgU2NyZWVuKHRoaXMsIGkpKTtcbiAgICB0aGlzLnRpbGVzZXRzID0gc2VxKDEyLCBpID0+IG5ldyBUaWxlc2V0KHRoaXMsIGkgPDwgMiB8IDB4ODApKTtcbiAgICB0aGlzLnRpbGVFZmZlY3RzID0gc2VxKDExLCBpID0+IG5ldyBUaWxlRWZmZWN0cyh0aGlzLCBpICsgMHhiMykpO1xuICAgIHRoaXMudHJpZ2dlcnMgPSBzZXEoMHg0MywgaSA9PiBuZXcgVHJpZ2dlcih0aGlzLCAweDgwIHwgaSkpO1xuICAgIHRoaXMucGF0dGVybnMgPSBzZXEodGhpcy5jaHIubGVuZ3RoID4+IDQsIGkgPT4gbmV3IFBhdHRlcm4odGhpcywgaSkpO1xuICAgIHRoaXMucGFsZXR0ZXMgPSBzZXEoMHgxMDAsIGkgPT4gbmV3IFBhbGV0dGUodGhpcywgaSkpO1xuICAgIHRoaXMubG9jYXRpb25zID0gbmV3IExvY2F0aW9ucyh0aGlzKTtcbiAgICB0aGlzLnRpbGVBbmltYXRpb25zID0gc2VxKDQsIGkgPT4gbmV3IFRpbGVBbmltYXRpb24odGhpcywgaSkpO1xuICAgIHRoaXMuaGl0Ym94ZXMgPSBzZXEoMjQsIGkgPT4gbmV3IEhpdGJveCh0aGlzLCBpKSk7XG4gICAgdGhpcy5vYmplY3RzID0gbmV3IE9iamVjdHModGhpcyk7XG4gICAgdGhpcy5hZEhvY1NwYXducyA9IHNlcSgweDYwLCBpID0+IG5ldyBBZEhvY1NwYXduKHRoaXMsIGkpKTtcbiAgICB0aGlzLm1ldGFzcHJpdGVzID0gc2VxKDB4MTAwLCBpID0+IG5ldyBNZXRhc3ByaXRlKHRoaXMsIGkpKTtcbiAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IE1lc3NhZ2VzKHRoaXMpO1xuICAgIHRoaXMudGVsZXBhdGh5ID0gbmV3IFRlbGVwYXRoeSh0aGlzKTtcbiAgICB0aGlzLml0ZW1HZXRzID0gc2VxKDB4NzEsIGkgPT4gbmV3IEl0ZW1HZXQodGhpcywgaSkpO1xuICAgIHRoaXMuaXRlbXMgPSBzZXEoMHg0OSwgaSA9PiBuZXcgSXRlbSh0aGlzLCBpKSk7XG4gICAgdGhpcy5zaG9wcyA9IHNlcSg0NCwgaSA9PiBuZXcgU2hvcCh0aGlzLCBpKSk7IC8vIE5PVEU6IGRlcGVuZHMgb24gbG9jYXRpb25zIGFuZCBvYmplY3RzXG4gICAgdGhpcy5ucGNzID0gc2VxKDB4Y2QsIGkgPT4gbmV3IE5wYyh0aGlzLCBpKSk7XG4gICAgdGhpcy5ib3NzS2lsbHMgPSBzZXEoMHhlLCBpID0+IG5ldyBCb3NzS2lsbCh0aGlzLCBpKSk7XG4gICAgdGhpcy5ib3NzZXMgPSBuZXcgQm9zc2VzKHRoaXMpO1xuICAgIHRoaXMud2lsZFdhcnAgPSBuZXcgV2lsZFdhcnAodGhpcyk7XG4gIH1cblxuICB0cmlnZ2VyKGlkOiBudW1iZXIpOiBUcmlnZ2VyIHtcbiAgICBpZiAoaWQgPCAweDgwIHx8IGlkID4gMHhmZikgdGhyb3cgbmV3IEVycm9yKGBCYWQgdHJpZ2dlciBpZCAkJHtoZXgoaWQpfWApO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXJzW2lkICYgMHg3Zl07XG4gIH1cblxuICB0aWxlc2V0KGlkOiBudW1iZXIpOiBUaWxlc2V0IHtcbiAgICBpZiAoaWQgPCAweDgwIHx8IGlkID4gMHhhYyB8fCBpZCAmIDMpIHRocm93IG5ldyBFcnJvcihgQmFkIHRpbGVzZXQgaWQgJCR7aGV4KGlkKX1gKTtcbiAgICByZXR1cm4gdGhpcy50aWxlc2V0c1soaWQgJiAweDdmKSA+Pj4gMl07XG4gIH1cblxuICAvLyBUT0RPIC0gY3Jvc3MtcmVmZXJlbmNlIG1vbnN0ZXJzL21ldGFzcHJpdGVzL21ldGF0aWxlcy9zY3JlZW5zIHdpdGggcGF0dGVybnMvcGFsZXR0ZXNcbiAgLy8gZ2V0IG1vbnN0ZXJzKCk6IE9iamVjdERhdGFbXSB7XG4gIC8vICAgY29uc3QgbW9uc3RlcnMgPSBuZXcgU2V0PE9iamVjdERhdGE+KCk7XG4gIC8vICAgZm9yIChjb25zdCBsIG9mIHRoaXMubG9jYXRpb25zKSB7XG4gIC8vICAgICBpZiAoIWwudXNlZCB8fCAhbC5oYXNTcGF3bnMpIGNvbnRpbnVlO1xuICAvLyAgICAgZm9yIChjb25zdCBvIG9mIGwuc3Bhd25zKSB7XG4gIC8vICAgICAgIGlmIChvLmlzTW9uc3RlcigpKSBtb25zdGVycy5hZGQodGhpcy5vYmplY3RzW28ubW9uc3RlcklkXSk7XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiBbLi4ubW9uc3RlcnNdLnNvcnQoKHgsIHkpID0+ICh4LmlkIC0geS5pZCkpO1xuICAvLyB9XG5cbiAgZ2V0IHByb2plY3RpbGVzKCk6IE9iamVjdERhdGFbXSB7XG4gICAgY29uc3QgcHJvamVjdGlsZXMgPSBuZXcgU2V0PE9iamVjdERhdGE+KCk7XG4gICAgZm9yIChjb25zdCBtIG9mIHRoaXMub2JqZWN0cy5maWx0ZXIobyA9PiBvIGluc3RhbmNlb2YgTW9uc3RlcikpIHtcbiAgICAgIGlmIChtLmNoaWxkKSB7XG4gICAgICAgIHByb2plY3RpbGVzLmFkZCh0aGlzLm9iamVjdHNbdGhpcy5hZEhvY1NwYXduc1ttLmNoaWxkXS5vYmplY3RJZF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWy4uLnByb2plY3RpbGVzXS5zb3J0KCh4LCB5KSA9PiAoeC5pZCAtIHkuaWQpKTtcbiAgfVxuXG4gIGdldCBtb25zdGVyR3JhcGhpY3MoKSB7XG4gICAgY29uc3QgZ2Z4OiB7W2lkOiBzdHJpbmddOlxuICAgICAgICAgICAgICAgIHtbaW5mbzogc3RyaW5nXTpcbiAgICAgICAgICAgICAgICAge3Nsb3Q6IG51bWJlciwgcGF0OiBudW1iZXIsIHBhbDogbnVtYmVyfX19ID0ge307XG4gICAgZm9yIChjb25zdCBsIG9mIHRoaXMubG9jYXRpb25zKSB7XG4gICAgICBpZiAoIWwudXNlZCB8fCAhbC5oYXNTcGF3bnMpIGNvbnRpbnVlO1xuICAgICAgZm9yIChjb25zdCBvIG9mIGwuc3Bhd25zKSB7XG4gICAgICAgIGlmICghKG8uZGF0YVsyXSAmIDcpKSB7XG4gICAgICAgICAgY29uc3Qgc2xvdCA9IG8uZGF0YVsyXSAmIDB4ODAgPyAxIDogMDtcbiAgICAgICAgICBjb25zdCBpZCA9IGhleChvLmRhdGFbM10gKyAweDUwKTtcbiAgICAgICAgICBjb25zdCBkYXRhID0gZ2Z4W2lkXSA9IGdmeFtpZF0gfHwge307XG4gICAgICAgICAgZGF0YVtgJHtzbG90fToke2wuc3ByaXRlUGF0dGVybnNbc2xvdF0udG9TdHJpbmcoMTYpfToke1xuICAgICAgICAgICAgICAgbC5zcHJpdGVQYWxldHRlc1tzbG90XS50b1N0cmluZygxNil9YF1cbiAgICAgICAgICAgID0ge3BhbDogbC5zcHJpdGVQYWxldHRlc1tzbG90XSxcbiAgICAgICAgICAgICAgIHBhdDogbC5zcHJpdGVQYXR0ZXJuc1tzbG90XSxcbiAgICAgICAgICAgICAgIHNsb3QsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGdmeDtcbiAgfVxuXG4gIGdldCBsb2NhdGlvbk1vbnN0ZXJzKCkge1xuICAgIGNvbnN0IG06IHtbaWQ6IHN0cmluZ106IHtbaW5mbzogc3RyaW5nXTogbnVtYmVyfX0gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGwgb2YgdGhpcy5sb2NhdGlvbnMpIHtcbiAgICAgIGlmICghbC51c2VkIHx8ICFsLmhhc1NwYXducykgY29udGludWU7XG4gICAgICAvLyB3aGljaCBtb25zdGVycyBhcmUgaW4gd2hpY2ggc2xvdHM/XG4gICAgICBjb25zdCBzOiB7W2luZm86IHN0cmluZ106IG51bWJlcn0gPSBtWyckJyArIGhleChsLmlkKV0gPSB7fTtcbiAgICAgIGZvciAoY29uc3QgbyBvZiBsLnNwYXducykge1xuICAgICAgICBpZiAoIShvLmRhdGFbMl0gJiA3KSkge1xuICAgICAgICAgIGNvbnN0IHNsb3QgPSBvLmRhdGFbMl0gJiAweDgwID8gMSA6IDA7XG4gICAgICAgICAgY29uc3QgaWQgPSBvLmRhdGFbM10gKyAweDUwO1xuICAgICAgICAgIHNbYCR7c2xvdH06JHtpZC50b1N0cmluZygxNil9YF0gPVxuICAgICAgICAgICAgICAoc1tgJHtzbG90fToke2lkLnRvU3RyaW5nKDE2KX1gXSB8fCAwKSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG07XG4gIH1cblxuICAvLyBUT0RPIC0gZm9yIGVhY2ggc3ByaXRlIHBhdHRlcm4gdGFibGUsIGZpbmQgYWxsIHRoZSBwYWxldHRlcyB0aGF0IGl0IHVzZXMuXG4gIC8vIEZpbmQgYWxsIHRoZSBtb25zdGVycyBvbiBpdC4gIFdlIGNhbiBwcm9iYWJseSBhbGxvdyBhbnkgcGFsZXR0ZSBzbyBsb25nXG4gIC8vIGFzIG9uZSBvZiB0aGUgcGFsZXR0ZXMgaXMgdXNlZCB3aXRoIHRoYXQgcGF0dGVybi5cbiAgLy8gVE9ETyAtIG1heCBudW1iZXIgb2YgaW5zdGFuY2VzIG9mIGEgbW9uc3RlciBvbiBhbnkgbWFwIC0gaS5lLiBhdm9pZCBoYXZpbmdcbiAgLy8gZml2ZSBmbHllcnMgb24gdGhlIHNhbWUgbWFwIVxuXG4gIC8vIDQ2MCAtIDAgbWVhbnMgZWl0aGVyIGZseWVyIG9yIHN0YXRpb25hcnlcbiAgLy8gICAgICAgICAgIC0gc3RhdGlvbmFyeSBoYXMgNGEwIH4gMjA0LDIwNSwyMDZcbiAgLy8gICAgICAgICAgICAgKGtyYWtlbiwgc3dhbXAgcGxhbnQsIHNvcmNlcm9yKVxuICAvLyAgICAgICA2IC0gbWltaWNcbiAgLy8gICAgICAgMWYgLSBzd2ltbWVyXG4gIC8vICAgICAgIDU0IC0gdG9tYXRvIGFuZCBiaXJkXG4gIC8vICAgICAgIDU1IC0gc3dpbW1lclxuICAvLyAgICAgICA1NyAtIG5vcm1hbFxuICAvLyAgICAgICA1ZiAtIGFsc28gbm9ybWFsLCBidXQgbWVkdXNhIGhlYWQgaXMgZmx5ZXI/XG4gIC8vICAgICAgIDc3IC0gc29sZGllcnMsIGljZSB6b21iaWVcblxuLy8gICAvLyBEb24ndCB3b3JyeSBhYm91dCBvdGhlciBkYXRhcyB5ZXRcbi8vICAgd3JpdGVPYmplY3REYXRhKCkge1xuLy8gICAgIC8vIGJ1aWxkIHVwIGEgbWFwIGZyb20gYWN0dWFsIGRhdGEgdG8gaW5kZXhlcyB0aGF0IHBvaW50IHRvIGl0XG4vLyAgICAgbGV0IGFkZHIgPSAweDFhZTAwO1xuLy8gICAgIGNvbnN0IGRhdGFzID0ge307XG4vLyAgICAgZm9yIChjb25zdCBvYmplY3Qgb2YgdGhpcy5vYmplY3RzKSB7XG4vLyAgICAgICBjb25zdCBzZXIgPSBvYmplY3Quc2VyaWFsaXplKCk7XG4vLyAgICAgICBjb25zdCBkYXRhID0gc2VyLmpvaW4oJyAnKTtcbi8vICAgICAgIGlmIChkYXRhIGluIGRhdGFzKSB7XG4vLyAvL2NvbnNvbGUubG9nKGAkJHtvYmplY3QuaWQudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsMCl9OiBSZXVzaW5nIGV4aXN0aW5nIGRhdGEgJCR7ZGF0YXNbZGF0YV0udG9TdHJpbmcoMTYpfWApO1xuLy8gICAgICAgICBvYmplY3Qub2JqZWN0RGF0YUJhc2UgPSBkYXRhc1tkYXRhXTtcbi8vICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIG9iamVjdC5vYmplY3REYXRhQmFzZSA9IGFkZHI7XG4vLyAgICAgICAgIGRhdGFzW2RhdGFdID0gYWRkcjtcbi8vIC8vY29uc29sZS5sb2coYCQke29iamVjdC5pZC50b1N0cmluZygxNikucGFkU3RhcnQoMiwwKX06IERhdGEgaXMgYXQgJCR7XG4vLyAvLyAgICAgICAgICAgICBhZGRyLnRvU3RyaW5nKDE2KX06ICR7QXJyYXkuZnJvbShzZXIsIHg9PickJyt4LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLDApKS5qb2luKCcsJyl9YCk7XG4vLyAgICAgICAgIGFkZHIgKz0gc2VyLmxlbmd0aDtcbi8vIC8vIHNlZWQgMzUxNzgxMTAzNlxuLy8gICAgICAgfVxuLy8gICAgICAgb2JqZWN0LndyaXRlKCk7XG4vLyAgICAgfVxuLy8gLy9jb25zb2xlLmxvZyhgV3JvdGUgb2JqZWN0IGRhdGEgZnJvbSAkMWFjMDAgdG8gJCR7YWRkci50b1N0cmluZygxNikucGFkU3RhcnQoNSwgMClcbi8vIC8vICAgICAgICAgICAgIH0sIHNhdmluZyAkezB4MWJlOTEgLSBhZGRyfSBieXRlcy5gKTtcbi8vICAgICByZXR1cm4gYWRkcjtcbi8vICAgfVxuXG4gIGFzeW5jIHdyaXRlRGF0YSgpIHtcbiAgICAvLyBXcml0ZSB0aGUgb3B0aW9ucyBmaXJzdFxuICAgIFJvbS5TSE9QX0NPVU5ULnNldCh0aGlzLnByZywgdGhpcy5zaG9wQ291bnQpO1xuICAgIFJvbS5TQ0FMSU5HX0xFVkVMUy5zZXQodGhpcy5wcmcsIHRoaXMuc2NhbGluZ0xldmVscyk7XG4gICAgUm9tLlVOSVFVRV9JVEVNX1RBQkxFLnNldCh0aGlzLnByZywgdGhpcy51bmlxdWVJdGVtVGFibGVBZGRyZXNzKTtcbiAgICBSb20uU0hPUF9EQVRBX1RBQkxFUy5zZXQodGhpcy5wcmcsIHRoaXMuc2hvcERhdGFUYWJsZXNBZGRyZXNzKTtcbiAgICBSb20uT01JVF9JVEVNX0dFVF9EQVRBX1NVRkZJWC5zZXQodGhpcy5wcmcsIHRoaXMub21pdEl0ZW1HZXREYXRhU3VmZml4KTtcbiAgICBSb20uT01JVF9MT0NBTF9ESUFMT0dfU1VGRklYLnNldCh0aGlzLnByZywgdGhpcy5vbWl0TG9jYWxEaWFsb2dTdWZmaXgpO1xuICAgIFJvbS5DT01QUkVTU0VEX01BUERBVEEuc2V0KHRoaXMucHJnLCB0aGlzLmNvbXByZXNzZWRNYXBEYXRhKTtcblxuICAgIGNvbnN0IHdyaXRlciA9IG5ldyBXcml0ZXIodGhpcy5wcmcsIHRoaXMuY2hyKTtcbiAgICAvLyBNYXBEYXRhXG4gICAgd3JpdGVyLmFsbG9jKDB4MTQ0ZjgsIDB4MTdlMDApO1xuICAgIC8vIE5wY0RhdGFcbiAgICAvLyBOT1RFOiAxOTNmOSBpcyBhc3N1bWluZyAkZmIgaXMgdGhlIGxhc3QgbG9jYXRpb24gSUQuICBJZiB3ZSBhZGQgbW9yZSBsb2NhdGlvbnMgYXRcbiAgICAvLyB0aGUgZW5kIHRoZW4gd2UnbGwgbmVlZCB0byBwdXNoIHRoaXMgYmFjayBhIGZldyBtb3JlIGJ5dGVzLiAgV2UgY291bGQgcG9zc2libHlcbiAgICAvLyBkZXRlY3QgdGhlIGJhZCB3cml0ZSBhbmQgdGhyb3cgYW4gZXJyb3IsIGFuZC9vciBjb21wdXRlIHRoZSBtYXggbG9jYXRpb24gSUQuXG4gICAgd3JpdGVyLmFsbG9jKDB4MTkzZjksIDB4MWFjMDApO1xuICAgIC8vIE9iamVjdERhdGEgKGluZGV4IGF0IDFhYzAwLi4xYWUwMClcbiAgICB3cml0ZXIuYWxsb2MoMHgxYWUwMCwgMHgxYmQwMCk7IC8vIHNhdmUgNTEyIGJ5dGVzIGF0IGVuZCBmb3Igc29tZSBleHRyYSBjb2RlXG4gICAgLy8gTnBjU3Bhd25Db25kaXRpb25zXG4gICAgd3JpdGVyLmFsbG9jKDB4MWM3N2EsIDB4MWM5NWQpO1xuICAgIC8vIE5wY0RpYWxvZ1xuICAgIHdyaXRlci5hbGxvYygweDFjYWU1LCAweDFkOGY0KTtcbiAgICAvLyBJdGVtR2V0RGF0YVxuICAgIHdyaXRlci5hbGxvYygweDFkZGU2LCAweDFlMDY1KTtcbiAgICAvLyBUcmlnZ2VyRGF0YVxuICAgIC8vIE5PVEU6IFRoZXJlJ3Mgc29tZSBmcmVlIHNwYWNlIGF0IDFlM2MwLi4xZTNmMCwgYnV0IHdlIHVzZSB0aGlzIGZvciB0aGVcbiAgICAvLyBDaGVja0JlbG93Qm9zcyB0cmlnZ2Vycy5cbiAgICB3cml0ZXIuYWxsb2MoMHgxZTIwMCwgMHgxZTNjMCk7XG4gICAgLy8gSXRlbU1lbnVOYW1lXG4gICAgd3JpdGVyLmFsbG9jKDB4MjExMWEsIDB4MjE0NjgpO1xuICAgIC8vIGtlZXAgaXRlbSAkNDkgXCIgICAgICAgIFwiIHdoaWNoIGlzIGFjdHVhbGx5IHVzZWQgc29tZXdoZXJlP1xuICAgIC8vIHdyaXRlci5hbGxvYygweDIxNDcxLCAweDIxNGYxKTsgLy8gVE9ETyAtIGRvIHdlIG5lZWQgYW55IG9mIHRoaXM/XG4gICAgLy8gSXRlbU1lc3NhZ2VOYW1lXG4gICAgLy8gd3JpdGVyLmFsbG9jKDB4MjhlODEsIDB4MjkyMmIpOyAvLyBOT1RFOiB1bmNvdmVyZWQgdGhydSAyOTQwMFxuICAgIC8vIHdyaXRlci5hbGxvYygweDI5MjJiLCAweDI5NDAwKTsgLy8gVE9ETyAtIG5lZWRlZD9cbiAgICAvLyBOT1RFOiBvbmNlIHdlIHJlbGVhc2UgdGhlIG90aGVyIG1lc3NhZ2UgdGFibGVzLCB0aGlzIHdpbGwganVzdCBiZSBvbmUgZ2lhbnQgYmxvY2suXG5cbiAgICAvLyBNZXNzYWdlIHRhYmxlIHBhcnRzXG4gICAgLy8gd3JpdGVyLmFsbG9jKDB4MjgwMDAsIDB4MjgzZmUpO1xuICAgIC8vIE1lc3NhZ2UgdGFibGVzXG4gICAgLy8gVE9ETyAtIHdlIGRvbid0IHVzZSB0aGUgd3JpdGVyIHRvIGFsbG9jYXRlIHRoZSBhYmJyZXZpYXRpb24gdGFibGVzLCBidXQgd2UgY291bGRcbiAgICB3cml0ZXIuYWxsb2MoMHgyYTAwMCwgMHgyZmMwMCk7XG5cbiAgICBpZiAodGhpcy50ZWxlcGF0aHlUYWJsZXNBZGRyZXNzKSB7XG4gICAgICB3cml0ZXIuYWxsb2MoMHgxZDhmNCwgMHgxZGIwMCk7IC8vIGxvY2F0aW9uIHRhYmxlIGFsbCB0aGUgd2F5IHRocnUgbWFpblxuICAgIH0gZWxzZSB7XG4gICAgICB3cml0ZXIuYWxsb2MoMHgxZGE0YywgMHgxZGIwMCk7IC8vIGV4aXN0aW5nIG1haW4gdGFibGUgaXMgaGVyZS5cbiAgICB9XG5cbiAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgIGNvbnN0IHdyaXRlQWxsID0gKHdyaXRhYmxlczoge3dyaXRlKHdyaXRlcjogV3JpdGVyKTogdW5rbm93bn1bXSkgPT4ge1xuICAgICAgZm9yIChjb25zdCB3IG9mIHdyaXRhYmxlcykge1xuICAgICAgICBwcm9taXNlcy5wdXNoKHcud3JpdGUod3JpdGVyKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3cml0ZUFsbCh0aGlzLmxvY2F0aW9ucyk7XG4gICAgd3JpdGVBbGwodGhpcy5vYmplY3RzKTtcbiAgICB3cml0ZUFsbCh0aGlzLmhpdGJveGVzKTtcbiAgICB3cml0ZUFsbCh0aGlzLnRyaWdnZXJzKTtcbiAgICB3cml0ZUFsbCh0aGlzLm5wY3MpO1xuICAgIHdyaXRlQWxsKHRoaXMudGlsZXNldHMpO1xuICAgIHdyaXRlQWxsKHRoaXMudGlsZUVmZmVjdHMpO1xuICAgIHdyaXRlQWxsKHRoaXMuc2NyZWVucyk7XG4gICAgd3JpdGVBbGwodGhpcy5hZEhvY1NwYXducyk7XG4gICAgd3JpdGVBbGwodGhpcy5pdGVtR2V0cyk7XG4gICAgd3JpdGVBbGwodGhpcy5pdGVtcyk7XG4gICAgd3JpdGVBbGwodGhpcy5zaG9wcyk7XG4gICAgd3JpdGVBbGwodGhpcy5ib3NzS2lsbHMpO1xuICAgIHdyaXRlQWxsKHRoaXMucGF0dGVybnMpO1xuICAgIHRoaXMud2lsZFdhcnAud3JpdGUod3JpdGVyKTtcbiAgICBwcm9taXNlcy5wdXNoKHRoaXMudGVsZXBhdGh5LndyaXRlKHdyaXRlcikpO1xuICAgIHByb21pc2VzLnB1c2godGhpcy5tZXNzYWdlcy53cml0ZSh3cml0ZXIpKTtcbiAgICBwcm9taXNlcy5wdXNoKHdyaXRlci5jb21taXQoKSk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcbiAgfVxuXG4gIGFuYWx5emVUaWxlcygpIHtcbiAgICAvLyBGb3IgYW55IGdpdmVuIHRpbGUgaW5kZXgsIHdoYXQgc2NyZWVucyBkb2VzIGl0IGFwcGVhciBvbi5cbiAgICAvLyBGb3IgdGhvc2Ugc2NyZWVucywgd2hpY2ggdGlsZXNldHMgZG9lcyAqaXQqIGFwcGVhciBvbi5cbiAgICAvLyBUaGF0IHRpbGUgSUQgaXMgbGlua2VkIGFjcm9zcyBhbGwgdGhvc2UgdGlsZXNldHMuXG4gICAgLy8gRm9ybXMgYSBwYXJ0aXRpb25pbmcgZm9yIGVhY2ggdGlsZSBJRCA9PiB1bmlvbi1maW5kLlxuICAgIC8vIEdpdmVuIHRoaXMgcGFydGl0aW9uaW5nLCBpZiBJIHdhbnQgdG8gbW92ZSBhIHRpbGUgb24gYSBnaXZlblxuICAgIC8vIHRpbGVzZXQsIGFsbCBJIG5lZWQgdG8gZG8gaXMgZmluZCBhbm90aGVyIHRpbGUgSUQgd2l0aCB0aGVcbiAgICAvLyBzYW1lIHBhcnRpdGlvbiBhbmQgc3dhcCB0aGVtP1xuXG4gICAgLy8gTW9yZSBnZW5lcmFsbHksIHdlIGNhbiBqdXN0IHBhcnRpdGlvbiB0aGUgdGlsZXNldHMuXG5cbiAgICAvLyBGb3IgZWFjaCBzY3JlZW4sIGZpbmQgYWxsIHRpbGVzZXRzIFQgZm9yIHRoYXQgc2NyZWVuXG4gICAgLy8gVGhlbiBmb3IgZWFjaCB0aWxlIG9uIHRoZSBzY3JlZW4sIHVuaW9uIFQgZm9yIHRoYXQgdGlsZS5cblxuICAgIC8vIEdpdmVuIGEgdGlsZXNldCBhbmQgYSBtZXRhdGlsZSBJRCwgZmluZCBhbGwgdGhlIHNjcmVlbnMgdGhhdCAoMSkgYXJlIHJlbmRlcmVkXG4gICAgLy8gd2l0aCB0aGF0IHRpbGVzZXQsIGFuZCAoYikgdGhhdCBjb250YWluIHRoYXQgbWV0YXRpbGU7IHRoZW4gZmluZCBhbGwgKm90aGVyKlxuICAgIC8vIHRpbGVzZXRzIHRoYXQgdGhvc2Ugc2NyZWVucyBhcmUgZXZlciByZW5kZXJlZCB3aXRoLlxuXG4gICAgLy8gR2l2ZW4gYSBzY3JlZW4sIGZpbmQgYWxsIGF2YWlsYWJsZSBtZXRhdGlsZSBJRHMgdGhhdCBjb3VsZCBiZSBhZGRlZCB0byBpdFxuICAgIC8vIHdpdGhvdXQgY2F1c2luZyBwcm9ibGVtcyB3aXRoIG90aGVyIHNjcmVlbnMgdGhhdCBzaGFyZSBhbnkgdGlsZXNldHMuXG4gICAgLy8gIC0+IHVudXNlZCAob3IgdXNlZCBidXQgc2hhcmVkIGV4Y2x1c2l2ZWx5KSBhY3Jvc3MgYWxsIHRpbGVzZXRzIHRoZSBzY3JlZW4gbWF5IHVzZVxuXG4gICAgLy8gV2hhdCBJIHdhbnQgZm9yIHN3YXBwaW5nIGlzIHRoZSBmb2xsb3dpbmc6XG4gICAgLy8gIDEuIGZpbmQgYWxsIHNjcmVlbnMgSSB3YW50IHRvIHdvcmsgb24gPT4gdGlsZXNldHNcbiAgICAvLyAgMi4gZmluZCB1bnVzZWQgZmxhZ2dhYmJsZSB0aWxlcyBpbiB0aGUgaGFyZGVzdCBvbmUsXG4gICAgLy8gICAgIHdoaWNoIGFyZSBhbHNvIElTT0xBVEVEIGluIHRoZSBvdGhlcnMuXG4gICAgLy8gIDMuIHdhbnQgdGhlc2UgdGlsZXMgdG8gYmUgdW51c2VkIGluIEFMTCByZWxldmFudCB0aWxlc2V0c1xuICAgIC8vICA0LiB0byBtYWtlIHRoaXMgc28sIGZpbmQgKm90aGVyKiB1bnVzZWQgZmxhZ2dhYmxlIHRpbGVzIGluIG90aGVyIHRpbGVzZXRzXG4gICAgLy8gIDUuIHN3YXAgdGhlIHVudXNlZCB3aXRoIHRoZSBpc29sYXRlZCB0aWxlcyBpbiB0aGUgb3RoZXIgdGlsZXNldHNcblxuICAgIC8vIENhdmVzOlxuICAgIC8vICAwYTogICAgICA5MCAvIDljXG4gICAgLy8gIDE1OiA4MCAvIDkwIC8gOWNcbiAgICAvLyAgMTk6ICAgICAgOTAgICAgICAod2lsbCBhZGQgdG8gODA/KVxuICAgIC8vICAzZTogICAgICA5MFxuICAgIC8vXG4gICAgLy8gSWRlYWxseSB3ZSBjb3VsZCByZXVzZSA4MCdzIDEvMi8zLzQgZm9yIHRoaXNcbiAgICAvLyAgMDE6IDkwIHwgOTQgOWNcbiAgICAvLyAgMDI6IDkwIHwgOTQgOWNcbiAgICAvLyAgMDM6ICAgICAgOTQgOWNcbiAgICAvLyAgMDQ6IDkwIHwgOTQgOWNcbiAgICAvL1xuICAgIC8vIE5lZWQgNCBvdGhlciBmbGFnZ2FibGUgdGlsZSBpbmRpY2VzIHdlIGNhbiBzd2FwIHRvP1xuICAgIC8vICAgOTA6ID0+ICgxLDIgbmVlZCBmbGFnZ2FibGU7IDMgdW51c2VkOyA0IGFueSkgPT4gMDcsIDBlLCAxMCwgMTIsIDEzLCAuLi4sIDIwLCAyMSwgMjIsIC4uLlxuICAgIC8vICAgOTQgOWM6ID0+IGRvbid0IG5lZWQgYW55IGZsYWdnYWJsZSA9PiAwNSwgM2MsIDY4LCA4MywgODgsIDg5LCA4YSwgOTAsIC4uLlxuICB9XG5cbiAgZGlzam9pbnRUaWxlc2V0cygpIHtcbiAgICBjb25zdCB0aWxlc2V0QnlTY3JlZW46IEFycmF5PFNldDxudW1iZXI+PiA9IFtdO1xuICAgIGZvciAoY29uc3QgbG9jIG9mIHRoaXMubG9jYXRpb25zKSB7XG4gICAgICBpZiAoIWxvYy51c2VkKSBjb250aW51ZTtcbiAgICAgIGNvbnN0IHRpbGVzZXQgPSBsb2MudGlsZXNldDtcbiAgICAgIGNvbnN0IGV4dCA9IGxvYy5leHRlbmRlZCA/IDB4MTAwIDogMDtcbiAgICAgIGZvciAoY29uc3Qgcm93IG9mIGxvYy5zY3JlZW5zKSB7XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByb3cpIHtcbiAgICAgICAgICAodGlsZXNldEJ5U2NyZWVuW3MgKyBleHRdIHx8ICh0aWxlc2V0QnlTY3JlZW5bcyArIGV4dF0gPSBuZXcgU2V0KCkpKS5hZGQodGlsZXNldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdGlsZXMgPSBzZXEoMjU2LCAoKSA9PiBuZXcgVW5pb25GaW5kPG51bWJlcj4oKSk7XG4gICAgZm9yIChsZXQgcyA9IDA7IHMgPCB0aWxlc2V0QnlTY3JlZW4ubGVuZ3RoOyBzKyspIHtcbiAgICAgIGlmICghdGlsZXNldEJ5U2NyZWVuW3NdKSBjb250aW51ZTtcbiAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLnNjcmVlbnNbc10uYWxsVGlsZXNTZXQoKSkge1xuICAgICAgICB0aWxlc1t0XS51bmlvbihbLi4udGlsZXNldEJ5U2NyZWVuW3NdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG91dHB1dFxuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdGlsZXMubGVuZ3RoOyB0KyspIHtcbiAgICAgIGNvbnN0IHAgPSB0aWxlc1t0XS5zZXRzKClcbiAgICAgICAgICAubWFwKChzOiBTZXQ8bnVtYmVyPikgPT4gWy4uLnNdLm1hcChoZXgpLmpvaW4oJyAnKSlcbiAgICAgICAgICAuam9pbignIHwgJyk7XG4gICAgICBjb25zb2xlLmxvZyhgVGlsZSAke2hleCh0KX06ICR7cH1gKTtcbiAgICB9XG4gICAgLy8gICBpZiAoIXRpbGVzZXRCeVNjcmVlbltpXSkge1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhgTm8gdGlsZXNldCBmb3Igc2NyZWVuICR7aS50b1N0cmluZygxNil9YCk7XG4gICAgLy8gICAgIGNvbnRpbnVlO1xuICAgIC8vICAgfVxuICAgIC8vICAgdW5pb24udW5pb24oWy4uLnRpbGVzZXRCeVNjcmVlbltpXV0pO1xuICAgIC8vIH1cbiAgICAvLyByZXR1cm4gdW5pb24uc2V0cygpO1xuICB9XG5cbiAgLy8gQ3ljbGVzIGFyZSBub3QgYWN0dWFsbHkgY3ljbGljIC0gYW4gZXhwbGljaXQgbG9vcCBhdCB0aGUgZW5kIGlzIHJlcXVpcmVkIHRvIHN3YXAuXG4gIC8vIFZhcmlhbmNlOiBbMSwgMiwgbnVsbF0gd2lsbCBjYXVzZSBpbnN0YW5jZXMgb2YgMSB0byBiZWNvbWUgMiBhbmQgd2lsbFxuICAvLyAgICAgICAgICAgY2F1c2UgcHJvcGVydGllcyBvZiAxIHRvIGJlIGNvcGllZCBpbnRvIHNsb3QgMlxuICAvLyBDb21tb24gdXNhZ2UgaXMgdG8gc3dhcCB0aGluZ3Mgb3V0IG9mIHRoZSB3YXkgYW5kIHRoZW4gY29weSBpbnRvIHRoZVxuICAvLyBuZXdseS1mcmVlZCBzbG90LiAgU2F5IHdlIHdhbnRlZCB0byBmcmVlIHVwIHNsb3RzIFsxLCAyLCAzLCA0XSBhbmRcbiAgLy8gaGFkIGF2YWlsYWJsZS9mcmVlIHNsb3RzIFs1LCA2LCA3LCA4XSBhbmQgd2FudCB0byBjb3B5IGZyb20gWzksIGEsIGIsIGNdLlxuICAvLyBUaGVuIGN5Y2xlcyB3aWxsIGJlIFsxLCA1LCA5XSA/Pz8gbm9cbiAgLy8gIC0gcHJvYmFibHkgd2FudCB0byBkbyBzY3JlZW5zIHNlcGFyYXRlbHkgZnJvbSB0aWxlc2V0cy4uLj9cbiAgLy8gTk9URSAtIHdlIGRvbid0IGFjdHVhbGx5IHdhbnQgdG8gY2hhbmdlIHRpbGVzIGZvciB0aGUgbGFzdCBjb3B5Li4uIVxuICAvLyAgIGluIHRoaXMgY2FzZSwgdHNbNV0gPC0gdHNbMV0sIHRzWzFdIDwtIHRzWzldLCBzY3JlZW4ubWFwKDEgLT4gNSlcbiAgLy8gICByZXBsYWNlKFsweDkwXSwgWzUsIDEsIH45XSlcbiAgLy8gICAgID0+IDFzIHJlcGxhY2VkIHdpdGggNXMgaW4gc2NyZWVucyBidXQgOXMgTk9UIHJlcGxhY2VkIHdpdGggMXMuXG4gIC8vIEp1c3QgYnVpbGQgdGhlIHBhcnRpdGlvbiBvbmNlIGxhemlseT8gdGhlbiBjYW4gcmV1c2UuLi5cbiAgLy8gICAtIGVuc3VyZSBib3RoIHNpZGVzIG9mIHJlcGxhY2VtZW50IGhhdmUgY29ycmVjdCBwYXJ0aXRpb25pbmc/RVxuICAvLyAgICAgb3IganVzdCBkbyBpdCBvZmZsaW5lIC0gaXQncyBzaW1wbGVyXG4gIC8vIFRPRE8gLSBTYW5pdHkgY2hlY2s/ICBXYW50IHRvIG1ha2Ugc3VyZSBub2JvZHkgaXMgdXNpbmcgY2xvYmJlcmVkIHRpbGVzP1xuICBzd2FwTWV0YXRpbGVzKHRpbGVzZXRzOiBudW1iZXJbXSwgLi4uY3ljbGVzOiAobnVtYmVyIHwgbnVtYmVyW10pW11bXSkge1xuICAgIC8vIFByb2Nlc3MgdGhlIGN5Y2xlc1xuICAgIGNvbnN0IHJldiA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gICAgY29uc3QgcmV2QXJyOiBudW1iZXJbXSA9IHNlcSgweDEwMCk7XG4gICAgY29uc3QgYWx0ID0gbmV3IE1hcDxudW1iZXIsIG51bWJlcj4oKTtcbiAgICBjb25zdCBjcGwgPSAoeDogbnVtYmVyIHwgbnVtYmVyW10pOiBudW1iZXIgPT4gQXJyYXkuaXNBcnJheSh4KSA/IHhbMF0gOiB4IDwgMCA/IH54IDogeDtcbiAgICBmb3IgKGNvbnN0IGN5Y2xlIG9mIGN5Y2xlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjeWNsZS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3ljbGVbaV0pKSB7XG4gICAgICAgICAgY29uc3QgYXJyID0gY3ljbGVbaV0gYXMgbnVtYmVyW107XG4gICAgICAgICAgYWx0LnNldChhcnJbMF0sIGFyclsxXSk7XG4gICAgICAgICAgY3ljbGVbaV0gPSBhcnJbMF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3ljbGUubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGogPSBjeWNsZVtpXSBhcyBudW1iZXI7XG4gICAgICAgIGNvbnN0IGsgPSBjeWNsZVtpICsgMV0gYXMgbnVtYmVyO1xuICAgICAgICBpZiAoaiA8IDAgfHwgayA8IDApIGNvbnRpbnVlO1xuICAgICAgICByZXYuc2V0KGssIGopO1xuICAgICAgICByZXZBcnJba10gPSBqO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBjb25zdCByZXBsYWNlbWVudFNldCA9IG5ldyBTZXQocmVwbGFjZW1lbnRzLmtleXMoKSk7XG4gICAgLy8gRmluZCBpbnN0YW5jZXMgaW4gKDEpIHNjcmVlbnMsICgyKSB0aWxlc2V0cyBhbmQgYWx0ZXJuYXRlcywgKDMpIHRpbGVFZmZlY3RzXG4gICAgY29uc3Qgc2NyZWVucyA9IG5ldyBTZXQ8U2NyZWVuPigpO1xuICAgIGNvbnN0IHRpbGVFZmZlY3RzID0gbmV3IFNldDxudW1iZXI+KCk7XG4gICAgY29uc3QgdGlsZXNldHNTZXQgPSBuZXcgU2V0KHRpbGVzZXRzKTtcbiAgICBmb3IgKGNvbnN0IGwgb2YgdGhpcy5sb2NhdGlvbnMpIHtcbiAgICAgIGlmICghbC51c2VkKSBjb250aW51ZTtcbiAgICAgIGlmICghdGlsZXNldHNTZXQuaGFzKGwudGlsZXNldCkpIGNvbnRpbnVlO1xuICAgICAgdGlsZUVmZmVjdHMuYWRkKGwudGlsZUVmZmVjdHMpO1xuICAgICAgZm9yIChjb25zdCBzY3JlZW4gb2YgbC5hbGxTY3JlZW5zKCkpIHtcbiAgICAgICAgc2NyZWVucy5hZGQoc2NyZWVuKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRG8gcmVwbGFjZW1lbnRzLlxuICAgIC8vIDEuIHNjcmVlbnM6IFs1LCAxLCB+OV0gPT4gY2hhbmdlIDFzIGludG8gNXNcbiAgICBmb3IgKGNvbnN0IHNjcmVlbiBvZiBzY3JlZW5zKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2NyZWVuLnRpbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHNjcmVlbi50aWxlc1tpXSA9IHJldkFycltzY3JlZW4udGlsZXNbaV1dO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyAyLiB0aWxlc2V0czogWzUsIDEgfjldID0+IGNvcHkgNSA8PSAxIGFuZCAxIDw9IDlcbiAgICBmb3IgKGNvbnN0IHRzaWQgb2YgdGlsZXNldHNTZXQpIHtcbiAgICAgIGNvbnN0IHRpbGVzZXQgPSB0aGlzLnRpbGVzZXRzWyh0c2lkICYgMHg3ZikgPj4+IDJdO1xuICAgICAgZm9yIChjb25zdCBjeWNsZSBvZiBjeWNsZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjeWNsZS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBhID0gY3BsKGN5Y2xlW2ldKTtcbiAgICAgICAgICBjb25zdCBiID0gY3BsKGN5Y2xlW2kgKyAxXSk7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcbiAgICAgICAgICAgIHRpbGVzZXQudGlsZXNbal1bYV0gPSB0aWxlc2V0LnRpbGVzW2pdW2JdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aWxlc2V0LmF0dHJzW2FdID0gdGlsZXNldC5hdHRyc1tiXTtcbiAgICAgICAgICBpZiAoYiA8IDB4MjAgJiYgdGlsZXNldC5hbHRlcm5hdGVzW2JdICE9PSBiKSB7XG4gICAgICAgICAgICBpZiAoYSA+PSAweDIwKSB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB1bmZsYWc6ICR7dHNpZH0gJHthfSAke2J9ICR7dGlsZXNldC5hbHRlcm5hdGVzW2JdfWApO1xuICAgICAgICAgICAgdGlsZXNldC5hbHRlcm5hdGVzW2FdID0gdGlsZXNldC5hbHRlcm5hdGVzW2JdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBbYSwgYl0gb2YgYWx0KSB7XG4gICAgICAgIHRpbGVzZXQuYWx0ZXJuYXRlc1thXSA9IGI7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIDMuIHRpbGVFZmZlY3RzXG4gICAgZm9yIChjb25zdCB0ZWlkIG9mIHRpbGVFZmZlY3RzKSB7XG4gICAgICBjb25zdCB0aWxlRWZmZWN0ID0gdGhpcy50aWxlRWZmZWN0c1t0ZWlkIC0gMHhiM107XG4gICAgICBmb3IgKGNvbnN0IGN5Y2xlIG9mIGN5Y2xlcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN5Y2xlLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGEgPSBjcGwoY3ljbGVbaV0pO1xuICAgICAgICAgIGNvbnN0IGIgPSBjcGwoY3ljbGVbaSArIDFdKTtcbiAgICAgICAgICB0aWxlRWZmZWN0LmVmZmVjdHNbYV0gPSB0aWxlRWZmZWN0LmVmZmVjdHNbYl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgYSBvZiBhbHQua2V5cygpKSB7XG4gICAgICAgIC8vIFRoaXMgYml0IGlzIHJlcXVpcmVkIHRvIGluZGljYXRlIHRoYXQgdGhlIGFsdGVybmF0aXZlIHRpbGUnc1xuICAgICAgICAvLyBlZmZlY3Qgc2hvdWxkIGJlIGNvbnN1bHRlZC4gIFNpbXBseSBoYXZpbmcgdGhlIGZsYWcgYW5kIHRoZVxuICAgICAgICAvLyB0aWxlIGluZGV4IDwgJDIwIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAgICB0aWxlRWZmZWN0LmVmZmVjdHNbYV0gfD0gMHgwODtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRG9uZT8hP1xuICB9XG5cbiAgLy8gVXNlIHRoZSBicm93c2VyIEFQSSB0byBsb2FkIHRoZSBST00uICBVc2UgI3Jlc2V0IHRvIGZvcmdldCBhbmQgcmVsb2FkLlxuICBzdGF0aWMgYXN5bmMgbG9hZChwYXRjaD86IChkYXRhOiBVaW50OEFycmF5KSA9PiBQcm9taXNlPHZvaWQ+LFxuICAgICAgICAgICAgICAgICAgICByZWNlaXZlcj86IChwaWNrZXI6IEVsZW1lbnQpID0+IHZvaWQpIHtcbiAgICBjb25zdCBmaWxlID0gYXdhaXQgcGlja0ZpbGUocmVjZWl2ZXIpO1xuICAgIGlmIChwYXRjaCkgYXdhaXQgcGF0Y2goZmlsZSk7XG4gICAgcmV0dXJuIG5ldyBSb20oZmlsZSk7XG4gIH0gIFxufVxuXG4vLyBjb25zdCBpbnRlcnNlY3RzID0gKGxlZnQsIHJpZ2h0KSA9PiB7XG4vLyAgIGlmIChsZWZ0LnNpemUgPiByaWdodC5zaXplKSByZXR1cm4gaW50ZXJzZWN0cyhyaWdodCwgbGVmdCk7XG4vLyAgIGZvciAobGV0IGkgb2YgbGVmdCkge1xuLy8gICAgIGlmIChyaWdodC5oYXMoaSkpIHJldHVybiB0cnVlO1xuLy8gICB9XG4vLyAgIHJldHVybiBmYWxzZTtcbi8vIH1cblxuLy8gY29uc3QgVElMRV9FRkZFQ1RTX0JZX1RJTEVTRVQgPSB7XG4vLyAgIDB4ODA6IDB4YjMsXG4vLyAgIDB4ODQ6IDB4YjQsXG4vLyAgIDB4ODg6IDB4YjUsXG4vLyAgIDB4OGM6IDB4YjYsXG4vLyAgIDB4OTA6IDB4YjcsXG4vLyAgIDB4OTQ6IDB4YjgsXG4vLyAgIDB4OTg6IDB4YjksXG4vLyAgIDB4OWM6IDB4YmEsXG4vLyAgIDB4YTA6IDB4YmIsXG4vLyAgIDB4YTQ6IDB4YmMsXG4vLyAgIDB4YTg6IDB4YjUsXG4vLyAgIDB4YWM6IDB4YmQsXG4vLyB9O1xuXG4vLyBPbmx5IG1ha2VzIHNlbnNlIGluIHRoZSBicm93c2VyLlxuZnVuY3Rpb24gcGlja0ZpbGUocmVjZWl2ZXI/OiAocGlja2VyOiBFbGVtZW50KSA9PiB2b2lkKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gIGlmICghcmVjZWl2ZXIpIHJlY2VpdmVyID0gcGlja2VyID0+IGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGlja2VyKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoICE9PSAnI3Jlc2V0Jykge1xuICAgICAgY29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyb20nKTtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKFxuICAgICAgICAgICAgVWludDhBcnJheS5mcm9tKFxuICAgICAgICAgICAgICAgIG5ldyBBcnJheShkYXRhLmxlbmd0aCAvIDIpLmZpbGwoMCkubWFwKFxuICAgICAgICAgICAgICAgICAgICAoXywgaSkgPT4gTnVtYmVyLnBhcnNlSW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVsyICogaV0gKyBkYXRhWzIgKiBpICsgMV0sIDE2KSkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdXBsb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHVwbG9hZCk7XG4gICAgdXBsb2FkLnR5cGUgPSAnZmlsZSc7XG4gICAgdXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSB1cGxvYWQuZmlsZXMhWzBdO1xuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkZW5kJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0IGFzIEFycmF5QnVmZmVyKTtcbiAgICAgICAgY29uc3Qgc3RyID0gQXJyYXkuZnJvbShhcnIsIGhleCkuam9pbignJyk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdyb20nLCBzdHIpO1xuICAgICAgICB1cGxvYWQucmVtb3ZlKCk7XG4gICAgICAgIHJlc29sdmUoYXJyKTtcbiAgICAgIH0pO1xuICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IEVYUEVDVEVEX0NSQzMyID0gMHgxYmQzOTAzMjtcblxuLy8gRm9ybWF0OiBbYWRkcmVzcywgYnJva2VuLCBmaXhlZF1cbmNvbnN0IEFESlVTVE1FTlRTID0gW1xuICAvLyBGaXggc29mdGxvY2sgaW4gY3J5cHQgZHVlIHRvIGZseWFibGUgd2FsbCAoZWZmZWN0cyAkYjYgdGlsZSAkNDYpXG4gIFsweDEzNjQ2LCAweDAyLCAweDA2XSxcbiAgLy8gRml4IGJyb2tlbiAoZmFsbC10aHJvdWdoKSBleGl0IG91dHNpZGUgc3RhcnRcbiAgWzB4MTQ1NmEsIDB4MDAsIDB4ZmZdLFxuICAvLyBSZWR1bmRhbnQgZXhpdCBuZXh0IHRvIHN0b20ncyBkb29yIGluICQxOVxuICBbMHgxNGFlYiwgMHgwOSwgMHhmZl0sXG4gIC8vIEZpeCBnYXJiYWdlIG1hcCBzcXVhcmUgaW4gYm90dG9tLXJpZ2h0IG9mIE10IFNhYnJlIFdlc3QgY2F2ZVxuICBbMHgxNGRiOSwgMHgwOCwgMHg4MF0sXG4gIC8vIEZpeCBnYXJiYWdlIG1hcCBzcXVhcmUgaW4gYm90dG9tLWxlZnQgb2YgTGltZSBUcmVlIFZhbGxleVxuICBbMHgxNTQ1ZCwgMHhmZiwgMHgwMF0sXG4gIC8vIFJlbW92ZSB1bnVzZWQgbWFwIHNjcmVlbnMgZnJvbSBFdmlsIFNwaXJpdCBsb3dlclxuICBbMHgxNWJhZiwgMHhmMCwgMHg4MF0sXG4gIFsweDE1YmI2LCAweGRmLCAweDgwXSxcbiAgWzB4MTViYjcsIDB4OTYsIDB4ODBdLFxuICAvLyBGaXggZ2FyYmFnZSBhdCBib3R0b20gb2Ygb2FzaXMgY2F2ZSBtYXAgKGl0J3MgOHgxMSwgbm90IDh4MTIgPT4gZml4IGhlaWdodClcbiAgWzB4MTY0ZmYsIDB4MGIsIDB4MGFdLFxuICAvLyBGaXggYmFkIG11c2ljIGluIHpvbWJpZXRvd24gaG91c2VzOiAkMTAgc2hvdWxkIGJlICQwMVxuICBbMHgxNzgyYSwgMHgxMCwgMHgwMV0sXG4gIFsweDE3ODU3LCAweDEwLCAweDAxXSxcbiAgLy8gRml4IGJhZCBzcGF3biBpbiBNdCBIeWRyYSAobWFrZSBpdCBhbiBleHRyYSBwdWRkbGUpLlxuICBbMHgxOWYwMiwgMHg0MCwgMHg4MF0sXG4gIFsweDE5ZjAzLCAweDMzLCAweDMyXSxcbiAgLy8gUG9pbnQgQW1hem9uZXMgb3V0ZXIgZ3VhcmQgdG8gcG9zdC1vdmVyZmxvdyBtZXNzYWdlIHRoYXQncyBhY3R1YWxseSBzaG93bi5cbiAgWzB4MWNmMDUsIDB4NDcsIDB4NDhdLFxuICAvLyBSZW1vdmUgc3RyYXkgZmxpZ2h0IGdyYW50ZXIgaW4gWm9tYmlldG93bi5cbiAgWzB4MWQzMTEsIDB4MjAsIDB4YTBdLFxuICBbMHgxZDMxMiwgMHgzMCwgMHgwMF0sXG4gIC8vIEZpeCBxdWVlbidzIGRpYWxvZyB0byB0ZXJtaW5hdGUgb24gbGFzdCBpdGVtLCByYXRoZXIgdGhhbiBvdmVyZmxvdyxcbiAgLy8gc28gdGhhdCB3ZSBkb24ndCBwYXJzZSBnYXJiYWdlLlxuICBbMHgxY2ZmOSwgMHg2MCwgMHhlMF0sXG4gIC8vIEZpeCBBbWF6b25lcyBvdXRlciBndWFyZCBtZXNzYWdlIHRvIG5vdCBvdmVyZmxvdy5cbiAgWzB4MmNhOTAsIDB4MDIsIDB4MDBdLFxuICAvLyBGaXggc2VlbWluZ2x5LXVudXNlZCBrZW5zdSBtZXNzYWdlIDFkOjE3IG92ZXJmbG93aW5nIGludG8gMWQ6MThcbiAgWzB4MmY1NzMsIDB4MDIsIDB4MDBdLFxuICAvLyBGaXggdW51c2VkIGthcm1pbmUgdHJlYXN1cmUgY2hlc3QgbWVzc2FnZSAyMDoxOC5cbiAgWzB4MmZhZTQsIDB4NWYsIDB4MDBdLFxuXSBhcyBjb25zdDtcbiJdfQ==