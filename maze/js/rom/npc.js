import { Entity } from './entity.js';
import { MessageId } from './messageid.js';
import { DIALOG_FLAGS, SPAWN_CONDITION_FLAGS, addr, hex, readBigEndian, readLittleEndian, tuple, writeLittleEndian } from './util.js';
export class Npc extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.spawnConditions = new Map();
        this.localDialogs = new Map();
        this.used = !UNUSED_NPCS.has(id) && (id < 0x8f || id >= 0xc0);
        const hasDialog = id <= 0xc3;
        this.dataBase = 0x80f0 | ((id & 0xfc) << 6) | ((id & 3) << 2);
        this.data = tuple(rom.prg, this.dataBase, 4);
        this.spawnPointer = 0x1c5e0 + (id << 1);
        this.spawnBase = readLittleEndian(rom.prg, this.spawnPointer) + 0x14000;
        let i = this.spawnBase;
        let loc;
        while (this.used && (loc = rom.prg[i++]) !== 0xff) {
            const flags = SPAWN_CONDITION_FLAGS.read(rom.prg, i);
            i += 2 * flags.length;
            this.spawnConditions.set(loc, flags);
        }
        this.dialogPointer = 0x1c95d + (id << 1);
        this.dialogBase = hasDialog ? addr(rom.prg, this.dialogPointer, 0x14000) : 0;
        this.globalDialogs = [];
        if (hasDialog) {
            let a = this.dialogBase;
            while (true) {
                const [dialog, last] = GlobalDialog.parse(rom.prg, a);
                a += 4;
                if (dialog.condition)
                    this.globalDialogs.push(dialog);
                if (last)
                    break;
            }
            const locations = [];
            while (true) {
                const location = rom.prg[a++];
                if (location === 0xff)
                    break;
                locations.push([location, rom.prg[a++]]);
            }
            if (!locations.length)
                locations.push([-1, 0]);
            const base = a;
            for (const [location, offset] of locations) {
                const dialogs = [];
                this.localDialogs.set(location, dialogs);
                a = base + offset;
                while (true) {
                    const [dialog, last] = LocalDialog.parse(rom.prg, a);
                    a += dialog.byteLength();
                    dialogs.push(dialog);
                    if (last)
                        break;
                }
            }
        }
        for (const i in NAMES) {
            if (!NAMES.hasOwnProperty(i))
                continue;
            const name = NAMES[i];
            if (name[0] === id) {
                this.name = name[1];
                if (name.length > 2) {
                    this.itemNames = name.slice(2, 4);
                }
            }
        }
    }
    spawnConditionsBytes() {
        const bytes = [];
        for (const [loc, flags] of this.spawnConditions) {
            bytes.push(loc, ...SPAWN_CONDITION_FLAGS.bytes(flags));
        }
        bytes.push(0xff);
        return bytes;
    }
    hasDialog() {
        return Boolean(this.globalDialogs.length || this.localDialogs.size);
    }
    *allDialogs() {
        yield* this.globalDialogs;
        for (const ds of this.localDialogs.values()) {
            yield* ds;
        }
    }
    dialogBytes() {
        if (!this.hasDialog())
            return [];
        const bytes = [];
        function serialize(ds) {
            const out = [];
            for (let i = 0; i < ds.length; i++) {
                out.push(...ds[i].bytes(i === ds.length - 1));
            }
            return out;
        }
        if (this.globalDialogs.length) {
            bytes.push(...serialize(this.globalDialogs));
        }
        else {
            bytes.push(0x80, 0, 0, 0);
        }
        const locals = [];
        const cache = new Map();
        for (const [location, dialogs] of this.localDialogs) {
            const localBytes = serialize(dialogs);
            const label = localBytes.join(',');
            const cached = cache.get(label);
            if (cached != null) {
                bytes.push(location, cached);
                continue;
            }
            cache.set(label, locals.length);
            if (location !== -1)
                bytes.push(location, locals.length);
            locals.push(...localBytes);
        }
        if (locals.length)
            bytes.push(0xff, ...locals);
        return bytes;
    }
    link(id) {
        const other = this.rom.npcs[id];
        this.spawnConditions = other.spawnConditions;
        this.linkDialog(id);
    }
    linkDialog(id) {
        const other = this.rom.npcs[id];
        this.globalDialogs = other.globalDialogs;
        this.localDialogs = other.localDialogs;
    }
    async write(writer) {
        if (!this.used)
            return;
        const promises = [];
        writer.rom.subarray(this.dataBase, this.dataBase + 4).set(this.data);
        promises.push(writer.write(this.spawnConditionsBytes(), 0x1c000, 0x1dfff, `SpawnCondition ${hex(this.id)}`).then(address => writeLittleEndian(writer.rom, this.spawnPointer, address - 0x14000)));
        if (this.hasDialog()) {
            promises.push(writer.write(this.dialogBytes(), 0x1c000, 0x1dfff, `Dialog ${hex(this.id)}`).then(address => writeLittleEndian(writer.rom, this.dialogPointer, address - 0x14000)));
        }
        await Promise.all(promises);
    }
}
export class GlobalDialog {
    constructor(condition, message) {
        this.condition = condition;
        this.message = message;
    }
    static of(condition, message) {
        const [part, index, action = 0] = message;
        return new GlobalDialog(condition, MessageId.of({ part, index, action }));
    }
    static parse(data, offset = 0) {
        const flag = readBigEndian(data, offset);
        const message = MessageId.from(data, offset + 2);
        let condition = flag & 0x03ff;
        const last = !!(flag & 0x8000);
        const sign = flag & 0x2000;
        if (sign)
            condition = ~condition;
        return [new GlobalDialog(condition, message), last];
    }
    bytes(last) {
        let flag = this.condition;
        if (flag < 0)
            flag = (~flag) | 0x2000;
        if (last)
            flag |= 0x8000;
        return [flag >>> 8, flag & 0xff, ...this.message.data];
    }
}
export class LocalDialog {
    constructor(condition, message, update, flags) {
        this.condition = condition;
        this.message = message;
        this.update = update;
        this.flags = flags;
    }
    clone() {
        return LocalDialog.parse(this.bytes(false))[0];
    }
    static parse(data, offset = 0) {
        const word = readBigEndian(data, offset);
        const message = MessageId.from(data, offset + 2);
        const update = data[offset + 4];
        offset += 5;
        let condition = word & 0x03ff;
        const last = !!(word & 0x8000);
        const sign = word & 0x2000;
        if (sign)
            condition = ~condition;
        const flags = word & 0x4000 ? DIALOG_FLAGS.read(data, offset) : [];
        return [new LocalDialog(condition, message, update, flags), last];
    }
    static of(condition, message, flags = []) {
        const [part, index, action = 0] = message;
        return new LocalDialog(condition, MessageId.of({ part, index, action }), 0, flags);
    }
    byteLength() {
        return 5 + 2 * this.flags.length;
    }
    bytes(last) {
        let flag = this.condition;
        if (flag < 0)
            flag = (~flag) | 0x2000;
        if (last)
            flag |= 0x8000;
        if (this.flags.length)
            flag |= 0x4000;
        return [flag >>> 8, flag & 0xff, ...this.message.data, this.update,
            ...DIALOG_FLAGS.bytes(this.flags)];
    }
}
const UNUSED_NPCS = new Set([
    0x31, 0x3c, 0x6a, 0x73, 0x82, 0x86, 0x87, 0x89, 0x8a, 0x8b, 0x8c, 0x8d,
]);
export const NAMES = {
    leafElder: [0x0d, 'Leaf elder'],
    leafRabbit: [0x13, 'Leaf rabbit'],
    windmillGuard: [0x14, 'Windmill guard', 'in cave', 'in house'],
    windmillGuardSleeping: [0x15, 'Sleeping windmill guard'],
    akahanaShyron: [0x16, 'Akahana in Shyron'],
    oakElder: [0x1d, 'Oak elder'],
    oakMother: [0x1e, 'Oak mother'],
    dwarfChild: [0x1f, 'Dwarf child'],
    aryllis: [0x23, 'Aryllis'],
    portoaQueen: [0x38, 'Portoa queen'],
    fortuneTeller: [0x39, 'Fortune teller'],
    clark: [0x44, 'Clark'],
    brokahana: [0x54, 'Akahana\'s friend'],
    deo: [0x5a, 'Deo'],
    zebu: [0x5e, 'Zebu', 'in cave', 'in Shyron'],
    tornel: [0x5f, 'Tornel'],
    stom: [0x60, 'Stom'],
    mesiaShrine: [0x61, 'Mesia in Shrine'],
    asina: [0x62, 'Asina', 'in back room', ''],
    hurtDolphin: [0x63, 'Hurt dolphin'],
    fisherman: [0x64, 'Fisherman'],
    kensuCabin: [0x68, 'Kensu in cabin'],
    kensuSleeping: [0x6b, 'Sleeping kensu'],
    kensuSwan: [0x74, 'Kensu in Swan'],
    kensuSlime: [0x75, 'Slimed Kensu'],
    kensuLighthouse: [0x7e, 'Kensu in lighthouse'],
    akahanaBrynmaer: [0x82, 'Akahana in Brynmaer'],
    azteca: [0x83, 'Azteca'],
    fakeMesia: [0x84, 'Fake Mesia'],
    akahanaStoned: [0x88, 'Stoned Akahana'],
    mesia: [0x8e, 'Mesia'],
    rage: [0xc3, 'Rage'],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3JvbS9ucGMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLFlBQVksRUFBUSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUNwRCxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUN0QyxpQkFBaUIsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQU01QyxNQUFNLE9BQU8sR0FBSSxTQUFRLE1BQU07SUFrQjdCLFlBQVksR0FBUSxFQUFFLEVBQVU7UUFDOUIsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQVJqQixvQkFBZSxHQUFHLElBQUksR0FBRyxFQUFvQixDQUFDO1FBSzlDLGlCQUFZLEdBQUcsSUFBSSxHQUFHLEVBQXlCLENBQUM7UUFJOUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQWdDLENBQUMsRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUM7UUFDMUYsTUFBTSxTQUFTLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQztRQUU3QixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FB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O0lBQ3hCLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7SUFDcEIsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDO0lBQ3RDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLEVBQUUsQ0FBQztJQUMxQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDO0lBQ25DLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUM7SUFDOUIsVUFBVSxFQUFFLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDO0lBQ3BDLGFBQWEsRUFBRSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQztJQUN2QyxTQUFTLEVBQUUsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDO0lBQ2xDLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUM7SUFDbEMsZUFBZSxFQUFFLENBQUMsSUFBSSxFQUFFLHFCQUFxQixDQUFDO0lBQzlDLGVBQWUsRUFBRSxDQUFDLElBQUksRUFBRSxxQkFBcUIsQ0FBQztJQUM5QyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO0lBQ3hCLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUM7SUFDL0IsYUFBYSxFQUFFLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDO0lBQ3ZDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7SUFDdEIsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztDQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbnRpdHl9IGZyb20gJy4vZW50aXR5LmpzJztcbmltcG9ydCB7TWVzc2FnZUlkfSBmcm9tICcuL21lc3NhZ2VpZC5qcyc7XG5pbXBvcnQge0RJQUxPR19GTEFHUywgRGF0YSwgU1BBV05fQ09ORElUSU9OX0ZMQUdTLCBhZGRyLCBoZXgsXG4gICAgICAgIHJlYWRCaWdFbmRpYW4sIHJlYWRMaXR0bGVFbmRpYW4sIHR1cGxlLFxuICAgICAgICB3cml0ZUxpdHRsZUVuZGlhbn0gZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCB7V3JpdGVyfSBmcm9tICcuL3dyaXRlci5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxudHlwZSBGbGFnTGlzdCA9IG51bWJlcltdO1xuXG5leHBvcnQgY2xhc3MgTnBjIGV4dGVuZHMgRW50aXR5IHtcblxuICB1c2VkOiBib29sZWFuO1xuICBuYW1lPzogc3RyaW5nO1xuICBpdGVtTmFtZXM/OiBbc3RyaW5nLCBzdHJpbmddO1xuXG4gIGRhdGFCYXNlOiBudW1iZXI7XG4gIGRhdGE6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdOyAvLyB1aW50OFxuICBzcGF3blBvaW50ZXI6IG51bWJlcjtcbiAgc3Bhd25CYXNlOiBudW1iZXI7XG4gIC8vIEZsYWdzIHRvIGNoZWNrIHBlciBsb2NhdGlvbjogcG9zaXRpdmUgbWVhbnMgXCJtdXN0IGJlIHNldFwiXG4gIHNwYXduQ29uZGl0aW9ucyA9IG5ldyBNYXA8bnVtYmVyLCBGbGFnTGlzdD4oKTsgLy8ga2V5IHVpbnQ4XG5cbiAgZGlhbG9nUG9pbnRlcjogbnVtYmVyO1xuICBkaWFsb2dCYXNlOiBudW1iZXI7XG4gIGdsb2JhbERpYWxvZ3M6IEdsb2JhbERpYWxvZ1tdO1xuICBsb2NhbERpYWxvZ3MgPSBuZXcgTWFwPG51bWJlciwgTG9jYWxEaWFsb2dbXT4oKTtcblxuICBjb25zdHJ1Y3Rvcihyb206IFJvbSwgaWQ6IG51bWJlcikge1xuICAgIHN1cGVyKHJvbSwgaWQpO1xuICAgIHRoaXMudXNlZCA9ICFVTlVTRURfTlBDUy5oYXMoaWQpIC8qJiYgdGhpcy5iYXNlIDw9IDB4MWM3ODEqLyAmJiAoaWQgPCAweDhmIHx8IGlkID49IDB4YzApO1xuICAgIGNvbnN0IGhhc0RpYWxvZyA9IGlkIDw9IDB4YzM7XG5cbiAgICB0aGlzLmRhdGFCYXNlID0gMHg4MGYwIHwgKChpZCAmIDB4ZmMpIDw8IDYpIHwgKChpZCAmIDMpIDw8IDIpO1xuICAgIHRoaXMuZGF0YSA9IHR1cGxlKHJvbS5wcmcsIHRoaXMuZGF0YUJhc2UsIDQpO1xuXG4gICAgdGhpcy5zcGF3blBvaW50ZXIgPSAweDFjNWUwICsgKGlkIDw8IDEpO1xuICAgIC8vIGNvbnNvbGUubG9nKGBOUEMgU3Bhd24gJCR7dGhpcy5pZC50b1N0cmluZygxNil9OiAke3JvbS5wcmdbdGhpcy5wb2ludGVyXS50b1N0cmluZygxNil9ICR7XG4gICAgLy8gICAgICAgICAgICAgIHJvbS5wcmdbdGhpcy5wb2ludGVyICsgMV0udG9TdHJpbmcoMTYpfWApO1xuICAgIHRoaXMuc3Bhd25CYXNlID0gcmVhZExpdHRsZUVuZGlhbihyb20ucHJnLCB0aGlzLnNwYXduUG9pbnRlcikgKyAweDE0MDAwO1xuXG4gICAgLy8gUG9wdWxhdGUgc3Bhd24gY29uZGl0aW9uc1xuICAgIGxldCBpID0gdGhpcy5zcGF3bkJhc2U7XG4gICAgbGV0IGxvYztcbiAgICB3aGlsZSAodGhpcy51c2VkICYmIChsb2MgPSByb20ucHJnW2krK10pICE9PSAweGZmKSB7XG4gICAgICBjb25zdCBmbGFncyA9IFNQQVdOX0NPTkRJVElPTl9GTEFHUy5yZWFkKHJvbS5wcmcsIGkpO1xuICAgICAgaSArPSAyICogZmxhZ3MubGVuZ3RoO1xuICAgICAgdGhpcy5zcGF3bkNvbmRpdGlvbnMuc2V0KGxvYywgZmxhZ3MpO1xuICAgIH1cblxuICAgIC8vIFBvcHVsYXRlIHRoZSBkaWFsb2cgdGFibGVcbiAgICB0aGlzLmRpYWxvZ1BvaW50ZXIgPSAweDFjOTVkICsgKGlkIDw8IDEpO1xuICAgIHRoaXMuZGlhbG9nQmFzZSA9IGhhc0RpYWxvZyA/IGFkZHIocm9tLnByZywgdGhpcy5kaWFsb2dQb2ludGVyLCAweDE0MDAwKSA6IDA7XG4gICAgdGhpcy5nbG9iYWxEaWFsb2dzID0gW107XG4gICAgaWYgKGhhc0RpYWxvZykge1xuICAgICAgbGV0IGEgPSB0aGlzLmRpYWxvZ0Jhc2U7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCBbZGlhbG9nLCBsYXN0XSA9IEdsb2JhbERpYWxvZy5wYXJzZShyb20ucHJnLCBhKTtcbiAgICAgICAgYSArPSA0O1xuICAgICAgICBpZiAoZGlhbG9nLmNvbmRpdGlvbikgdGhpcy5nbG9iYWxEaWFsb2dzLnB1c2goZGlhbG9nKTtcbiAgICAgICAgaWYgKGxhc3QpIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gUmVhZCB0aGUgbG9jYXRpb24gdGFibGVcbiAgICAgIGNvbnN0IGxvY2F0aW9uczogW251bWJlciwgbnVtYmVyXVtdID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHJvbS5wcmdbYSsrXTtcbiAgICAgICAgaWYgKGxvY2F0aW9uID09PSAweGZmKSBicmVhaztcbiAgICAgICAgbG9jYXRpb25zLnB1c2goW2xvY2F0aW9uLCByb20ucHJnW2ErK11dKTtcbiAgICAgIH1cbiAgICAgIGlmICghbG9jYXRpb25zLmxlbmd0aCkgbG9jYXRpb25zLnB1c2goWy0xLCAwXSk7XG4gICAgICAvLyBOb3cgYnVpbGQgdXAgdGhlIExvY2FsRGlhbG9nIHRhYmxlc1xuICAgICAgY29uc3QgYmFzZSA9IGE7XG4gICAgICBmb3IgKGNvbnN0IFtsb2NhdGlvbiwgb2Zmc2V0XSBvZiBsb2NhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZGlhbG9nczogTG9jYWxEaWFsb2dbXSA9IFtdO1xuICAgICAgICB0aGlzLmxvY2FsRGlhbG9ncy5zZXQobG9jYXRpb24sIGRpYWxvZ3MpO1xuICAgICAgICBhID0gYmFzZSArIG9mZnNldDtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBjb25zdCBbZGlhbG9nLCBsYXN0XSA9IExvY2FsRGlhbG9nLnBhcnNlKHJvbS5wcmcsIGEpO1xuICAgICAgICAgIGEgKz0gZGlhbG9nLmJ5dGVMZW5ndGgoKTtcbiAgICAgICAgICBkaWFsb2dzLnB1c2goZGlhbG9nKTtcbiAgICAgICAgICBpZiAobGFzdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGkgaW4gTkFNRVMpIHtcbiAgICAgIGlmICghTkFNRVMuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgbmFtZSA9IChOQU1FUyBhcyB7fSBhcyB7W2tleTogc3RyaW5nXTogW251bWJlciwgc3RyaW5nLCBzdHJpbmc/LCBzdHJpbmc/XX0pW2ldO1xuICAgICAgaWYgKG5hbWVbMF0gPT09IGlkKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWVbMV07XG4gICAgICAgIGlmIChuYW1lLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICB0aGlzLml0ZW1OYW1lcyA9IG5hbWUuc2xpY2UoMiwgNCkgYXMgW3N0cmluZywgc3RyaW5nXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnNvbGUubG9nKGBOUEMgU3Bhd24gJCR7dGhpcy5pZC50b1N0cmluZygxNil9IGZyb20gJHt0aGlzLmJhc2UudG9TdHJpbmcoMTYpfTogYnl0ZXM6ICQke1xuICAgIC8vICAgICAgICAgICAgICB0aGlzLmJ5dGVzKCkubWFwKHg9PngudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsMCkpLmpvaW4oJyAnKX1gKTtcbiAgfVxuXG4gIHNwYXduQ29uZGl0aW9uc0J5dGVzKCk6IG51bWJlcltdIHtcbiAgICBjb25zdCBieXRlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2xvYywgZmxhZ3NdIG9mIHRoaXMuc3Bhd25Db25kaXRpb25zKSB7XG4gICAgICBieXRlcy5wdXNoKGxvYywgLi4uU1BBV05fQ09ORElUSU9OX0ZMQUdTLmJ5dGVzKGZsYWdzKSk7XG4gICAgfVxuICAgIGJ5dGVzLnB1c2goMHhmZik7XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9XG5cbiAgaGFzRGlhbG9nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2xvYmFsRGlhbG9ncy5sZW5ndGggfHwgdGhpcy5sb2NhbERpYWxvZ3Muc2l6ZSk7XG4gIH1cblxuICAqIGFsbERpYWxvZ3MoKTogSXRlcmFibGU8TG9jYWxEaWFsb2cgfCBHbG9iYWxEaWFsb2c+IHtcbiAgICB5aWVsZCAqIHRoaXMuZ2xvYmFsRGlhbG9ncztcbiAgICBmb3IgKGNvbnN0IGRzIG9mIHRoaXMubG9jYWxEaWFsb2dzLnZhbHVlcygpKSB7XG4gICAgICB5aWVsZCAqIGRzO1xuICAgIH1cbiAgfVxuXG4gIGRpYWxvZ0J5dGVzKCk6IG51bWJlcltdIHtcbiAgICBpZiAoIXRoaXMuaGFzRGlhbG9nKCkpIHJldHVybiBbXTtcbiAgICBjb25zdCBieXRlczogbnVtYmVyW10gPSBbXTtcbiAgICBmdW5jdGlvbiBzZXJpYWxpemUoZHM6IEdsb2JhbERpYWxvZ1tdIHwgTG9jYWxEaWFsb2dbXSk6IG51bWJlcltdIHtcbiAgICAgIGNvbnN0IG91dDogbnVtYmVyW10gPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3V0LnB1c2goLi4uZHNbaV0uYnl0ZXMoaSA9PT0gZHMubGVuZ3RoIC0gMSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgaWYgKHRoaXMuZ2xvYmFsRGlhbG9ncy5sZW5ndGgpIHtcbiAgICAgIGJ5dGVzLnB1c2goLi4uc2VyaWFsaXplKHRoaXMuZ2xvYmFsRGlhbG9ncykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlcy5wdXNoKDB4ODAsIDAsIDAsIDApOyAvLyBcImVtcHR5XCJcbiAgICB9XG4gICAgY29uc3QgbG9jYWxzOiBudW1iZXJbXSA9IFtdO1xuICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTsgLy8gYWxsb3cgcmV1c2luZyBsb2NhdGlvbnNcbiAgICBmb3IgKGNvbnN0IFtsb2NhdGlvbiwgZGlhbG9nc10gb2YgdGhpcy5sb2NhbERpYWxvZ3MpIHtcbiAgICAgIGNvbnN0IGxvY2FsQnl0ZXMgPSBzZXJpYWxpemUoZGlhbG9ncyk7XG4gICAgICBjb25zdCBsYWJlbCA9IGxvY2FsQnl0ZXMuam9pbignLCcpO1xuICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGxhYmVsKTtcbiAgICAgIGlmIChjYWNoZWQgIT0gbnVsbCkge1xuICAgICAgICBieXRlcy5wdXNoKGxvY2F0aW9uLCBjYWNoZWQpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgU0FWRUQgJHtsb2NhbEJ5dGVzLmxlbmd0aH0gYnl0ZXNgKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjYWNoZS5zZXQobGFiZWwsIGxvY2Fscy5sZW5ndGgpO1xuICAgICAgaWYgKGxvY2F0aW9uICE9PSAtMSkgYnl0ZXMucHVzaChsb2NhdGlvbiwgbG9jYWxzLmxlbmd0aCk7XG4gICAgICBsb2NhbHMucHVzaCguLi5sb2NhbEJ5dGVzKTtcbiAgICB9XG4gICAgaWYgKGxvY2Fscy5sZW5ndGgpIGJ5dGVzLnB1c2goMHhmZiwgLi4ubG9jYWxzKTtcblxuICAgIC8vIGNvbnNvbGUubG9nKGBOUEMgJHt0aGlzLmlkLnRvU3RyaW5nKDE2KX06IGJ5dGVzIGxlbmd0aCAke2J5dGVzLmxlbmd0aH1gKTtcblxuICAgIHJldHVybiBieXRlcztcbiAgfVxuXG4gIC8vIE1ha2VzIGEgXCJoYXJkbGlua1wiIGJldHdlZW4gdHdvIE5QQ3MsIGZvciBzcGF3biBjb25kaXRpb25zIGFuZCBkaWFsb2cuXG4gIGxpbmsoaWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG90aGVyID0gdGhpcy5yb20ubnBjc1tpZF07XG4gICAgdGhpcy5zcGF3bkNvbmRpdGlvbnMgPSBvdGhlci5zcGF3bkNvbmRpdGlvbnM7XG4gICAgdGhpcy5saW5rRGlhbG9nKGlkKTtcbiAgfVxuXG4gIGxpbmtEaWFsb2coaWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG90aGVyID0gdGhpcy5yb20ubnBjc1tpZF07XG4gICAgdGhpcy5nbG9iYWxEaWFsb2dzID0gb3RoZXIuZ2xvYmFsRGlhbG9ncztcbiAgICB0aGlzLmxvY2FsRGlhbG9ncyA9IG90aGVyLmxvY2FsRGlhbG9ncztcbiAgfVxuXG4gIGFzeW5jIHdyaXRlKHdyaXRlcjogV3JpdGVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLnVzZWQpIHJldHVybjtcbiAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgIHdyaXRlci5yb20uc3ViYXJyYXkodGhpcy5kYXRhQmFzZSwgdGhpcy5kYXRhQmFzZSArIDQpLnNldCh0aGlzLmRhdGEpO1xuICAgIHByb21pc2VzLnB1c2god3JpdGVyLndyaXRlKHRoaXMuc3Bhd25Db25kaXRpb25zQnl0ZXMoKSwgMHgxYzAwMCwgMHgxZGZmZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgU3Bhd25Db25kaXRpb24gJHtoZXgodGhpcy5pZCl9YCkudGhlbihcbiAgICAgICAgYWRkcmVzcyA9PiB3cml0ZUxpdHRsZUVuZGlhbih3cml0ZXIucm9tLCB0aGlzLnNwYXduUG9pbnRlciwgYWRkcmVzcyAtIDB4MTQwMDApKSk7XG5cbiAgICBpZiAodGhpcy5oYXNEaWFsb2coKSkge1xuICAgICAgcHJvbWlzZXMucHVzaCh3cml0ZXIud3JpdGUodGhpcy5kaWFsb2dCeXRlcygpLCAweDFjMDAwLCAweDFkZmZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYERpYWxvZyAke2hleCh0aGlzLmlkKX1gKS50aGVuKFxuICAgICAgICAgIGFkZHJlc3MgPT4gd3JpdGVMaXR0bGVFbmRpYW4od3JpdGVyLnJvbSwgdGhpcy5kaWFsb2dQb2ludGVyLCBhZGRyZXNzIC0gMHgxNDAwMCkpKTtcbiAgICB9XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHbG9iYWxEaWFsb2cge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29uZGl0aW9uOiBudW1iZXIsIHB1YmxpYyBtZXNzYWdlOiBNZXNzYWdlSWQpIHt9XG5cbiAgc3RhdGljIG9mKGNvbmRpdGlvbjogbnVtYmVyLFxuICAgICAgICAgICAgbWVzc2FnZTogW251bWJlciwgbnVtYmVyLCBudW1iZXI/XSk6IEdsb2JhbERpYWxvZyB7XG4gICAgY29uc3QgW3BhcnQsIGluZGV4LCBhY3Rpb24gPSAwXSA9IG1lc3NhZ2U7XG4gICAgcmV0dXJuIG5ldyBHbG9iYWxEaWFsb2coY29uZGl0aW9uLCBNZXNzYWdlSWQub2Yoe3BhcnQsIGluZGV4LCBhY3Rpb259KSk7XG4gIH1cblxuICAvLyBSZXR1cm5zIFtkaWFsb2csIGxhc3RdLlxuICBzdGF0aWMgcGFyc2UoZGF0YTogRGF0YTxudW1iZXI+LCBvZmZzZXQ6IG51bWJlciA9IDApOiBbR2xvYmFsRGlhbG9nLCBib29sZWFuXSB7XG4gICAgY29uc3QgZmxhZyA9IHJlYWRCaWdFbmRpYW4oZGF0YSwgb2Zmc2V0KTtcbiAgICBjb25zdCBtZXNzYWdlID0gTWVzc2FnZUlkLmZyb20oZGF0YSwgb2Zmc2V0ICsgMik7XG5cbiAgICBsZXQgY29uZGl0aW9uID0gZmxhZyAmIDB4MDNmZjtcbiAgICBjb25zdCBsYXN0ID0gISEoZmxhZyAmIDB4ODAwMCk7XG4gICAgY29uc3Qgc2lnbiA9IGZsYWcgJiAweDIwMDA7XG4gICAgaWYgKHNpZ24pIGNvbmRpdGlvbiA9IH5jb25kaXRpb247XG5cbiAgICByZXR1cm4gW25ldyBHbG9iYWxEaWFsb2coY29uZGl0aW9uLCBtZXNzYWdlKSwgbGFzdF07XG4gIH1cblxuICBieXRlcyhsYXN0OiBib29sZWFuKTogbnVtYmVyW10ge1xuICAgIGxldCBmbGFnID0gdGhpcy5jb25kaXRpb247XG4gICAgaWYgKGZsYWcgPCAwKSBmbGFnID0gKH5mbGFnKSB8IDB4MjAwMDtcbiAgICBpZiAobGFzdCkgZmxhZyB8PSAweDgwMDA7XG4gICAgcmV0dXJuIFtmbGFnID4+PiA4LCBmbGFnICYgMHhmZiwgLi4udGhpcy5tZXNzYWdlLmRhdGFdO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NhbERpYWxvZyB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb25kaXRpb246IG51bWJlcixcbiAgICAgICAgICAgICAgcHVibGljIG1lc3NhZ2U6IE1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgcHVibGljIHVwZGF0ZTogbnVtYmVyLFxuICAgICAgICAgICAgICBwdWJsaWMgZmxhZ3M6IEZsYWdMaXN0KSB7fVxuXG4gIGNsb25lKCk6IExvY2FsRGlhbG9nIHtcbiAgICByZXR1cm4gTG9jYWxEaWFsb2cucGFyc2UodGhpcy5ieXRlcyhmYWxzZSkpWzBdO1xuICB9XG5cbiAgLy8gUmV0dXJucyBbZGlhbG9nLCBsYXN0XVxuICBzdGF0aWMgcGFyc2UoZGF0YTogRGF0YTxudW1iZXI+LCBvZmZzZXQ6IG51bWJlciA9IDApOiBbTG9jYWxEaWFsb2csIGJvb2xlYW5dIHtcbiAgICBjb25zdCB3b3JkID0gcmVhZEJpZ0VuZGlhbihkYXRhLCBvZmZzZXQpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBNZXNzYWdlSWQuZnJvbShkYXRhLCBvZmZzZXQgKyAyKTtcbiAgICBjb25zdCB1cGRhdGUgPSBkYXRhW29mZnNldCArIDRdO1xuICAgIG9mZnNldCArPSA1O1xuXG4gICAgbGV0IGNvbmRpdGlvbiA9IHdvcmQgJiAweDAzZmY7XG4gICAgY29uc3QgbGFzdCA9ICEhKHdvcmQgJiAweDgwMDApO1xuICAgIGNvbnN0IHNpZ24gPSB3b3JkICYgMHgyMDAwO1xuICAgIGlmIChzaWduKSBjb25kaXRpb24gPSB+Y29uZGl0aW9uO1xuICAgIGNvbnN0IGZsYWdzID0gd29yZCAmIDB4NDAwMCA/IERJQUxPR19GTEFHUy5yZWFkKGRhdGEsIG9mZnNldCkgOiBbXTtcbiAgICByZXR1cm4gW25ldyBMb2NhbERpYWxvZyhjb25kaXRpb24sIG1lc3NhZ2UsIHVwZGF0ZSwgZmxhZ3MpLCBsYXN0XTtcbiAgfVxuXG4gIHN0YXRpYyBvZihjb25kaXRpb246IG51bWJlcixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyP10sXG4gICAgICAgICAgICBmbGFnczogRmxhZ0xpc3QgPSBbXSk6IExvY2FsRGlhbG9nIHtcbiAgICBjb25zdCBbcGFydCwgaW5kZXgsIGFjdGlvbiA9IDBdID0gbWVzc2FnZTtcbiAgICByZXR1cm4gbmV3IExvY2FsRGlhbG9nKGNvbmRpdGlvbiwgTWVzc2FnZUlkLm9mKHtwYXJ0LCBpbmRleCwgYWN0aW9ufSksIDAsIGZsYWdzKTtcbiAgfVxuXG4gIGJ5dGVMZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gNSArIDIgKiB0aGlzLmZsYWdzLmxlbmd0aDtcbiAgfVxuXG4gIGJ5dGVzKGxhc3Q6IGJvb2xlYW4pOiBudW1iZXJbXSB7XG4gICAgbGV0IGZsYWcgPSB0aGlzLmNvbmRpdGlvbjtcbiAgICBpZiAoZmxhZyA8IDApIGZsYWcgPSAofmZsYWcpIHwgMHgyMDAwO1xuICAgIGlmIChsYXN0KSBmbGFnIHw9IDB4ODAwMDtcbiAgICBpZiAodGhpcy5mbGFncy5sZW5ndGgpIGZsYWcgfD0gMHg0MDAwO1xuICAgIHJldHVybiBbZmxhZyA+Pj4gOCwgZmxhZyAmIDB4ZmYsIC4uLnRoaXMubWVzc2FnZS5kYXRhLCB0aGlzLnVwZGF0ZSxcbiAgICAgICAgICAgIC4uLkRJQUxPR19GTEFHUy5ieXRlcyh0aGlzLmZsYWdzKV07XG4gIH1cbn1cblxuY29uc3QgVU5VU0VEX05QQ1MgPSBuZXcgU2V0KFtcbiAgMHgzMSwgMHgzYywgMHg2YSwgMHg3MywgMHg4MiwgMHg4NiwgMHg4NywgMHg4OSwgMHg4YSwgMHg4YiwgMHg4YywgMHg4ZCxcbiAgLy8gYWxzbyBldmVyeXRoaW5nIGZyb20gOGYuLmMwLCBidXQgdGhhdCdzIGltcGxpY2l0LlxuXSk7XG5cbmV4cG9ydCBjb25zdCBOQU1FUyA9IHtcbiAgbGVhZkVsZGVyOiBbMHgwZCwgJ0xlYWYgZWxkZXInXSxcbiAgbGVhZlJhYmJpdDogWzB4MTMsICdMZWFmIHJhYmJpdCddLFxuICB3aW5kbWlsbEd1YXJkOiBbMHgxNCwgJ1dpbmRtaWxsIGd1YXJkJywgJ2luIGNhdmUnLCAnaW4gaG91c2UnXSxcbiAgd2luZG1pbGxHdWFyZFNsZWVwaW5nOiBbMHgxNSwgJ1NsZWVwaW5nIHdpbmRtaWxsIGd1YXJkJ10sXG4gIGFrYWhhbmFTaHlyb246IFsweDE2LCAnQWthaGFuYSBpbiBTaHlyb24nXSwgLy8gYWxzbyBpbiBjYXZlXG4gIG9ha0VsZGVyOiBbMHgxZCwgJ09hayBlbGRlciddLFxuICBvYWtNb3RoZXI6IFsweDFlLCAnT2FrIG1vdGhlciddLFxuICBkd2FyZkNoaWxkOiBbMHgxZiwgJ0R3YXJmIGNoaWxkJ10sXG4gIGFyeWxsaXM6IFsweDIzLCAnQXJ5bGxpcyddLFxuICBwb3J0b2FRdWVlbjogWzB4MzgsICdQb3J0b2EgcXVlZW4nXSxcbiAgZm9ydHVuZVRlbGxlcjogWzB4MzksICdGb3J0dW5lIHRlbGxlciddLFxuICBjbGFyazogWzB4NDQsICdDbGFyayddLFxuICBicm9rYWhhbmE6IFsweDU0LCAnQWthaGFuYVxcJ3MgZnJpZW5kJ10sXG4gIGRlbzogWzB4NWEsICdEZW8nXSxcbiAgemVidTogWzB4NWUsICdaZWJ1JywgJ2luIGNhdmUnLCAnaW4gU2h5cm9uJ10sXG4gIHRvcm5lbDogWzB4NWYsICdUb3JuZWwnXSxcbiAgc3RvbTogWzB4NjAsICdTdG9tJ10sXG4gIG1lc2lhU2hyaW5lOiBbMHg2MSwgJ01lc2lhIGluIFNocmluZSddLFxuICBhc2luYTogWzB4NjIsICdBc2luYScsICdpbiBiYWNrIHJvb20nLCAnJ10sXG4gIGh1cnREb2xwaGluOiBbMHg2MywgJ0h1cnQgZG9scGhpbiddLFxuICBmaXNoZXJtYW46IFsweDY0LCAnRmlzaGVybWFuJ10sXG4gIGtlbnN1Q2FiaW46IFsweDY4LCAnS2Vuc3UgaW4gY2FiaW4nXSxcbiAga2Vuc3VTbGVlcGluZzogWzB4NmIsICdTbGVlcGluZyBrZW5zdSddLFxuICBrZW5zdVN3YW46IFsweDc0LCAnS2Vuc3UgaW4gU3dhbiddLFxuICBrZW5zdVNsaW1lOiBbMHg3NSwgJ1NsaW1lZCBLZW5zdSddLFxuICBrZW5zdUxpZ2h0aG91c2U6IFsweDdlLCAnS2Vuc3UgaW4gbGlnaHRob3VzZSddLFxuICBha2FoYW5hQnJ5bm1hZXI6IFsweDgyLCAnQWthaGFuYSBpbiBCcnlubWFlciddLCAvLyBOb3RlOiBvcmlnaW5hbGx5ICQxNlxuICBhenRlY2E6IFsweDgzLCAnQXp0ZWNhJ10sXG4gIGZha2VNZXNpYTogWzB4ODQsICdGYWtlIE1lc2lhJ10sXG4gIGFrYWhhbmFTdG9uZWQ6IFsweDg4LCAnU3RvbmVkIEFrYWhhbmEnXSxcbiAgbWVzaWE6IFsweDhlLCAnTWVzaWEnXSxcbiAgcmFnZTogWzB4YzMsICdSYWdlJ10sXG59O1xuIl19