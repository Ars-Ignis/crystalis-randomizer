import { seq } from './util.js';
class ChestSlot {
    constructor(slot, location, spawn) {
        this.slot = slot;
        this.location = location;
        this.spawn = spawn;
    }
    set(rom, item) {
        const spawn = rom.locations[this.location].spawns[this.spawn];
        spawn.id = item;
        if (item >= 0x70)
            spawn.patternBank = 1;
        if (rom.spoiler) {
            rom.spoiler.addSlot(this.slot, `Chest in ${rom.locations[this.location].name}`, item);
        }
    }
}
class HardcodedSlot {
    constructor(slot, address, name) {
        this.slot = slot;
        this.address = address;
        this.name = name;
    }
    set(rom, item) {
        rom.prg[this.address] = item;
        if (this.name && rom.spoiler)
            rom.spoiler.addSlot(this.slot, this.name || '', item);
    }
}
class BossDropSlot {
    constructor(slot, boss) {
        this.slot = slot;
        this.boss = boss;
    }
    set(rom, item) {
        if (item >= 0x70)
            throw new Error('no mimics on bosses');
        rom.bossKills[this.boss].itemDrop = item;
        if (rom.spoiler) {
            rom.spoiler.addSlot(this.slot, rom.bosses.fromBossKill(this.boss).name, item);
        }
    }
}
class PersonDataSlot {
    constructor(slot, person, index) {
        this.slot = slot;
        this.person = person;
        this.index = index;
    }
    set(rom, item) {
        if (item >= 0x70)
            throw new Error(`no mimics on people`);
        rom.npcs[this.person].data[this.index] = item;
        if (rom.spoiler) {
            const npc = rom.npcs[this.person];
            let name = npc && npc.name;
            if (npc && npc.itemNames) {
                const itemName = npc.itemNames[this.index];
                name = itemName ? name + ' ' + itemName : undefined;
            }
            rom.spoiler.addSlot(this.slot, name || '', item);
        }
    }
}
class Slots {
    constructor(rom) {
        this.rom = rom;
        const slots = seq(0x80, () => []);
        function addSlot(slot) {
            slots[slot.slot].push(slot);
        }
        for (const loc of rom.locations) {
            if (!loc.used)
                continue;
            for (let i = 0; i < loc.spawns.length; i++) {
                const spawn = loc.spawns[i];
                if (spawn.isChest())
                    addSlot(new ChestSlot(spawn.id, loc.id, i));
            }
        }
        for (const npc of rom.npcs) {
            if (!npc.used || !npc.hasDialog)
                continue;
            for (const ds of npc.localDialogs.values()) {
                for (const d of ds) {
                    switch (d.message.action) {
                        case 0x03:
                            addSlot(new PersonDataSlot(npc.data[0], npc.id, 0));
                            break;
                        case 0x09:
                        case 0x11:
                            addSlot(new PersonDataSlot(npc.data[1], npc.id, 1));
                            break;
                    }
                }
            }
        }
        for (const boss of rom.bosses) {
            if (boss.kill === 3 || boss.kill === 13)
                continue;
            if (boss.kill != null && boss.drop != null) {
                addSlot(new BossDropSlot(boss.drop, boss.kill));
            }
        }
        for (const [addr, name] of hardcodedItems) {
            addSlot(new HardcodedSlot(this.rom.prg[addr], addr, name));
        }
        extraSlots.forEach(addSlot);
        console.log('slots', slots);
        this.slots = slots;
    }
    update(fill) {
        for (let i = 0; i < fill.length; i++) {
            if (fill[i] == null)
                continue;
            for (const slot of this.slots[i]) {
                slot.set(this.rom, fill[i]);
            }
        }
        const flags = this.rom.itemGets.map(() => []);
        for (const itemget of this.rom.itemGets) {
            const { id } = itemget;
            for (const flag of itemget.flags) {
                if (flag === -1)
                    continue;
                const target = preservedItemGetFlags.has(flag) ? id : fill[id];
                (flags[target] || []).push(flag);
            }
        }
        for (const itemget of this.rom.itemGets) {
            itemget.flags = flags[itemget.id];
        }
    }
}
const hardcodedItems = [
    [0x367f4, 'Stom fight'],
    [0x3d18f, 'Slimed Kensu'],
    [0x3d1f9, 'Asina'],
    [0x3d2af, 'Stoned Akahana'],
    [0x3d30e, 'Lighthouse Kensu'],
    [0x3d337, 'Rage'],
    [0x3d655, 'Mt Sabre summit trigger'],
    [0x3d6d9, 'Whirlpool trigger'],
    [0x3d6de, 'Swan Kensu'],
    [0x3d6e8, 'Aryllis'],
    [0x3d711],
    [0x3d7fe, 'Akahana statue trade-in'],
];
const extraSlots = [
    new PersonDataSlot(0x36, 0x63, 1),
];
export function update(rom, fill) {
    new Slots(rom).update(fill);
}
const preservedItemGetFlags = new Set([
    0x024,
    0x08b,
    0x2fd,
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvcm9tL3Nsb3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFXOUIsTUFBTSxTQUFTO0lBQ2IsWUFBcUIsSUFBWSxFQUFXLFFBQWdCLEVBQVcsS0FBYTtRQUEvRCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQVcsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFXLFVBQUssR0FBTCxLQUFLLENBQVE7SUFBRyxDQUFDO0lBRXhGLEdBQUcsQ0FBQyxHQUFRLEVBQUUsSUFBWTtRQUN4QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlELEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksSUFBSSxJQUFJLElBQUk7WUFBRSxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUV4QyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7WUFDZixHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDdkY7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGFBQWE7SUFDakIsWUFBcUIsSUFBWSxFQUFXLE9BQWUsRUFBVyxJQUFhO1FBQTlELFNBQUksR0FBSixJQUFJLENBQVE7UUFBVyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQVcsU0FBSSxHQUFKLElBQUksQ0FBUztJQUFHLENBQUM7SUFFdkYsR0FBRyxDQUFDLEdBQVEsRUFBRSxJQUFZO1FBQ3hCLEdBQUcsQ0FBQyxHQUFHLENB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QUFFLHlCQUF5QixDQUFDO0NBSXJDLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRztJQUNqQixJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztDQUNsQyxDQUFDO0FBRUYsTUFBTSxVQUFVLE1BQU0sQ0FBQyxHQUFRLEVBQUUsSUFBYztJQUM3QyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQVNELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFFcEMsS0FBSztJQUdMLEtBQUs7SUFDTCxLQUFLO0NBQ04sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzZXF9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxuaW50ZXJmYWNlIFNsb3Qge1xuICByZWFkb25seSBzbG90OiBudW1iZXI7XG4gIHNldChyb206IFJvbSwgaXRlbTogbnVtYmVyKTogdm9pZDtcbn1cblxuLy8gVE9ETyAtIGNvbnNpZGVyIGEgZnVuY3Rpb24gaW50ZXJmYWNlIGluc3RlYWQgb2YgYSBjbGFzcz9cbi8vICAgICAgLSBhcmUgd2UgZ2V0dGluZyBiZW5lZml0IGZyb20gaW5zcGVjdGlvbiBhdCBhbGw/XG5cbmNsYXNzIENoZXN0U2xvdCBpbXBsZW1lbnRzIFNsb3Qge1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBzbG90OiBudW1iZXIsIHJlYWRvbmx5IGxvY2F0aW9uOiBudW1iZXIsIHJlYWRvbmx5IHNwYXduOiBudW1iZXIpIHt9XG5cbiAgc2V0KHJvbTogUm9tLCBpdGVtOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBzcGF3biA9IHJvbS5sb2NhdGlvbnNbdGhpcy5sb2NhdGlvbl0uc3Bhd25zW3RoaXMuc3Bhd25dO1xuICAgIHNwYXduLmlkID0gaXRlbTtcbiAgICBpZiAoaXRlbSA+PSAweDcwKSBzcGF3bi5wYXR0ZXJuQmFuayA9IDE7IC8vIG1pbWljcyBhbHdheXMgdXNlIHBhdHRlcm4gYmFuayAxXG5cbiAgICBpZiAocm9tLnNwb2lsZXIpIHtcbiAgICAgIHJvbS5zcG9pbGVyLmFkZFNsb3QodGhpcy5zbG90LCBgQ2hlc3QgaW4gJHtyb20ubG9jYXRpb25zW3RoaXMubG9jYXRpb25dLm5hbWV9YCwgaXRlbSk7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIEhhcmRjb2RlZFNsb3QgaW1wbGVtZW50cyBTbG90IHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgc2xvdDogbnVtYmVyLCByZWFkb25seSBhZGRyZXNzOiBudW1iZXIsIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmcpIHt9XG5cbiAgc2V0KHJvbTogUm9tLCBpdGVtOiBudW1iZXIpOiB2b2lkIHtcbiAgICByb20ucHJnW3RoaXMuYWRkcmVzc10gPSBpdGVtO1xuXG4gICAgaWYgKHRoaXMubmFtZSAmJiByb20uc3BvaWxlcikgcm9tLnNwb2lsZXIuYWRkU2xvdCh0aGlzLnNsb3QsIHRoaXMubmFtZSB8fCAnJywgaXRlbSk7XG4gIH1cbn1cblxuY2xhc3MgQm9zc0Ryb3BTbG90IGltcGxlbWVudHMgU2xvdCB7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHNsb3Q6IG51bWJlciwgcmVhZG9ubHkgYm9zczogbnVtYmVyKSB7fVxuXG4gIHNldChyb206IFJvbSwgaXRlbTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy9yb20uYm9zc2VzLmZyb21Cb3NzS2lsbCh0aGlzLmJvc3MpLmRyb3AgPSBpdGVtO1xuICAgIC8vY29uc3QgYWRkciA9IHJlYWRMaXR0bGVFbmRpYW4ocm9tLnByZywgMHgxZjk2YiArIDIgKiB0aGlzLmJvc3MpICsgMHgxNDAwMDtcbiAgICBpZiAoaXRlbSA+PSAweDcwKSB0aHJvdyBuZXcgRXJyb3IoJ25vIG1pbWljcyBvbiBib3NzZXMnKTtcbiAgICByb20uYm9zc0tpbGxzW3RoaXMuYm9zc10uaXRlbURyb3AgPSBpdGVtO1xuICAgIC8vcm9tLnByZ1thZGRyICsgNF0gPSBpdGVtO1xuXG4gICAgaWYgKHJvbS5zcG9pbGVyKSB7XG4gICAgICByb20uc3BvaWxlci5hZGRTbG90KHRoaXMuc2xvdCwgcm9tLmJvc3Nlcy5mcm9tQm9zc0tpbGwodGhpcy5ib3NzKSEubmFtZSwgaXRlbSk7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIFBlcnNvbkRhdGFTbG90IGltcGxlbWVudHMgU2xvdCB7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHNsb3Q6IG51bWJlciwgcmVhZG9ubHkgcGVyc29uOiBudW1iZXIsIHJlYWRvbmx5IGluZGV4OiBudW1iZXIpIHt9XG5cbiAgc2V0KHJvbTogUm9tLCBpdGVtOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoaXRlbSA+PSAweDcwKSB0aHJvdyBuZXcgRXJyb3IoYG5vIG1pbWljcyBvbiBwZW9wbGVgKTtcbiAgICByb20ubnBjc1t0aGlzLnBlcnNvbl0uZGF0YVt0aGlzLmluZGV4XSA9IGl0ZW07XG5cbiAgICBpZiAocm9tLnNwb2lsZXIpIHtcbiAgICAgIGNvbnN0IG5wYyA9IHJvbS5ucGNzW3RoaXMucGVyc29uXTtcbiAgICAgIGxldCBuYW1lID0gbnBjICYmIG5wYy5uYW1lO1xuICAgICAgaWYgKG5wYyAmJiBucGMuaXRlbU5hbWVzKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1OYW1lID0gbnBjLml0ZW1OYW1lc1t0aGlzLmluZGV4XTtcbiAgICAgICAgbmFtZSA9IGl0ZW1OYW1lID8gbmFtZSArICcgJyArIGl0ZW1OYW1lIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcm9tLnNwb2lsZXIuYWRkU2xvdCh0aGlzLnNsb3QsIG5hbWUgfHwgJycsIGl0ZW0pO1xuICAgIH1cbiAgfVxufVxuXG4vLyAvLyBOT1RFOiB0aGlzIGlzIHByZXR0eSBpbmVmZmljaWVudCwgTyhuXjIpIGluIGl0ZW1nZXQgc2xvdHMuICBCdXQgd2UgcnVuIGl0XG4vLyAvLyBvbmNlIGFuZCBpdCdzIGEgbG90IGZhc3RlciB0aGFuIG90aGVyIHRoaW5ncywgc28gaXQncyBub3QgYSBiaWcgZGVhbC5cbi8vIGNsYXNzIFJldmVyc2VGbGFnU2xvdCBpbXBsZW1lbnRzIFNsb3Qge1xuLy8gICBjb25zdHJ1Y3RvcihyZWFkb25seSBmbGFnOiBudW1iZXIpIHt9XG5cbi8vICAgLy8gVE9ETyAtIDAxMyBkZWZlYXRlZCBzYWJlcmEgc2hvdWxkIGJlIGEgcmV2ZXJzZSBmbGFnIHNsb3QgZm9yIHNhYmVyYSdzIGRyb3Bcbi8vICAgLy8gICAgICAtIHRoZW4gd2UgY2FuIHJlbW92ZSBhbGwgdGhlIGV4dHJhIHNldHNcbi8vICAgc2V0KHJvbTogUm9tLCBpdGVtOiBudW1iZXIpOiB2b2lkIHtcbi8vICAgICBmb3IgKGNvbnN0IGl0ZW1nZXQgb2Ygcm9tLml0ZW1HZXRzKSB7XG4vLyAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1nZXQuZmxhZ3MuaW5kZXhPZih0aGlzLmZsYWcpO1xuLy8gICAgICAgaWYgKGl0ZW1zLmhhcyhpdGVtZ2V0LmlkKSAmJiBpbmRleCA8IDApIGl0ZW1nZXQuZmxhZ3MucHVzaCh0aGlzLmZsYWcpO1xuLy8gICAgICAgaWYgKCFpdGVtcy5oYXMoaXRlbWdldC5pZCkgJiYgaW5kZXggPj0gMCkgaXRlbWdldC5mbGFncy5zcGxpY2UoaW5kZXgsIDEpO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuXG5cbi8vIE1hcHMgZnJvbSBzbG90IHRvIGl0ZW0gYWN0dWFsbHkgaW4gdGhlIHNsb3QuXG4vLyBNYW5hZ2VzIGFsbCB0aGUgbmVjZXNzYXJ5IHVwZGF0ZXMgZm9yIHJlYXJyYW5naW5nIGl0ZW1zLlxuY2xhc3MgU2xvdHMge1xuXG4gIHByaXZhdGUgc2xvdHM6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHlBcnJheTxTbG90Pj47XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcm9tOiBSb20pIHtcblxuICAgIC8vIFRPRE8gLSB0aGlzIG5lZWRzIHRvIG1vdmUgdG8gQUZURVIgd2UndmUgZG9uZSBzb21lIGluaXRpYWwgZml4dXAuLi4hXG4gICAgLy8gTWF5YmUgd2UgcmVhbGx5IGRvIG5lZWQgdG8gbWFrZSBpdCBzZXBhcmF0ZSBmcm9tIHRoZSByb20/XG5cbiAgICBjb25zdCBzbG90czogU2xvdFtdW10gPSBzZXEoMHg4MCwgKCkgPT4gW10pO1xuICAgIGZ1bmN0aW9uIGFkZFNsb3Qoc2xvdDogU2xvdCk6IHZvaWQge1xuICAgICAgc2xvdHNbc2xvdC5zbG90XS5wdXNoKHNsb3QpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgY2hlc3RzXG4gICAgZm9yIChjb25zdCBsb2Mgb2Ygcm9tLmxvY2F0aW9ucykge1xuICAgICAgaWYgKCFsb2MudXNlZCkgY29udGludWU7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvYy5zcGF3bnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3Bhd24gPSBsb2Muc3Bhd25zW2ldO1xuICAgICAgICBpZiAoc3Bhd24uaXNDaGVzdCgpKSBhZGRTbG90KG5ldyBDaGVzdFNsb3Qoc3Bhd24uaWQsIGxvYy5pZCwgaSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgaXRlbSBnaXZlcnNcbiAgICBmb3IgKGNvbnN0IG5wYyBvZiByb20ubnBjcykge1xuICAgICAgaWYgKCFucGMudXNlZCB8fCAhbnBjLmhhc0RpYWxvZykgY29udGludWU7XG4gICAgICBmb3IgKGNvbnN0IGRzIG9mIG5wYy5sb2NhbERpYWxvZ3MudmFsdWVzKCkpIHtcbiAgICAgICAgZm9yIChjb25zdCBkIG9mIGRzKSB7XG4gICAgICAgICAgc3dpdGNoIChkLm1lc3NhZ2UuYWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSAweDAzOlxuICAgICAgICAgICAgYWRkU2xvdChuZXcgUGVyc29uRGF0YVNsb3QobnBjLmRhdGFbMF0sIG5wYy5pZCwgMCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAweDA5OlxuICAgICAgICAgIGNhc2UgMHgxMTpcbiAgICAgICAgICAgIGFkZFNsb3QobmV3IFBlcnNvbkRhdGFTbG90KG5wYy5kYXRhWzFdLCBucGMuaWQsIDEpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgYm9zcyBkcm9wc1xuICAgIGZvciAoY29uc3QgYm9zcyBvZiByb20uYm9zc2VzKSB7XG4gICAgICBpZiAoYm9zcy5raWxsID09PSAzIHx8IGJvc3Mua2lsbCA9PT0gMTMpIGNvbnRpbnVlOyAvLyBmYWxzZSBhbGFybXNcbiAgICAgIGlmIChib3NzLmtpbGwgIT0gbnVsbCAmJiBib3NzLmRyb3AgIT0gbnVsbCkge1xuICAgICAgICBhZGRTbG90KG5ldyBCb3NzRHJvcFNsb3QoYm9zcy5kcm9wLCBib3NzLmtpbGwpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZWNvcmQgaGFyZGNvZGVkIHNsb3RzXG4gICAgZm9yIChjb25zdCBbYWRkciwgbmFtZV0gb2YgaGFyZGNvZGVkSXRlbXMpIHtcbiAgICAgIGFkZFNsb3QobmV3IEhhcmRjb2RlZFNsb3QodGhpcy5yb20ucHJnW2FkZHJdLCBhZGRyLCBuYW1lKSk7XG4gICAgfVxuICAgIGV4dHJhU2xvdHMuZm9yRWFjaChhZGRTbG90KTtcblxuICAgIGNvbnNvbGUubG9nKCdzbG90cycsIHNsb3RzKTtcblxuICAgIHRoaXMuc2xvdHMgPSBzbG90cztcbiAgfVxuXG4gIC8vIE5PVEU6IHRoaXMuc2xvdHMgaXMgbm90IHJpZ2h0IC0gdGhlcmUgYXJlIG11bHRpcGxlIENoZXN0U2xvdHMgaW4gdGhlIHNhbWVcbiAgLy8gbGlzdCwgb3IgYSBDaGVzdFNsb3QgZm9yIDM0IGtleSB0byBzdHh5LCB3aGljaCBzaG91bGQgbm90IGJlLi4uP1xuICB1cGRhdGUoZmlsbDogbnVtYmVyW10pOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGwubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChmaWxsW2ldID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgZm9yIChjb25zdCBzbG90IG9mIHRoaXMuc2xvdHNbaV0pIHtcbiAgICAgICAgc2xvdC5zZXQodGhpcy5yb20sIGZpbGxbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1vdmUgYWxsIHRoZSBmbGFncy4gIEZpcnN0IHJlYWQgdGhlbS5cbiAgICBjb25zdCBmbGFnczogbnVtYmVyW11bXSA9IHRoaXMucm9tLml0ZW1HZXRzLm1hcCgoKSA9PiBbXSk7XG4gICAgZm9yIChjb25zdCBpdGVtZ2V0IG9mIHRoaXMucm9tLml0ZW1HZXRzKSB7XG4gICAgICBjb25zdCB7aWR9ID0gaXRlbWdldDtcbiAgICAgIGZvciAoY29uc3QgZmxhZyBvZiBpdGVtZ2V0LmZsYWdzKSB7XG4gICAgICAgIGlmIChmbGFnID09PSAtMSkgY29udGludWU7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHByZXNlcnZlZEl0ZW1HZXRGbGFncy5oYXMoZmxhZykgPyBpZCA6IGZpbGxbaWRdO1xuICAgICAgICAvLyBOT1RFOiBpdCdzIHBvc3NpYmxlIHRoZSB0YXJnZXQgc2xvdCBpcyBhIG1pbWljIC0gaW4gdGhhdCBjYXNlXG4gICAgICAgIC8vIHdlJ3ZlIGFscmVhZHkgZ3VhcmFudGVlZCB0aGF0IHRoZSBmbGFnIGp1c3QgYSBjb25zdW1hYmxlIGNoZXN0XG4gICAgICAgIC8vIGZsYWcsIHNvIGl0J3Mgc2FmZSB0byBqdXN0IGRyb3AgaXQgb24gdGhlIGZsb29yLlxuICAgICAgICAoZmxhZ3NbdGFyZ2V0XSB8fCBbXSkucHVzaChmbGFnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gTm93IHdyaXRlIHRoZW1cbiAgICBmb3IgKGNvbnN0IGl0ZW1nZXQgb2YgdGhpcy5yb20uaXRlbUdldHMpIHtcbiAgICAgIGl0ZW1nZXQuZmxhZ3MgPSBmbGFnc1tpdGVtZ2V0LmlkXTtcbiAgICB9XG4gIH1cbn1cblxuXG5jb25zdCBoYXJkY29kZWRJdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBbbnVtYmVyLCBzdHJpbmc/XT4gPSBbXG4gIFsweDM2N2Y0LCAnU3RvbSBmaWdodCddLFxuICBbMHgzZDE4ZiwgJ1NsaW1lZCBLZW5zdSddLFxuICBbMHgzZDFmOSwgJ0FzaW5hJ10sXG4gIFsweDNkMmFmLCAnU3RvbmVkIEFrYWhhbmEnXSxcbiAgWzB4M2QzMGUsICdMaWdodGhvdXNlIEtlbnN1J10sXG4gIFsweDNkMzM3LCAnUmFnZSddLFxuICBbMHgzZDY1NSwgJ010IFNhYnJlIHN1bW1pdCB0cmlnZ2VyJ10sXG4gIFsweDNkNmQ5LCAnV2hpcmxwb29sIHRyaWdnZXInXSxcbiAgWzB4M2Q2ZGUsICdTd2FuIEtlbnN1J10sXG4gIFsweDNkNmU4LCAnQXJ5bGxpcyddLFxuICBbMHgzZDcxMV0sIC8vIHJlZnJlc2ggZnJvbSB0cmlnZ2VyXG4gIFsweDNkN2ZlLCAnQWthaGFuYSBzdGF0dWUgdHJhZGUtaW4nXSxcbiAgLy9bMHgzZTNhMl0sIC8vIGludmlzaWJsZSBmbGFnIGZvciBzdGF0dWUgb2Ygb255eFxuICAvL1sweDNlM2E2XSwgLy8gaW52aXNpYmxlIGZsYWcgZm9yIGtpcmlzYSBwbGFudFxuICAvL1sweDNlM2FhXSwgLy8gaW52aXNpYmxlIGZsYWcgZm9yIGxvdmUgcGVuZGFudFxuXTtcblxuY29uc3QgZXh0cmFTbG90cyA9IFtcbiAgbmV3IFBlcnNvbkRhdGFTbG90KDB4MzYsIDB4NjMsIDEpLCAvLyBzaGVsbCBmbHV0ZSAoZG9scGhpbilcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUocm9tOiBSb20sIGZpbGw6IG51bWJlcltdKTogdm9pZCB7XG4gIG5ldyBTbG90cyhyb20pLnVwZGF0ZShmaWxsKTtcbn1cblxuXG4vKipcbiAqIEJ5IGRlZmF1bHQgd2hlbiB3ZSBmaWxsIGEgc2xvdCwgd2UgYnJpbmcgdGhlIGl0ZW1nZXQgZmxhZ3MgYWxvbmcgd2l0aC5cbiAqIFRoaXMgZW5zdXJlcyB0aGF0IGRpYWxvZ3MgdGhhdCB0cmlnZ2VyIG9mZiBvZiBpdCBhcmVuJ3QgYnJva2VuLlxuICogVGhlIGZvbGxvd2luZyBhcmUgbm90IG1vdmVkLCB0aG91Z2ggd2Ugc2hvdWxkIGZpeCB0aGF0IGJ5IGNoYW5naW5nIHRoZW1cbiAqIGludG8gdGhlIG5vcm1hbCAyeHggaXRlbSBmbGFncy5cbiAqL1xuY29uc3QgcHJlc2VydmVkSXRlbUdldEZsYWdzID0gbmV3IFNldChbXG4gIC8vIDB4MDBlLCAvLyB0ZWxlcGF0aHkgLSB1c2VkIGZvciB0YWxraW5nIHRvIGFuaW1hbHMvZHdhcmZzXG4gIDB4MDI0LCAvLyBnZW5lcmFscyBkZWZlYXRlZCAtIHdpbGwgZGVhbCB3aXRoIHRoaXMgbGF0ZXJcbiAgLy8gMHgwM2YsIC8vIHRlbGVwb3J0IC0gdXNlZCBmb3IgdHJpZ2dlclxuICAvLyAweDA1ZiwgLy8gc3dvcmQgb2YgdGh1bmRlciAtIHVzZWQgdG8gdHJpZ2dlciBtYXNzYWNyZVxuICAweDA4YiwgLy8gc2hlbGwgZmx1dGUgLSBjaGVja2VkIGJ5IGZpc2hlcm1hbiAtLSBUT0RPIGNoYW5nZSB0byAyMzY/XG4gIDB4MmZkLCAvLyBzaHlyb24gd2FycCBwb2ludCBmcm9tIHN3b3JkIG9mIHRodW5kZXJcbl0pO1xuIl19