import { Location, LOCATIONS } from './location.js';
class LocationsClass extends Array {
    constructor(rom) {
        super(0x100);
        this.rom = rom;
        for (let id = 0; id < 0x100; id++) {
            this[id] = new Location(rom, id);
        }
        for (const key of Object.keys(LOCATIONS)) {
            const [id,] = namesTyped[key];
            this[key] = this[id];
        }
    }
    static get [Symbol.species]() { return Array; }
    partition(func, eq = (a, b) => a === b, joinNexuses = false) {
        const seen = new Set();
        const out = [];
        for (let loc of this) {
            if (seen.has(loc) || !loc.used)
                continue;
            seen.add(loc);
            const value = func(loc);
            const group = [];
            const queue = [loc];
            while (queue.length) {
                const next = queue.pop();
                group.push(next);
                for (const n of next.neighbors(joinNexuses)) {
                    if (!seen.has(n) && eq(func(n), value)) {
                        seen.add(n);
                        queue.push(n);
                        group.push(n);
                    }
                }
            }
            out.push([[...group], value]);
        }
        return out;
    }
}
const namesTyped = LOCATIONS;
export const Locations = LocationsClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3JvbS9sb2NhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFbEQsTUFBTSxjQUFlLFNBQVEsS0FBZTtJQUkxQyxZQUFxQixHQUFRO1FBQzNCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQURNLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFFM0IsS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ2xDO1FBQ0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsSUFBOEMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDO0lBWEQsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQztJQWUvQyxTQUFTLENBQUksSUFBMEIsRUFBRSxLQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxXQUFXLEdBQUcsS0FBSztRQUN6RixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBWSxDQUFDO1FBQ2pDLE1BQU0sR0FBRyxHQUFzQixFQUFFLENBQUM7UUFDbEMsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7Z0JBQUUsU0FBUztZQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNqQixNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRTtnQkFDbkIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRyxDQUFDO2dCQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNqQixLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUU7b0JBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7d0JBQ3RDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ1osS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNmO2lCQUNGO2FBQ0Y7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDL0I7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Q0FDRjtBQUlELE1BQU0sVUFBVSxHQUFHLFNBQTBELENBQUM7QUFJOUUsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUErQixjQUFxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQge0xvY2F0aW9uLCBMT0NBVElPTlN9IGZyb20gJy4vbG9jYXRpb24uanMnO1xuXG5jbGFzcyBMb2NhdGlvbnNDbGFzcyBleHRlbmRzIEFycmF5PExvY2F0aW9uPiB7XG4gIFxuICBzdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7IHJldHVybiBBcnJheTsgfVxuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJvbTogUm9tKSB7XG4gICAgc3VwZXIoMHgxMDApO1xuICAgIGZvciAobGV0IGlkID0gMDsgaWQgPCAweDEwMDsgaWQrKykge1xuICAgICAgdGhpc1tpZF0gPSBuZXcgTG9jYXRpb24ocm9tLCBpZCk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKExPQ0FUSU9OUykpIHtcbiAgICAgIGNvbnN0IFtpZCxdID0gbmFtZXNUeXBlZFtrZXldO1xuICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyB7W25hbWU6IHN0cmluZ106IExvY2F0aW9ufSlba2V5XSA9IHRoaXNbaWRdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbmQgYWxsIGdyb3VwcyBvZiBuZWlnaGJvcmluZyBsb2NhdGlvbnMgd2l0aCBtYXRjaGluZyBwcm9wZXJ0aWVzLlxuICAvLyBUT0RPIC0gb3B0aW9uYWwgYXJnOiBjaGVjayBhZGphY2VudCAjIElEcy4uLj9cbiAgcGFydGl0aW9uPFQ+KGZ1bmM6IChsb2M6IExvY2F0aW9uKSA9PiBULCBlcTogRXE8VD4gPSAoYSwgYikgPT4gYSA9PT0gYiwgam9pbk5leHVzZXMgPSBmYWxzZSk6IFtMb2NhdGlvbltdLCBUXVtdIHtcbiAgICBjb25zdCBzZWVuID0gbmV3IFNldDxMb2NhdGlvbj4oKTtcbiAgICBjb25zdCBvdXQ6IFtMb2NhdGlvbltdLCBUXVtdID0gW107XG4gICAgZm9yIChsZXQgbG9jIG9mIHRoaXMpIHtcbiAgICAgIGlmIChzZWVuLmhhcyhsb2MpIHx8ICFsb2MudXNlZCkgY29udGludWU7XG4gICAgICBzZWVuLmFkZChsb2MpO1xuICAgICAgY29uc3QgdmFsdWUgPSBmdW5jKGxvYyk7XG4gICAgICBjb25zdCBncm91cCA9IFtdO1xuICAgICAgY29uc3QgcXVldWUgPSBbbG9jXTtcbiAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbmV4dCA9IHF1ZXVlLnBvcCgpITtcbiAgICAgICAgZ3JvdXAucHVzaChuZXh0KTtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIG5leHQubmVpZ2hib3JzKGpvaW5OZXh1c2VzKSkge1xuICAgICAgICAgIGlmICghc2Vlbi5oYXMobikgJiYgZXEoZnVuYyhuKSwgdmFsdWUpKSB7XG4gICAgICAgICAgICBzZWVuLmFkZChuKTtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2gobik7XG4gICAgICAgICAgICBncm91cC5wdXNoKG4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0LnB1c2goW1suLi5ncm91cF0sIHZhbHVlXSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cbn1cblxudHlwZSBFcTxUPiA9IChhOiBULCBiOiBUKSA9PiBib29sZWFuO1xuXG5jb25zdCBuYW1lc1R5cGVkID0gTE9DQVRJT05TIGFzIHVua25vd24gYXMge1tuYW1lOiBzdHJpbmddOiBbbnVtYmVyLCBzdHJpbmddfTtcblxuZXhwb3J0IHR5cGUgTG9jYXRpb25zID0gTG9jYXRpb25zQ2xhc3MgJiB7W1QgaW4ga2V5b2YgdHlwZW9mIExPQ0FUSU9OU106IExvY2F0aW9ufTtcblxuZXhwb3J0IGNvbnN0IExvY2F0aW9uczoge25ldyhyb206IFJvbSk6IExvY2F0aW9uc30gPSBMb2NhdGlvbnNDbGFzcyBhcyBhbnk7XG4iXX0=