export class Spoiler {
    constructor(rom) {
        this.rom = rom;
        this.slots = [];
        this.route = [];
        this.slotNames = [];
        this.conditionNames = {};
    }
    addCondition(condition, name) {
        this.conditionNames[condition] = name;
    }
    addCheck(condition, deps, item) {
        this.route.push(new Check(this, condition, deps, item));
    }
    addSlot(slot, slotName, item) {
        this.slots[slot] = new Slot(this.rom, slot, slotName, item);
        if (slotName)
            this.slotNames[0x200 | slot] = slotName;
    }
    formatCondition(id, item) {
        if (id < 0x200 || id >= 0x280)
            return this.conditionNames[id] || conditionHex(id);
        if (item == null)
            return slotToItem(this.rom, id & 0xff);
        return `${this.slotNames[id] || conditionHex(id)} (${this.formatCondition(item | 0x200)})`;
    }
}
class Check {
    constructor(spoiler, condition, deps, item) {
        this.spoiler = spoiler;
        this.condition = condition;
        this.deps = deps;
        this.item = item;
    }
    toString() {
        return `${this.spoiler.formatCondition(this.condition, this.item)}: [${this.deps.map(d => this.spoiler.formatCondition(d)).join(', ')}]`;
    }
}
function conditionHex(id) {
    return id < 0 ? '~' + ~id.toString(16).padStart(2, '0') : id.toString(16).padStart(3, '0');
}
class Slot {
    constructor(rom, slot, slotName, item) {
        this.slot = slot;
        this.slotName = slotName;
        this.item = item;
        this.itemName = slotToItem(rom, item);
        this.originalItem = slotToItem(rom, slot);
    }
    toString() {
        return `${this.itemName}: ${this.slotName} (${this.originalItem})`;
    }
}
function slotToItem(rom, slot) {
    if (slot >= 0x70)
        return 'Mimic';
    return rom.items[rom.itemGets[slot].itemId].messageName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BvaWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vc3BvaWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxNQUFNLE9BQU8sT0FBTztJQVFsQixZQUFxQixHQUFRO1FBQVIsUUFBRyxHQUFILEdBQUcsQ0FBSztRQVBwQixVQUFLLEdBQVcsRUFBRSxDQUFDO1FBQ25CLFVBQUssR0FBWSxFQUFFLENBQUM7UUFHcEIsY0FBUyxHQUEyQixFQUFFLENBQUM7UUFDdkMsbUJBQWMsR0FBMkIsRUFBRSxDQUFDO0lBRXJCLENBQUM7SUFFakMsWUFBWSxDQUFDLFNBQWlCLEVBQUUsSUFBWTtRQUMxQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUN4QyxDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQWlCLEVBQUUsSUFBdUIsRUFBRSxJQUFhO1FBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFZLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO1FBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksUUFBUTtZQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUN4RCxDQUFDO0lBRUQsZUFBZSxDQUFDLEVBQVUsRUFBRSxJQUFhO1FBRXZDLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLElBQUksS0FBSztZQUFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEYsSUFBSSxJQUFJLElBQUksSUFBSTtZQUFFLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBRXpELE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzdGLENBQUM7Q0FDRjtBQUVELE1BQU0sS0FBSztJQUNULFlBQXFCLE9BQWdCLEVBQ2hCLFNBQWlCLEVBQ2pCLElBQXVCLEVBQ3ZCLElBQXdCO1FBSHhCLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUNqQixTQUFJLEdBQUosSUFBSSxDQUFtQjtRQUN2QixTQUFJLEdBQUosSUFBSSxDQUFvQjtJQUFHLENBQUM7SUFFakQsUUFBUTtRQUNOLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQzVFLENBQUM7Q0FDRjtBQUVELFNBQVMsWUFBWSxDQUFDLEVBQVU7SUFDOUIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM3RixDQUFDO0FBRUQsTUFBTSxJQUFJO0lBSVIsWUFBWSxHQUFRLEVBQ0MsSUFBWSxFQUNaLFFBQWdCLEVBQ2hCLElBQVk7UUFGWixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELFFBQVE7UUFFTixPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQztJQUNyRSxDQUFDO0NBQ0Y7QUFFRCxTQUFTLFVBQVUsQ0FBQyxHQUFRLEVBQUUsSUFBWTtJQUN4QyxJQUFJLElBQUksSUFBSSxJQUFJO1FBQUUsT0FBTyxPQUFPLENBQUM7SUFDakMsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQzFELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxuLyoqXG4gKiBTdG9yZXMgb3JnYW5pemVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzaHVmZmxlLCBpbmNsdWRpbmdcbiAqICAgLSB3aGljaCBpdGVtcyBhcmUgaW4gd2hpY2ggc2xvdHNcbiAqICAgLSBhIGtub3duLXdvcmtpbmcgcm91dGUgdGhyb3VnaCB0aGUgZ2FtZVxuICogICAtIHdoaWNoIGVuZW1pZXMgYXJlIHNodWZmbGUgd2hlcmVcbiAqICAgLSBlbmVteSB2dWxuZXJhYmlsaXRpZXNcbiAqICAgLSBsb2NhdGlvbiBjb25uZWN0aW9uc1xuICogICAtIHJvdXRlcyB0byBlYWNoIGFyZWFcbiAqL1xuZXhwb3J0IGNsYXNzIFNwb2lsZXIge1xuICByZWFkb25seSBzbG90czogU2xvdFtdID0gW107XG4gIHJlYWRvbmx5IHJvdXRlOiBDaGVja1tdID0gW107XG5cbiAgLy8gVXNlZCBmb3IgbGF6aWx5IGRpc3BsYXlpbmcgcm91dGVcbiAgcmVhZG9ubHkgc2xvdE5hbWVzOiB7W2lkOiBudW1iZXJdOiBzdHJpbmd9ID0gW107XG4gIHJlYWRvbmx5IGNvbmRpdGlvbk5hbWVzOiB7W2lkOiBudW1iZXJdOiBzdHJpbmd9ID0ge307XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcm9tOiBSb20pIHt9XG5cbiAgYWRkQ29uZGl0aW9uKGNvbmRpdGlvbjogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNvbmRpdGlvbk5hbWVzW2NvbmRpdGlvbl0gPSBuYW1lO1xuICB9XG5cbiAgYWRkQ2hlY2soY29uZGl0aW9uOiBudW1iZXIsIGRlcHM6IHJlYWRvbmx5IG51bWJlcltdLCBpdGVtPzogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5yb3V0ZS5wdXNoKG5ldyBDaGVjayh0aGlzLCBjb25kaXRpb24sIGRlcHMsIGl0ZW0pKTtcbiAgfVxuXG4gIGFkZFNsb3Qoc2xvdDogbnVtYmVyLCBzbG90TmFtZTogc3RyaW5nLCBpdGVtOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNsb3RzW3Nsb3RdID0gbmV3IFNsb3QodGhpcy5yb20sIHNsb3QsIHNsb3ROYW1lLCBpdGVtKTtcbiAgICBpZiAoc2xvdE5hbWUpIHRoaXMuc2xvdE5hbWVzWzB4MjAwIHwgc2xvdF0gPSBzbG90TmFtZTtcbiAgfVxuXG4gIGZvcm1hdENvbmRpdGlvbihpZDogbnVtYmVyLCBpdGVtPzogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAvLyBPcmRpbmFyeSBzeW1tZXRpYyBjb25kaXRpb25zXG4gICAgaWYgKGlkIDwgMHgyMDAgfHwgaWQgPj0gMHgyODApIHJldHVybiB0aGlzLmNvbmRpdGlvbk5hbWVzW2lkXSB8fCBjb25kaXRpb25IZXgoaWQpO1xuICAgIC8vIERlcGVuZGVuY3kgaXRlbXMgLSBhbHdheXMgPCAyNDhcbiAgICBpZiAoaXRlbSA9PSBudWxsKSByZXR1cm4gc2xvdFRvSXRlbSh0aGlzLnJvbSwgaWQgJiAweGZmKTtcbiAgICAvLyBTbG90IC0gcHJpbnQgYm90aCBzbG90IGFuZCBpdGVtIG5hbWVcbiAgICByZXR1cm4gYCR7dGhpcy5zbG90TmFtZXNbaWRdIHx8IGNvbmRpdGlvbkhleChpZCl9ICgke3RoaXMuZm9ybWF0Q29uZGl0aW9uKGl0ZW0gfCAweDIwMCl9KWA7XG4gIH1cbn1cblxuY2xhc3MgQ2hlY2sge1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBzcG9pbGVyOiBTcG9pbGVyLFxuICAgICAgICAgICAgICByZWFkb25seSBjb25kaXRpb246IG51bWJlcixcbiAgICAgICAgICAgICAgcmVhZG9ubHkgZGVwczogcmVhZG9ubHkgbnVtYmVyW10sXG4gICAgICAgICAgICAgIHJlYWRvbmx5IGl0ZW06IG51bWJlciB8IHVuZGVmaW5lZCkge31cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnNwb2lsZXIuZm9ybWF0Q29uZGl0aW9uKHRoaXMuY29uZGl0aW9uLCB0aGlzLml0ZW0pfTogWyR7XG4gICAgICAgICAgICB0aGlzLmRlcHMubWFwKGQgPT4gdGhpcy5zcG9pbGVyLmZvcm1hdENvbmRpdGlvbihkKSkuam9pbignLCAnKX1dYDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb25kaXRpb25IZXgoaWQ6IG51bWJlcik6IHN0cmluZyB7XG4gIHJldHVybiBpZCA8IDAgPyAnficgKyB+aWQudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykgOiBpZC50b1N0cmluZygxNikucGFkU3RhcnQoMywgJzAnKTtcbn1cblxuY2xhc3MgU2xvdCB7XG4gIHJlYWRvbmx5IGl0ZW1OYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IG9yaWdpbmFsSXRlbTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHJvbTogUm9tLFxuICAgICAgICAgICAgICByZWFkb25seSBzbG90OiBudW1iZXIsXG4gICAgICAgICAgICAgIHJlYWRvbmx5IHNsb3ROYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgIHJlYWRvbmx5IGl0ZW06IG51bWJlcikge1xuICAgIHRoaXMuaXRlbU5hbWUgPSBzbG90VG9JdGVtKHJvbSwgaXRlbSk7XG4gICAgdGhpcy5vcmlnaW5hbEl0ZW0gPSBzbG90VG9JdGVtKHJvbSwgc2xvdCk7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIG5hbWUgb2YgdGhlIHNsb3QsIHRoZSBvcmlnaW5hbCBpdGVtLCBldGNcbiAgICByZXR1cm4gYCR7dGhpcy5pdGVtTmFtZX06ICR7dGhpcy5zbG90TmFtZX0gKCR7dGhpcy5vcmlnaW5hbEl0ZW19KWA7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2xvdFRvSXRlbShyb206IFJvbSwgc2xvdDogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKHNsb3QgPj0gMHg3MCkgcmV0dXJuICdNaW1pYyc7XG4gIHJldHVybiByb20uaXRlbXNbcm9tLml0ZW1HZXRzW3Nsb3RdLml0ZW1JZF0ubWVzc2FnZU5hbWU7XG59XG4iXX0=