export class UnionFind {
    constructor() {
        this.data = new Map();
        this.sizes = new Map();
    }
    find(elem) {
        if (elem !== elem)
            throw ('nan');
        if (!this.data.has(elem)) {
            this.data.set(elem, elem);
            this.sizes.set(elem, 1);
        }
        let next;
        while (!Object.is((next = this.data.get(elem)), elem)) {
            this.data.set(elem, elem = this.data.get(next));
        }
        return elem;
    }
    union(elems) {
        this.find(elems[0]);
        for (let i = 1; i < elems.length; i++) {
            if (elems[i] !== elems[i])
                throw ('nan');
            this.unionInternal(elems[0], elems[i]);
        }
    }
    unionInternal(a, b) {
        a = this.find(a);
        b = this.find(b);
        if (a === b)
            return;
        const sa = this.sizes.get(a);
        const sb = this.sizes.get(b);
        if (sa < sb) {
            this.sizes.set(b, sa + sb);
            this.data.set(a, b);
        }
        else {
            this.sizes.set(a, sa + sb);
            this.data.set(b, a);
        }
    }
    sets() {
        const sets = new Map();
        for (const elem of this.data.keys()) {
            const root = this.find(elem);
            let set = sets.get(root);
            if (!set)
                sets.set(root, set = new Set());
            set.add(elem);
        }
        return [...sets.values()];
    }
    map() {
        const sets = new Map();
        for (const elem of this.data.keys()) {
            let set = sets.get(this.find(elem));
            sets.set(elem, set || (set = new Set()));
            set.add(elem);
        }
        return sets;
    }
    roots() {
        const roots = new Set();
        for (const elem of this.data.keys()) {
            roots.add(this.find(elem));
        }
        return [...roots];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pb25maW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL3VuaW9uZmluZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLE9BQU8sU0FBUztJQUF0QjtRQUVtQixTQUFJLEdBQWMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUM1QixVQUFLLEdBQW1CLElBQUksR0FBRyxFQUFFLENBQUM7SUFvRXJELENBQUM7SUFqRUMsSUFBSSxDQUFDLElBQU87UUFDVixJQUFJLElBQUksS0FBSyxJQUFJO1lBQUUsTUFBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxJQUFPLENBQUM7UUFDWixPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBQztTQUNsRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFVO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1B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LENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNwQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBjbGFzcyBVbmlvbkZpbmQ8VD4ge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZGF0YTogTWFwPFQsIFQ+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIHJlYWRvbmx5IHNpemVzOiBNYXA8VCwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcblxuICAvKiogUmV0dXJucyB0aGUgY2Fub25pY2FsIGVsZW1lbnQgZm9yIHRoZSBnaXZlbiBlbnRyeS4gKi9cbiAgZmluZChlbGVtOiBUKTogVCB7XG4gICAgaWYgKGVsZW0gIT09IGVsZW0pIHRocm93KCduYW4nKTtcbiAgICBpZiAoIXRoaXMuZGF0YS5oYXMoZWxlbSkpIHtcbiAgICAgIHRoaXMuZGF0YS5zZXQoZWxlbSwgZWxlbSk7XG4gICAgICB0aGlzLnNpemVzLnNldChlbGVtLCAxKTtcbiAgICB9XG4gICAgbGV0IG5leHQ6IFQ7XG4gICAgd2hpbGUgKCFPYmplY3QuaXMoKG5leHQgPSB0aGlzLmRhdGEuZ2V0KGVsZW0pISksIGVsZW0pKSB7XG4gICAgICB0aGlzLmRhdGEuc2V0KGVsZW0sIGVsZW0gPSB0aGlzLmRhdGEuZ2V0KG5leHQpISk7XG4gICAgfVxuICAgIHJldHVybiBlbGVtO1xuICB9XG5cbiAgdW5pb24oZWxlbXM6IFRbXSkge1xuICAgIHRoaXMuZmluZChlbGVtc1swXSk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBlbGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGVsZW1zW2ldICE9PSBlbGVtc1tpXSkgdGhyb3coJ25hbicpO1xuICAgICAgdGhpcy51bmlvbkludGVybmFsKGVsZW1zWzBdLCBlbGVtc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1bmlvbkludGVybmFsKGE6IFQsIGI6IFQpIHtcbiAgICBhID0gdGhpcy5maW5kKGEpO1xuICAgIGIgPSB0aGlzLmZpbmQoYik7XG4gICAgaWYgKGEgPT09IGIpIHJldHVybjtcbiAgICBjb25zdCBzYSA9IHRoaXMuc2l6ZXMuZ2V0KGEpITtcbiAgICBjb25zdCBzYiA9IHRoaXMuc2l6ZXMuZ2V0KGIpITtcbiAgICBpZiAoc2EgPCBzYikge1xuICAgICAgdGhpcy5zaXplcy5zZXQoYiwgc2EgKyBzYik7XG4gICAgICB0aGlzLmRhdGEuc2V0KGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNpemVzLnNldChhLCBzYSArIHNiKTtcbiAgICAgIHRoaXMuZGF0YS5zZXQoYiwgYSk7XG4gICAgfVxuICB9XG5cbiAgc2V0cygpOiBTZXQ8VD5bXSB7XG4gICAgY29uc3Qgc2V0cyA9IG5ldyBNYXA8VCwgU2V0PFQ+PigpO1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiB0aGlzLmRhdGEua2V5cygpKSB7XG4gICAgICBjb25zdCByb290ID0gdGhpcy5maW5kKGVsZW0pO1xuICAgICAgbGV0IHNldCA9IHNldHMuZ2V0KHJvb3QpO1xuICAgICAgaWYgKCFzZXQpIHNldHMuc2V0KHJvb3QsIHNldCA9IG5ldyBTZXQ8VD4oKSk7XG4gICAgICBzZXQuYWRkKGVsZW0pO1xuICAgIH1cbiAgICByZXR1cm4gWy4uLnNldHMudmFsdWVzKCldO1xuICB9XG5cbiAgLyoqIEByZXR1cm4gbWFwIG9mIGFsbCBlbGVtZW50cyB0byB0aGVpciBlcXVpdmFsZW5jZSBzZXQuICovXG4gIG1hcCgpOiBNYXA8VCwgU2V0PFQ+PiB7XG4gICAgY29uc3Qgc2V0cyA9IG5ldyBNYXA8VCwgU2V0PFQ+PigpO1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiB0aGlzLmRhdGEua2V5cygpKSB7XG4gICAgICBsZXQgc2V0ID0gc2V0cy5nZXQodGhpcy5maW5kKGVsZW0pKTtcbiAgICAgIHNldHMuc2V0KGVsZW0sIHNldCB8fCAoc2V0ID0gbmV3IFNldDxUPigpKSk7XG4gICAgICBzZXQuYWRkKGVsZW0pO1xuICAgIH1cbiAgICByZXR1cm4gc2V0cztcbiAgfVxuXG4gIHJvb3RzKCk6IFRbXSB7XG4gICAgY29uc3Qgcm9vdHMgPSBuZXcgU2V0PFQ+KCk7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIHRoaXMuZGF0YS5rZXlzKCkpIHtcbiAgICAgIHJvb3RzLmFkZCh0aGlzLmZpbmQoZWxlbSkpO1xuICAgIH1cbiAgICByZXR1cm4gWy4uLnJvb3RzXTtcbiAgfVxufVxuIl19