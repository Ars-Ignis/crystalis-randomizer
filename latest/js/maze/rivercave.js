import { CaveShuffle } from './cave.js';
import { N, S } from './grid.js';
import { Monogrid, Cursor } from './monogrid.js';
import { OK } from './maze.js';
import { TwoStageCaveShuffle } from './twostage.js';
import { seq } from '../rom/util.js';
import { DefaultMap } from '../util.js';
export class RiverCaveShuffle extends TwoStageCaveShuffle {
    constructor() {
        super(...arguments);
        this.early = 'r';
        this.maxAttempts = 250;
    }
    targetEarly() { var _a, _b; return (_b = (_a = this.params.features) === null || _a === void 0 ? void 0 : _a.river) !== null && _b !== void 0 ? _b : 0; }
    preinfer(a) {
        if ([...this.orig.exits()].length < 2)
            return OK;
        const override = new Map();
        for (let i = 0; i < a.grid.data.length; i++) {
            if (a.grid.data[i] === 'r')
                override.set(a.grid.coord(i), '');
        }
        const parts = a.grid.partition(override);
        const stairParts = [];
        for (let i = 0; i < a.grid.data.length; i++) {
            if (a.grid.data[i] === '<' || a.grid.data[i] === '>' ||
                (a.grid.data[i] && a.grid.isBorder(a.grid.coord(i)))) {
                stairParts.push(parts.get(a.grid.coord(i)));
            }
        }
        if (new Set(stairParts).size < stairParts.length) {
            return { ok: false, fail: `river didn't matter\n${a.grid.show()}` };
        }
        return super.preinfer(a);
    }
    addLateFeatures(a) {
        return OK;
    }
    addArenas(a, arenas) {
        if (!arenas)
            return true;
        const g = a.grid;
        for (const c of this.random.ishuffle(a.grid.screens())) {
            const middle = (c | 0x808);
            const left = (middle - 8);
            const left2 = (left - 8);
            const right = (middle + 8);
            const right2 = (right + 8);
            const up = middle - 0x800;
            const down = middle + 0x800;
            if (g.get(middle) !== 'c')
                continue;
            if (g.get(up) !== 'c')
                continue;
            if (g.get(down) !== 'c')
                continue;
            const leftTile = g.isBorder(left) ? '' : this.extract(g, left2 - 0x808);
            const rightTile = g.isBorder(right) ? '' : this.extract(g, right2 - 0x808);
            if (/[^ c]/.test(leftTile + rightTile))
                continue;
            if (!g.isBorder(left)) {
                g.set(left, '');
                g.set(left2, '');
                g.set(left2 - 8, '');
                g.set(left2 - 0x800, '');
                g.set(left2 + 0x800, '');
            }
            if (!g.isBorder(right)) {
                g.set(right, '');
                g.set(right2, '');
                g.set(right2 + 8, '');
                g.set(right2 - 0x800, '');
                g.set(right2 + 0x800, '');
            }
            a.fixed.add(middle);
            a.fixed.add(up);
            a.fixed.add(down);
            g.set(middle, 'a');
            arenas--;
            if (!arenas) {
                this.pruneDisconnected(a);
                return true;
            }
        }
        return false;
    }
}
export class WaterfallRiverCaveShuffle extends RiverCaveShuffle {
    constructor() {
        super(...arguments);
        this.addBlocks = false;
    }
    initialFillEarly(a) {
        const g = new Monogrid(a.h, a.w, this.getValidEarlyScreens());
        const x0 = 2 + this.random.nextInt(a.w - 4);
        const x1 = 2 + this.random.nextInt(a.w - 4);
        const c = new Cursor(g, a.h - 1, x1);
        c.go(0);
        c.directedPath(this.random, 1, x0);
        c.go(0);
        a.grid.data = g.toGrid('r').data;
        this.addAllFixed(a);
        return OK;
    }
    addEdges(a) {
        let r = -1;
        const h = (a.h - 1) << 12 | 0x808;
        for (let x = 0; x < a.w; x++) {
            if (a.grid.get((h | (x << 4))) === 'r')
                r = x;
        }
        if (r < 0)
            throw new Error(`no river on bottom edge`);
        const c0 = (h | this.random.nextInt(r) << 4);
        const c1 = (h | (r + 1 + this.random.nextInt(a.w - 1 - r)) << 4);
        a.grid.set(c0, '>');
        a.grid.set(c0 - 8, '');
        a.grid.set(c0 + 8, '');
        a.grid.set(c1, '>');
        a.grid.set(c1 - 8, '');
        a.grid.set(c1 + 8, '');
        a.fixed.add(c0);
        a.fixed.add(c1);
        return OK;
    }
    addStairs() { return OK; }
    checkMeta(meta, repl) {
        const opts = repl ? { flight: true, with: repl } : { flight: true };
        const parts = meta.traverse(opts);
        return new Set(parts.values()).size === this.maxPartitions;
    }
}
export class OasisEntranceCaveShuffle extends CaveShuffle {
    constructor() {
        super(...arguments);
        this.addBlocks = false;
    }
    pickWidth() {
        return super.pickWidth() + this.random.nextInt(2);
    }
    initialFill(a) {
        const spikes = new DefaultMap(() => []);
        for (const scr of this.orig.tileset) {
            if (!scr.hasFeature('spikes') || !scr.data.edges)
                continue;
            let mask = 0;
            for (let dir = 0; dir < 4; dir++) {
                if (scr.data.edges[dir] === 's')
                    mask |= (1 << dir);
            }
            spikes.get(mask).push(...scr.gridTiles());
        }
        const x = 1 + this.random.nextInt(a.w - 2);
        const y = 1 + this.random.nextInt(a.h - 2);
        let pos = y << 4 | x;
        let c = this.posToGrid(pos, 0x808);
        let dir = y < a.h / 2 ? 2 : 0;
        this.insertTile(a, pos, this.random.pick(spikes.get(1 << dir)));
        for (let i = 4; i >= 0; i--) {
            pos += DPOS[dir];
            c = c + DGRID[dir];
            const opp = dir ^ 2;
            const masks = [];
            for (const [d, ts] of spikes) {
                if (!(d & (1 << opp)))
                    continue;
                const rem = d & ~(1 << opp);
                if (i ? !rem : rem)
                    continue;
                for (const _ of ts)
                    masks.push(d);
            }
            let nextDir;
            for (const d of this.random.ishuffle(masks)) {
                if (a.grid.isBorder(c + DGRID[d]))
                    continue;
                if (this.insertTile(a, pos, this.random.pick(spikes.get(d)))) {
                    nextDir = 31 - Math.clz32(d & ~(1 << opp));
                    break;
                }
            }
            if (nextDir == null)
                return { ok: false, fail: `spikes` };
            dir = nextDir;
        }
        const riverStart = [];
        for (let y = 3; y < a.h - 3; y++) {
            for (let x = 1; x < a.w - 1; x++) {
                riverStart.push((y << 12 | x << 4 | 0x808));
            }
        }
        let found = false;
        for (const c of this.random.ishuffle(riverStart)) {
            if (a.grid.get(c))
                continue;
            for (const d of DGRID) {
                if (a.grid.get(c + d) !== 'c')
                    continue;
                a.grid.set(c, 'r');
                const orthogonal = 0x808 & ~Math.abs(d);
                a.grid.set(c + orthogonal, 'r');
                a.grid.set(c - orthogonal, 'r');
                const o = this.random.pick([-orthogonal, orthogonal]);
                a.grid.set(c + 2 * o, 'r');
                a.grid.set(c + 3 * o, 'r');
                a.grid.set(c + 2 * o - d, 'c');
                found = true;
                break;
            }
            if (found)
                break;
        }
        if (!found)
            return { ok: false, fail: `nucleate river` };
        for (let i = 5 + this.random.nextInt(3); i > 0; i--) {
            if (!this.tryAdd(a, { char: 'c' }))
                return { ok: false, fail: `fill cave` };
        }
        for (let i = 0; i < a.grid.data.length; i++) {
            if (a.grid.data[i] && a.grid.isBorder(a.grid.coord(i))) {
                return { ok: false, fail: `border` };
            }
        }
        return OK;
    }
    checkMeta(meta, repl) {
        const opts = repl ? { flight: true, with: repl } : { flight: true };
        const parts = meta.traverse(opts);
        return new Set(parts.values()).size === this.maxPartitions;
    }
    refine() { return OK; }
    refineEdges() { return true; }
    addSpikes(a, spikes) {
        return true;
    }
}
const DGRID = [-0x800, -8, 0x800, 8];
const DPOS = [-16, -1, 16, 1];
export class StyxRiverCaveShuffle extends RiverCaveShuffle {
    constructor() {
        super(...arguments);
        this.addBlocks = false;
    }
    fillGrid(a) {
        var _a;
        const edges = [];
        let size = 0;
        for (const x of this.random.ishuffle(seq(a.w - 2, x => x + 1))) {
            if (edges.length === 1 && (x - edges[0]) ** 2 <= 1)
                continue;
            const c = ((a.h - 1) << 12 | x << 4 | 0x808);
            a.grid.set(c, 'c');
            a.grid.set(N(c), 'c');
            a.grid.set(S(c), 'n');
            a.fixed.add(c);
            a.fixed.add(N(c));
            a.fixed.add(S(c));
            edges.push(x);
            size++;
            if (edges.length === 2)
                break;
        }
        if (edges.length < 2)
            return { ok: false, fail: `initial edges` };
        let rivers = a.w;
        const cut = this.random.nextInt(Math.abs(edges[0] - edges[1]) - 1) +
            Math.min(edges[0], edges[1]) + 1;
        for (let i = 1; i < 2 * a.w; i++) {
            if (i === 2 * cut + 1)
                continue;
            a.grid.set(((a.h - 2) << 12 | i << 3 | 0x800), 'r');
            a.fixed.add(((a.h - 1) << 12 | i << 3 | 0x800));
        }
        const riversTarget = this.params.features.river;
        while (rivers < riversTarget) {
            const added = this.tryAdd(a, { char: 'r' });
            if (!added)
                return { ok: false, fail: `failed to extrude river\n${a.grid.show()}` };
            rivers += added;
            size += added;
        }
        const sizeTarget = this.params.size;
        while (size < sizeTarget) {
            const added = this.tryAdd(a);
            if (!added)
                return { ok: false, fail: `failed to extrude cave` };
            size += added;
        }
        return this.addStairs(a, ...((_a = this.params.stairs) !== null && _a !== void 0 ? _a : []));
    }
    checkMeta() { return true; }
    refineMetascreens(a, meta) {
        const result = super.refineMetascreens(a, meta);
        if (!result.ok)
            return result;
        function accessible(map) {
            let count = 0;
            for (const set of new Set(map.values())) {
                for (const edge of set) {
                    if (meta.exitType(edge) === 'edge:bottom') {
                        count += set.size;
                        break;
                    }
                }
            }
            return count;
        }
        const parts1 = accessible(meta.traverse({ noFlagged: true }));
        const parts2 = accessible(meta.traverse());
        if (parts1 === parts2)
            return { ok: false, fail: `bridge didn't matter` };
        const parts3 = accessible(meta.traverse({ flight: true }));
        if (parts2 === parts3)
            return { ok: false, fail: `flight not required` };
        return OK;
    }
}
export class OasisCaveShuffle extends RiverCaveShuffle {
    constructor() {
        super(...arguments);
        this.pattern = [
            '               ',
            ' rrrrrrrrrrrrr ',
            ' r           r ',
            ' r rrrrrrrrr r ',
            ' r r       r r ',
            ' r r rrrrr r r ',
            ' r r r   r r r ',
            ' r r r   r r r ',
            ' r r r   r r r ',
            ' r r r < r r r ',
            ' r r r c r r r ',
            ' r r rrrrr r r ',
            ' r r       r r ',
            ' r rrrrrrrrr r ',
            ' r           r ',
            ' rrrrrrrrrrrrr ',
            '               ',
        ];
    }
    initialFill(a) {
        return this.insertPattern(a, this.pattern);
    }
    addEdges(a) {
        let corner;
        for (let i = 0; i < a.grid.data.length; i++) {
            if (a.grid.data[i] === 'r') {
                corner = a.grid.coord(i) - 0x808;
                break;
            }
        }
        if (corner == null)
            throw new Error(`no corner`);
        const edges = [];
        for (let y = 0; y < this.pattern.length; y++) {
            for (let x = 1; x < this.pattern[y].length - 1; x++) {
                if (!((x ^ y) & 1))
                    continue;
                if (this.pattern[y][x] !== ' ')
                    continue;
                edges.push(corner + (y << 11 | x << 3));
            }
        }
        let chars = this.random.shuffle([...'ccrrrrrrrr']);
        for (const edge of this.random.ishuffle(edges)) {
            const char = chars[chars.length - 1];
            if (char === 'c' &&
                [...this.extract(a.grid, edge - 0x808)]
                    .filter(v => v === 'r').length < 4) {
                continue;
            }
            if (this.canSet(a, edge, char))
                a.grid.set(edge, chars.pop());
            if (!chars.length)
                break;
        }
        for (let i = 0; i < 6; i++) {
            this.tryAdd(a, { char: 'c' });
        }
        return OK;
    }
    refine(a) {
        var _a;
        const stairs = [...((_a = this.params.stairs) !== null && _a !== void 0 ? _a : [])];
        stairs[0]--;
        if (stairs[0] || stairs[1]) {
            const result = this.addStairs(a, ...stairs);
            if (!result.ok)
                return result;
        }
        let deadEnds = 0;
        for (const s of this.random.ishuffle(a.grid.screens())) {
            if (this.extract(a.grid, s).replace(/ /g, '') === 'c') {
                if (stairs[0] && !a.grid.get(s + 8)) {
                    a.grid.set(s + 0x808, '<');
                    stairs[0]--;
                }
                a.fixed.add(s + 0x808);
                if (++deadEnds >= 2)
                    break;
            }
        }
        const parts = a.grid.partition();
        if (new Set(parts.values()).size > 1)
            return { ok: false, fail: `orphans` };
        return OK;
    }
    fillGrid(a) {
        let result;
        if ((result = this.initialFill(a)), !result.ok)
            return result;
        if ((result = this.addEdges(a)), !result.ok)
            return result;
        if ((result = this.refine(a)), !result.ok)
            return result;
        return OK;
    }
    checkMeta(meta, rep) {
        const parts = meta.traverse(rep ? { with: rep } : {});
        const allStairs = [];
        for (const edges of new Set(parts.values())) {
            let stairs = 0;
            for (const edge of new Set([...edges])) {
                if (meta.exitType(edge))
                    stairs++;
            }
            allStairs.push(stairs);
        }
        return allStairs.filter(s => s > 0).length === 1;
    }
    refineMetascreens(a, meta) {
        if (!this.checkMeta(meta))
            return { ok: false, fail: `initial checkMeta` };
        const result = super.refineMetascreens(a, meta);
        if (!result.ok)
            return result;
        function accessible(map) {
            let count = 0;
            for (const set of new Set(map.values())) {
                for (const edge of set) {
                    if (meta.exitType(edge)) {
                        count += set.size;
                        break;
                    }
                }
            }
            return count;
        }
        const parts1 = accessible(meta.traverse());
        const parts2 = accessible(meta.traverse({ flight: true }));
        if (parts1 === parts2)
            return { ok: false, fail: `flight not required` };
        return OK;
    }
}
//# sourceMappingURL=data:application/json;base64,