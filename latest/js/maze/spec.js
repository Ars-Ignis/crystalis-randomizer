import { Dir } from './types.js';
import { hex } from '../rom/util.js';
import { assertNever } from '../util.js';
import { iters, isNonNull, Multiset } from '../util.js';
export function Spec(edges, tile, icon, ...extra) {
    const connections = [];
    const poi = [];
    const stairs = [];
    let deadEnd = false;
    let fixed = false;
    let flag = false;
    let wall = undefined;
    let pit = false;
    for (let data of extra) {
        if (typeof data === 'string') {
            if (data === 'fixed') {
                fixed = true;
            }
            else if (data === 'flag') {
                flag = true;
            }
            else if (data === 'pit') {
                pit = true;
            }
            else if (data === 'deadend') {
                deadEnd = true;
            }
            else {
                assertNever(data);
            }
        }
        else if (typeof data === 'number') {
            connections.push(connection(data));
        }
        else if (data instanceof Stair) {
            stairs.push(data);
        }
        else if (data instanceof Wall) {
            wall = data;
        }
        else if (data instanceof Poi) {
            poi.push(data);
        }
        else {
            assertNever(data);
        }
    }
    return { edges: edges,
        tile, icon, connections, deadEnd,
        fixed, flag, wall, pit, poi, stairs };
}
export class Stair {
    constructor(dir, entrance, exit) {
        this.dir = dir;
        this.entrance = entrance;
        this.exit = exit;
    }
    static up(entrance, exit) {
        return new Stair(Dir.UP, entrance, exit);
    }
    static down(entrance, exit) {
        return new Stair(Dir.DOWN, entrance, exit);
    }
}
export class Wall {
    constructor(type, tile, a, b) {
        this.type = type;
        this.tile = tile;
        this.a = a;
        this.b = b;
    }
    connections(flagged) {
        if (!flagged)
            return [connection(this.a), connection(this.b)];
        let count = this.b;
        let a = this.a;
        while (count) {
            count >>= 4;
            a <<= 4;
        }
        return [connection(a | this.b)];
    }
}
export function wall(tile, [a, b]) {
    return new Wall('wall', tile, a, b);
}
export function bridge(tile, [a, b]) {
    return new Wall('bridge', tile, a, b);
}
export class Poi {
    constructor(priority, dy, dx) {
        this.priority = priority;
        this.dy = dy;
        this.dx = dx;
    }
}
export function poi(priority, dy = 0x70, dx = 0x78) {
    return new Poi(priority, dy, dx);
}
function connection(data) {
    const connection = [];
    while (data) {
        const channel = (data & 3) << (data & 4);
        const offset = data & 8 ? (data & 4 ? 0x0100 : 0x1000) : 0;
        connection.push(channel | offset);
        data >>>= 4;
    }
    return connection;
}
export const EDGE_TYPES = {
    1: {
        [Dir.DOWN]: {
            entrance: 0xdf80,
            exits: [0xe6, 0xe7, 0xe8, 0xe9],
        },
        [Dir.UP]: {
            entrance: 0x3080,
            exits: [0x26, 0x27, 0x28, 0x29],
        },
    },
    6: {
        [Dir.DOWN]: {
            entrance: 0xdf80,
            exits: [0xe7, 0xe8],
        },
        [Dir.UP]: {
            entrance: 0x3080,
            exits: [0x27, 0x28],
        },
    },
};
const EMPTY_CAVE_SCREEN = Spec(0, 0x80, ' ');
const BASIC_CAVE_SCREENS = [
    Spec(257, 0x81, '│', 0x2a, poi(4)),
    Spec(4112, 0x82, '─', 0x6e, poi(4)),
    Spec(272, 0x83, '┌', 0xae, poi(2)),
    Spec(4352, 0x84, '┐', 0x6a, poi(2)),
    Spec(17, 0x85, '└', 0x2e, poi(2)),
    Spec(4097, 0x86, '┘', 0x26, poi(2)),
    Spec(273, 0x87, '├', 0x2ae, poi(3)),
    Spec(4369, 0x88, '┼', 0x26ae, poi(3)),
    Spec(4353, 0x89, '┤', 0x26a, poi(3)),
    Spec(4368, 0x8a, '┬', 0x6ae, poi(3)),
    Spec(4113, 0x8b, '┴', 0x26e, poi(3)),
    Spec(131329, 0x8c, '┋', 0x2a),
    Spec(1048833, 0x8d, '╫', 'fixed', 0x2a),
    Spec(1052688, 0x8e, '╫', 'fixed', 0x6e),
    Spec(65793, 0x8f, '┆', wall(0x87, [0x2, 0xa])),
    Spec(69648, 0x90, '┄', wall(0x67, [0x2, 0xa])),
    Spec(69649, 0x94, '┸', wall(0x37, [0x2, 0x6e])),
    Spec(135184, 0x95, '┸', 0x6e, Stair.up(16512, 0x37)),
    Spec(69632, 0x96, '┚', 0x6, Stair.up(16432, 0x32)),
    Spec(135168, 0x97, '┒', 0x6, Stair.down(44848, 0xb2)),
    Spec(65552, 0x98, '┖', 0xe, Stair.up(16592, 0x3c)),
    Spec(131088, 0x99, '┎', 0xe, Stair.down(45008, 0xbc)),
    Spec(131073, 0x9a, '╹', 0x2, Stair.down(8064, 0x27)),
    Spec(131328, 0x9a, '╻', 0xa, Stair.up(53376, 0xc7)),
    Spec(262401, 0x9b, ' ', 0x2, 0xa, 'deadend'),
    Spec(1, 0x9b, '╵', 0x2, poi(0, -0x30, 0x78), 'deadend'),
    Spec(256, 0x9b, '╷', 0xa, poi(0, 0x110, 0x78), 'deadend'),
    Spec(266256, 0x9c, ' ', 0x6, 0xe, 'deadend'),
    Spec(16, 0x9c, '╶', 0xe, poi(0, 0x70, 0x108), 'deadend'),
    Spec(4096, 0x9c, '╴', 0x6, poi(0, 0x70, -0x28), 'deadend'),
    Spec(1537, 0x9e, '╽', 0x2a),
];
const BOSS_CAVE_SCREENS = [
    Spec(29046, 0x91, '╤', 'fixed', 0x2a, poi(1, 0x60, 0x78)),
    Spec(459009, 0x91, '╤', 'fixed', 0x2a, poi(1, 0x60, 0x78)),
    Spec(94582, 0x92, '╤', 'fixed', wall(0x27, [0x2, 0xa]), poi(1, 0x60, 0x78)),
    Spec(112, 0x80, '╘'),
    Spec(28672, 0x80, '╛'),
];
const RIVER_SCREENS = [
    Spec(13107, 0xd3, '╬', 0x15, 0x3d, bridge(0xb6, [0x79, 0xbf]), poi(4, 0x00, 0x98)),
    Spec(771, 0xd4, '║', 0x19, 0x3b),
    Spec(12336, 0xd5, '═', 0x5d, 0x7f),
    Spec(66307, 0xd6, '║', bridge(0x87, [0x19, 0x3b])),
    Spec(77872, 0xd7, '═', bridge(0x86, [0x5d, 0x7f])),
    Spec(816, 0xd8, '╔', 0x9d, 0xbf),
    Spec(13056, 0xd9, '╗', 0x5b, 0x79),
    Spec(51, 0xda, '╚', 0x1f, 0x3d),
    Spec(12291, 0xdb, '╝', 0x15, 0x37),
    Spec(12337, 0xdc, '╧', 0x25d, 0x7f),
    Spec(12592, 0xdd, '╤', 0x5d, 0x7af),
    Spec(4867, 0xde, '╢', 0x169, 0x3b),
    Spec(787, 0xdf, '╟', 0x19, 0x3be),
    Spec(525059, 0xf0, ' ', 0x1, 0x3, 0x9, 0xb, 'deadend'),
    Spec(3, 0xf0, ' ', 0x1, 0x3, poi(1, -0x30, 0x48), poi(1, -0x30, 0x98), 'deadend'),
    Spec(768, 0xf0, ' ', 0x9, 0xb, poi(1, 0x110, 0x48), poi(1, 0x110, 0x98), 'deadend'),
    Spec(536624, 0xf1, ' ', 0x5, 0x7, 0xd, 0xf, 'deadend'),
    Spec(48, 0xf1, ' ', 0xd, 0xf, poi(1, 0x60, 0x108), poi(1, 0xa0, 0x108), 'deadend'),
    Spec(12288, 0xf1, ' ', 0x5, 0x7, poi(1, 0x60, -0x28), poi(1, 0xa0, -0x28), 'deadend'),
    Spec(65539, 0xf2, '╨', bridge(0x17, [0x1, 0x3])),
    Spec(66304, 0xf2, '╥', bridge(0xc6, [0x9, 0xb])),
    Spec(13104, 0xf3, '╦', 0x5d, 0x79, 0xbf),
    Spec(12339, 0xf4, '╩', 0x15, 0x3d, 0x7f),
    Spec(131843, 0xf5, '╠', 0x19, 0x3, 0xb, poi(1, 0xc0, 0x98), poi(1, 0x40, 0x98)),
    Spec(262915, 0xf6, '╣', 0x1, 0x9, 0x3b, poi(1, 0xb0, 0x48), poi(1, 0x30, 0x48)),
];
const WIDE_SCREENS = [
    Spec(2, 0x71, '┻', 0x2, Stair.down(53120, 0xd7)),
    Spec(514, 0x72, '┃', 0x2a),
    Spec(34, 0xe0, '┖', 0x2e),
    Spec(8194, 0xe1, '┚', 0x26),
    Spec(544, 0xe2, '┎', 0xae),
    Spec(8704, 0xe3, '┒', 0x6a),
    Spec(66050, 0xe5, '╏', 'fixed', 0x2, 0xa),
    Spec(8738, 0xe6, '╂', 0x26ae),
    Spec(8226, 0xe7, '┸', 0x26e),
    Spec(8736, 0xe8, '┰', 0x6ae),
    Spec(513, 0xe9, '╽', 'fixed', wall(0x37, [0x2, 0xa])),
    Spec(8224, 0xea, '─', 0x6e),
    Spec(66049, 0xfd, '╽', 'fixed', 0x2a),
];
const WIDE_SET = new Set([0x80, ...WIDE_SCREENS.map(spec => spec.tile)]);
const PIT_SCREENS = [
    Spec(528400, 0xeb, '┈', 'pit', 0x6e),
    Spec(524545, 0xec, '┊', 'pit', 0x2a),
];
const SPIKE_SCREENS = [
    Spec(260, 0xed, '╿', 0x2a),
    Spec(1025, 0xee, '╽', 0x2a),
    Spec(5140, 0xef, '╂', 0x26ae),
    Spec(1028, 0xf7, '┃', 0x2a),
];
export const SWAMP_SCREENS = [
    Spec(0x0000, 0x7f, ' '),
    Spec(0x0001, ~0, '╵', 0x1),
    Spec(0x0010, 0x76, '╶', 0xd),
    Spec(0x0011, 0x79, '└', 0x1d),
    Spec(0x0100, ~1, '╷', 0x9),
    Spec(0x0101, ~2, '│', 0x19),
    Spec(0x0110, ~3, '┌', 0x9d),
    Spec(0x0111, ~4, '├', 0x19d),
    Spec(0x1000, 0x7b, '╴', 0x5),
    Spec(0x1001, 0x75, '┘', 0x15),
    Spec(0x1010, ~5, '─', 0x5d),
    Spec(0x1011, 0x7d, '┴', 0x15d),
    Spec(0x1100, 0x7e, '┐', 0x59),
    Spec(0x1101, 0x78, '┤', 0x159),
    Spec(0x1110, 0x7a, '┬', 0x59d),
    Spec(0x1111, 0x77, '┼', 0x159d),
    Spec(0xf1f0, 0x7c, '╤', 'fixed', 0x9),
    Spec(0xf000, 0x7f, '╝', 'fixed'),
    Spec(0x00f0, 0x7f, '╚', 'fixed'),
    Spec(65552, 0x76, '╶', 'fixed', 'flag', 0xd),
    Spec(65792, ~1, '╷', 'fixed', 'flag', 0x9),
    Spec(65808, ~3, '┌', 'fixed', 'flag', 0x9d),
    Spec(69632, 0x7b, '╴', 'fixed', 'flag', 0x5),
    Spec(69648, ~5, '─', 'fixed', 'flag', 0x5d),
    Spec(69888, 0x7e, '┐', 'fixed', 'flag', 0x59),
    Spec(69904, 0x7a, '┬', 'fixed', 'flag', 0x59d),
];
export const GOA1_SCREENS = [
    Spec(0x0000, 0x80, ' '),
    Spec(0x0011, 0xe0, '└', 'flag', 0x1f, 0x2e, 0x3d),
    Spec(0x0101, 0xe4, '│', 'flag', 0x1239ab),
    Spec(0x0110, 0xe2, '┌', 'flag', 0x9d, 0xae, 0xbf),
    Spec(0x1001, 0xe1, '┘', 'flag', 0x15, 0x26, 0x37),
    Spec(0x1010, 0xea, '─', 0x5d, 0x6e, 0x7f),
    Spec(0x1011, 0xe7, '┴', 'flag', 0x15, 0x26e, 0x3d, 0x7f),
    Spec(0x1100, 0xe3, '┐', 'flag', 0x5b, 0x6a, 0x79),
    Spec(0x1110, 0xe8, '┬', 'flag', 0x5d, 0x6ae, 0x79, 0xbf),
    Spec(0x1111, 0xe6, '┼', 'flag', 0x15, 0x26ae, 0x3d, 0x79, 0xbf),
    Spec(65553, 0xe0, '└', 'fixed', 0x2e, 0x3d),
    Spec(65793, 0xe4, '│', 'fixed', 0x12ab),
    Spec(65808, 0xe2, '┌', 'fixed', 0xae, 0xbf),
    Spec(69633, 0xe1, '┘', 'fixed', 0x15, 0x26),
    Spec(69649, 0xe7, '┴', 'fixed', 0x26e, 0x7f),
    Spec(69888, 0xe3, '┐', 'fixed', 0x6a, 0x79),
    Spec(69904, 0xe8, '┬', 'fixed', 0x5d, 0x6ae),
    Spec(69905, 0xe6, '┼', 'fixed', 0x15, 0x26ae, 0xbf),
    Spec(131329, 0xe5, '┊', 'fixed', 'flag', 0x139b),
    Spec(196865, 0xe5, '┊', 'fixed', 0x39),
    Spec(0xf0f1, 0x71, '╽', 'fixed', 0x2a),
    Spec(0x00f0, 0x80, '█', 'fixed'),
    Spec(0xf000, 0x80, '█', 'fixed'),
    Spec(0xfff0, 0x73, '═', 'fixed'),
    Spec(0xf1ff, 0x72, '╤', 'fixed'),
    Spec(0x0ff0, 0x80, '╔', 'fixed'),
    Spec(0xff00, 0x80, '╗', 'fixed'),
    Spec(0x00ff, 0x80, '╚', 'fixed'),
    Spec(0xf00f, 0x80, '╝', 'fixed'),
];
const ALL_CAVE_SCREENS = [
    BASIC_CAVE_SCREENS,
    BOSS_CAVE_SCREENS,
    RIVER_SCREENS,
    WIDE_SCREENS,
    PIT_SCREENS,
    SPIKE_SCREENS,
];
const RIVER_TILES = new Set(RIVER_SCREENS.map(s => s.tile));
const BITCOUNT = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4];
export class SpecSet {
    constructor(specSets, empty) {
        this.specSets = specSets;
        this.empty = empty;
        this.fixedTiles = new Map();
        this.deadEndTiles = new Set();
        this.edgesByTile = new Map();
        this.stairsByTile = new Map();
        this.stairScreens = new Map();
        this.walls = new Map();
        for (const spec of iters.concat(...specSets)) {
            for (const dir of Dir.ALL) {
                const edge = (spec.edges >> Dir.shift(dir)) & 0xf;
                if (edge && (edge & 7) != 7) {
                    this.edgesByTile.set(spec.tile, (this.edgesByTile.get(spec.tile) || 0) | (1 << dir));
                }
            }
            for (const stair of spec.stairs) {
                const pos = (stair.entrance & 0xf000) >> 8 |
                    (stair.entrance & 0xf0) >> 4;
                this.stairsByTile.set(spec.tile << 8 | pos, stair.dir);
                this.stairScreens.set(spec.edges, [
                    stair.dir,
                    { entrance: stair.entrance, exits: [stair.exit, stair.exit + 1] }
                ]);
            }
            if (spec.wall)
                this.walls.set(spec.tile, spec.wall.type);
            if (spec.tile != 0x80 && spec.fixed) {
                if (!this.fixedTiles.has(spec.tile)) {
                    this.fixedTiles.set(spec.tile, spec);
                }
            }
            if (spec.deadEnd)
                this.deadEndTiles.add(spec.tile);
        }
    }
    survey(loc) {
        let size = 0;
        let deadEnds = 0;
        let branches = 0;
        let walls = 0;
        let bridges = 0;
        let rivers = 0;
        let wide = true;
        let anyWide = false;
        const stairs = new Map();
        const edges = new Map();
        const fixed = new Map();
        const tiles = new Multiset();
        const specs = [];
        if (this.empty)
            specs.push(this.empty);
        const allTiles = new Set([].concat(...loc.screens));
        for (const set of this.specSets) {
            for (const scr of set) {
                if (scr.tile === 0x80)
                    continue;
                if (allTiles.has(scr.tile)) {
                    specs.push(...set);
                    break;
                }
            }
        }
        if (loc.tileset === 0xa4) {
            for (let i = specs.length - 1; i >= 0; i--) {
                if (specs[i].edges === 69648)
                    specs.splice(i, 1);
            }
        }
        const reachable = new Set([...loc.reachableTiles(true).keys()].map(t => t >>> 8));
        if (!reachable.size)
            throw new Error('No reachable tiles');
        const entranceToExit = new Map(loc.entrances.map((entrance, num) => {
            for (const exit of loc.exits) {
                if (Math.abs(exit.x - entrance.x) < 20 &&
                    Math.abs(exit.y - entrance.y) < 20) {
                    return [num, exit.dest << 8 | exit.entrance];
                }
            }
            return null;
        }).filter(isNonNull));
        for (let i = 0; i < loc.entrances.length; i++) {
            const entrance = loc.entrances[i];
            const scr = loc.screens[entrance.screen >>> 4][entrance.screen & 0xf];
            const dir = this.stairsByTile.get(scr << 8 | entrance.tile);
            if (dir != null) {
                const exit = entranceToExit.get(i);
                if (exit == null)
                    throw new Error(`Could not find exit`);
                stairs.set(entrance.screen, { entrance: i, exit, dir });
            }
        }
        for (let y = 0; y < loc.height; y++) {
            let edgeMask = 0;
            if (!y)
                edgeMask |= 1;
            if (y === loc.height - 1)
                edgeMask |= 4;
            for (let x = 0; x < loc.width; x++) {
                const pos = (y << 4 | x);
                if (!reachable.has(pos))
                    continue;
                edgeMask &= ~0xa;
                if (!x)
                    edgeMask |= 8;
                if (x === loc.width - 1)
                    edgeMask |= 2;
                const tile = loc.screens[y][x];
                tiles.add(tile);
                if (tile === 0x80)
                    continue;
                if (WIDE_SET.has(tile)) {
                    anyWide = true;
                }
                else {
                    wide = false;
                }
                size++;
                if (RIVER_TILES.has(tile))
                    rivers++;
                let edgeExits = this.edgesByTile.get(tile);
                if (edgeExits == null)
                    throw new Error(`Bad tile: ${hex(tile)}`);
                let edgeCount = BITCOUNT[edgeExits] + (stairs.has(pos) ? 1 : 0);
                if (tile === 0x9a)
                    edgeCount = 2;
                if (tile === 0x9b || tile == 0x9c || tile == 0xf0 || tile == 0xf1) {
                    edgeCount = 1;
                }
                if (edgeCount === 1)
                    deadEnds++;
                if (edgeCount > 2)
                    branches += (edgeCount - 2);
                const wall = this.walls.get(tile);
                if (wall === 'wall')
                    walls++;
                if (wall === 'bridge')
                    bridges++;
                let fixedScr = this.fixedTiles.get(tile);
                if (this.deadEndTiles.has(tile))
                    edgeExits = 0;
                for (const dir of Dir.ALL) {
                    if (edgeExits & edgeMask & (1 << dir)) {
                        let entrance = null;
                        for (let i = 0; i < loc.entrances.length; i++) {
                            if (loc.entrances[i].screen === pos &&
                                matchesDir(loc.entrances[i].tile, dir)) {
                                entrance = i;
                                break;
                            }
                        }
                        if (entrance == null)
                            continue;
                        const exit = entranceToExit.get(entrance);
                        if (exit == null)
                            throw new Error(`Could not find exit`);
                        edges.set(pos, { entrance, exit, dir });
                    }
                }
                if (fixedScr != null)
                    fixed.set(pos, fixedScr);
            }
        }
        if (rivers) {
            for (const [pos, scr] of fixed) {
                if (scr.edges !== 0x7176)
                    continue;
                const spec = specs.find(s => s.edges === 459009);
                if (spec)
                    fixed.set(pos, spec);
            }
        }
        if (wide != anyWide)
            throw new Error(`Found inconsistent use of wide tiles`);
        return { size, rivers, deadEnds, branches, walls, bridges, stairs,
            edges, fixed, tiles, wide, specs, specSet: this };
    }
}
SpecSet.CAVE = new SpecSet(ALL_CAVE_SCREENS, EMPTY_CAVE_SCREEN);
function matchesDir(tile, dir) {
    if (dir === 0)
        return (tile >>> 4) < 0x4;
    if (dir === 1)
        return (tile & 0xf) > 0xd;
    if (dir === 2)
        return (tile >>> 4) > 0xc;
    if (dir === 3)
        return (tile & 0xf) < 0x2;
    return false;
}
export function readScreen(str) {
    const scr = str.split(/ +/g).map(x => parseInt(x, 16));
    for (const x of scr) {
        if (typeof x != 'number' || isNaN(x)) {
            throw new Error(`Bad screen: ${x} in ${str}`);
        }
    }
    return scr;
}
export function write2d(arr, corner, repl) {
    for (let i = 0; i < repl.length; i++) {
        for (let j = 0; j < repl[i].length; j++) {
            const x = repl[i][j];
            if (x != null)
                arr[corner + (i << 4 | j)] = x;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,