import { CaveShuffle } from './cave.js';
import { coordToPos } from './grid.js';
import { iters } from '../util.js';
import { OK } from './maze.js';
export class BridgeCaveShuffle {
    constructor(overpass, underpass, reverse = false) {
        this.overpass = overpass;
        this.underpass = underpass;
        this.under = this.makeUnder(underpass, overpass, reverse);
        this.over = this.makeOver(overpass, this.under, reverse);
    }
    makeUnder(underpass, overpass, reverse) {
        return new UnderpassShuffle(underpass, overpass, reverse);
    }
    makeOver(overpass, under, reverse) {
        return new OverpassShuffle(overpass, under, reverse);
    }
    shuffle(random) {
        while (this.under.attempts < this.under.maxAttempts) {
            this.under.finished = undefined;
            this.under.shuffle(random);
            if (!this.under.finished)
                return;
            this.over.maxAttempts = this.under.attempts;
            this.over.shuffle(random);
            if (this.over.finished) {
                this.over.actuallyFinish();
                this.under.actuallyFinish();
                return;
            }
        }
    }
}
class DoubleShuffle extends CaveShuffle {
    finish(meta) {
        this.finished = meta;
    }
    actuallyFinish() {
        super.finish(this.finished);
    }
}
class OverpassShuffle extends DoubleShuffle {
    constructor(location, under, reverse) {
        super(location);
        this.location = location;
        this.under = under;
        this.reverse = reverse;
    }
    init() {
        this.under.downStairs = [];
    }
    actualFinish() {
        for (const [up, down] of iters.zip(this.under.upStairs, this.under.downStairs)) {
            this.finished.attach(down, this.under.finished, up);
        }
    }
    addEarlyFeatures(a) {
        const result = super.addEarlyFeatures(a);
        if (!result.ok)
            return result;
        let xMin = 16;
        let xMax = 0;
        let yMin = 16;
        let yMax = 0;
        let bridge = 1;
        for (const pos of [...this.under.underBridges,
            -1,
            ...this.under.upStairs]) {
            if (pos === -1) {
                bridge = 0;
                continue;
            }
            const y = pos >>> 4;
            const x = pos & 0xf;
            xMin = Math.min(x, xMin);
            xMax = Math.max(x, xMax);
            yMin = Math.min(y - bridge, yMin);
            yMax = Math.max(y + bridge, yMax);
        }
        OUTER: for (let attempt = 0; attempt < 10; attempt++) {
            const mods = [];
            const x = this.random.nextInt(a.w - (xMax - xMin)) + xMin;
            const y = this.random.nextInt(a.h - (yMax - yMin)) + yMin;
            const delta = (y - yMin) << 4 + (x - xMin);
            for (const bridge of this.under.underBridges) {
                const pos = bridge + delta;
                const sy = pos >>> 4;
                const sx = pos & 0xf;
                const c = (sy << 12 | sx << 4 | 0x808);
                if (a.grid.get(c) !== 'c')
                    continue OUTER;
                mods.push([c, 'b']);
                mods.push([c - 8, '']);
                mods.push([c + 8, '']);
            }
            for (const stair of this.under.upStairsEffective) {
                const pos = stair + delta;
                const sy = pos >>> 4;
                const sx = pos & 0xf;
                const c = (sy << 12 | sx << 4 | 0x808);
                if (a.grid.get(c) !== 'c')
                    continue OUTER;
                mods.push([c, this.reverse ? '<' : '>']);
                mods.push([c + (this.reverse ? -0x800 : 0x800), '']);
                const stairMods = this.addEarlyStair(a, c, this.reverse ? '<' : '>');
                if (!stairMods.length)
                    continue OUTER;
                mods.push(...stairMods);
            }
            for (const [c, v] of mods) {
                if (v)
                    a.fixed.add(c);
                if (v === '<' || v === '>') {
                    this.under.downStairs.push(coordToPos(c));
                }
                a.grid.set(c, v);
            }
            return OK;
        }
        return { ok: false, fail: 'add fixed stairs with early features' };
    }
    addStairs(a, up = 0, down = 0) {
        if (this.reverse) {
            return super.addStairs(a, up - this.under.upStairs.length, down);
        }
        return super.addStairs(a, up, down - this.under.upStairs.length);
    }
    addOverpasses() {
        return true;
    }
    reportFailure() { }
}
class UnderpassShuffle extends DoubleShuffle {
    constructor(loc, overpass, reverse) {
        super(loc);
        this.loc = loc;
        this.overpass = overpass;
        this.reverse = reverse;
        this.underBridges = [];
        this.upStairs = [];
        this.upStairsEffective = [];
        this.downStairs = [];
    }
    init() {
        this.underBridges = [];
        this.upStairs = [];
        this.upStairsEffective = [];
    }
    finish(newMeta) {
        const upStair = this.reverse ? 'stair:down' : 'stair:up';
        for (const pos of newMeta.allPos()) {
            const scr = newMeta.get(pos);
            if (scr.hasFeature('underpass'))
                this.underBridges.push(pos);
            if (scr.hasFeature(upStair)) {
                let delta = 0;
                for (const exit of scr.data.exits) {
                    if (exit.type === 'stair:up' && exit.entrance < 0x8000)
                        delta = -16;
                    if (exit.type === 'stair:down' && exit.entrance > 0x8000)
                        delta = 16;
                }
                this.upStairsEffective.push(pos + delta);
                this.upStairs.push(pos);
            }
        }
        if (!this.underBridges.length) {
            throw new Error(`Expected bridge in ${this.loc}\n${newMeta.show()}`);
        }
        if (!this.upStairs.length) {
            throw new Error(`Expected stair in ${this.loc}\n${newMeta.show()}`);
        }
        let stairsLen = 0;
        for (const [, type, [dest]] of this.orig.exits()) {
            if (type === upStair && (dest >>> 8) === this.overpass.id)
                stairsLen++;
        }
        this.upStairs = this.random.shuffle(this.upStairs).slice(0, stairsLen);
        super.finish(newMeta);
    }
}
//# sourceMappingURL=data:application/json;base64,