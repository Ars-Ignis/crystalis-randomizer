export function writeLocationsFromMeta(rom) {
    const { locations } = rom;
    const { CordelPlainEast, CordelPlainWest, WaterfallValleyNorth, WaterfallValleySouth, MtSabreWest_Cave1 } = locations;
    CordelPlainEast.meta.reconcileExits(CordelPlainWest.meta);
    for (const pos of WaterfallValleyNorth.meta.allPos()) {
        const north = WaterfallValleyNorth.meta.get(pos);
        const south = WaterfallValleySouth.meta.get(pos);
        if (north.isEmpty() && !south.isEmpty()) {
            WaterfallValleyNorth.meta.set(pos, south);
        }
        else if (south.isEmpty() && !north.isEmpty()) {
            WaterfallValleySouth.meta.set(pos, north);
        }
    }
    for (const loc of locations) {
        if (!loc.used)
            continue;
        loc.exits = [];
        loc.entrances = [];
        loc.meta.writeEntrance0();
    }
    for (const loc of locations) {
        if (!loc.used)
            continue;
        if (loc === MtSabreWest_Cave1)
            continue;
        loc.meta.write();
        if (loc === CordelPlainWest && MtSabreWest_Cave1.used) {
            MtSabreWest_Cave1.meta.write();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGVsb2NhdGlvbnNmcm9tbWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL3dyaXRlbG9jYXRpb25zZnJvbW1ldGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEdBQVE7SUFDN0MsTUFBTSxFQUFDLFNBQVMsRUFBQyxHQUFHLEdBQUcsQ0FBQztJQUN4QixNQUFNLEVBQUMsZUFBZSxFQUFFLGVBQWUsRUFDaEMsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQzFDLGlCQUFpQixFQUFDLEdBQUcsU0FBUyxDQUFDO0lBR3RDLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQU0xRCxLQUFLLE1BQU0sR0FBRyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNwRCxNQUFNLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sS0FBSyxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDdkMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0M7YUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM5QyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQztLQUNGO0lBSUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUU7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJO1lBQUUsU0FBUztRQUN4QixHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLEdBQUcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDM0I7SUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLFNBQVMsRUFBRTtRQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7WUFBRSxTQUFTO1FBS3hCLElBQUksR0FBRyxLQUFLLGlCQUFpQjtZQUFFLFNBQVM7UUFDeEMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNqQixJQUFJLEdBQUcsS0FBSyxlQUFlLElBQUksaUJBQWlCLENBQUMsSUFBSSxFQUFFO1lBQ3JELGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNoQztLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVMb2NhdGlvbnNGcm9tTWV0YShyb206IFJvbSkge1xuICBjb25zdCB7bG9jYXRpb25zfSA9IHJvbTtcbiAgY29uc3Qge0NvcmRlbFBsYWluRWFzdCwgQ29yZGVsUGxhaW5XZXN0LFxuICAgICAgICAgV2F0ZXJmYWxsVmFsbGV5Tm9ydGgsIFdhdGVyZmFsbFZhbGxleVNvdXRoLFxuICAgICAgICAgTXRTYWJyZVdlc3RfQ2F2ZTF9ID0gbG9jYXRpb25zO1xuXG4gIC8vIEZpcnN0IHN5bmMgdXAgQ29yZGVsJ3MgZXhpdHMuXG4gIENvcmRlbFBsYWluRWFzdC5tZXRhLnJlY29uY2lsZUV4aXRzKENvcmRlbFBsYWluV2VzdC5tZXRhKTtcblxuICAvLyBDb3B5IHRoZSBub24tZW1wdHkgc2NyZWVucyBiZXR3ZWVuIHRoZSBXYXRlcmZhbGwgVmFsbGV5IHBhaXIuICBXaXRob3V0XG4gIC8vIHRoaXMsIGV2ZXJ5dGhpbmcgb24gdGhlIG90aGVyIHNpZGUgb2YgdGhlIHNlYW0gaXMgZmlsbGVkIGluIGFzIG1vdW50YWlucyxcbiAgLy8gd2hpY2ggY2F1c2VzIHZlcnkgbWlub3IgZ3JhcGhpY2FsIGFydGlmYWN0cyB3aGVuIHdhbGtpbmcgc291dGggdGhyb3VnaFxuICAvLyB0aGUgcGFzcy5cbiAgZm9yIChjb25zdCBwb3Mgb2YgV2F0ZXJmYWxsVmFsbGV5Tm9ydGgubWV0YS5hbGxQb3MoKSkge1xuICAgIGNvbnN0IG5vcnRoID0gV2F0ZXJmYWxsVmFsbGV5Tm9ydGgubWV0YS5nZXQocG9zKTtcbiAgICBjb25zdCBzb3V0aCA9IFdhdGVyZmFsbFZhbGxleVNvdXRoLm1ldGEuZ2V0KHBvcyk7XG4gICAgaWYgKG5vcnRoLmlzRW1wdHkoKSAmJiAhc291dGguaXNFbXB0eSgpKSB7XG4gICAgICBXYXRlcmZhbGxWYWxsZXlOb3J0aC5tZXRhLnNldChwb3MsIHNvdXRoKTtcbiAgICB9IGVsc2UgaWYgKHNvdXRoLmlzRW1wdHkoKSAmJiAhbm9ydGguaXNFbXB0eSgpKSB7XG4gICAgICBXYXRlcmZhbGxWYWxsZXlTb3V0aC5tZXRhLnNldChwb3MsIG5vcnRoKTtcbiAgICB9XG4gIH1cblxuICAvLyBOb3cgZG8gdGhlIGFjdHVhbCBjb3B5LiAgU3RhcnQgYnkgd2lwaW5nIG91dCBhbGwgdGhlIGVudHJhbmNlcyBhbmQgZXhpdHMuXG4gIC8vIFRoaXMgbmVlZHMgdG8gYmUgZG9uZSBhcyBhIHNlcGFyYXRlIHBhc3NcbiAgZm9yIChjb25zdCBsb2Mgb2YgbG9jYXRpb25zKSB7XG4gICAgaWYgKCFsb2MudXNlZCkgY29udGludWU7XG4gICAgbG9jLmV4aXRzID0gW107XG4gICAgbG9jLmVudHJhbmNlcyA9IFtdO1xuICAgIGxvYy5tZXRhLndyaXRlRW50cmFuY2UwKCk7XG4gIH1cbiAgLy8gVGhlbiB3cml0ZSBlYWNoIG9uZS5cbiAgZm9yIChjb25zdCBsb2Mgb2YgbG9jYXRpb25zKSB7XG4gICAgaWYgKCFsb2MudXNlZCkgY29udGludWU7XG4gICAgLy8gTk9URTogdGhlIGVudHJhbmNlIG9yZGVyIGZvciBNdCBTYWJyZSBXIExvd2VyIGlzIGNoYW5nZWQgYmVjYXVzZVxuICAgIC8vIHRoZSBiYWNrIG9mIFplYnUgQ2F2ZSAoU2FicmUgVyBDYXZlIDEpIGlzIHdyaXR0ZW4gYmVmb3JlIENvcmRlbCBXLlxuICAgIC8vIFRvIGhlbHAgZ2V0IHRoZSBlbnRyYW5jZXMgYmFjayBpbiB0aGUgcmlnaHQgb3JkZXIsIHdlIGRvIGEgcXVpY2tcbiAgICAvLyBzcGVjaWFsIGNhc2UgdG8gZGVmZXIgd3JpdGluZyB0aGUgemVidSBjYXZlIHJlYWQgdW50aWwgYWZ0ZXIgY29yZGVsLlxuICAgIGlmIChsb2MgPT09IE10U2FicmVXZXN0X0NhdmUxKSBjb250aW51ZTtcbiAgICBsb2MubWV0YS53cml0ZSgpO1xuICAgIGlmIChsb2MgPT09IENvcmRlbFBsYWluV2VzdCAmJiBNdFNhYnJlV2VzdF9DYXZlMS51c2VkKSB7XG4gICAgICBNdFNhYnJlV2VzdF9DYXZlMS5tZXRhLndyaXRlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=