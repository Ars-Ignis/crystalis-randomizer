export function writeLocationsFromMeta(rom) {
    const { locations } = rom;
    const { CordelPlainEast, CordelPlainWest, WaterfallValleyNorth, WaterfallValleySouth, MtSabreWest_Cave1 } = locations;
    CordelPlainEast.meta.reconcileExits(CordelPlainWest.meta);
    for (const pos of WaterfallValleyNorth.meta.allPos()) {
        const north = WaterfallValleyNorth.meta.get(pos);
        const south = WaterfallValleySouth.meta.get(pos);
        if (north.isEmpty() && !south.isEmpty()) {
            WaterfallValleyNorth.meta.set(pos, south);
        }
        else if (south.isEmpty() && !north.isEmpty()) {
            WaterfallValleySouth.meta.set(pos, north);
        }
    }
    for (const loc of locations) {
        if (!loc.used)
            continue;
        loc.exits = [];
        loc.entrances = [];
    }
    for (const loc of locations) {
        if (!loc.used)
            continue;
        if (loc === MtSabreWest_Cave1)
            continue;
        loc.meta.write();
        if (loc === CordelPlainWest && MtSabreWest_Cave1.used) {
            MtSabreWest_Cave1.meta.write();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGVsb2NhdGlvbnNmcm9tbWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL3dyaXRlbG9jYXRpb25zZnJvbW1ldGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEdBQVE7SUFDN0MsTUFBTSxFQUFDLFNBQVMsRUFBQyxHQUFHLEdBQUcsQ0FBQztJQUN4QixNQUFNLEVBQUMsZUFBZSxFQUFFLGVBQWUsRUFDaEMsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQzFDLGlCQUFpQixFQUFDLEdBQUcsU0FBUyxDQUFDO0lBR3RDLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQU0xRCxLQUFLLE1BQU0sR0FBRyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNwRCxNQUFNLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sS0FBSyxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDdkMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0M7YUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM5QyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQztLQUNGO0lBSUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUU7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJO1lBQUUsU0FBUztRQUN4QixHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLEdBQUcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0tBQ3BCO0lBRUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUU7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJO1lBQUUsU0FBUztRQUt4QixJQUFJLEdBQUcsS0FBSyxpQkFBaUI7WUFBRSxTQUFTO1FBQ3hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakIsSUFBSSxHQUFHLEtBQUssZUFBZSxJQUFJLGlCQUFpQixDQUFDLElBQUksRUFBRTtZQUNyRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDaEM7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlTG9jYXRpb25zRnJvbU1ldGEocm9tOiBSb20pIHtcbiAgY29uc3Qge2xvY2F0aW9uc30gPSByb207XG4gIGNvbnN0IHtDb3JkZWxQbGFpbkVhc3QsIENvcmRlbFBsYWluV2VzdCxcbiAgICAgICAgIFdhdGVyZmFsbFZhbGxleU5vcnRoLCBXYXRlcmZhbGxWYWxsZXlTb3V0aCxcbiAgICAgICAgIE10U2FicmVXZXN0X0NhdmUxfSA9IGxvY2F0aW9ucztcblxuICAvLyBGaXJzdCBzeW5jIHVwIENvcmRlbCdzIGV4aXRzLlxuICBDb3JkZWxQbGFpbkVhc3QubWV0YS5yZWNvbmNpbGVFeGl0cyhDb3JkZWxQbGFpbldlc3QubWV0YSk7XG5cbiAgLy8gQ29weSB0aGUgbm9uLWVtcHR5IHNjcmVlbnMgYmV0d2VlbiB0aGUgV2F0ZXJmYWxsIFZhbGxleSBwYWlyLiAgV2l0aG91dFxuICAvLyB0aGlzLCBldmVyeXRoaW5nIG9uIHRoZSBvdGhlciBzaWRlIG9mIHRoZSBzZWFtIGlzIGZpbGxlZCBpbiBhcyBtb3VudGFpbnMsXG4gIC8vIHdoaWNoIGNhdXNlcyB2ZXJ5IG1pbm9yIGdyYXBoaWNhbCBhcnRpZmFjdHMgd2hlbiB3YWxraW5nIHNvdXRoIHRocm91Z2hcbiAgLy8gdGhlIHBhc3MuXG4gIGZvciAoY29uc3QgcG9zIG9mIFdhdGVyZmFsbFZhbGxleU5vcnRoLm1ldGEuYWxsUG9zKCkpIHtcbiAgICBjb25zdCBub3J0aCA9IFdhdGVyZmFsbFZhbGxleU5vcnRoLm1ldGEuZ2V0KHBvcyk7XG4gICAgY29uc3Qgc291dGggPSBXYXRlcmZhbGxWYWxsZXlTb3V0aC5tZXRhLmdldChwb3MpO1xuICAgIGlmIChub3J0aC5pc0VtcHR5KCkgJiYgIXNvdXRoLmlzRW1wdHkoKSkge1xuICAgICAgV2F0ZXJmYWxsVmFsbGV5Tm9ydGgubWV0YS5zZXQocG9zLCBzb3V0aCk7XG4gICAgfSBlbHNlIGlmIChzb3V0aC5pc0VtcHR5KCkgJiYgIW5vcnRoLmlzRW1wdHkoKSkge1xuICAgICAgV2F0ZXJmYWxsVmFsbGV5U291dGgubWV0YS5zZXQocG9zLCBub3J0aCk7XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IGRvIHRoZSBhY3R1YWwgY29weS4gIFN0YXJ0IGJ5IHdpcGluZyBvdXQgYWxsIHRoZSBlbnRyYW5jZXMgYW5kIGV4aXRzLlxuICAvLyBUaGlzIG5lZWRzIHRvIGJlIGRvbmUgYXMgYSBzZXBhcmF0ZSBwYXNzXG4gIGZvciAoY29uc3QgbG9jIG9mIGxvY2F0aW9ucykge1xuICAgIGlmICghbG9jLnVzZWQpIGNvbnRpbnVlO1xuICAgIGxvYy5leGl0cyA9IFtdO1xuICAgIGxvYy5lbnRyYW5jZXMgPSBbXTtcbiAgfVxuICAvLyBUaGVuIHdyaXRlIGVhY2ggb25lLlxuICBmb3IgKGNvbnN0IGxvYyBvZiBsb2NhdGlvbnMpIHtcbiAgICBpZiAoIWxvYy51c2VkKSBjb250aW51ZTtcbiAgICAvLyBOT1RFOiB0aGUgZW50cmFuY2Ugb3JkZXIgZm9yIE10IFNhYnJlIFcgTG93ZXIgaXMgY2hhbmdlZCBiZWNhdXNlXG4gICAgLy8gdGhlIGJhY2sgb2YgWmVidSBDYXZlIChTYWJyZSBXIENhdmUgMSkgaXMgd3JpdHRlbiBiZWZvcmUgQ29yZGVsIFcuXG4gICAgLy8gVG8gaGVscCBnZXQgdGhlIGVudHJhbmNlcyBiYWNrIGluIHRoZSByaWdodCBvcmRlciwgd2UgZG8gYSBxdWlja1xuICAgIC8vIHNwZWNpYWwgY2FzZSB0byBkZWZlciB3cml0aW5nIHRoZSB6ZWJ1IGNhdmUgcmVhZCB1bnRpbCBhZnRlciBjb3JkZWwuXG4gICAgaWYgKGxvYyA9PT0gTXRTYWJyZVdlc3RfQ2F2ZTEpIGNvbnRpbnVlO1xuICAgIGxvYy5tZXRhLndyaXRlKCk7XG4gICAgaWYgKGxvYyA9PT0gQ29yZGVsUGxhaW5XZXN0ICYmIE10U2FicmVXZXN0X0NhdmUxLnVzZWQpIHtcbiAgICAgIE10U2FicmVXZXN0X0NhdmUxLm1ldGEud3JpdGUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==