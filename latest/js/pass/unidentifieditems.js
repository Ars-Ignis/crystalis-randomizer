const KEY_NAMES = [
    'Curious Key',
    'Bronze Key',
    'Silver Key',
    'Ancient Key',
    'Small Key',
    'Shiny Key',
    'Mysterious Key',
    'Magic Key',
    'Piano Key',
    'Encryption Key',
    'Private Key',
    'Public Key',
    'Key Card',
    'Any Key',
    'Space Bar',
    'Return Key',
    'Backdoor Key',
    'Imaginary Key',
    'Giant Key',
    'Out of Key',
    'Key of C',
    'Key of G',
    'Key of B Flat',
    'Key of F Sharp',
    'Skeleton Key',
    'Golden Key',
    'Lockpick',
    'Transponder Key',
    'Sharp Key',
    'Flat Key',
    'Locke and Key',
    'Major Key',
    'Minor Key',
    'Cookie',
    'Turkey',
    'Monkey',
    'Ctrl Key',
    'Escape Key',
    'Car Key',
    'Clock Key',
    'Florida Key',
    'Key Lime Pie',
];
const FLUTE_NAMES = [
    'Wooden Flute',
    'Metal Flute',
    'Horn of Plenty',
    'Ocarina',
    'Pan Pipes',
    'Bugle',
    'Bagpipes',
    'Kazoo',
    'Tin Whistle',
    'Magic Whistle',
    'Dog Whistle',
    'Recorder',
    'Accordion',
    'Harmonica',
    'Sousaphone',
    'Trombone',
    'Violin',
    'Cello',
    'Theramin',
];
const LAMP_NAMES = [
    'Bronze Lamp',
    'Magic Lamp',
    'Dull Lamp',
    'Shimmering Lamp',
    'Oil Lamp',
    'Broken Lamp',
    'Frog Lamp',
    'Smog Lamp',
    'Dog Lamp',
    'Pog Champ',
    'Brass Lantern',
    'Candelabra',
];
const STATUE_NAMES = [
    'Rusty Statue',
    'Forbidden Statue',
    'Golden Idol',
    'Strange Statue',
    'Glass Statue',
    'Burt Figurine',
    'Draygon Figurine',
    'Karmine Figurine',
    'Mado Figurine',
    'Sabera Figurine',
    'Kelbesque Figurine',
    'Copper Statue',
    'White Statue',
    'Invisible Statue',
    'Mattrick Figurine',
    'Dragondarch Statue',
    'Overswarm Statue',
    'Trueblue83 Statue',
    'TheAxeMan Idol',
    'Acmlm Figurine',
    'Flail Guy Trophy',
    'Metroid Amiibo',
    'Model of Dyna',
];
export function unidentifiedItems(rom, flags, random) {
    if (!flags.unidentifiedItems())
        return;
    const items = (...ids) => ids.map(id => rom.items[id]);
    const keys = items(0x32, 0x33, 0x34);
    const flutes = items(0x27, 0x28, 0x31, 0x36);
    const lamps = items(0x35, 0x39);
    const statues = items(0x25, 0x38, 0x3a, 0x3d);
    for (const [list, [...names]] of [[keys, KEY_NAMES],
        [flutes, FLUTE_NAMES],
        [lamps, LAMP_NAMES],
        [statues, STATUE_NAMES]]) {
        random.shuffle(names);
        const palettes = random.shuffle([0, 1, 2, 3]);
        for (const item of list) {
            const name = names.pop();
            if (rom.spoiler)
                rom.spoiler.addUnidentifiedItem(item.id, item.messageName, name);
            item.menuName = item.messageName = name;
            item.palette = palettes.pop();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZGVudGlmaWVkaXRlbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvcGFzcy91bmlkZW50aWZpZWRpdGVtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLFNBQVMsR0FBRztJQUNoQixhQUFhO0lBQ2IsWUFBWTtJQUNaLFlBQVk7SUFDWixhQUFhO0lBQ2IsV0FBVztJQUNYLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLFlBQVk7SUFDWixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxZQUFZO0lBQ1osY0FBYztJQUNkLGVBQWU7SUFDZixXQUFXO0lBQ1gsWUFBWTtJQUNaLFVBQVU7SUFDVixVQUFVO0lBQ1YsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsWUFBWTtJQUNaLFVBQVU7SUFDVixpQkFBaUI7SUFDakIsV0FBVztJQUNYLFVBQVU7SUFDVixlQUFlO0lBQ2YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsWUFBWTtJQUNaLFNBQVM7SUFDVCxXQUFXO0lBQ1gsYUFBYTtJQUNiLGNBQWM7Q0FDZixDQUFDO0FBQ0YsTUFBTSxXQUFXLEdBQUc7SUFDbEIsY0FBYztJQUNkLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxhQUFhO0lBQ2IsZUFBZTtJQUNmLGFBQWE7SUFDYixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxZQUFZO0lBQ1osVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtDQUNYLENBQUM7QUFDRixNQUFNLFVBQVUsR0FBRztJQUNqQixhQUFhO0lBQ2IsWUFBWTtJQUNaLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsVUFBVTtJQUNWLGFBQWE7SUFDYixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsZUFBZTtJQUNmLFlBQVk7Q0FDYixDQUFDO0FBQ0YsTUFBTSxZQUFZLEdBQUc7SUFDbkIsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGVBQWU7Q0FDaEIsQ0FBQztBQUdGLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxHQUFRLEVBQUUsS0FBYyxFQUFFLE1BQWM7SUFDeEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtRQUFFLE9BQU87SUFDdkMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQWEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0MsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoQyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFtQixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRS9ELEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQztRQUNqQixDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7UUFDckIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDO1FBQ25CLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFVLEVBQUU7UUFFbkUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksRUFBRTtZQUN2QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFHLENBQUM7WUFDMUIsSUFBSSxHQUFHLENBQUMsT0FBTztnQkFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNsRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRyxDQUFDO1NBQ2hDO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGbGFnU2V0fSBmcm9tICcuLi9mbGFnc2V0LmpzJztcbmltcG9ydCB7UmFuZG9tfSBmcm9tICcuLi9yYW5kb20uanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5cbmNvbnN0IEtFWV9OQU1FUyA9IFtcbiAgJ0N1cmlvdXMgS2V5JyxcbiAgJ0Jyb256ZSBLZXknLFxuICAnU2lsdmVyIEtleScsXG4gICdBbmNpZW50IEtleScsXG4gICdTbWFsbCBLZXknLFxuICAnU2hpbnkgS2V5JyxcbiAgJ015c3RlcmlvdXMgS2V5JyxcbiAgJ01hZ2ljIEtleScsXG4gICdQaWFubyBLZXknLFxuICAnRW5jcnlwdGlvbiBLZXknLFxuICAnUHJpdmF0ZSBLZXknLFxuICAnUHVibGljIEtleScsXG4gICdLZXkgQ2FyZCcsXG4gICdBbnkgS2V5JyxcbiAgJ1NwYWNlIEJhcicsXG4gICdSZXR1cm4gS2V5JyxcbiAgJ0JhY2tkb29yIEtleScsXG4gICdJbWFnaW5hcnkgS2V5JyxcbiAgJ0dpYW50IEtleScsXG4gICdPdXQgb2YgS2V5JyxcbiAgJ0tleSBvZiBDJyxcbiAgJ0tleSBvZiBHJyxcbiAgJ0tleSBvZiBCIEZsYXQnLFxuICAnS2V5IG9mIEYgU2hhcnAnLFxuICAnU2tlbGV0b24gS2V5JyxcbiAgJ0dvbGRlbiBLZXknLFxuICAnTG9ja3BpY2snLFxuICAnVHJhbnNwb25kZXIgS2V5JyxcbiAgJ1NoYXJwIEtleScsXG4gICdGbGF0IEtleScsXG4gICdMb2NrZSBhbmQgS2V5JyxcbiAgJ01ham9yIEtleScsXG4gICdNaW5vciBLZXknLFxuICAnQ29va2llJyxcbiAgJ1R1cmtleScsXG4gICdNb25rZXknLFxuICAnQ3RybCBLZXknLFxuICAnRXNjYXBlIEtleScsXG4gICdDYXIgS2V5JyxcbiAgJ0Nsb2NrIEtleScsXG4gICdGbG9yaWRhIEtleScsXG4gICdLZXkgTGltZSBQaWUnLFxuXTtcbmNvbnN0IEZMVVRFX05BTUVTID0gW1xuICAnV29vZGVuIEZsdXRlJyxcbiAgJ01ldGFsIEZsdXRlJyxcbiAgJ0hvcm4gb2YgUGxlbnR5JyxcbiAgJ09jYXJpbmEnLFxuICAnUGFuIFBpcGVzJyxcbiAgJ0J1Z2xlJyxcbiAgJ0JhZ3BpcGVzJyxcbiAgJ0them9vJyxcbiAgJ1RpbiBXaGlzdGxlJyxcbiAgJ01hZ2ljIFdoaXN0bGUnLFxuICAnRG9nIFdoaXN0bGUnLFxuICAnUmVjb3JkZXInLFxuICAnQWNjb3JkaW9uJyxcbiAgJ0hhcm1vbmljYScsXG4gICdTb3VzYXBob25lJyxcbiAgJ1Ryb21ib25lJyxcbiAgJ1Zpb2xpbicsXG4gICdDZWxsbycsXG4gICdUaGVyYW1pbicsXG5dO1xuY29uc3QgTEFNUF9OQU1FUyA9IFtcbiAgJ0Jyb256ZSBMYW1wJyxcbiAgJ01hZ2ljIExhbXAnLFxuICAnRHVsbCBMYW1wJyxcbiAgJ1NoaW1tZXJpbmcgTGFtcCcsXG4gICdPaWwgTGFtcCcsXG4gICdCcm9rZW4gTGFtcCcsXG4gICdGcm9nIExhbXAnLFxuICAnU21vZyBMYW1wJyxcbiAgJ0RvZyBMYW1wJyxcbiAgJ1BvZyBDaGFtcCcsXG4gICdCcmFzcyBMYW50ZXJuJyxcbiAgJ0NhbmRlbGFicmEnLFxuXTtcbmNvbnN0IFNUQVRVRV9OQU1FUyA9IFtcbiAgJ1J1c3R5IFN0YXR1ZScsXG4gICdGb3JiaWRkZW4gU3RhdHVlJyxcbiAgJ0dvbGRlbiBJZG9sJyxcbiAgJ1N0cmFuZ2UgU3RhdHVlJyxcbiAgJ0dsYXNzIFN0YXR1ZScsXG4gICdCdXJ0IEZpZ3VyaW5lJyxcbiAgJ0RyYXlnb24gRmlndXJpbmUnLFxuICAnS2FybWluZSBGaWd1cmluZScsXG4gICdNYWRvIEZpZ3VyaW5lJyxcbiAgJ1NhYmVyYSBGaWd1cmluZScsXG4gICdLZWxiZXNxdWUgRmlndXJpbmUnLFxuICAnQ29wcGVyIFN0YXR1ZScsXG4gICdXaGl0ZSBTdGF0dWUnLFxuICAnSW52aXNpYmxlIFN0YXR1ZScsXG4gICdNYXR0cmljayBGaWd1cmluZScsXG4gICdEcmFnb25kYXJjaCBTdGF0dWUnLFxuICAnT3ZlcnN3YXJtIFN0YXR1ZScsXG4gICdUcnVlYmx1ZTgzIFN0YXR1ZScsXG4gICdUaGVBeGVNYW4gSWRvbCcsXG4gICdBY21sbSBGaWd1cmluZScsXG4gICdGbGFpbCBHdXkgVHJvcGh5JyxcbiAgJ01ldHJvaWQgQW1paWJvJyxcbiAgJ01vZGVsIG9mIER5bmEnLFxuXTtcblxuXG5leHBvcnQgZnVuY3Rpb24gdW5pZGVudGlmaWVkSXRlbXMocm9tOiBSb20sIGZsYWdzOiBGbGFnU2V0LCByYW5kb206IFJhbmRvbSkge1xuICBpZiAoIWZsYWdzLnVuaWRlbnRpZmllZEl0ZW1zKCkpIHJldHVybjtcbiAgY29uc3QgaXRlbXMgPSAoLi4uaWRzOiBudW1iZXJbXSkgPT4gaWRzLm1hcChpZCA9PiByb20uaXRlbXNbaWRdKTtcbiAgY29uc3Qga2V5cyA9IGl0ZW1zKDB4MzIsIDB4MzMsIDB4MzQpO1xuICBjb25zdCBmbHV0ZXMgPSBpdGVtcygweDI3LCAweDI4LCAweDMxLCAweDM2KTtcbiAgY29uc3QgbGFtcHMgPSBpdGVtcygweDM1LCAweDM5KTtcbiAgY29uc3Qgc3RhdHVlcyA9IGl0ZW1zKDB4MjUsIC8qIG9wZWwgMHgyNiwgKi8gMHgzOCwgMHgzYSwgMHgzZCk7XG5cbiAgZm9yIChjb25zdCBbbGlzdCwgWy4uLm5hbWVzXV0gb2YgW1trZXlzLCBLRVlfTkFNRVNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2ZsdXRlcywgRkxVVEVfTkFNRVNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2xhbXBzLCBMQU1QX05BTUVTXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzdGF0dWVzLCBTVEFUVUVfTkFNRVNdXSBhcyBjb25zdCkge1xuICAgIC8vIHBhbGV0dGVzIGFyZSA6MDMgYml0IG9mIGl0ZW0uaXRlbURhdGFWYWx1ZVxuICAgIHJhbmRvbS5zaHVmZmxlKG5hbWVzKTtcbiAgICBjb25zdCBwYWxldHRlcyA9IHJhbmRvbS5zaHVmZmxlKFswLCAxLCAyLCAzXSk7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBuYW1lcy5wb3AoKSE7XG4gICAgICBpZiAocm9tLnNwb2lsZXIpIHJvbS5zcG9pbGVyLmFkZFVuaWRlbnRpZmllZEl0ZW0oaXRlbS5pZCwgaXRlbS5tZXNzYWdlTmFtZSwgbmFtZSk7XG4gICAgICBpdGVtLm1lbnVOYW1lID0gaXRlbS5tZXNzYWdlTmFtZSA9IG5hbWU7XG4gICAgICBpdGVtLnBhbGV0dGUgPSBwYWxldHRlcy5wb3AoKSE7XG4gICAgfVxuICB9XG59XG4iXX0=