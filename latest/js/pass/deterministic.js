import { Spawn } from '../rom/location.js';
import { MessageId } from '../rom/messageid.js';
import { GlobalDialog, LocalDialog } from '../rom/npc.js';
import { ShopType } from '../rom/shop.js';
import { hex } from '../rom/util.js';
import { assert } from '../util.js';
import { Monster } from '../rom/monster.js';
const [] = [hex];
function write(arr, start, ...data) {
    for (let i = 0; i < data.length; i++) {
        arr[start + i] = data[i];
    }
}
export function deterministicPreParse(prg) {
    prg[0x1a594] = 0xff;
    prg[0x1cdc5] = 0xa8;
    prg[0x1a176] = 0xff;
    prg[0x1a84c] = 0xff;
    prg[0x1d843] = 0xa0;
    prg[0x1e06b] &= 7;
    prg[0x1e06f] &= 7;
    prg[0x1e073] &= 7;
    prg[0x1e077] &= 7;
    prg[0x1e07b] &= 7;
    prg[0x1e084] &= 7;
    prg[0x1e09b] &= 7;
    prg[0x1e0b9] &= 7;
    prg[0x1e105] = 0x2f;
    prg[0x1e277] = 0x00;
    prg[0x1e366] = 0x40;
    prg[0x1e371] = 0x00;
    prg[0x1e387] = 0x00;
    prg[0x1e391] = 0x00;
    write(prg, 0x1a168, 0x33, 0x33);
    write(prg, 0x1a48e, 0x33, 0x33);
    prg[0x19bb1] = 0x70;
    prg[0x19bb5] = 0x71;
    prg[0x19a77] = 0x72;
    prg[0x19deb] = 0x73;
    prg[0x1a045] = 0x74;
    prg[0x1a0e1] = 0x75;
    prg[0x1a0e5] = 0x76;
    prg[0x1a0e9] = 0x77;
    prg[0x1a605] = 0x78;
    prg[0x1a3c1] = 0x79;
    prg[0x1a3c5] = 0x7a;
    prg[0x1a3c9] = 0x7b;
    write(prg, 0x1e0b7, 0xc0, 0x00);
    write(prg, 0x1e32a, 0xc0, 0x00);
    write(prg, 0x1e330, 0xc0, 0x00);
    write(prg, 0x1e336, 0xc0, 0x00);
    write(prg, 0x1e0e0, 0xc0, 0x00);
    write(prg, 0x1e0e6, 0xc0, 0x00);
    prg[0x1c803] = 0x00;
    write(prg, 0x1c80d, 0xa2, 0xb3);
    prg[0x1aa86] = 0xfe;
    write(prg, 0x3d6d5, 0x25, 0x29, 0x39, 0x3a, 0x3b, 0x47, 0x3c, 0x3e, 0x84, 0x46, 0xb2, 0x42, 0xb4, 0x41, 0xff);
}
export function deterministic(rom, flags) {
    addZombieWarp(rom);
    consolidateItemGrants(rom);
    addMezameTrigger(rom);
    normalizeSwords(rom, flags);
    fixFlyableWalls(rom);
    fixMonsterTerrain(rom);
    fixCrystalis(rom);
    fixOpelStatue(rom);
    fixCoinSprites(rom);
    fixChests(rom);
    preventBossSoftlocks(rom);
    makeBraceletsProgressive(rom);
    adjustGoaFortressTriggers(rom);
    preventNpcDespawns(rom, flags);
    leafElderInSabreHeals(rom);
    if (flags.requireHealedDolphinToRide())
        requireHealedDolphin(rom);
    if (flags.saharaRabbitsRequireTelepathy())
        requireTelepathyForDeo(rom);
    adjustItemNames(rom, flags);
    alarmFluteIsKeyItem(rom, flags);
    brokahanaWantsMado1(rom);
    if (flags.teleportOnThunderSword()) {
        teleportOnThunderSword(rom);
        rom.townWarp.thunderSwordWarp = [rom.locations.Shyron.id, 0x41];
    }
    else {
        noTeleportOnThunderSword(rom);
    }
    undergroundChannelLandBridge(rom);
    if (flags.fogLampNotRequired())
        fogLampNotRequired(rom, flags);
    evilSpiritIslandRequiresDolphin(rom);
    simplifyInvisibleChests(rom);
    addCordelWestTriggers(rom, flags);
    if (flags.disableRabbitSkip())
        fixRabbitSkip(rom);
    if (flags.disableFlightStatueSkip())
        fixFlightStatueSkip(rom);
    if (flags.disableRageSkip())
        patchLimeTreeLake(rom);
    fixReverseWalls(rom);
    if (flags.chargeShotsOnly())
        disableStabs(rom);
    if (flags.orbsOptional())
        orbsOptional(rom);
    if (flags.noBowMode())
        noBowMode(rom);
    patchTooManyItemsMessage(rom);
    if (flags.hardcoreMode())
        hardcoreMode(rom);
}
function consolidateItemGrants(rom) {
    rom.items.GlowingLamp.itemUseData[0].message.action = 0x0b;
}
function addMezameTrigger(rom) {
    const trigger = rom.nextFreeTrigger();
    trigger.used = true;
    trigger.conditions = [~rom.flags.AlwaysTrue.id];
    trigger.message = MessageId.of({ action: 4 });
    trigger.flags = [rom.flags.AlwaysTrue.id];
    const mezame = rom.locations.MezameShrine;
    mezame.spawns.push(Spawn.of({ tile: 0x88, type: 2, id: trigger.id }));
}
function normalizeSwords(rom, flags) {
    rom.objects[0x10].atk = 3;
    rom.objects[0x11].atk = 6;
    rom.objects[0x12].atk = 8;
    rom.objects[0x18].atk = 3;
    rom.objects[0x13].atk = 5;
    rom.objects[0x19].atk = 5;
    rom.objects[0x17].atk = 7;
    rom.objects[0x1a].atk = 7;
    rom.objects[0x14].atk = 3;
    rom.objects[0x15].atk = 6;
    rom.objects[0x16].atk = 8;
    rom.objects[0x1c].atk = 3;
    rom.objects[0x1d].atk = 3;
    rom.objects[0x1e].atk = 5;
    rom.objects[0x1b].atk = 7;
    rom.objects[0x1f].atk = 7;
    if (flags.slowDownTornado()) {
        const tornado = rom.objects[0x12];
        tornado.speed = 0x07;
        tornado.data[0x0c] = 0x60;
    }
}
function preventBossSoftlocks(rom) {
    const trigger = rom.trigger(0xa0);
    trigger.used = true;
    trigger.conditions = [];
    trigger.flags = [];
    trigger.message = MessageId.of({ part: 0, index: 0, action: 0x15 });
    rom.objects[0x5e].data[0xd] = 0xfe;
    rom.items.InsectFlute.itemUseData[0].flags = [rom.flags.UsedInsectFlute.id];
}
function fixOpelStatue(rom) {
    rom.items.OpelStatue.selectedItemValue = 0;
}
function fixCoinSprites(rom) {
    for (const page of [0x60, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6f]) {
        for (const pat of [0, 1, 2]) {
            rom.patterns[page << 6 | pat].pixels = rom.patterns[0x5e << 6 | pat].pixels;
        }
    }
    rom.objects[0x0c].metasprite = 0xa9;
}
function fixReverseWalls(rom) {
    for (const t in [0x04, 0x05, 0x08, 0x09]) {
        rom.tileEffects[0xbc - 0xb3].effects[t] = 0x18;
        rom.tileEffects[0xb5 - 0xb3].effects[t] = 0x18;
    }
}
function undergroundChannelLandBridge(rom) {
    const { tiles } = rom.screens[0xa1];
    tiles[0x28] = 0x9f;
    tiles[0x37] = 0x23;
    tiles[0x38] = 0x23;
    tiles[0x39] = 0x21;
    tiles[0x47] = 0x8d;
    tiles[0x48] = 0x8f;
    tiles[0x56] = 0x99;
    tiles[0x57] = 0x9a;
    tiles[0x58] = 0x8c;
}
function fogLampNotRequired(rom, flags) {
    const { flags: { AlwaysTrue, InjuredDolphin, FogLamp, KensuInCabin, ReturnedFogLamp }, items: { ShellFlute }, locations: { BoatHouse, Portoa_FishermanHouse }, npcs, } = rom;
    const requireHealed = flags.requireHealedDolphinToRide();
    ShellFlute.itemUseData[0].want =
        requireHealed ? InjuredDolphin.id : AlwaysTrue.id;
    npcs.KensuInCabin.data[0] = 0x67;
    npcs.KensuInCabin.localDialogs.get(-1)[0].message.action = 0x0a;
    npcs.KensuInCabin.localDialogs.get(-1)[0].flags = [];
    npcs.KensuInCabin.spawnConditions.set(BoatHouse.id, [ReturnedFogLamp.id, ~KensuInCabin.id]);
    npcs.Fisherman.spawnConditions.set(Portoa_FishermanHouse.id, [FogLamp.id]);
    rom.itemGets[0x64].flags = [];
    rom.itemGets[0x67].copyFrom(rom.itemGets[0x64]);
}
function fixChests(rom) {
    for (const loc of rom.locations) {
        for (const s of loc.spawns) {
            if (s.isChest())
                s.timed = false;
        }
    }
}
function adjustGoaFortressTriggers(rom) {
    const l = rom.locations;
    l.GoaFortress_Kelbesque.spawns[0].x -= 16;
    l.GoaFortress_Zebu.spawns.splice(1, 1);
    l.GoaFortress_Tornel.spawns.splice(2, 1);
    l.GoaFortress_Asina.spawns.splice(2, 1);
    l.GoaFortress_Kensu.spawns.splice(3, 1);
    l.GoaFortress_Kensu.spawns.splice(1, 1);
}
function alarmFluteIsKeyItem(rom, flags) {
    const { items: { AlarmFlute }, locations: { WaterfallCave4 }, npcs: { WindmillGuard }, } = rom;
    rom.itemGets[0x31].inventoryRowStart = 0x20;
    AlarmFlute.unique = true;
    AlarmFlute.basePrice = 0;
    WindmillGuard.data[1] = 0x31;
    const replacements = [
        [0x21, 0.72],
        [0x1f, 0.9],
    ];
    let j = 0;
    for (const shop of rom.shops) {
        if (shop.type !== ShopType.TOOL)
            continue;
        for (let i = 0, len = shop.contents.length; i < len; i++) {
            if (shop.contents[i] !== 0x31)
                continue;
            const [item, priceRatio] = replacements[(j++) % replacements.length];
            shop.contents[i] = item;
            if (rom.shopDataTablesAddress) {
                shop.prices[i] = Math.round(shop.prices[i] * priceRatio);
            }
        }
    }
    rom.itemGets[0x5b].itemId = 0x1d;
    WaterfallCave4.spawn(0x19).id = 0x10;
}
function brokahanaWantsMado1(rom) {
    const { flags: { Karmine, Mado1 }, npcs: { Brokahana } } = rom;
    const dialog = assert(Brokahana.localDialogs.get(-1))[0];
    if (dialog.condition !== ~Karmine.id) {
        throw new Error(`Bad brokahana condition: ${dialog.condition}`);
    }
    dialog.condition = ~Mado1.id;
}
function requireHealedDolphin(rom) {
    const { flags: { InjuredDolphin, ShellFlute }, npcs: { Fisherman, FishermanDaughter }, } = rom;
    Fisherman.spawnConditions.set(0xd6, [ShellFlute.id, InjuredDolphin.id]);
    const daughterDialog = FishermanDaughter.localDialogs.get(-1);
    daughterDialog.unshift(daughterDialog[0].clone());
    daughterDialog[0].condition = ~InjuredDolphin.id;
    daughterDialog[1].condition = ~ShellFlute.id;
}
function requireTelepathyForDeo(rom) {
    const { flags: { Telepathy }, npcs: { Deo, SaharaBunny }, } = rom;
    SaharaBunny.globalDialogs.push(GlobalDialog.of(~Telepathy.id, [0x1a, 0x12]));
    Deo.globalDialogs.push(GlobalDialog.of(~Telepathy.id, [0x1a, 0x13]));
}
function teleportOnThunderSword(rom) {
    const { flags: { WarpShyron }, } = rom;
    rom.itemGets[0x03].flags.push(WarpShyron.id);
}
function noTeleportOnThunderSword(rom) {
    rom.itemGets[0x03].acquisitionAction.action = 0x16;
}
function adjustItemNames(rom, flags) {
    if (flags.leatherBootsGiveSpeed()) {
        const leatherBoots = rom.items[0x2f];
        leatherBoots.menuName = 'Speed Boots';
        leatherBoots.messageName = 'Speed Boots';
        if (flags.changeGasMaskToHazmatSuit()) {
            const gasMask = rom.items[0x29];
            gasMask.menuName = 'Hazmat Suit';
            gasMask.messageName = 'Hazmat Suit';
        }
    }
    for (let i = 0x05; i < 0x0c; i += 2) {
        rom.items[i].menuName = rom.items[i].menuName.replace('Ball', 'Orb');
        rom.items[i].messageName = rom.items[i].messageName.replace('Ball', 'Orb');
    }
}
function makeBraceletsProgressive(rom) {
    const { flags: { BallOfWind, TornadoBracelet }, npcs: { Tornel }, } = rom;
    const vanilla = Tornel.localDialogs.get(0x21);
    const patched = [
        vanilla[0],
        vanilla[2],
        vanilla[2].clone(),
        vanilla[1],
    ];
    patched[1].condition = ~TornadoBracelet.id;
    patched[2].condition = ~BallOfWind.id;
    patched[3].condition = ~0;
    Tornel.localDialogs.set(0x21, patched);
}
function simplifyInvisibleChests(rom) {
    const { CordelPlainEast, KirisaMeadow, UndergroundChannel } = rom.locations;
    for (const location of [CordelPlainEast, KirisaMeadow, UndergroundChannel]) {
        for (const spawn of location.spawns) {
            if (spawn.isChest())
                spawn.data[2] |= 0x20;
        }
    }
}
function addCordelWestTriggers(rom, flags) {
    const { CordelPlainEast, CordelPlainWest } = rom.locations;
    for (const spawn of CordelPlainEast.spawns) {
        if (spawn.isChest() || (flags.disableTeleportSkip() && spawn.isTrigger())) {
            CordelPlainWest.spawns.push(spawn.clone());
        }
    }
}
function fixRabbitSkip(rom) {
    for (const spawn of rom.locations.MtSabreNorth_Main.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x86) {
            if (spawn.x === 0x740) {
                spawn.x += 16;
                spawn.y += 16;
            }
        }
    }
}
function fixFlightStatueSkip(rom) {
    const oldHitbox = rom.hitboxes[rom.objects.guardianStatueMissile.hitbox];
    const newHitbox = rom.hitboxes[6];
    rom.objects.guardianStatueMissile.hitbox = newHitbox.id;
    newHitbox.x0 = oldHitbox.x0 - 6;
    newHitbox.w = oldHitbox.w + 12;
    newHitbox.y0 = oldHitbox.y0 - 2;
    newHitbox.h = oldHitbox.h + 4;
}
function patchTooManyItemsMessage(rom) {
    rom.messages.parts[0x20][0x0f].text += '\nItem: [:ITEM:]';
}
function addZombieWarp(rom) {
    const { flags: { WarpZombie }, locations: { ZombieTown }, } = rom;
    rom.flags.insertZombieWarpFlag();
    const message = rom.messages.parts[0x21][0];
    message.text = [
        ' {1a:Leaf}      {16:Brynmaer} {1d:Oak} ',
        '{0c:Nadare}\'s  {1e:Portoa}   {14:Amazones} ',
        '{19:Joel}      Zombie   {20:Swan} ',
        '{23:Shyron}    {18:Goa}      {21:Sahara}',
    ].join('\n');
    const trigger = rom.nextFreeTrigger();
    trigger.used = true;
    trigger.conditions = [];
    trigger.message = MessageId.of({});
    trigger.flags = [WarpZombie.id];
    for (const spawn of ZombieTown.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x8a) {
            spawn.id = trigger.id;
        }
    }
    rom.townWarp.locations.splice(7, 0, ZombieTown.id);
    if (rom.townWarp.locations.pop() !== 0xff)
        throw new Error('unexpected');
}
function evilSpiritIslandRequiresDolphin(rom) {
    rom.trigger(0x8a).conditions = [~rom.flags.CurrentlyRidingDolphin.id];
    rom.messages.parts[0x1d][0x10].text = `The cave entrance appears
to be underwater. You'll
need to swim.`;
}
function leafElderInSabreHeals(rom) {
    const leafElder = rom.npcs[0x0d];
    const summitDialog = leafElder.localDialogs.get(0x35)[0];
    summitDialog.message.action = 0x17;
}
function patchLimeTreeLake(rom) {
    rom.metatilesets.lime.getTile(0x7c).setEffects(6);
    rom.metatilesets.lime.getTile(0x7f).setEffects(6);
    rom.metatilesets.lime.getTile(0x7b).setTiles([0x7f, 0x7f, 0x7f, 0x7f])
        .setAttrs(0).setEffects(6);
    rom.screens[0x74].set2d(0x90, [
        [0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, null, null,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b],
        [0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, null, null,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b],
    ]);
}
function preventNpcDespawns(rom, opts) {
    function remove(arr, elem) {
        const index = arr.indexOf(elem);
        if (index < 0)
            throw new Error(`Could not find element ${elem} in ${arr}`);
        arr.splice(index, 1);
    }
    function removeIf(arr, pred) {
        const index = arr.findIndex(pred);
        if (index < 0)
            throw new Error(`Could not find element in ${arr}`);
        arr.splice(index, 1);
    }
    const { locations: { BoatHouse, Brynmaer, Crypt_Draygon2, Joel_Shed, Leaf_ElderHouse, MtSabreNorth_SummitCave, MtSabreWest_Upper, PortoaPalace_ThroneRoom, Portoa_PalaceEntrance, Portoa_AsinaRoom, Portoa_FortuneTeller, Shyron_Temple, StomHouse, Swan_DanceHall, Swan_Tavern, WindmillCave, WaterfallCave4, WaterfallValleyNorth, ZebuCave, ZombieTown_HouseBasement, }, items: { GlowingLamp, KeyToPrison, LovePendant, StatueOfOnyx, }, npcs: { Akahana, AkahanaInBrynmaer, Asina, AztecaInShyron, Clark, Draygon, FortuneTeller, Kensu, KensuInCabin, KensuInSwan, LeafElder, LeafRabbit, OakChild, OakElder, OakMother, PortoaPalaceFrontGuard, PortoaQueen, PortoaThroneRoomBackDoorGuard, Rage, Stom, StonedAkahana, Tornel, WindmillGuard, Zebu, }, flags, } = rom;
    Kensu.localDialogs.delete(Swan_Tavern.id);
    KensuInSwan.link(Kensu.id);
    KensuInSwan.used = true;
    KensuInSwan.data = [...Kensu.data];
    Kensu.data[0] = GlowingLamp.id;
    Swan_DanceHall.spawns.find(s => s.isNpc() && s.id === Kensu.id).id =
        KensuInSwan.id;
    LovePendant.itemUseData[0].want = 0x100 | KensuInSwan.id;
    StonedAkahana.linkDialog(Akahana.id);
    AkahanaInBrynmaer.used = true;
    AkahanaInBrynmaer.link(Akahana.id);
    AkahanaInBrynmaer.data = [...Akahana.data];
    Brynmaer.spawns.find(s => s.isNpc() && s.id === Akahana.id).id =
        AkahanaInBrynmaer.id;
    StatueOfOnyx.itemUseData[0].want = 0x100 | AkahanaInBrynmaer.id;
    LeafElder.dialog(Leaf_ElderHouse)
        .splice(0, 0, ...LeafElder.dialog(Leaf_ElderHouse).splice(2, 1));
    LeafRabbit.dialog()[2].condition = flags.RescuedLeafElder.id;
    LeafRabbit.dialog()[2].flags.push(flags.TalkedToLeafRabbit.id);
    LeafRabbit.dialog()[3].flags.push(flags.TalkedToLeafRabbit.id);
    WindmillGuard.spawns(WindmillCave)[1] =
        ~flags.WindmillGuardAlarmFluteTradein.id;
    remove(Akahana.spawns(WaterfallCave4), ~flags.BehindWhirlpool.id);
    remove(StonedAkahana.spawns(WaterfallCave4), ~flags.BehindWhirlpool.id);
    function reverseDialog(ds) {
        ds.reverse();
        for (let i = 0; i < ds.length; i++) {
            const next = ds[i + 1];
            ds[i].condition = next ? ~next.condition : ~0;
        }
    }
    ;
    for (let i = 0; i < 4; i++) {
        const dlg = OakElder.dialog()[i];
        if (dlg.condition !== rom.flags.OakElder.id)
            dlg.message.action = 0x03;
    }
    (() => {
        const [killedInsect, gotItem, getItem, findChild] = OakMother.dialog();
        findChild.condition = ~flags.RescuedChild.id;
        gotItem.condition = ~0;
        OakMother.dialog().splice(0, 4, findChild, getItem, killedInsect, gotItem);
    })();
    for (const i of [0x20, 0x21, 0x22, 0x7c, 0x7d]) {
        reverseDialog(rom.npcs[i].dialog());
    }
    OakChild.dialog().unshift(...OakChild.dialog().splice(1, 1));
    PortoaThroneRoomBackDoorGuard.spawnConditions.set(PortoaPalace_ThroneRoom.id, [~flags.QueenNotInThroneRoom.id, ~flags.MesiaRecording.id]);
    PortoaPalaceFrontGuard.dialog()[1].condition = flags.MesiaRecording.id;
    PortoaQueen.dialog()[3].condition = flags.SwordOfWater.id;
    PortoaQueen.dialog()[3].message.action = 0x03;
    PortoaQueen.dialog()[4].flags.push(flags.PortoaQueenGoingAway.id);
    PortoaQueen.spawns(PortoaPalace_ThroneRoom)[1] = ~flags.MesiaRecording.id;
    PortoaQueen.spawns(Portoa_AsinaRoom)[0] = flags.MesiaRecording.id;
    PortoaQueen.dialog()[1].condition = flags.MesiaRecording.id;
    FortuneTeller.spawns(Portoa_FortuneTeller)[1] = ~flags.MesiaRecording.id;
    Clark.spawnConditions.set(ZombieTown_HouseBasement.id, [~flags.Clark.id]);
    Clark.spawnConditions.set(Joel_Shed.id, [flags.Clark.id]);
    Zebu.localDialogs.set(ZebuCave.id, [
        LocalDialog.of(~flags.TalkedToZebuInCave.id, [0x00, 0x1a], [flags.TalkedToZebuInCave.id]),
        LocalDialog.of(flags.LeafVillagersRescued.id, [0x00, 0x1d]),
        LocalDialog.of(flags.LeafAbduction.id, [0x00, 0x1c]),
        LocalDialog.of(flags.ZebuAtWindmill.id, [0x00, 0x1d]),
        LocalDialog.of(flags.UsedWindmillKey.id, [0x00, 0x1b, 0x03]),
        LocalDialog.of(~0, [0x00, 0x1d]),
    ]);
    remove(Zebu.spawns(ZebuCave), ~flags.BehindWhirlpool.id);
    Tornel.spawnConditions.delete(MtSabreWest_Upper.id);
    Stom.spawnConditions.delete(StomHouse.id);
    remove(Asina.spawns(Portoa_AsinaRoom), ~flags.CalmedAngrySea.id);
    const guard2 = rom.npcs[0x34];
    guard2.spawnConditions.set(PortoaPalace_ThroneRoom.id, [flags.MesiaRecording.id,
        ~flags.PortoaQueen.id]);
    guard2.localDialogs.set(Portoa_PalaceEntrance.id, guard2.localDialogs.get(-1));
    guard2.data[0] = rom.items.FluteOfLime.id;
    const guard2Message = rom.messages.alloc();
    guard2Message.text = "The queen left this for you.";
    guard2.localDialogs.set(PortoaPalace_ThroneRoom.id, [
        LocalDialog.of(~flags.PortoaQueen.id, [guard2Message.part,
            guard2Message.id, 0x03]),
        LocalDialog.of(~0, [0x0a, 0x0e]),
    ]);
    PortoaPalace_ThroneRoom.spawns.push(Spawn.of({ yt: 3, xt: 12, type: 1,
        patternBank: 1,
        id: guard2.id }));
    KensuInCabin.spawnConditions.set(BoatHouse.id, [~flags.AbleToRideDolphin.id,
        flags.ReturnedFogLamp.id]);
    KensuInCabin.dialog()[0].message.action = 0x02;
    AztecaInShyron.spawns(Shyron_Temple).push(~flags.ShyronMassacre.id);
    rom.trigger(0x82).conditions.push(~flags.ShyronMassacre.id);
    Rage.dialog()[0].condition = flags.SwordOfWater.id;
    Draygon.spawnConditions.set(Crypt_Draygon2.id, [~flags.Draygon2.id]);
    Zebu.dialog(Shyron_Temple)
        .unshift(...Zebu.dialog(Shyron_Temple).splice(1, 1));
    rom.trigger(0x80).conditions = [
        ~flags.ShyronMassacre.id,
        flags.TalkedToZebuInShyron.id,
        flags.SwordOfThunder.id,
    ];
    rom.trigger(0x81).conditions = [];
    if (opts.barrierRequiresCalmSea()) {
        rom.trigger(0x84).conditions.push(flags.CalmedAngrySea.id);
    }
    rom.trigger(0x8c).conditions.push(flags.TalkedToZebuInCave.id);
    rom.trigger(0x8d).used = false;
    for (const spawn of MtSabreNorth_SummitCave.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x8d)
            spawn.id = 0xb2;
    }
    removeIf(WaterfallValleyNorth.spawns, spawn => spawn.isTrigger() && spawn.id === 0x8d);
    rom.trigger(0xb2).conditions.push(flags.Kelbesque1.id);
    rom.trigger(0xb2).flags.push(~flags.LeafVillagersCurrentlyAbducted.id, ~flags.LeafElderCurrentlyAbducted.id, flags.LeafVillagersRescued.id);
    rom.trigger(0x8c).conditions.push(~flags.Kelbesque1.id);
    rom.trigger(0x86).conditions.push(~flags.Kelbesque1.id);
    remove(KeyToPrison.itemUseData[0].flags, ~flags.LeafVillagersCurrentlyAbducted.id);
    replace(rom.trigger(0xbb).conditions, ~flags.Rage.id, ~flags.MesiaRecording.id);
}
function disableStabs(rom) {
    for (const o of [0x08, 0x09, 0x27]) {
        rom.objects[o].collisionPlane = 0;
    }
    rom.npcs.Brokahana.data[0] = rom.items.FruitOfLime.id;
}
function orbsOptional(rom) {
    for (const obj of [0x10, 0x14, 0x18, 0x1d]) {
        rom.objects[obj].terrainSusceptibility &= ~0x04;
        rom.objects[obj].level = 2;
    }
}
function noBowMode(rom) {
    const { flags: { UsedBowOfTruth }, locations: { Crypt_Draygon2, MezameShrine }, } = rom;
    let trigger;
    for (const spawn of MezameShrine.spawns) {
        if (spawn.isTrigger() && spawn.tile === 0x88) {
            trigger = rom.trigger(spawn.id);
        }
    }
    if (!trigger)
        throw new Error(`Could not find start trigger`);
    trigger.flags.push(UsedBowOfTruth.id);
    rom.tileEffects[0xb9 - 0xb3].effects[0x58] = 0;
    MezameShrine.meta.setExit(0, 'door', [Crypt_Draygon2.meta.id << 8 | 0x10, 'edge:bottom']);
}
function fixCrystalis(rom) {
    rom.objects[0x33].elements = 0xf;
}
function fixFlyableWalls(rom) {
    rom.tileEffects[0xb5 - 0xb3].effects[0x74] = 6;
    rom.tileEffects[0xb6 - 0xb3].effects[0x46] = 6;
}
function fixMonsterTerrain(rom) {
    for (const obj of rom.objects) {
        if (!(obj instanceof Monster))
            continue;
        if (obj.isProjectile() || obj.isBoss() || obj.isFlyer())
            continue;
        if (obj === rom.objects.mimic)
            continue;
        obj.terrainSusceptibility |= 0x3;
    }
}
function replace(array, old, replacement) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] !== old)
            continue;
        array[i] = replacement;
        return;
    }
    throw new Error(`Could not find ${old} in ${array.join(',')}`);
}
function hardcoreMode(rom) {
    for (const loc of rom.locations) {
        loc.checkpoint = loc.saveable = false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0ZXJtaW5pc3RpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL2RldGVybWluaXN0aWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUMsWUFBWSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25DLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDbEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTVDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFakIsU0FBUyxLQUFLLENBQUMsR0FBZSxFQUFFLEtBQWEsRUFBRSxHQUFHLElBQWM7SUFDOUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLEdBQWU7SUFFbkQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztJQUdwQixHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDcEIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztJQUlwQixHQUFHLENB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QUMxQixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFFMUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMxQixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDMUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUUxQixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDMUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUUxQixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDMUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMxQixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDMUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRTFCLElBQUksS0FBSyxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBRzNCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7S0FDM0I7QUFDSCxDQUFDO0FBSUQsU0FBUyxvQkFBb0IsQ0FBQyxHQUFRO0lBQ3BDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDcEIsT0FBTyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDeEIsT0FBTyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDbkIsT0FBTyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBRWxFLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNuQyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUUsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEdBQVE7SUFLN0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxHQUFRO0lBQzlCLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDbEMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtRQUN2RCxLQUFLLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtZQUMzQixHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDN0U7S0FDRjtJQUNELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUN0QyxDQUFDO0FBT0QsU0FBUyxlQUFlLENBQUMsR0FBUTtJQUUvQixLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDeEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUMvQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0tBQ2hEO0FBRUgsQ0FBQztBQUdELFNBQVMsNEJBQTRCLENBQUMsR0FBUTtJQUM1QyxNQUFNLEVBQUMsS0FBSyxFQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ25CLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDbkIsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNuQixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ25CLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDbkIsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNuQixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ25CLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDbkIsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNyQixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxHQUFRLEVBQUUsS0FBYztJQUNsRCxNQUFNLEVBQ0osS0FBSyxFQUFFLEVBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQ25DLFlBQVksRUFBRSxlQUFlLEVBQUMsRUFDdEMsS0FBSyxFQUFFLEVBQUMsVUFBVSxFQUFDLEVBQ25CLFNBQVMsRUFBRSxFQUFDLFNBQVMsRUFBRSxxQkFBcUIsRUFBQyxFQUM3QyxJQUFJLEdBQ0wsR0FBRyxHQUFHLENBQUM7SUFLUixNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztJQUN6RCxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDMUIsYUFBYSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO0lBRXRELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNqRSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3RELElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUNaLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRTlFLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUczRSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDOUIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBUWxELENBQUM7QUFPRCxTQUFTLFNBQVMsQ0FBQyxHQUFRO0lBQ3pCLEtBQUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRTtRQUMvQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDMUIsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO2dCQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ2xDO0tBQ0Y7QUF5QkgsQ0FBQztBQUVELFNBQVMseUJBQXlCLENBQUMsR0FBUTtJQUN6QyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO0lBRXhCLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUUxQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLEdBQVEsRUFBRSxLQUFhO0lBQ2xELE1BQU0sRUFDSixLQUFLLEVBQUUsRUFBQyxVQUFVLEVBQUMsRUFFbkIsU0FBUyxFQUFFLEVBQUMsY0FBYyxFQUFDLEVBQzNCLElBQUksRUFBRSxFQUFDLGFBQWEsRUFBQyxHQUN0QixHQUFHLEdBQUcsQ0FBQztJQUdSLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0lBRzVDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBRXpCLFVBQVUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBRXpCLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBZ0I3QixNQUFNLFlBQVksR0FBRztRQUNuQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7UUFDWixDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7S0FDWixDQUFDO0lBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsS0FBSyxNQUFNLElBQUksSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO1FBQzVCLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsSUFBSTtZQUFFLFNBQVM7UUFDMUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUk7Z0JBQUUsU0FBUztZQUN4QyxNQUFNLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLElBQUksR0FBRyxDQUFDLHFCQUFxQixFQUFFO2dCQUU3QixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQzthQUMxRDtTQUNGO0tBQ0Y7SUFHRCxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFFakMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBR3ZDLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLEdBQVE7SUFDbkMsTUFBTSxFQUFDLEtBQUssRUFBRSxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUMsRUFBRSxJQUFJLEVBQUUsRUFBQyxTQUFTLEVBQUMsRUFBQyxHQUFHLEdBQUcsQ0FBQztJQUN6RCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELElBQUksTUFBTSxDQUFDLFNBQVMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7S0FDakU7SUFDRCxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUMvQixDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxHQUFRO0lBQ3BDLE1BQU0sRUFDSixLQUFLLEVBQUUsRUFBQyxjQUFjLEVBQUUsVUFBVSxFQUFDLEVBQ25DLElBQUksRUFBRSxFQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxHQUNyQyxHQUFHLEdBQUcsQ0FBQztJQUlSLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFeEUsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUFDO0lBQy9ELGNBQWMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDbEQsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7SUFDakQsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7QUFDL0MsQ0FBQztBQUVELFNBQVMsc0JBQXNCLENBQUMsR0FBUTtJQUN0QyxNQUFNLEVBQ0osS0FBSyxFQUFFLEVBQUMsU0FBUyxFQUFDLEVBQ2xCLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUMsR0FDekIsR0FBRyxHQUFHLENBQUM7SUFHUixXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0UsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFLENBQUM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLEdBQVE7SUFDdEMsTUFBTSxFQUNKLEtBQUssRUFBRSxFQUFDLFVBQVUsRUFBQyxHQUNwQixHQUFHLEdBQUcsQ0FBQztJQUVSLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVELFNBQVMsd0JBQXdCLENBQUMsR0FBUTtJQUV4QyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDckQsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEdBQVEsRUFBRSxLQUFjO0lBQy9DLElBQUksS0FBSyxDQUFDLHFCQUFxQixFQUFFLEVBQUU7UUFFakMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUN0QyxZQUFZLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztRQUN0QyxZQUFZLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztRQUN6QyxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxFQUFFO1lBQ3JDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEMsT0FBTyxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUM7WUFDakMsT0FBTyxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUM7U0FDckM7S0FDRjtJQUdELEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNuQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDNUU7QUFDSCxDQUFDO0FBRUQsU0FBUyx3QkFBd0IsQ0FBQyxHQUFRO0lBQ3hDLE1BQU0sRUFDSixLQUFLLEVBQUUsRUFBQyxVQUFVLEVBQUUsZUFBZSxFQUFDLEVBQ3BDLElBQUksRUFBRSxFQUFDLE1BQU0sRUFBQyxHQUNmLEdBQUcsR0FBRyxDQUFDO0lBRVIsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLENBQUM7SUFDL0MsTUFBTSxPQUFPLEdBQUc7UUFDZCxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ1YsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNWLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7UUFDbEIsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNYLENBQUM7SUFDRixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztJQUMzQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUN0QyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsU0FBUyx1QkFBdUIsQ0FBQyxHQUFRO0lBQ3ZDLE1BQU0sRUFBQyxlQUFlLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUMxRSxLQUFLLE1BQU0sUUFBUSxJQUFJLENBQUMsZUFBZSxFQUFFLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxFQUFFO1FBQzFFLEtBQUssTUFBTSxLQUFLLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUVuQyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7U0FDNUM7S0FDRjtBQUNILENBQUM7QUFHRCxTQUFTLHFCQUFxQixDQUFDLEdBQVEsRUFBRSxLQUFjO0lBQ3JELE1BQU0sRUFBQyxlQUFlLEVBQUUsZUFBZSxFQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUN6RCxLQUFLLE1BQU0sS0FBSyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7UUFDMUMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRTtZQUV6RSxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM1QztLQUNGO0FBQ0gsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEdBQVE7SUFDN0IsS0FBSyxNQUFNLEtBQUssSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRTtRQUMxRCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMxQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO2dCQUNyQixLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDZCxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNmO1NBQ0Y7S0FDRjtBQUNILENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLEdBQVE7SUFZbkMsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pFLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQztJQUN4RCxTQUFTLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLFNBQVMsQ0FBQyxDQUFDLEdBQUksU0FBUyxDQUFDLENBQUMsR0FBSSxFQUFFLENBQUM7SUFDakMsU0FBUyxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNoQyxTQUFTLENBQUMsQ0FBQyxHQUFJLFNBQVMsQ0FBQyxDQUFDLEdBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRCxTQUFTLHdCQUF3QixDQUFDLEdBQVE7SUFDeEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLGtCQUFrQixDQUFDO0FBQzVELENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxHQUFRO0lBQzdCLE1BQU0sRUFDSixLQUFLLEVBQUUsRUFBQyxVQUFVLEVBQUMsRUFDbkIsU0FBUyxFQUFFLEVBQUMsVUFBVSxFQUFDLEdBQ3hCLEdBQUcsR0FBRyxDQUFDO0lBRVIsR0FBRyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBRWpDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sQ0FBQyxJQUFJLEdBQUc7UUFDYix5Q0FBeUM7UUFDekMsOENBQThDO1FBQzlDLG9DQUFvQztRQUNwQywwQ0FBMEM7S0FDM0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFJYixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDdEMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDcEIsT0FBTyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDeEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFaEMsS0FBSyxNQUFNLEtBQUssSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO1FBQ3JDLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQztTQUN2QjtLQUNGO0lBRUQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUssSUFBSTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFM0UsQ0FBQztBQUVELFNBQVMsK0JBQStCLENBQUMsR0FBUTtJQUMvQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0RSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUc7O2NBRTFCLENBQUM7QUFDZixDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxHQUFRO0lBQ3JDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3JDLENBQUM7QUFJRCxTQUFTLGlCQUFpQixDQUFDLEdBQVE7SUFDakMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNqRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRy9CLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUM1QixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUNwRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7UUFDMUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDcEQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0tBeUIzQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxHQUFRLEVBQUUsSUFBYTtJQUNqRCxTQUFTLE1BQU0sQ0FBSSxHQUFRLEVBQUUsSUFBTztRQUNsQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLElBQUksS0FBSyxHQUFHLENBQUM7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMzRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBQ0QsU0FBUyxRQUFRLENBQUksR0FBUSxFQUFFLElBQTBCO1FBQ3ZELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBSSxLQUFLLEdBQUcsQ0FBQztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDbkUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQWVELE1BQU0sRUFDSixTQUFTLEVBQUUsRUFDVCxTQUFTLEVBQUUsUUFBUSxFQUNuQixjQUFjLEVBQ2QsU0FBUyxFQUNULGVBQWUsRUFDZix1QkFBdUIsRUFBRSxpQkFBaUIsRUFDMUMsdUJBQXVCLEVBQUUscUJBQXFCLEVBQzlDLGdCQUFnQixFQUFFLG9CQUFvQixFQUN0QyxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQ3JELFlBQVksRUFBRSxjQUFjLEVBQUUsb0JBQW9CLEVBQ2xELFFBQVEsRUFBRSx3QkFBd0IsR0FDbkMsRUFDRCxLQUFLLEVBQUUsRUFDTCxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxZQUFZLEdBQ3BELEVBQ0QsSUFBSSxFQUFFLEVBQ0osT0FBTyxFQUFXLGlCQUFpQixFQUFXLEtBQUssRUFDbkQsY0FBYyxFQUNkLEtBQUssRUFBVyxPQUFPLEVBQVcsYUFBYSxFQUMvQyxLQUFLLEVBQVcsWUFBWSxFQUFXLFdBQVcsRUFDbEQsU0FBUyxFQUFXLFVBQVUsRUFDOUIsUUFBUSxFQUFXLFFBQVEsRUFBVyxTQUFTLEVBQy9DLHNCQUFzQixFQUFXLFdBQVcsRUFDNUMsNkJBQTZCLEVBQVcsSUFBSSxFQUM1QyxJQUFJLEVBQVcsYUFBYSxFQUM1QixNQUFNLEVBQVcsYUFBYSxFQUFXLElBQUksR0FDOUMsRUFDRCxLQUFLLEdBQ04sR0FBRyxHQUFHLENBQUM7SUFFUixLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDeEIsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBUSxDQUFDO0lBQzFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUMvQixjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFO1FBQy9ELFdBQVcsQ0FBQyxFQUFFLENBQUM7SUFDbkIsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUM7SUFHekQsYUFBYSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFLckMsaUJBQWlCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUM5QixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLGlCQUFpQixDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBUSxDQUFDO0lBQ2xELFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUU7UUFDM0QsaUJBQWlCLENBQUMsRUFBRSxDQUFDO0lBQ3pCLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7SUFTaEUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7U0FDNUIsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQU1yRSxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7SUFDN0QsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUkvRCxhQUFhLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLENBQUM7SUFNN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV4RSxTQUFTLGFBQWEsQ0FBQyxFQUFpQjtRQUN0QyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQztJQUFBLENBQUM7SUFLRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztLQUN4RTtJQUtELENBQUMsR0FBRyxFQUFFO1FBQ0osTUFBTSxDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN2RSxTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7UUFHN0MsT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQVFMLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDOUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUNyQztJQUdELFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBSTdELDZCQUE2QixDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQzdDLHVCQUF1QixDQUFDLEVBQUUsRUFDMUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHaEUsc0JBQXNCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO0lBSXZFLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7SUFDMUQsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBRTlDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUdsRSxXQUFXLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztJQUMxRSxXQUFXLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7SUFDbEUsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztJQUc1RCxhQUFhLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztJQUl6RSxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRSxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBVzFELElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUU7UUFDakMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQzVCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELFdBQVcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRCxXQUFXLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELFdBQVcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckQsV0FBVyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUQsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNqQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFLekQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFHcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRzFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBUWpFLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsRUFBRSxFQUMxQixDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUN2QixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEVBQ3hCLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBQztJQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUMxQyxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsOEJBQThCLENBQUM7SUFDcEQsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsRUFBRSxFQUFFO1FBQ2xELFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJO1lBQ2xCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDL0QsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNqQyxDQUFDLENBQUM7SUFDSCx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdEIsV0FBVyxFQUFFLENBQUM7UUFDZCxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUsvRCxZQUFZLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsRUFBRTtRQUMzQixLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0UsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBRy9DLGNBQWMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVwRSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBVTVELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7SUFNbkQsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBS3JFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBSXpELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxHQUFHO1FBQzdCLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQ3hCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1FBQzdCLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRTtLQUN4QixDQUFDO0lBR0YsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBRWxDLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFLEVBQUU7UUFFakMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7S0FFNUQ7SUFLRCxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBSy9ELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLHVCQUF1QixDQUFDLE1BQU0sRUFBRTtRQUNsRCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLElBQUk7WUFBRSxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztLQUM3RDtJQUNELFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQzNCLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLENBQUM7SUFFMUQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFdkQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUMxQixDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLEVBQ3hDLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsRUFDcEMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWpDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFeEQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV4RCxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQ2hDLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBa0NqRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFjbEYsQ0FBQztBQUdELFNBQVMsWUFBWSxDQUFDLEdBQVE7SUFDNUIsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDbEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0tBQ25DO0lBR0QsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztBQUN4RCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsR0FBUTtJQUM1QixLQUFLLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFFMUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLElBQUksQ0FBQztRQUVoRCxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7S0FDNUI7QUFDSCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsR0FBUTtJQUV6QixNQUFNLEVBQ0osS0FBSyxFQUFFLEVBQUMsY0FBYyxFQUFDLEVBQ3ZCLFNBQVMsRUFBRSxFQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUMsR0FDMUMsR0FBRyxHQUFHLENBQUM7SUFDUixJQUFJLE9BQWlCLENBQUM7SUFDdEIsS0FBSyxNQUFNLEtBQUssSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO1FBQ3ZDLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQzVDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNqQztLQUNGO0lBQ0QsSUFBSSxDQUFDLE9BQU87UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDOUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQ3JCLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDdEUsQ0FBQztBQUdELFNBQVMsWUFBWSxDQUFDLEdBQVE7SUFDNUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO0FBQ25DLENBQUM7QUFRRCxTQUFTLGVBQWUsQ0FBQyxHQUFRO0lBQy9CLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBR0QsU0FBUyxpQkFBaUIsQ0FBQyxHQUFRO0lBQ2pDLEtBQUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRTtRQUM3QixJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksT0FBTyxDQUFDO1lBQUUsU0FBUztRQUN4QyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRTtZQUFFLFNBQVM7UUFDbEUsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLO1lBQUUsU0FBUztRQUN4QyxHQUFHLENBQUMscUJBQXFCLElBQUksR0FBRyxDQUFDO0tBQ2xDO0FBQ0gsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFJLEtBQVUsRUFBRSxHQUFNLEVBQUUsV0FBYztJQUNwRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO1lBQUUsU0FBUztRQUMvQixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3ZCLE9BQU87S0FDUjtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsR0FBUTtJQUM1QixLQUFLLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUU7UUFDL0IsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztLQUN2QztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQZXJmb3JtIGluaXRpYWwgY2xlYW51cC9zZXR1cCBvZiB0aGUgUk9NLlxuXG5pbXBvcnQge0ZsYWdTZXR9IGZyb20gJy4uL2ZsYWdzZXQuanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQge1NwYXdufSBmcm9tICcuLi9yb20vbG9jYXRpb24uanMnO1xuaW1wb3J0IHtNZXNzYWdlSWR9IGZyb20gJy4uL3JvbS9tZXNzYWdlaWQuanMnO1xuaW1wb3J0IHtHbG9iYWxEaWFsb2csIExvY2FsRGlhbG9nfSBmcm9tICcuLi9yb20vbnBjLmpzJztcbmltcG9ydCB7U2hvcFR5cGV9IGZyb20gJy4uL3JvbS9zaG9wLmpzJztcbmltcG9ydCB7VHJpZ2dlcn0gZnJvbSAnLi4vcm9tL3RyaWdnZXIuanMnO1xuaW1wb3J0IHtoZXh9IGZyb20gJy4uL3JvbS91dGlsLmpzJztcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICcuLi91dGlsLmpzJztcbmltcG9ydCB7IE1vbnN0ZXIgfSBmcm9tICcuLi9yb20vbW9uc3Rlci5qcyc7XG5cbmNvbnN0IFtdID0gW2hleF07IC8vIGdlbmVyYWxseSB1c2VmdWxcblxuZnVuY3Rpb24gd3JpdGUoYXJyOiBVaW50OEFycmF5LCBzdGFydDogbnVtYmVyLCAuLi5kYXRhOiBudW1iZXJbXSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBhcnJbc3RhcnQgKyBpXSA9IGRhdGFbaV07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluaXN0aWNQcmVQYXJzZShwcmc6IFVpbnQ4QXJyYXkpOiB2b2lkIHtcbiAgLy8gUmVtb3ZlIHVubmVjZXNzYXJ5IHN0YXR1ZSBmaWdodCB0cmlnZ2Vycy4gIFRPRE8gLSByZW1vdmUgMWQgbG9jYXRpb24gY2hlY2tcbiAgcHJnWzB4MWE1OTRdID0gMHhmZjsgLy8ganVzdCBjdXQgb2ZmIHR3byBvYmplY3RzIGVhcmx5LlxuXG4gIC8vIFJlbW92ZSB1bm5lY2Vzc2FyeSBvYWsgZW50cmFuY2UgdHJpZ2dlciAoYWEpLiAgUmVkaXJlY3QgdGhlIGRpYWxvZyBmbGFnLlxuICBwcmdbMHgxY2RjNV0gPSAweGE4OyAvLyBjaGFuZ2UgZmxhZyB0byBub3QgdXNlIDA0My5cbiAgcHJnWzB4MWExNzZdID0gMHhmZjsgLy8gcmVtb3ZlIHRoZSA4MyB0cmlnZ2VyIGZyb20gZ29hIGZvcnRyZXNzIGVudHJhbmNlLlxuICBwcmdbMHgxYTg0Y10gPSAweGZmOyAvLyByZW1vdmUgdGhlIGFhIHRyaWdnZXIgKGxhc3Qgc3Bhd24gaW4gb2FrKS5cblxuICAvLyBSZW1vdmUgYnJva2VuICh1bnVzZWQpIGtlbnN1IGRpYWxvZyBpbiBzd2FuIHRhdmVybiAtIG9yaWdpbmFsIHJlYWRzXG4gIC8vIHBhcnQgb2YgdGhlIG5leHQgYXJlYSdzIGxvY2FsIGRpYWxvZ3MgYXMgZmxhZ3MgdG8gc2V0LCBpbmNsdWRpbmcgMTQwLlxuICBwcmdbMHgxZDg0M10gPSAweGEwOyAvLyBjaGFuZ2UgZTAgKGV4cGVjdGluZyBmb2xsb3ctdXAgZmxhZ3MpIHRvIGEwLlxuXG4gIC8vIFJlbW92ZSB1bnVzZWQgaXRlbS90cmlnZ2VyIGFjdGlvbnNcbiAgcHJnWzB4MWUwNmJdICY9IDc7IC8vIG1lZGljYWwgaGVyYiBub3JtYWwgdXNhZ2UgPT4gYWN0aW9uIDA1IHRvIGFjdGlvbiAwMFxuICBwcmdbMHgxZTA2Zl0gJj0gNzsgLy8gbWFnaWMgcmluZyBpdGVtdXNlWzBdID0+IGFjdGlvbiAwNSB0byBhY3Rpb24gMDBcbiAgcHJnWzB4MWUwNzNdICY9IDc7IC8vIGZydWl0IG9mIGxpbWUgaXRlbXVzZVswXSA9PiBhY3Rpb24gMDUgdG8gYWN0aW9uIDAwXG4gIHByZ1sweDFlMDc3XSAmPSA3OyAvLyBhbnRpZG90ZSBpdGVtdXNlWzBdID0+IGFjdGlvbiAwNSB0byBhY3Rpb24gMDBcbiAgcHJnWzB4MWUwN2JdICY9IDc7IC8vIG9wZWwgc3RhdHVlIGl0ZW11c2VbMF0gPT4gYWN0aW9uIDA1IHRvIGFjdGlvbiAwMFxuICBwcmdbMHgxZTA4NF0gJj0gNzsgLy8gd2FycCBib290cyBpdGVtdXNlWzBdID0+IGFjdGlvbiAwNCB0byBhY3Rpb24gMDBcbiAgcHJnWzB4MWUwOWJdICY9IDc7IC8vIHdpbmRtaWxsIGtleSBpdGVtdXNlWzFdID0+IGFjdGlvbiAwNSB0byBhY3Rpb24gMDBcbiAgcHJnWzB4MWUwYjldICY9IDc7IC8vIGdsb3dpbmcgbGFtcCBpdGVtdXNlWzBdID0+IGFjdGlvbiAwNSB0byBhY3Rpb24gMDBcblxuICBwcmdbMHgxZTEwNV0gPSAweDJmOyAvLyBjaGFuZ2UgVXNlZEJvd09mVHJ1dGggZnJvbSAwODYgdG8gZml4ZWQgMDJmICg2NDg1OjgwKVxuXG4gIHByZ1sweDFlMjc3XSA9IDB4MDA7IC8vIHJlbW92ZSBmbGFnIDBhMSBmcm9tIGFtYXpvbmVzIHdhcnAgKHRyaWdnZXIgOTApXG4gIHByZ1sweDFlMzY2XSA9IDB4NDA7IC8vIHJlbW92ZSB1bnJlYWQgMDhlIGZsYWcgZnJvbSBzYWJlcmEgdHJhcCAodHJpZ2dlciBiNilcbiAgcHJnWzB4MWUzNzFdID0gMHgwMDsgLy8gcmVtb3ZlIGZsYWcgMGEyIGZyb20gcG9ydG9hIGNhc3RsZSBicmlkZ2UgKHRyaWdnZXIgYjcpXG5cbiAgLy8gZ3VhcmQgcGFyYWx5c2lzIGZsYWdzIGFyZSBtb3ZlZCBoYXJkY29kZWQgbm93XG4gIHByZ1sweDFlMzg3XSA9IDB4MDA7IC8vIHJlbW92ZSBjb25kaXRpb24gMDllIGZyb20gcGFsYWNlIGd1YXJkICh0cmlnZ2VyIGJiKVxuICBwcmdbMHgxZTM5MV0gPSAweDAwOyAvLyByZW1vdmUgY29uZGl0aW9uIDA5OSBmcm9tIGFtYXpvbmVzIGd1YXJkICh0cmlnZ2VyIGJjKVxuXG4gIC8vIEN1c3RvbSBzaG9vdGluZyB3YWxsczogbWFyayB3YWxscyBhcyBzaG9vdGluZ1xuICB3cml0ZShwcmcsIDB4MWExNjgsIDB4MzMsIDB4MzMpOyAvLyBmcm9udCBvZiBnb2EgZm9ydHJlc3NcbiAgd3JpdGUocHJnLCAweDFhNDhlLCAweDMzLCAweDMzKTsgLy8gb2FzaXMgY2F2ZVxuXG4gIC8vIFJlbnVtYmVyIG1pbWljc1xuICBwcmdbMHgxOWJiMV0gPSAweDcwOyAvLyBmb2cgbGFtcCBjYXZlIDMgKDRhKSBub3J0aCBtaW1pY1xuICBwcmdbMHgxOWJiNV0gPSAweDcxOyAvLyBmb2cgbGFtcCBjYXZlIDMgKDRhKSBzb3V0aHdlc3QgbWltaWNcbiAgcHJnWzB4MTlhNzddID0gMHg3MjsgLy8gd2F0ZXJmYWxsIGNhdmUgMSAoNTQpIG1pbWljXG4gIHByZ1sweDE5ZGViXSA9IDB4NzM7IC8vIGV2aWwgc3Bpcml0IGlzbGFuZCA0ICg2Yikgcml2ZXIgcmlnaHQgbWltaWNcbiAgcHJnWzB4MWEwNDVdID0gMHg3NDsgLy8gbXQgaHlkcmEgY2F2ZSA4ICg4NSkgbWltaWNcbiAgcHJnWzB4MWEwZTFdID0gMHg3NTsgLy8gc3R4eSBsZWZ0ICg4OSkgbm9ydGggbWltaWNcbiAgcHJnWzB4MWEwZTVdID0gMHg3NjsgLy8gc3R4eSByaWdodCAoODkpIG5vcnRoIHJpdmVyc2lkZSBtaW1pY1xuICBwcmdbMHgxYTBlOV0gPSAweDc3OyAvLyBzdHh5IHJpZ2h0ICg4OSkgc291dGggcml2ZXJzaWRlIG1pbWljXG4gIHByZ1sweDFhNjA1XSA9IDB4Nzg7IC8vIGNyeXB0IGxlZnQgcGl0IChhMykgbWltaWNcbiAgcHJnWzB4MWEzYzFdID0gMHg3OTsgLy8ga2FybWluZSBiYXNlbWVudCAoYjUpIHRvcCBtaWRkbGUgbWltaWNcbiAgcHJnWzB4MWEzYzVdID0gMHg3YTsgLy8ga2FybWluZSBiYXNlbWVudCAoYjUpIHRvcCByaWdodCBtaW1pY1xuICBwcmdbMHgxYTNjOV0gPSAweDdiOyAvLyBrYXJtaW5lIGJhc2VtZW50IChiNSkgYm90dG9tIHJpZ2h0IG1pbWljXG5cbiAgd3JpdGUocHJnLCAweDFlMGI3LCAweGMwLCAweDAwKTsgLy8gUmVtb3ZlIHNoZWxsIGZsdXRlIHVzZSBmbGFnIChuZXZlciByZWFkKVxuICB3cml0ZShwcmcsIDB4MWUzMmEsIDB4YzAsIDB4MDApOyAvLyBSZW1vdmUgcHJpc29uIG9wZW5hYmxlIGZsYWcgKHRyaWdnZXIgYWQpXG4gIHdyaXRlKHByZywgMHgxZTMzMCwgMHhjMCwgMHgwMCk7IC8vIFJlbW92ZSBzdHh5IG9wZW5hYmxlIGZsYWcgKHRyaWdnZXIgYWUpXG4gIHdyaXRlKHByZywgMHgxZTMzNiwgMHhjMCwgMHgwMCk7IC8vIFJlbW92ZSBhbHRhciB1c2FibGUgZmxhZyAodHJpZ2dlciBhZilcbiAgd3JpdGUocHJnLCAweDFlMGUwLCAweGMwLCAweDAwKTsgLy8gUmVtb3ZlIHVudXNlZCBmbHV0ZSBvZiBsaW1lIGl0ZW11c2UgZmxhZ1xuICB3cml0ZShwcmcsIDB4MWUwZTYsIDB4YzAsIDB4MDApOyAvLyBSZW1vdmUgdW51c2VkIGZsdXRlIG9mIGxpbWUgaXRlbXVzZSBmbGFnXG5cbiAgLy8gU3dhbiBnYXRlIGd1YXJkcyBzcGF3biBleGFjdGx5IGJhc2VkIG9uIGdhdGUgYmVpbmcgY2xvc2VkICgyYjMpLlxuICAvLyBBbHNvIHJlbW92ZSB0aGUgZGVzcGF3biB0cmlnZ2VyICh3ZSBjYW4ndCBtb3ZlIHRoZSBndWFyZHMgYmVjYXVzZVxuICAvLyB0aGUgZ2F0ZSBhbmltYXRpb24gbmVlZHMgdG8gYmUgaW4gc2xvdCBlKS5cbiAgcHJnWzB4MWM4MDNdID0gMHgwMDsgLy8gcmVtb3ZlIH4wNjYgZnJvbSBzcGF3biBjb25kaXRpb24gMmMgQCAzOFxuICB3cml0ZShwcmcsIDB4MWM4MGQsIDB4YTIsIDB4YjMpOyAvLyBzcGF3biBjb25kaXRpb24gMmQgQCA3M1xuICBwcmdbMHgxYWE4Nl0gPSAweGZlOyAvLyB0cmlnZ2VyIC0+IHVudXNlZCBzcGF3blxuXG4gIC8vIFRPRE8gLSB0aGVzZSBhcmUgdHJhbnNpdGlvbmFsIHVudGlsIHdlIG1vdmUgdGhlIGxvZ2ljIGVsc2V3aGVyZVxuICB3cml0ZShwcmcsIDB4M2Q2ZDUsXG4gICAgICAgIDB4MjUsIDB4MjksICAvLyAyNSBzdGF0dWUgb2Ygb255eCB1c2UgLT4gMjkgZ2FzIG1hc2tcbiAgICAgICAgMHgzOSwgMHgzYSwgIC8vIDM5IGdsb3dpbmcgbGFtcCB1c2UgLT4gM2Egc3RhdHVlIG9mIGdvbGRcbiAgICAgICAgMHgzYiwgMHg0NywgIC8vIDNiIGxvdmUgcGVuZGFudCB1c2UgLT4gNDcgY2hhbmdlXG4gICAgICAgIDB4M2MsIDB4M2UsICAvLyAzYyBraXJpc2EgcGxhbnQgdXNlIC0+IDNlIGJvdyBvZiBtb29uXG4gICAgICAgIDB4ODQsIDB4NDYsICAvLyA4NCBhbmdyeSBzZWEgdHJpZ2dlciAtPiA0NiBiYXJyaWVyXG4gICAgICAgIDB4YjIsIDB4NDIsICAvLyBiMiBzdW1taXQgdHJpZ2dlciAtPiA0MiBwYXJhbHlzaXNcbiAgICAgICAgMHhiNCwgMHg0MSwgIC8vIGI0IHdpbmRtaWxsIGNhdmUgdHJpZ2dlciAtPiA0MSByZWZyZXNoXG4gICAgICAgIDB4ZmYpOyAgICAgICAvLyBmb3IgYm9va2tlZXBpbmcgcHVycG9zZXMsIG5vdCBhY3R1YWxseSB1c2VkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmlzdGljKHJvbTogUm9tLCBmbGFnczogRmxhZ1NldCk6IHZvaWQge1xuICAvLyBOT1RFOiBkbyB0aGlzIHZlcnkgZWFybHkgdG8gbWFrZSBzdXJlIHJlZnMgdG8gd2FycCBwb2ludCBmbGFncyBhcmVcbiAgLy8gdXBkYXRlZCB0byByZWZsZWN0IHNoaWZ0cyAocHJvYmFibHkgbm90IGFuIGlzc3VlIGFueW1vcmUgbm93IHRoYXRcbiAgLy8gd2UgdHJhY2sgZmxhZyBtb3ZlcyBzZXBhcmF0ZWx5KS5cbiAgYWRkWm9tYmllV2FycChyb20pO1xuXG4gIGNvbnNvbGlkYXRlSXRlbUdyYW50cyhyb20pO1xuICBhZGRNZXphbWVUcmlnZ2VyKHJvbSk7XG4gIG5vcm1hbGl6ZVN3b3Jkcyhyb20sIGZsYWdzKTtcblxuICBmaXhGbHlhYmxlV2FsbHMocm9tKTtcbiAgZml4TW9uc3RlclRlcnJhaW4ocm9tKTtcbiAgZml4Q3J5c3RhbGlzKHJvbSk7XG4gIGZpeE9wZWxTdGF0dWUocm9tKTtcbiAgZml4Q29pblNwcml0ZXMocm9tKTtcbiAgZml4Q2hlc3RzKHJvbSk7XG4gIHByZXZlbnRCb3NzU29mdGxvY2tzKHJvbSk7XG5cbiAgbWFrZUJyYWNlbGV0c1Byb2dyZXNzaXZlKHJvbSk7XG5cbiAgYWRqdXN0R29hRm9ydHJlc3NUcmlnZ2Vycyhyb20pO1xuICBwcmV2ZW50TnBjRGVzcGF3bnMocm9tLCBmbGFncyk7XG4gIGxlYWZFbGRlckluU2FicmVIZWFscyhyb20pO1xuICBpZiAoZmxhZ3MucmVxdWlyZUhlYWxlZERvbHBoaW5Ub1JpZGUoKSkgcmVxdWlyZUhlYWxlZERvbHBoaW4ocm9tKTtcbiAgaWYgKGZsYWdzLnNhaGFyYVJhYmJpdHNSZXF1aXJlVGVsZXBhdGh5KCkpIHJlcXVpcmVUZWxlcGF0aHlGb3JEZW8ocm9tKTtcblxuICBhZGp1c3RJdGVtTmFtZXMocm9tLCBmbGFncyk7XG5cbiAgLy8gVE9ETyAtIGNvbnNpZGVyIG1ha2luZyBhIFRyYW5zZm9ybWF0aW9uIGludGVyZmFjZSwgd2l0aCBvcmRlcmluZyBjaGVja3NcbiAgYWxhcm1GbHV0ZUlzS2V5SXRlbShyb20sIGZsYWdzKTsgLy8gTk9URTogcHJlLXNodWZmbGVcbiAgYnJva2FoYW5hV2FudHNNYWRvMShyb20pO1xuICBpZiAoZmxhZ3MudGVsZXBvcnRPblRodW5kZXJTd29yZCgpKSB7XG4gICAgdGVsZXBvcnRPblRodW5kZXJTd29yZChyb20pO1xuICAgIC8vIG5vdCBTaHlyb25fVGVtcGxlIHNpbmNlIG5vLXRodW5kZXItc3dvcmQtZm9yLW1hc3NhY3JlXG4gICAgcm9tLnRvd25XYXJwLnRodW5kZXJTd29yZFdhcnAgPSBbcm9tLmxvY2F0aW9ucy5TaHlyb24uaWQsIDB4NDFdO1xuICB9IGVsc2Uge1xuICAgIG5vVGVsZXBvcnRPblRodW5kZXJTd29yZChyb20pO1xuICB9XG5cbiAgdW5kZXJncm91bmRDaGFubmVsTGFuZEJyaWRnZShyb20pO1xuICBpZiAoZmxhZ3MuZm9nTGFtcE5vdFJlcXVpcmVkKCkpIGZvZ0xhbXBOb3RSZXF1aXJlZChyb20sIGZsYWdzKTtcblxuICBldmlsU3Bpcml0SXNsYW5kUmVxdWlyZXNEb2xwaGluKHJvbSk7XG4gIHNpbXBsaWZ5SW52aXNpYmxlQ2hlc3RzKHJvbSk7XG4gIGFkZENvcmRlbFdlc3RUcmlnZ2Vycyhyb20sIGZsYWdzKTtcbiAgaWYgKGZsYWdzLmRpc2FibGVSYWJiaXRTa2lwKCkpIGZpeFJhYmJpdFNraXAocm9tKTtcbiAgaWYgKGZsYWdzLmRpc2FibGVGbGlnaHRTdGF0dWVTa2lwKCkpIGZpeEZsaWdodFN0YXR1ZVNraXAocm9tKTtcbiAgaWYgKGZsYWdzLmRpc2FibGVSYWdlU2tpcCgpKSBwYXRjaExpbWVUcmVlTGFrZShyb20pO1xuXG4gIGZpeFJldmVyc2VXYWxscyhyb20pO1xuICBpZiAoZmxhZ3MuY2hhcmdlU2hvdHNPbmx5KCkpIGRpc2FibGVTdGFicyhyb20pO1xuICBpZiAoZmxhZ3Mub3Jic09wdGlvbmFsKCkpIG9yYnNPcHRpb25hbChyb20pO1xuICBpZiAoZmxhZ3Mubm9Cb3dNb2RlKCkpIG5vQm93TW9kZShyb20pO1xuXG4gIHBhdGNoVG9vTWFueUl0ZW1zTWVzc2FnZShyb20pO1xuXG4gIGlmIChmbGFncy5oYXJkY29yZU1vZGUoKSkgaGFyZGNvcmVNb2RlKHJvbSk7XG5cbn1cblxuLy8gVXBkYXRlcyBhIGZldyBpdGVtdXNlIGFuZCB0cmlnZ2VyIGFjdGlvbnMgaW4gbGlnaHQgb2YgY29uc29saWRhdGlvblxuLy8gYXJvdW5kIGl0ZW0gZ3JhbnRpbmcuXG5mdW5jdGlvbiBjb25zb2xpZGF0ZUl0ZW1HcmFudHMocm9tOiBSb20pOiB2b2lkIHtcbiAgcm9tLml0ZW1zLkdsb3dpbmdMYW1wLml0ZW1Vc2VEYXRhWzBdLm1lc3NhZ2UuYWN0aW9uID0gMHgwYjtcbn1cblxuLy8gQWRkcyBhIHRyaWdnZXIgYWN0aW9uIHRvIG1lemFtZS4gIFVzZSA4NyBsZWZ0b3ZlciBmcm9tIHJlc2N1aW5nIHplYnUuXG5mdW5jdGlvbiBhZGRNZXphbWVUcmlnZ2VyKHJvbTogUm9tKTogdm9pZCB7XG4gIGNvbnN0IHRyaWdnZXIgPSByb20ubmV4dEZyZWVUcmlnZ2VyKCk7XG4gIHRyaWdnZXIudXNlZCA9IHRydWU7XG4gIHRyaWdnZXIuY29uZGl0aW9ucyA9IFt+cm9tLmZsYWdzLkFsd2F5c1RydWUuaWRdO1xuICB0cmlnZ2VyLm1lc3NhZ2UgPSBNZXNzYWdlSWQub2Yoe2FjdGlvbjogNH0pO1xuICB0cmlnZ2VyLmZsYWdzID0gW3JvbS5mbGFncy5BbHdheXNUcnVlLmlkXTtcbiAgY29uc3QgbWV6YW1lID0gcm9tLmxvY2F0aW9ucy5NZXphbWVTaHJpbmU7XG4gIG1lemFtZS5zcGF3bnMucHVzaChTcGF3bi5vZih7dGlsZTogMHg4OCwgdHlwZTogMiwgaWQ6IHRyaWdnZXIuaWR9KSk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN3b3Jkcyhyb206IFJvbSwgZmxhZ3M6IEZsYWdTZXQpIHtcbiAgLy8gd2luZCAxID0+IDEgaGl0ICAgICAgICAgICAgICAgPT4gM1xuICAvLyB3aW5kIDIgPT4gMSBoaXQgICAgICAgICAgICAgICA9PiA2XG4gIC8vIHdpbmQgMyA9PiAyLTMgaGl0cyA4TVAgICAgICAgID0+IDhcblxuICAvLyBmaXJlIDEgPT4gMSBoaXQgICAgICAgICAgICAgICA9PiAzXG4gIC8vIGZpcmUgMiA9PiAzIGhpdHMgICAgICAgICAgICAgID0+IDVcbiAgLy8gZmlyZSAzID0+IDQtNiBoaXRzIDE2TVAgICAgICAgPT4gN1xuXG4gIC8vIHdhdGVyIDEgPT4gMSBoaXQgICAgICAgICAgICAgID0+IDNcbiAgLy8gd2F0ZXIgMiA9PiAxLTIgaGl0cyAgICAgICAgICAgPT4gNlxuICAvLyB3YXRlciAzID0+IDMtNiBoaXRzIDE2TVAgICAgICA9PiA4XG5cbiAgLy8gdGh1bmRlciAxID0+IDEtMiBoaXRzIHNwcmVhZCAgPT4gM1xuICAvLyB0aHVuZGVyIDIgPT4gMS0zIGhpdHMgc3ByZWFkICA9PiA1XG4gIC8vIHRodW5kZXIgMyA9PiA3LTEwIGhpdHMgNDBNUCAgID0+IDdcblxuICByb20ub2JqZWN0c1sweDEwXS5hdGsgPSAzOyAvLyB3aW5kIDFcbiAgcm9tLm9iamVjdHNbMHgxMV0uYXRrID0gNjsgLy8gd2luZCAyXG4gIHJvbS5vYmplY3RzWzB4MTJdLmF0ayA9IDg7IC8vIHdpbmQgM1xuXG4gIHJvbS5vYmplY3RzWzB4MThdLmF0ayA9IDM7IC8vIGZpcmUgMVxuICByb20ub2JqZWN0c1sweDEzXS5hdGsgPSA1OyAvLyBmaXJlIDJcbiAgcm9tLm9iamVjdHNbMHgxOV0uYXRrID0gNTsgLy8gZmlyZSAyXG4gIHJvbS5vYmplY3RzWzB4MTddLmF0ayA9IDc7IC8vIGZpcmUgM1xuICByb20ub2JqZWN0c1sweDFhXS5hdGsgPSA3OyAvLyBmaXJlIDNcblxuICByb20ub2JqZWN0c1sweDE0XS5hdGsgPSAzOyAvLyB3YXRlciAxXG4gIHJvbS5vYmplY3RzWzB4MTVdLmF0ayA9IDY7IC8vIHdhdGVyIDJcbiAgcm9tLm9iamVjdHNbMHgxNl0uYXRrID0gODsgLy8gd2F0ZXIgM1xuXG4gIHJvbS5vYmplY3RzWzB4MWNdLmF0ayA9IDM7IC8vIHRodW5kZXIgMSAodW51c2VkIGFsaWFzPylcbiAgcm9tLm9iamVjdHNbMHgxZF0uYXRrID0gMzsgLy8gdGh1bmRlciAxXG4gIHJvbS5vYmplY3RzWzB4MWVdLmF0ayA9IDU7IC8vIHRodW5kZXIgMlxuICByb20ub2JqZWN0c1sweDFiXS5hdGsgPSA3OyAvLyB0aHVuZGVyIDNcbiAgcm9tLm9iamVjdHNbMHgxZl0uYXRrID0gNzsgLy8gdGh1bmRlciAzXG5cbiAgaWYgKGZsYWdzLnNsb3dEb3duVG9ybmFkbygpKSB7XG4gICAgLy8gVE9ETyAtIHRvcm5hZG8gKG9iaiAxMikgPT4gc3BlZWQgMDcgaW5zdGVhZCBvZiAwOFxuICAgIC8vICAgICAgLSBsaWZldGltZSBpcyA0ODAgPT4gNzAgbWF5YmUgdG9vIGxvbmcsIDYwIHN3ZWV0IHNwb3Q/XG4gICAgY29uc3QgdG9ybmFkbyA9IHJvbS5vYmplY3RzWzB4MTJdO1xuICAgIHRvcm5hZG8uc3BlZWQgPSAweDA3O1xuICAgIHRvcm5hZG8uZGF0YVsweDBjXSA9IDB4NjA7IC8vIGluY3JlYXNlIGxpZmV0aW1lICg0ODApIGJ5IDIwJVxuICB9XG59XG5cbi8vIEFkZCBjb2RlIHRvIGVuc3VyZSBEcmF5Z29uIDIgYW5kIEdpYW50IEluc2VjdCByZXNwYXduIHdpdGhvdXQgdGhlaXJcbi8vIGl0ZW1zIG9uY2UgdGhleSd2ZSBiZWVuIHVzZWQuXG5mdW5jdGlvbiBwcmV2ZW50Qm9zc1NvZnRsb2Nrcyhyb206IFJvbSkge1xuICBjb25zdCB0cmlnZ2VyID0gcm9tLnRyaWdnZXIoMHhhMCk7XG4gIHRyaWdnZXIudXNlZCA9IHRydWU7XG4gIHRyaWdnZXIuY29uZGl0aW9ucyA9IFtdO1xuICB0cmlnZ2VyLmZsYWdzID0gW107XG4gIHRyaWdnZXIubWVzc2FnZSA9IE1lc3NhZ2VJZC5vZih7cGFydDogMCwgaW5kZXg6IDAsIGFjdGlvbjogMHgxNX0pO1xuXG4gIHJvbS5vYmplY3RzWzB4NWVdLmRhdGFbMHhkXSA9IDB4ZmU7IC8vIG9iamVjdCBhY3Rpb24gN2UgaW5zdGVhZCBvZiA3ZlxuICByb20uaXRlbXMuSW5zZWN0Rmx1dGUuaXRlbVVzZURhdGFbMF0uZmxhZ3MgPSBbcm9tLmZsYWdzLlVzZWRJbnNlY3RGbHV0ZS5pZF07XG59XG5cbmZ1bmN0aW9uIGZpeE9wZWxTdGF0dWUocm9tOiBSb20pIHtcbiAgLy8gRG9uJ3Qgc2VsZWN0IE9wZWwgU3RhdHVlIGF0IGFsbC4gIFRoaXMgcGF0Y2hlcyB0aGUgdGFibGUgYXQgJDIxMDNiXG4gIC8vIHRoYXQgdHJhbnNsYXRlcyBhbiBpdGVtIElEIHRvIGEgXCJzZWxlY3RlZCBpdGVtXCIgaW5kZXgsIGkuZS4gZWFjaFxuICAvLyB0eXBlIG9mIGl0ZW0gbWFwcyB0byBhIHNlcmllcyAxLi5OLiAgSW4gdGhpcyBjYXNlLCB3ZSBqdXN0IHJlbWFwXG4gIC8vIE9wZWwgU3RhdHVlIHRvIHplcm8gc28gdGhhdCBpdCBsb29rcyBsaWtlIG5vdGhpbmcgaXMgc2VsZWN0ZWQuXG4gIHJvbS5pdGVtcy5PcGVsU3RhdHVlLnNlbGVjdGVkSXRlbVZhbHVlID0gMDtcbn1cblxuZnVuY3Rpb24gZml4Q29pblNwcml0ZXMocm9tOiBSb20pOiB2b2lkIHtcbiAgZm9yIChjb25zdCBwYWdlIG9mIFsweDYwLCAweDY0LCAweDY1LCAweDY2LCAweDY3LCAweDY4LFxuICAgICAgICAgICAgICAgICAgICAgIDB4NjksIDB4NmEsIDB4NmIsIDB4NmMsIDB4NmQsIDB4NmZdKSB7XG4gICAgZm9yIChjb25zdCBwYXQgb2YgWzAsIDEsIDJdKSB7XG4gICAgICByb20ucGF0dGVybnNbcGFnZSA8PCA2IHwgcGF0XS5waXhlbHMgPSByb20ucGF0dGVybnNbMHg1ZSA8PCA2IHwgcGF0XS5waXhlbHM7XG4gICAgfVxuICB9XG4gIHJvbS5vYmplY3RzWzB4MGNdLm1ldGFzcHJpdGUgPSAweGE5O1xufVxuXG4vKipcbiAqIEZpeCB0aGUgc29mdGxvY2sgdGhhdCBoYXBwZW5zIHdoZW4geW91IGdvIHRocm91Z2hcbiAqIGEgd2FsbCBiYWNrd2FyZHMgYnkgbW92aW5nIHRoZSBleGl0L2VudHJhbmNlIHRpbGVzXG4gKiB1cCBhIGJpdCBhbmQgYWRqdXN0aW5nIHNvbWUgdGlsZUVmZmVjdHMgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBmaXhSZXZlcnNlV2FsbHMocm9tOiBSb20pIHtcbiAgLy8gYWRqdXN0IHRpbGUgZWZmZWN0IGZvciBiYWNrIHRpbGVzIG9mIGlyb24gd2FsbFxuICBmb3IgKGNvbnN0IHQgaW4gWzB4MDQsIDB4MDUsIDB4MDgsIDB4MDldKSB7XG4gICAgcm9tLnRpbGVFZmZlY3RzWzB4YmMgLSAweGIzXS5lZmZlY3RzW3RdID0gMHgxODtcbiAgICByb20udGlsZUVmZmVjdHNbMHhiNSAtIDB4YjNdLmVmZmVjdHNbdF0gPSAweDE4O1xuICB9XG4gIC8vIFRPRE8gLSBtb3ZlIGFsbCB0aGUgZW50cmFuY2VzIHRvIHk9MjAgYW5kIGV4aXRzIHRvIHl0PTAxXG59XG5cbi8qKiBNYWtlIGEgbGFuZCBicmlkZ2UgaW4gdW5kZXJncm91bmQgY2hhbm5lbCAqL1xuZnVuY3Rpb24gdW5kZXJncm91bmRDaGFubmVsTGFuZEJyaWRnZShyb206IFJvbSkge1xuICBjb25zdCB7dGlsZXN9ID0gcm9tLnNjcmVlbnNbMHhhMV07XG4gIHRpbGVzWzB4MjhdID0gMHg5ZjtcbiAgdGlsZXNbMHgzN10gPSAweDIzO1xuICB0aWxlc1sweDM4XSA9IDB4MjM7IC8vIDB4OGU7XG4gIHRpbGVzWzB4MzldID0gMHgyMTtcbiAgdGlsZXNbMHg0N10gPSAweDhkO1xuICB0aWxlc1sweDQ4XSA9IDB4OGY7XG4gIHRpbGVzWzB4NTZdID0gMHg5OTtcbiAgdGlsZXNbMHg1N10gPSAweDlhO1xuICB0aWxlc1sweDU4XSA9IDB4OGM7XG59XG5cbmZ1bmN0aW9uIGZvZ0xhbXBOb3RSZXF1aXJlZChyb206IFJvbSwgZmxhZ3M6IEZsYWdTZXQpIHtcbiAgY29uc3Qge1xuICAgIGZsYWdzOiB7QWx3YXlzVHJ1ZSwgSW5qdXJlZERvbHBoaW4sIEZvZ0xhbXAsXG4gICAgICAgICAgICBLZW5zdUluQ2FiaW4sIFJldHVybmVkRm9nTGFtcH0sXG4gICAgaXRlbXM6IHtTaGVsbEZsdXRlfSxcbiAgICBsb2NhdGlvbnM6IHtCb2F0SG91c2UsIFBvcnRvYV9GaXNoZXJtYW5Ib3VzZX0sXG4gICAgbnBjcyxcbiAgfSA9IHJvbTtcbiAgICBcbiAgLy8gTmVlZCB0byBtYWtlIHNldmVyYWwgY2hhbmdlcy5cbiAgLy8gKDEpIGRvbHBoaW4gb25seSByZXF1aXJlcyBzaGVsbCBmbHV0ZSwgbWFrZSB0aGUgZmxhZyBjaGVjayBmcmVlXG4gIC8vICAgICB1bmxlc3MgaGVhbGluZyBpcyByZXF1aXJlZC5cbiAgY29uc3QgcmVxdWlyZUhlYWxlZCA9IGZsYWdzLnJlcXVpcmVIZWFsZWREb2xwaGluVG9SaWRlKCk7XG4gIFNoZWxsRmx1dGUuaXRlbVVzZURhdGFbMF0ud2FudCA9XG4gICAgICByZXF1aXJlSGVhbGVkID8gSW5qdXJlZERvbHBoaW4uaWQgOiBBbHdheXNUcnVlLmlkO1xuICAvLyAoMikga2Vuc3UgNjggKEA2MSkgZHJvcHMgYW4gaXRlbSAoNjcgbWFnaWMgcmluZylcbiAgbnBjcy5LZW5zdUluQ2FiaW4uZGF0YVswXSA9IDB4Njc7XG4gIG5wY3MuS2Vuc3VJbkNhYmluLmxvY2FsRGlhbG9ncy5nZXQoLTEpIVswXS5tZXNzYWdlLmFjdGlvbiA9IDB4MGE7XG4gIG5wY3MuS2Vuc3VJbkNhYmluLmxvY2FsRGlhbG9ncy5nZXQoLTEpIVswXS5mbGFncyA9IFtdO1xuICBucGNzLktlbnN1SW5DYWJpbi5zcGF3bkNvbmRpdGlvbnMuc2V0KEJvYXRIb3VzZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbUmV0dXJuZWRGb2dMYW1wLmlkLCB+S2Vuc3VJbkNhYmluLmlkXSk7XG4gIC8vICgzKSBmaXNoZXJtYW4gNjQgc3Bhd25zIG9uIGZvZyBsYW1wIHJhdGhlciB0aGFuIHNoZWxsIGZsdXRlXG4gIG5wY3MuRmlzaGVybWFuLnNwYXduQ29uZGl0aW9ucy5zZXQoUG9ydG9hX0Zpc2hlcm1hbkhvdXNlLmlkLCBbRm9nTGFtcC5pZF0pO1xuXG4gIC8vICg0KSBmaXggdXAgaXRlbWdldCA2NyBmcm9tIGl0ZW1nZXQgNjQgKGRlbGV0ZSB0aGUgZmxhZylcbiAgcm9tLml0ZW1HZXRzWzB4NjRdLmZsYWdzID0gW107XG4gIHJvbS5pdGVtR2V0c1sweDY3XS5jb3B5RnJvbShyb20uaXRlbUdldHNbMHg2NF0pO1xuICAvL3JvbS5pdGVtR2V0c1sweDY3XS5mbGFncyA9IFsweDBjMV07XG5cbiAgLy8gVE9ETyAtIGdyYXBoaWNzIHNjcmV3ZWQgdXAgLSBmaWd1cmUgb3V0IGlmIG9iamVjdCBhY3Rpb24gaXMgY2hhbmdpbmdcbiAgLy8gdGhlIHBhdHRlcm4gdGFibGVzIGJhc2VkIG9uIChlLmcuKSAkNjAwLHggbWF5YmU/ICBDYW4gd2UgcHJldmVudCBpdD9cblxuICAvLyBUT0RPIC0gYWRkIGEgbm90ZXMgZmlsZSBhYm91dCB0aGlzLlxuXG59XG5cbi8qKlxuICogUmVtb3ZlIHRpbWVyIHNwYXducyBmcm9tIGFsbCBjaGVzdHMuICBNaW1pY3MgaGF2ZSBhbHJlYWR5IGJlZW5cbiAqIHJlbnVtYmVyZWQgdG8gYmUgZXVuaXF1ZSAocHJlLXBhcnNlKS4gIE5vdGUgdGhhdCB0aGUgcmVudW1iZXJpbmdcbiAqIHJlcXVpcmVzIGFuIGFzc2VtYmx5IGNoYW5nZSAoJDNkM2ZkIGluIHByZXNodWZmbGUucykuXG4gKi9cbmZ1bmN0aW9uIGZpeENoZXN0cyhyb206IFJvbSk6IHZvaWQge1xuICBmb3IgKGNvbnN0IGxvYyBvZiByb20ubG9jYXRpb25zKSB7XG4gICAgZm9yIChjb25zdCBzIG9mIGxvYy5zcGF3bnMpIHtcbiAgICAgIGlmIChzLmlzQ2hlc3QoKSkgcy50aW1lZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBUT0RPIC0gZmluZCBhIGJldHRlciB3YXkgdG8gYnVuZGxlIGFzbSBjaGFuZ2VzPyAtIGJ1dCBpdCdzIGEgbWVzc1xuICAvLyAgICAgICAgd2l0aCBzaGFyaW5nIGxhYmVscywgdHJhY2tpbmcgY2xvYmJlcmluZywgZXRjLlxuICAvLyByb20uYXNzZW1ibGUoKVxuICAvLyAgICAgLiQoJ2FkYyAkMTAnKVxuICAvLyAgICAgLmJlcSgnbGFiZWwnKVxuICAvLyAgICAgLmxzaCgpXG4gIC8vICAgICAubHNoKGAke2FkZHJ9LHhgKVxuICAvLyAgICAgLmxhYmVsKCdsYWJlbCcpO1xuICAvLyByb20ucGF0Y2goKVxuICAvLyAgICAgLm9yZygweDNkM2ZkKVxuICAvLyAgICAgLmJ5dGUoMHhiMCk7XG5cbiAgLy8gcm9tLmNvZGUucmVwbGFjZSgweDNjMTkyLCAweDNjMWE3LCBgXG4gIC8vICAgICBhc2xcbiAgLy8gICAgIGFkYyAkMTAgIDsgZG8gc29tZXRoaW5nXG4gIC8vICAgICBibmUgK1xuICAvLyAgICAgIHJ0c1xuICAvLyAgICsgam1wIEZvb0JhcmApO1xuICAvLyByb20uY29kZS5yZXBsYWNlRXhhY3Qoc3RhcnQsIGVuZCwgY29kZSk7XG4gIC8vIHJvbS5jb2RlLmluc2VydChwYWdlLCBgXG4gIC8vICAgICBMYWJlbDogIDsgdXNhYmxlIGZyb20gZWxzZXdoZXJlP1xuICAvLyAgICAgLSBhc2xcbiAgLy8gICAgICAgYmNjIC1cbiAgLy8gICAgICAgcnRzYCk7XG59XG5cbmZ1bmN0aW9uIGFkanVzdEdvYUZvcnRyZXNzVHJpZ2dlcnMocm9tOiBSb20pOiB2b2lkIHtcbiAgY29uc3QgbCA9IHJvbS5sb2NhdGlvbnM7XG4gIC8vIE1vdmUgS2VsYmVzcXVlIDIgb25lIGZ1bGwgdGlsZSBsZWZ0LlxuICBsLkdvYUZvcnRyZXNzX0tlbGJlc3F1ZS5zcGF3bnNbMF0ueCAtPSAxNjtcbiAgLy8gUmVtb3ZlIHNhZ2Ugc2NyZWVuIGxvY2tzIChleGNlcHQgS2Vuc3UpLlxuICBsLkdvYUZvcnRyZXNzX1plYnUuc3Bhd25zLnNwbGljZSgxLCAxKTsgLy8gemVidSBzY3JlZW4gbG9jayB0cmlnZ2VyXG4gIGwuR29hRm9ydHJlc3NfVG9ybmVsLnNwYXducy5zcGxpY2UoMiwgMSk7IC8vIHRvcm5lbCBzY3JlZW4gbG9jayB0cmlnZ2VyXG4gIGwuR29hRm9ydHJlc3NfQXNpbmEuc3Bhd25zLnNwbGljZSgyLCAxKTsgLy8gYXNpbmEgc2NyZWVuIGxvY2sgdHJpZ2dlclxuICBsLkdvYUZvcnRyZXNzX0tlbnN1LnNwYXducy5zcGxpY2UoMywgMSk7IC8vIGtlbnN1IGh1bWFuIHNjcmVlbiBsb2NrIHRyaWdnZXJcbiAgbC5Hb2FGb3J0cmVzc19LZW5zdS5zcGF3bnMuc3BsaWNlKDEsIDEpOyAvLyBrZW5zdSBzbGltZSBzY3JlZW4gbG9jayB0cmlnZ2VyXG59XG5cbmZ1bmN0aW9uIGFsYXJtRmx1dGVJc0tleUl0ZW0ocm9tOiBSb20sIGZsYWdzOkZsYWdTZXQpOiB2b2lkIHtcbiAgY29uc3Qge1xuICAgIGl0ZW1zOiB7QWxhcm1GbHV0ZX0sXG4gICAgLy8gZmxhZ3M6IHtUYWxrZWRUb1plYnVTdHVkZW50LCBaZWJ1U3R1ZGVudH0sXG4gICAgbG9jYXRpb25zOiB7V2F0ZXJmYWxsQ2F2ZTR9LFxuICAgIG5wY3M6IHtXaW5kbWlsbEd1YXJkfSxcbiAgfSA9IHJvbTtcblxuICAvLyBNb3ZlIGFsYXJtIGZsdXRlIHRvIHRoaXJkIHJvd1xuICByb20uaXRlbUdldHNbMHgzMV0uaW52ZW50b3J5Um93U3RhcnQgPSAweDIwO1xuICAvLyBFbnN1cmUgYWxhcm0gZmx1dGUgY2Fubm90IGJlIGRyb3BwZWRcbiAgLy8gcm9tLnByZ1sweDIxMDIxXSA9IDB4NDM7IC8vIFRPRE8gLSByb20uaXRlbXNbMHgzMV0uPz8/XG4gIEFsYXJtRmx1dGUudW5pcXVlID0gdHJ1ZTtcbiAgLy8gRW5zdXJlIGFsYXJtIGZsdXRlIGNhbm5vdCBiZSBzb2xkXG4gIEFsYXJtRmx1dGUuYmFzZVByaWNlID0gMDtcblxuICBXaW5kbWlsbEd1YXJkLmRhdGFbMV0gPSAweDMxO1xuXG4gIC8vIGlmIChmbGFncy56ZWJ1U3R1ZGVudEdpdmVzSXRlbSgpKSB7XG4gIC8vIFBlcnNvbiAxNCAoWmVidSdzIHN0dWRlbnQpOiBzZWNvbmRhcnkgaXRlbSAtPiBhbGFybSBmbHV0ZVxuICAvLyAgIFdpbmRtaWxsR3VhcmQuZGF0YVsxXSA9IDB4MzE7XG4gIC8vIH0gZWxzZSB7XG4gIC8vICAgV2luZG1pbGxHdWFyZC5kYXRhWzFdID0gMHhmZjsgLy8gaW5kaWNhdGUgbm90aGluZyB0aGVyZTogbm8gc2xvdC5cbiAgLy8gICBjb25zdCBkaWFsb2cgPSBXaW5kbWlsbEd1YXJkLmRpYWxvZyhMZWFmX1N0dWRlbnRIb3VzZSlbMF07XG4gIC8vICAgZGlhbG9nLmNvbmRpdGlvbiA9IH5UYWxrZWRUb1plYnVTdHVkZW50LmlkO1xuICAvLyAgIGRpYWxvZy5mbGFncy5wdXNoKFRhbGtlZFRvWmVidVN0dWRlbnQuaWQpO1xuICAvLyAgIHJlcGxhY2UoWmVidS5zcGF3bnMoWmVidUNhdmUpLCBaZWJ1U3R1ZGVudC5pZCwgVGFsa2VkVG9aZWJ1U3R1ZGVudC5pZCk7XG4gIC8vIH1cblxuICAvLyBSZW1vdmUgYWxhcm0gZmx1dGUgZnJvbSBzaG9wcyAocmVwbGFjZSB3aXRoIG90aGVyIGl0ZW1zKVxuICAvLyBOT1RFIC0gd2UgY291bGQgc2ltcGxpZnkgdGhpcyB3aG9sZSB0aGluZyBieSBqdXN0IGhhcmRjb2RpbmcgaW5kaWNlcy5cbiAgLy8gICAgICAtIGlmIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBoYXBwZW4gZWFybHksIGl0J3MgYWxsIHRoZSBzYW1lLlxuICBjb25zdCByZXBsYWNlbWVudHMgPSBbXG4gICAgWzB4MjEsIDAuNzJdLCAvLyBmcnVpdCBvZiBwb3dlciwgNzIlIG9mIGNvc3RcbiAgICBbMHgxZiwgMC45XSwgLy8gbHlzaXMgcGxhbnQsIDkwJSBvZiBjb3N0XG4gIF07XG4gIGxldCBqID0gMDtcbiAgZm9yIChjb25zdCBzaG9wIG9mIHJvbS5zaG9wcykge1xuICAgIGlmIChzaG9wLnR5cGUgIT09IFNob3BUeXBlLlRPT0wpIGNvbnRpbnVlO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzaG9wLmNvbnRlbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoc2hvcC5jb250ZW50c1tpXSAhPT0gMHgzMSkgY29udGludWU7XG4gICAgICBjb25zdCBbaXRlbSwgcHJpY2VSYXRpb10gPSByZXBsYWNlbWVudHNbKGorKykgJSByZXBsYWNlbWVudHMubGVuZ3RoXTtcbiAgICAgIHNob3AuY29udGVudHNbaV0gPSBpdGVtO1xuICAgICAgaWYgKHJvbS5zaG9wRGF0YVRhYmxlc0FkZHJlc3MpIHtcbiAgICAgICAgLy8gTk9URTogdGhpcyBpcyBicm9rZW4gLSBuZWVkIGEgY29udHJvbGxlZCB3YXkgdG8gY29udmVydCBwcmljZSBmb3JtYXRzXG4gICAgICAgIHNob3AucHJpY2VzW2ldID0gTWF0aC5yb3VuZChzaG9wLnByaWNlc1tpXSAqIHByaWNlUmF0aW8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoYW5nZSBmbHV0ZSBvZiBsaW1lIGNoZXN0J3MgKG5vdy11bnVzZWQpIGl0ZW1nZXQgdG8gaGF2ZSBtZWRpY2FsIGhlcmJcbiAgcm9tLml0ZW1HZXRzWzB4NWJdLml0ZW1JZCA9IDB4MWQ7XG4gIC8vIENoYW5nZSB0aGUgYWN0dWFsIHNwYXduIGZvciB0aGF0IGNoZXN0IHRvIGJlIHRoZSBtaXJyb3JlZCBzaGllbGQgY2hlc3RcbiAgV2F0ZXJmYWxsQ2F2ZTQuc3Bhd24oMHgxOSkuaWQgPSAweDEwO1xuXG4gIC8vIFRPRE8gLSByZXF1aXJlIG5ldyBjb2RlIGZvciB0d28gdXNlc1xufVxuXG5mdW5jdGlvbiBicm9rYWhhbmFXYW50c01hZG8xKHJvbTogUm9tKTogdm9pZCB7XG4gIGNvbnN0IHtmbGFnczoge0thcm1pbmUsIE1hZG8xfSwgbnBjczoge0Jyb2thaGFuYX19ID0gcm9tO1xuICBjb25zdCBkaWFsb2cgPSBhc3NlcnQoQnJva2FoYW5hLmxvY2FsRGlhbG9ncy5nZXQoLTEpKVswXTtcbiAgaWYgKGRpYWxvZy5jb25kaXRpb24gIT09IH5LYXJtaW5lLmlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgYnJva2FoYW5hIGNvbmRpdGlvbjogJHtkaWFsb2cuY29uZGl0aW9ufWApO1xuICB9XG4gIGRpYWxvZy5jb25kaXRpb24gPSB+TWFkbzEuaWQ7XG59XG5cbmZ1bmN0aW9uIHJlcXVpcmVIZWFsZWREb2xwaGluKHJvbTogUm9tKTogdm9pZCB7XG4gIGNvbnN0IHtcbiAgICBmbGFnczoge0luanVyZWREb2xwaGluLCBTaGVsbEZsdXRlfSxcbiAgICBucGNzOiB7RmlzaGVybWFuLCBGaXNoZXJtYW5EYXVnaHRlcn0sXG4gIH0gPSByb207XG4gIC8vIE5vcm1hbGx5IHRoZSBmaXNoZXJtYW4gKCQ2NCkgc3Bhd25zIGluIGhpcyBob3VzZSAoJGQ2KSBpZiB5b3UgaGF2ZVxuICAvLyB0aGUgc2hlbGwgZmx1dGUgKDIzNikuICBIZXJlIHdlIGFsc28gYWRkIGEgcmVxdWlyZW1lbnQgb24gdGhlIGhlYWxlZFxuICAvLyBkb2xwaGluIHNsb3QgKDAyNSksIHdoaWNoIHdlIGtlZXAgYXJvdW5kIHNpbmNlIGl0J3MgYWN0dWFsbHkgdXNlZnVsLlxuICBGaXNoZXJtYW4uc3Bhd25Db25kaXRpb25zLnNldCgweGQ2LCBbU2hlbGxGbHV0ZS5pZCwgSW5qdXJlZERvbHBoaW4uaWRdKTtcbiAgLy8gQWxzbyBmaXggZGF1Z2h0ZXIncyBkaWFsb2cgKCQ3YikuXG4gIGNvbnN0IGRhdWdodGVyRGlhbG9nID0gRmlzaGVybWFuRGF1Z2h0ZXIubG9jYWxEaWFsb2dzLmdldCgtMSkhO1xuICBkYXVnaHRlckRpYWxvZy51bnNoaWZ0KGRhdWdodGVyRGlhbG9nWzBdLmNsb25lKCkpO1xuICBkYXVnaHRlckRpYWxvZ1swXS5jb25kaXRpb24gPSB+SW5qdXJlZERvbHBoaW4uaWQ7XG4gIGRhdWdodGVyRGlhbG9nWzFdLmNvbmRpdGlvbiA9IH5TaGVsbEZsdXRlLmlkO1xufVxuXG5mdW5jdGlvbiByZXF1aXJlVGVsZXBhdGh5Rm9yRGVvKHJvbTogUm9tKTogdm9pZCB7XG4gIGNvbnN0IHtcbiAgICBmbGFnczoge1RlbGVwYXRoeX0sXG4gICAgbnBjczoge0RlbywgU2FoYXJhQnVubnl9LFxuICB9ID0gcm9tO1xuICAvLyBOb3QgaGF2aW5nIHRlbGVwYXRoeSAoMjQzKSB3aWxsIHRyaWdnZXIgYSBcImt5dSBreXVcIiAoMWE6MTIsIDFhOjEzKSBmb3JcbiAgLy8gYm90aCBnZW5lcmljIGJ1bm5pZXMgKDU5KSBhbmQgZGVvICg1YSkuXG4gIFNhaGFyYUJ1bm55Lmdsb2JhbERpYWxvZ3MucHVzaChHbG9iYWxEaWFsb2cub2YoflRlbGVwYXRoeS5pZCwgWzB4MWEsIDB4MTJdKSk7XG4gIERlby5nbG9iYWxEaWFsb2dzLnB1c2goR2xvYmFsRGlhbG9nLm9mKH5UZWxlcGF0aHkuaWQsIFsweDFhLCAweDEzXSkpO1xufVxuXG5mdW5jdGlvbiB0ZWxlcG9ydE9uVGh1bmRlclN3b3JkKHJvbTogUm9tKTogdm9pZCB7XG4gIGNvbnN0IHtcbiAgICBmbGFnczoge1dhcnBTaHlyb259LFxuICB9ID0gcm9tO1xuICAvLyBpdGVtZ2V0IDAzIHN3b3JkIG9mIHRodW5kZXIgPT4gc2V0IDJmZCBzaHlyb24gd2FycCBwb2ludFxuICByb20uaXRlbUdldHNbMHgwM10uZmxhZ3MucHVzaChXYXJwU2h5cm9uLmlkKTtcbn1cblxuZnVuY3Rpb24gbm9UZWxlcG9ydE9uVGh1bmRlclN3b3JkKHJvbTogUm9tKTogdm9pZCB7XG4gIC8vIENoYW5nZSBzd29yZCBvZiB0aHVuZGVyJ3MgYWN0aW9uIHRvIGJiZSB0aGUgc2FtZSBhcyBvdGhlciBzd29yZHMgKDE2KVxuICByb20uaXRlbUdldHNbMHgwM10uYWNxdWlzaXRpb25BY3Rpb24uYWN0aW9uID0gMHgxNjtcbn1cblxuZnVuY3Rpb24gYWRqdXN0SXRlbU5hbWVzKHJvbTogUm9tLCBmbGFnczogRmxhZ1NldCk6IHZvaWQge1xuICBpZiAoZmxhZ3MubGVhdGhlckJvb3RzR2l2ZVNwZWVkKCkpIHtcbiAgICAvLyByZW5hbWUgbGVhdGhlciBib290cyB0byBzcGVlZCBib290c1xuICAgIGNvbnN0IGxlYXRoZXJCb290cyA9IHJvbS5pdGVtc1sweDJmXSE7XG4gICAgbGVhdGhlckJvb3RzLm1lbnVOYW1lID0gJ1NwZWVkIEJvb3RzJztcbiAgICBsZWF0aGVyQm9vdHMubWVzc2FnZU5hbWUgPSAnU3BlZWQgQm9vdHMnO1xuICAgIGlmIChmbGFncy5jaGFuZ2VHYXNNYXNrVG9IYXptYXRTdWl0KCkpIHtcbiAgICAgIGNvbnN0IGdhc01hc2sgPSByb20uaXRlbXNbMHgyOV07XG4gICAgICBnYXNNYXNrLm1lbnVOYW1lID0gJ0hhem1hdCBTdWl0JztcbiAgICAgIGdhc01hc2subWVzc2FnZU5hbWUgPSAnSGF6bWF0IFN1aXQnO1xuICAgIH1cbiAgfVxuXG4gIC8vIHJlbmFtZSBiYWxscyB0byBvcmJzXG4gIGZvciAobGV0IGkgPSAweDA1OyBpIDwgMHgwYzsgaSArPSAyKSB7XG4gICAgcm9tLml0ZW1zW2ldLm1lbnVOYW1lID0gcm9tLml0ZW1zW2ldLm1lbnVOYW1lLnJlcGxhY2UoJ0JhbGwnLCAnT3JiJyk7XG4gICAgcm9tLml0ZW1zW2ldLm1lc3NhZ2VOYW1lID0gcm9tLml0ZW1zW2ldLm1lc3NhZ2VOYW1lLnJlcGxhY2UoJ0JhbGwnLCAnT3JiJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUJyYWNlbGV0c1Byb2dyZXNzaXZlKHJvbTogUm9tKTogdm9pZCB7XG4gIGNvbnN0IHtcbiAgICBmbGFnczoge0JhbGxPZldpbmQsIFRvcm5hZG9CcmFjZWxldH0sXG4gICAgbnBjczoge1Rvcm5lbH0sXG4gIH0gPSByb207XG4gIC8vIHRvcm5lbCdzIHRyaWdnZXIgbmVlZHMgYm90aCBpdGVtc1xuICBjb25zdCB2YW5pbGxhID0gVG9ybmVsLmxvY2FsRGlhbG9ncy5nZXQoMHgyMSkhO1xuICBjb25zdCBwYXRjaGVkID0gW1xuICAgIHZhbmlsbGFbMF0sIC8vIGFscmVhZHkgbGVhcm5lZCB0ZWxlcG9ydFxuICAgIHZhbmlsbGFbMl0sIC8vIGRvbid0IGhhdmUgdG9ybmFkbyBicmFjZWxldFxuICAgIHZhbmlsbGFbMl0uY2xvbmUoKSwgLy8gd2lsbCBjaGFuZ2UgdG8gZG9uJ3QgaGF2ZSBvcmJcbiAgICB2YW5pbGxhWzFdLCAvLyBoYXZlIGJyYWNlbGV0LCBsZWFybiB0ZWxlcG9ydFxuICBdO1xuICBwYXRjaGVkWzFdLmNvbmRpdGlvbiA9IH5Ub3JuYWRvQnJhY2VsZXQuaWQ7IC8vIGRvbid0IGhhdmUgYnJhY2VsZXRcbiAgcGF0Y2hlZFsyXS5jb25kaXRpb24gPSB+QmFsbE9mV2luZC5pZDsgLy8gZG9uJ3QgaGF2ZSBvcmJcbiAgcGF0Y2hlZFszXS5jb25kaXRpb24gPSB+MDsgICAgIC8vIGRlZmF1bHRcbiAgVG9ybmVsLmxvY2FsRGlhbG9ncy5zZXQoMHgyMSwgcGF0Y2hlZCk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsaWZ5SW52aXNpYmxlQ2hlc3RzKHJvbTogUm9tKTogdm9pZCB7XG4gIGNvbnN0IHtDb3JkZWxQbGFpbkVhc3QsIEtpcmlzYU1lYWRvdywgVW5kZXJncm91bmRDaGFubmVsfSA9IHJvbS5sb2NhdGlvbnM7XG4gIGZvciAoY29uc3QgbG9jYXRpb24gb2YgW0NvcmRlbFBsYWluRWFzdCwgS2lyaXNhTWVhZG93LCBVbmRlcmdyb3VuZENoYW5uZWxdKSB7XG4gICAgZm9yIChjb25zdCBzcGF3biBvZiBsb2NhdGlvbi5zcGF3bnMpIHtcbiAgICAgIC8vIHNldCB0aGUgbmV3IFwiaW52aXNpYmxlXCIgZmxhZyBvbiB0aGUgY2hlc3QuXG4gICAgICBpZiAoc3Bhd24uaXNDaGVzdCgpKSBzcGF3bi5kYXRhWzJdIHw9IDB4MjA7XG4gICAgfVxuICB9XG59XG5cbi8vIEFkZCB0aGUgc3RhdHVlIG9mIG9ueXggYW5kIHBvc3NpYmx5IHRoZSB0ZWxlcG9ydCBibG9jayB0cmlnZ2VyIHRvIENvcmRlbCBXZXN0XG5mdW5jdGlvbiBhZGRDb3JkZWxXZXN0VHJpZ2dlcnMocm9tOiBSb20sIGZsYWdzOiBGbGFnU2V0KSB7XG4gIGNvbnN0IHtDb3JkZWxQbGFpbkVhc3QsIENvcmRlbFBsYWluV2VzdH0gPSByb20ubG9jYXRpb25zO1xuICBmb3IgKGNvbnN0IHNwYXduIG9mIENvcmRlbFBsYWluRWFzdC5zcGF3bnMpIHtcbiAgICBpZiAoc3Bhd24uaXNDaGVzdCgpIHx8IChmbGFncy5kaXNhYmxlVGVsZXBvcnRTa2lwKCkgJiYgc3Bhd24uaXNUcmlnZ2VyKCkpKSB7XG4gICAgICAvLyBDb3B5IGlmICgxKSBpdCdzIHRoZSBjaGVzdCwgb3IgKDIpIHdlJ3JlIGRpc2FibGluZyB0ZWxlcG9ydCBza2lwXG4gICAgICBDb3JkZWxQbGFpbldlc3Quc3Bhd25zLnB1c2goc3Bhd24uY2xvbmUoKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpeFJhYmJpdFNraXAocm9tOiBSb20pOiB2b2lkIHtcbiAgZm9yIChjb25zdCBzcGF3biBvZiByb20ubG9jYXRpb25zLk10U2FicmVOb3J0aF9NYWluLnNwYXducykge1xuICAgIGlmIChzcGF3bi5pc1RyaWdnZXIoKSAmJiBzcGF3bi5pZCA9PT0gMHg4Nikge1xuICAgICAgaWYgKHNwYXduLnggPT09IDB4NzQwKSB7XG4gICAgICAgIHNwYXduLnggKz0gMTY7XG4gICAgICAgIHNwYXduLnkgKz0gMTY7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpeEZsaWdodFN0YXR1ZVNraXAocm9tOiBSb20pOiB2b2lkIHtcbiAgLy8gU3dpdGNoIHRvIGEgd2lkZXIgaGl0Ym94IHRoYXQgcHJldmVudHMgc25lYWtpbmcgYXJvdW5kIHRoZSBlZGdlLlxuICAvLyBPcHRpb25zOlxuICAvLyAgICQxNyBpcyByaWRpY3Vsb3VzbHkgd2lkZSwgYnV0IGFjdHVhbGx5IGEgbGl0dGxlIHNob3J0ZXIuXG4gIC8vICAgICAgIE1haW4gZG93bnNpZGUgaXMgdGhhdCB0aGUgdmVydGljYWwgYWxpZ25tZW50IGlzIGRpZmZlcmVudCxcbiAgLy8gICAgICAgc28gaXQgaGl0cyB3aGVuIHBsYXllciBpcyBiZWxvdyBhbmQgZG9lc24ndCBoaXQgcmlnaHQgYWJvdmUuXG4gIC8vICAgJDBlIGlzIG9ubHkgc2xpZ2h0bHkgd2lkZXIsIGJ1dCB0YWxsZXIuICBUaGlzIGNhdXNlcyB0aGUgYmVhbVxuICAvLyAgICAgICB0byBoaXQgc2V2ZXJhbCBwaXhlbHMgYXdheSBmcm9tIGFuIGFjdHVhbCB2aXN1YWwgY29sbGlzaW9uLlxuICAvLyAgICQwNiBpcyB1bnVzZWQsIHNvIHdlIGNhbiByZXB1cnBvc2UgaXQuICBXZSBhZGQgNiBob3Jpem9udGFsXG4gIC8vICAgICAgIHBpeGVscyBhbmQgMiB2ZXJ0aWNhbCBwaXhlbHMgdG8gZWFjaCBzaWRlIGZyb20gdGhlIG9yaWdpbmFsXG4gIC8vICAgICAgIGhpdGJveCAxLCB3aGljaCBzZWVtcyB0b1xuICAvLyAgICAgICBiZSB0aGUgbWluaW11bVxuICBjb25zdCBvbGRIaXRib3ggPSByb20uaGl0Ym94ZXNbcm9tLm9iamVjdHMuZ3VhcmRpYW5TdGF0dWVNaXNzaWxlLmhpdGJveF07XG4gIGNvbnN0IG5ld0hpdGJveCA9IHJvbS5oaXRib3hlc1s2XTtcbiAgcm9tLm9iamVjdHMuZ3VhcmRpYW5TdGF0dWVNaXNzaWxlLmhpdGJveCA9IG5ld0hpdGJveC5pZDtcbiAgbmV3SGl0Ym94LngwID0gb2xkSGl0Ym94LngwIC0gNjtcbiAgbmV3SGl0Ym94LncgID0gb2xkSGl0Ym94LncgICsgMTI7XG4gIG5ld0hpdGJveC55MCA9IG9sZEhpdGJveC55MCAtIDI7XG4gIG5ld0hpdGJveC5oICA9IG9sZEhpdGJveC5oICArIDQ7XG59XG5cbmZ1bmN0aW9uIHBhdGNoVG9vTWFueUl0ZW1zTWVzc2FnZShyb206IFJvbSkge1xuICByb20ubWVzc2FnZXMucGFydHNbMHgyMF1bMHgwZl0udGV4dCArPSAnXFxuSXRlbTogWzpJVEVNOl0nO1xufVxuXG5mdW5jdGlvbiBhZGRab21iaWVXYXJwKHJvbTogUm9tKSB7XG4gIGNvbnN0IHtcbiAgICBmbGFnczoge1dhcnBab21iaWV9LFxuICAgIGxvY2F0aW9uczoge1pvbWJpZVRvd259LFxuICB9ID0gcm9tO1xuICAvLyBNYWtlIHNwYWNlIGZvciB0aGUgbmV3IGZsYWcgYmV0d2VlbiBKb2VsIGFuZCBTd2FuXG4gIHJvbS5mbGFncy5pbnNlcnRab21iaWVXYXJwRmxhZygpO1xuICAvLyBVcGRhdGUgdGhlIG1lbnVcbiAgY29uc3QgbWVzc2FnZSA9IHJvbS5tZXNzYWdlcy5wYXJ0c1sweDIxXVswXTtcbiAgbWVzc2FnZS50ZXh0ID0gW1xuICAgICcgezFhOkxlYWZ9ICAgICAgezE2OkJyeW5tYWVyfSB7MWQ6T2FrfSAnLFxuICAgICd7MGM6TmFkYXJlfVxcJ3MgIHsxZTpQb3J0b2F9ICAgezE0OkFtYXpvbmVzfSAnLFxuICAgICd7MTk6Sm9lbH0gICAgICBab21iaWUgICB7MjA6U3dhbn0gJyxcbiAgICAnezIzOlNoeXJvbn0gICAgezE4OkdvYX0gICAgICB7MjE6U2FoYXJhfScsXG4gIF0uam9pbignXFxuJyk7XG4gIC8vIEFkZCBhIHRyaWdnZXIgdG8gdGhlIGVudHJhbmNlIC0gdGhlcmUncyBhbHJlYWR5IGEgc3Bhd24gZm9yIDhhXG4gIC8vIGJ1dCB3ZSBjYW4ndCByZXVzZSB0aGF0IHNpbmNlIGl0J3MgdGhlIHNhbWUgYXMgdGhlIG9uZSBvdXRzaWRlXG4gIC8vIHRoZSBtYWluIEVTSSBlbnRyYW5jZTsgc28gcmV1c2UgYSBkaWZmZXJlbnQgb25lLlxuICBjb25zdCB0cmlnZ2VyID0gcm9tLm5leHRGcmVlVHJpZ2dlcigpO1xuICB0cmlnZ2VyLnVzZWQgPSB0cnVlO1xuICB0cmlnZ2VyLmNvbmRpdGlvbnMgPSBbXTtcbiAgdHJpZ2dlci5tZXNzYWdlID0gTWVzc2FnZUlkLm9mKHt9KTtcbiAgdHJpZ2dlci5mbGFncyA9IFtXYXJwWm9tYmllLmlkXTsgLy8gbmV3IHdhcnAgcG9pbnQgZmxhZ1xuICAvLyBBY3R1YWxseSByZXBsYWNlIHRoZSB0cmlnZ2VyLlxuICBmb3IgKGNvbnN0IHNwYXduIG9mIFpvbWJpZVRvd24uc3Bhd25zKSB7XG4gICAgaWYgKHNwYXduLmlzVHJpZ2dlcigpICYmIHNwYXduLmlkID09PSAweDhhKSB7XG4gICAgICBzcGF3bi5pZCA9IHRyaWdnZXIuaWQ7XG4gICAgfVxuICB9XG4gIC8vIEluc2VydCBpbnRvIHRoZSB3YXJwIHRhYmxlLlxuICByb20udG93bldhcnAubG9jYXRpb25zLnNwbGljZSg3LCAwLCBab21iaWVUb3duLmlkKTtcbiAgaWYgKHJvbS50b3duV2FycC5sb2NhdGlvbnMucG9wKCkgIT09IDB4ZmYpIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCcpO1xuICAvLyBBU00gZml4ZXMgc2hvdWxkIGhhdmUgaGFwcGVuZWQgaW4gcHJlc2h1ZmZsZS5zXG59XG5cbmZ1bmN0aW9uIGV2aWxTcGlyaXRJc2xhbmRSZXF1aXJlc0RvbHBoaW4ocm9tOiBSb20pIHtcbiAgcm9tLnRyaWdnZXIoMHg4YSkuY29uZGl0aW9ucyA9IFt+cm9tLmZsYWdzLkN1cnJlbnRseVJpZGluZ0RvbHBoaW4uaWRdO1xuICByb20ubWVzc2FnZXMucGFydHNbMHgxZF1bMHgxMF0udGV4dCA9IGBUaGUgY2F2ZSBlbnRyYW5jZSBhcHBlYXJzXG50byBiZSB1bmRlcndhdGVyLiBZb3UnbGxcbm5lZWQgdG8gc3dpbS5gO1xufVxuXG5mdW5jdGlvbiBsZWFmRWxkZXJJblNhYnJlSGVhbHMocm9tOiBSb20pOiB2b2lkIHtcbiAgY29uc3QgbGVhZkVsZGVyID0gcm9tLm5wY3NbMHgwZF07XG4gIGNvbnN0IHN1bW1pdERpYWxvZyA9IGxlYWZFbGRlci5sb2NhbERpYWxvZ3MuZ2V0KDB4MzUpIVswXTtcbiAgc3VtbWl0RGlhbG9nLm1lc3NhZ2UuYWN0aW9uID0gMHgxNzsgLy8gaGVhbCBhbmQgZGlzYXBwZWFyLlxufVxuXG4vLyBQcmV2ZW50IFJhZ2Ugc2tpcCBieSBhZGRpbmcgdHJlZXMgb24gZWl0aGVyIHNpZGUgb2YgZW50cmFuY2UuXG4vLyBUT0RPIC0gbWFrZSB0aGlzIG9wdGlvbmFsPyBhY2NvdW50IGZvciBpdCBpbiBsb2dpYz9cbmZ1bmN0aW9uIHBhdGNoTGltZVRyZWVMYWtlKHJvbTogUm9tKTogdm9pZCB7XG4gIHJvbS5tZXRhdGlsZXNldHMubGltZS5nZXRUaWxlKDB4N2MpLnNldEVmZmVjdHMoNik7XG4gIHJvbS5tZXRhdGlsZXNldHMubGltZS5nZXRUaWxlKDB4N2YpLnNldEVmZmVjdHMoNik7XG4gIHJvbS5tZXRhdGlsZXNldHMubGltZS5nZXRUaWxlKDB4N2IpLnNldFRpbGVzKFsweDdmLCAweDdmLCAweDdmLCAweDdmXSlcbiAgICAgIC5zZXRBdHRycygwKS5zZXRFZmZlY3RzKDYpOyAvLy5yZXBsYWNlSW4ocm9tLm1ldGFzY3JlZW5zLmxpbWVUcmVlTGFrZSk7XG5cblxuICByb20uc2NyZWVuc1sweDc0XS5zZXQyZCgweDkwLCBbXG4gICAgWzB4N2IsIDB4N2IsIDB4N2IsIDB4N2IsIDB4N2IsIDB4N2IsIDB4N2IsIG51bGwsIG51bGwsXG4gICAgIDB4N2IsIDB4N2IsIDB4N2IsIDB4N2IsIDB4N2IsIDB4N2IsIDB4N2JdLFxuICAgIFsweDdiLCAweDdiLCAweDdiLCAweDdiLCAweDdiLCAweDdiLCAweDdiLCBudWxsLCBudWxsLFxuICAgICAweDdiLCAweDdiLCAweDdiLCAweDdiLCAweDdiLCAweDdiLCAweDdiXSxcbiAgXG5cblxuICAvLyByb20uc2NyZWVuc1sweDc0XS5zZXQyZCgweDkwLCBbXG4gIC8vICAgWzB4N2MsIDB4N2YsIDB4N2MsIDB4N2YsIDB4N2MsIDB4N2YsIDB4N2MsIDB4N2QsIDB4N2UsXG4gIC8vICAgIDB4N2MsIDB4N2YsIDB4N2MsIDB4N2YsIDB4N2MsIDB4N2YsIDB4N2NdLFxuICAvLyAgIFsweDMwLCAweDMwLCAweDMwLCAweDMwLCAweDMwLCAweDMwLCAweDMwLCBudWxsLCBudWxsLFxuICAvLyAgICAweDMwLCAweDMwLCAweDMwLCAweDMwLCAweDMwLCAweDMwLCAweDMwXSxcbiAgLy8gICBbMHgzMCwgMHgzMCwgMHgzMCwgMHgzMCwgMHgzMCwgMHgzMCwgMHgzMCwgbnVsbCwgbnVsbCxcbiAgLy8gICAgMHgzMCwgMHgzMCwgMHgzMCwgMHgzMCwgMHgzMCwgMHgzMCwgMHgzMF0sXG5cblxuXG4gICAgLy8gRGlmZmVyZW50IG9wdGlvbnMgdG8gZmlsbCBpbiB0aGUgc3BhY2VzLi4uXG4gICAgLy8gWzB4NzMsIDB4NzMsIDB4NzMsIDB4NzMsIDB4NzMsIDB4NzMsIDB4NzMsIG51bGwsIG51bGwsXG4gICAgLy8gIDB4NzMsIDB4NzMsIDB4NzMsIDB4NzMsIDB4NzMsIDB4NzMsIDB4NzNdLFxuICAgIC8vIFsweDY1LCAweDY1LCAweDY1LCAweDY1LCAweDY1LCAweDY1LCAweDY1LCBudWxsLCBudWxsLFxuICAgIC8vICAweDY1LCAweDY1LCAweDY1LCAweDY1LCAweDY1LCAweDY1LCAweDY1XSxcbiAgICAvLyBbMHg2NywgMHg2NywgMHg2NywgMHg2NywgMHg2NywgMHg2NywgMHg2NywgbnVsbCwgbnVsbCxcbiAgICAvLyAgMHg2NywgMHg2NywgMHg2NywgMHg2NywgMHg2NywgMHg2NywgMHg2N10sXG4gICAgLy8gWzB4MzAsIDB4MzAsIDB4MzAsIDB4MzAsIDB4MzAsIDB4MzAsIDB4MzAsIG51bGwsIG51bGwsXG4gICAgLy8gIDB4MzAsIDB4MzAsIDB4MzAsIDB4MzAsIDB4MzAsIDB4MzAsIDB4MzBdLFxuICAgIC8vIFsweDdmLCAweDdjLCAweDdmLCAweDdjLCAweDdmLCAweDdjLCAweDdmLCBudWxsLCBudWxsLFxuICAgIC8vICAweDdmLCAweDdjLCAweDdmLCAweDdjLCAweDdmLCAweDdjLCAweDdmXSxcbiAgXSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnROcGNEZXNwYXducyhyb206IFJvbSwgb3B0czogRmxhZ1NldCk6IHZvaWQge1xuICBmdW5jdGlvbiByZW1vdmU8VD4oYXJyOiBUW10sIGVsZW06IFQpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IGFyci5pbmRleE9mKGVsZW0pO1xuICAgIGlmIChpbmRleCA8IDApIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgZWxlbWVudCAke2VsZW19IGluICR7YXJyfWApO1xuICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZUlmPFQ+KGFycjogVFtdLCBwcmVkOiAoZWxlbTogVCkgPT4gYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyLmZpbmRJbmRleChwcmVkKTtcbiAgICBpZiAoaW5kZXggPCAwKSB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIGVsZW1lbnQgaW4gJHthcnJ9YCk7XG4gICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICAvLyBmdW5jdGlvbiBkaWFsb2coaWQ6IG51bWJlciwgbG9jOiBudW1iZXIgPSAtMSk6IExvY2FsRGlhbG9nW10ge1xuICAvLyAgIGNvbnN0IHJlc3VsdCA9IHJvbS5ucGNzW2lkXS5sb2NhbERpYWxvZ3MuZ2V0KGxvYyk7XG4gIC8vICAgaWYgKCFyZXN1bHQpIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBkaWFsb2cgJCR7aGV4KGlkKX0gYXQgJCR7aGV4KGxvYyl9YCk7XG4gIC8vICAgcmV0dXJuIHJlc3VsdDtcbiAgLy8gfVxuICAvLyBmdW5jdGlvbiBzcGF3bnMoaWQ6IG51bWJlciwgbG9jOiBudW1iZXIpOiBudW1iZXJbXSB7XG4gIC8vICAgY29uc3QgcmVzdWx0ID0gcm9tLm5wY3NbaWRdLnNwYXduQ29uZGl0aW9ucy5nZXQobG9jKTtcbiAgLy8gICBpZiAoIXJlc3VsdCkgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIHNwYXduIGNvbmRpdGlvbiAkJHtoZXgoaWQpfSBhdCAkJHtoZXgobG9jKX1gKTtcbiAgLy8gICByZXR1cm4gcmVzdWx0O1xuICAvLyB9XG5cbiAgLy8gTGluayBzb21lIHJlZHVuZGFudCBOUENzOiBLZW5zdSAoN2UsIDc0KSBhbmQgQWthaGFuYSAoODgsIDE2KVxuXG4gIGNvbnN0IHtcbiAgICBsb2NhdGlvbnM6IHtcbiAgICAgIEJvYXRIb3VzZSwgQnJ5bm1hZXIsXG4gICAgICBDcnlwdF9EcmF5Z29uMixcbiAgICAgIEpvZWxfU2hlZCxcbiAgICAgIExlYWZfRWxkZXJIb3VzZSxcbiAgICAgIE10U2FicmVOb3J0aF9TdW1taXRDYXZlLCBNdFNhYnJlV2VzdF9VcHBlcixcbiAgICAgIFBvcnRvYVBhbGFjZV9UaHJvbmVSb29tLCBQb3J0b2FfUGFsYWNlRW50cmFuY2UsXG4gICAgICBQb3J0b2FfQXNpbmFSb29tLCBQb3J0b2FfRm9ydHVuZVRlbGxlcixcbiAgICAgIFNoeXJvbl9UZW1wbGUsIFN0b21Ib3VzZSwgU3dhbl9EYW5jZUhhbGwsIFN3YW5fVGF2ZXJuLFxuICAgICAgV2luZG1pbGxDYXZlLCBXYXRlcmZhbGxDYXZlNCwgV2F0ZXJmYWxsVmFsbGV5Tm9ydGgsXG4gICAgICBaZWJ1Q2F2ZSwgWm9tYmllVG93bl9Ib3VzZUJhc2VtZW50LFxuICAgIH0sXG4gICAgaXRlbXM6IHtcbiAgICAgIEdsb3dpbmdMYW1wLCBLZXlUb1ByaXNvbiwgTG92ZVBlbmRhbnQsIFN0YXR1ZU9mT255eCxcbiAgICB9LFxuICAgIG5wY3M6IHtcbiAgICAgIEFrYWhhbmEgLyogMTYgKi8sIEFrYWhhbmFJbkJyeW5tYWVyLCAvKiA4MiAqLyBBc2luYSAvKiA2MiAqLyxcbiAgICAgIEF6dGVjYUluU2h5cm9uIC8qIDZlICovLFxuICAgICAgQ2xhcmsgLyogNDQgKi8sIERyYXlnb24gLyogY2IgKi8sIEZvcnR1bmVUZWxsZXIgLyogMzkgKi8sXG4gICAgICBLZW5zdSAvKiA3ZSAqLywgS2Vuc3VJbkNhYmluIC8qIDY4ICovLCBLZW5zdUluU3dhbiAvKiA3NCAqLyxcbiAgICAgIExlYWZFbGRlciAvKiAwZCAqLywgTGVhZlJhYmJpdCAvKiAxMyAqLyxcbiAgICAgIE9ha0NoaWxkIC8qIDFmICovLCBPYWtFbGRlciAvKiAxZCAqLywgT2FrTW90aGVyIC8qIDFlICovLFxuICAgICAgUG9ydG9hUGFsYWNlRnJvbnRHdWFyZCAvKiAzNCAqLywgUG9ydG9hUXVlZW4gLyogMzggKi8sXG4gICAgICBQb3J0b2FUaHJvbmVSb29tQmFja0Rvb3JHdWFyZCAvKiAzMyAqLywgUmFnZSAvKiBjMyAqLyxcbiAgICAgIFN0b20gLyogNjAgKi8sIFN0b25lZEFrYWhhbmEgLyogODggKi8sXG4gICAgICBUb3JuZWwgLyogNWYgKi8sIFdpbmRtaWxsR3VhcmQgLyogMTQgKi8sIFplYnUgLyogNWUgKi8sXG4gICAgfSxcbiAgICBmbGFncyxcbiAgfSA9IHJvbTtcblxuICBLZW5zdS5sb2NhbERpYWxvZ3MuZGVsZXRlKFN3YW5fVGF2ZXJuLmlkKTsgLy8gdW51c2VkIGRpYWxvZ1xuICBLZW5zdUluU3dhbi5saW5rKEtlbnN1LmlkKTtcbiAgS2Vuc3VJblN3YW4udXNlZCA9IHRydWU7XG4gIEtlbnN1SW5Td2FuLmRhdGEgPSBbLi4uS2Vuc3UuZGF0YV0gYXMgYW55O1xuICBLZW5zdS5kYXRhWzBdID0gR2xvd2luZ0xhbXAuaWQ7XG4gIFN3YW5fRGFuY2VIYWxsLnNwYXducy5maW5kKHMgPT4gcy5pc05wYygpICYmIHMuaWQgPT09IEtlbnN1LmlkKSEuaWQgPVxuICAgICAgS2Vuc3VJblN3YW4uaWQ7XG4gIExvdmVQZW5kYW50Lml0ZW1Vc2VEYXRhWzBdLndhbnQgPSAweDEwMCB8IEtlbnN1SW5Td2FuLmlkO1xuXG4gIC8vIGRpYWxvZyBpcyBzaGFyZWQgYmV0d2VlbiA4OCBhbmQgMTYuXG4gIFN0b25lZEFrYWhhbmEubGlua0RpYWxvZyhBa2FoYW5hLmlkKTtcblxuICAvLyBNYWtlIGEgbmV3IE5QQyBmb3IgQWthaGFuYSBpbiBCcnlubWFlcjsgb3RoZXJzIHdvbid0IGFjY2VwdCB0aGUgU3RhdHVlIG9mIE9ueXguXG4gIC8vIExpbmtpbmcgc3Bhd24gY29uZGl0aW9ucyBhbmQgZGlhbG9ncyBpcyBzdWZmaWNpZW50LCBzaW5jZSB0aGUgYWN0dWFsIE5QQyBJRFxuICAvLyAoMTYgb3IgODIpIGlzIHdoYXQgbWF0dGVycyBmb3IgdGhlIHRyYWRlLWluXG4gIEFrYWhhbmFJbkJyeW5tYWVyLnVzZWQgPSB0cnVlO1xuICBBa2FoYW5hSW5CcnlubWFlci5saW5rKEFrYWhhbmEuaWQpO1xuICBBa2FoYW5hSW5CcnlubWFlci5kYXRhID0gWy4uLkFrYWhhbmEuZGF0YV0gYXMgYW55OyAvLyBlbnN1cmUgZ2l2ZSBpdGVtXG4gIEJyeW5tYWVyLnNwYXducy5maW5kKHMgPT4gcy5pc05wYygpICYmIHMuaWQgPT09IEFrYWhhbmEuaWQpIS5pZCA9XG4gICAgICBBa2FoYW5hSW5CcnlubWFlci5pZDtcbiAgU3RhdHVlT2ZPbnl4Lml0ZW1Vc2VEYXRhWzBdLndhbnQgPSAweDEwMCB8IEFrYWhhbmFJbkJyeW5tYWVyLmlkO1xuXG4gIC8vIExlYWYgZWxkZXIgaW4gaG91c2UgKCQwZCBAICRjMCkgfiBzd29yZCBvZiB3aW5kIHJlZHVuZGFudCBmbGFnXG4gIC8vIGRpYWxvZygweDBkLCAweGMwKVsyXS5mbGFncyA9IFtdO1xuICAvL3JvbS5pdGVtR2V0c1sweDAwXS5mbGFncyA9IFtdOyAvLyBjbGVhciByZWR1bmRhbnQgZmxhZ1xuXG4gIC8vIExlYWQgZWxkZXIgbmVlZHMgdG8gZ2l2ZSBpdGVtIGV2ZW4gaWYgd2luZG1pbGwga2V5IHdhcyB1c2VkLlxuICAvLyBUaGlzIGlzIG1vc3RseSBpcnJlbGV2YW50IHdpdGggdmFuaWxsYSBwbGFjZW1lbnQsIGJ1dCBpZiB0aGUgZWxkZXIgaXMgbm90XG4gIC8vIGltbWVkaWF0ZWx5IGF2YWlsYWJsZSwgaXQgY2FuIGJlY29tZSBhIHByb2JsZW0uXG4gIExlYWZFbGRlci5kaWFsb2coTGVhZl9FbGRlckhvdXNlKVxuICAgICAgLnNwbGljZSgwLCAwLCAuLi5MZWFmRWxkZXIuZGlhbG9nKExlYWZfRWxkZXJIb3VzZSkuc3BsaWNlKDIsIDEpKTtcblxuICAvLyBMZWFmIHJhYmJpdCAoJDEzKSBub3JtYWxseSBzdG9wcyBzZXR0aW5nIGl0cyBmbGFnIGFmdGVyIHByaXNvbiBkb29yIG9wZW5lZCxcbiAgLy8gYnV0IHRoYXQgZG9lc24ndCBuZWNlc3NhcmlseSBvcGVuIG10IHNhYnJlLiAgSW5zdGVhZCAoYSkgdHJpZ2dlciBvbiAwNDdcbiAgLy8gKHNldCBieSA4ZCB1cG9uIGVudGVyaW5nIGVsZGVyJ3MgY2VsbCkuICBBbHNvIG1ha2Ugc3VyZSB0aGF0IHRoYXQgcGF0aCBhbHNvXG4gIC8vIHByb3ZpZGVzIHRoZSBuZWVkZWQgZmxhZyB0byBnZXQgaW50byBtdCBzYWJyZS5cbiAgTGVhZlJhYmJpdC5kaWFsb2coKVsyXS5jb25kaXRpb24gPSBmbGFncy5SZXNjdWVkTGVhZkVsZGVyLmlkO1xuICBMZWFmUmFiYml0LmRpYWxvZygpWzJdLmZsYWdzLnB1c2goZmxhZ3MuVGFsa2VkVG9MZWFmUmFiYml0LmlkKTtcbiAgTGVhZlJhYmJpdC5kaWFsb2coKVszXS5mbGFncy5wdXNoKGZsYWdzLlRhbGtlZFRvTGVhZlJhYmJpdC5pZCk7XG5cbiAgLy8gV2luZG1pbGwgZ3VhcmQgKCQxNCBAICQwZSkgc2hvdWxkbid0IGRlc3Bhd24gYWZ0ZXIgYWJkdWN0aW9uICgwMzgpLFxuICAvLyBidXQgaW5zdGVhZCBhZnRlciBnaXZpbmcgdGhlIGl0ZW0gKDA4OClcbiAgV2luZG1pbGxHdWFyZC5zcGF3bnMoV2luZG1pbGxDYXZlKVsxXSA9XG4gICAgICB+ZmxhZ3MuV2luZG1pbGxHdWFyZEFsYXJtRmx1dGVUcmFkZWluLmlkO1xuICAvL2RpYWxvZygweDE0LCAweDBlKVswXS5mbGFncyA9IFtdOyAvLyByZW1vdmUgcmVkdW5kYW50IGZsYWcgfiB3aW5kbWlsbCBrZXlcblxuICAvLyBBa2FoYW5hICgkMTYgLyA4OCkgfiBzaGllbGQgcmluZyByZWR1bmRhbnQgZmxhZ1xuICAvL2RpYWxvZygweDE2LCAweDU3KVswXS5mbGFncyA9IFtdO1xuICAvLyBEb24ndCBkaXNhcHBlYXIgYWZ0ZXIgZ2V0dGluZyBiYXJyaWVyIChub3RlIDg4J3Mgc3Bhd25zICpub3QqIGxpbmtlZCB0byAxNilcbiAgcmVtb3ZlKEFrYWhhbmEuc3Bhd25zKFdhdGVyZmFsbENhdmU0KSwgfmZsYWdzLkJlaGluZFdoaXJscG9vbC5pZCk7XG4gIHJlbW92ZShTdG9uZWRBa2FoYW5hLnNwYXducyhXYXRlcmZhbGxDYXZlNCksIH5mbGFncy5CZWhpbmRXaGlybHBvb2wuaWQpO1xuXG4gIGZ1bmN0aW9uIHJldmVyc2VEaWFsb2coZHM6IExvY2FsRGlhbG9nW10pOiB2b2lkIHtcbiAgICBkcy5yZXZlcnNlKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbmV4dCA9IGRzW2kgKyAxXTtcbiAgICAgIGRzW2ldLmNvbmRpdGlvbiA9IG5leHQgPyB+bmV4dC5jb25kaXRpb24gOiB+MDtcbiAgICB9XG4gIH07XG5cbiAgLy8gT2FrIGVsZGVyICgkMWQpIH4gc3dvcmQgb2YgZmlyZSByZWR1bmRhbnQgZmxhZ1xuICAvL29ha0VsZGVyRGlhbG9nWzRdLmZsYWdzID0gW107XG4gIC8vIE1ha2Ugc3VyZSB0aGF0IHdlIHRyeSB0byBnaXZlIHRoZSBpdGVtIGZyb20gKmFsbCogcG9zdC1pbnNlY3QgZGlhbG9nc1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGNvbnN0IGRsZyA9IE9ha0VsZGVyLmRpYWxvZygpW2ldO1xuICAgIGlmIChkbGcuY29uZGl0aW9uICE9PSByb20uZmxhZ3MuT2FrRWxkZXIuaWQpIGRsZy5tZXNzYWdlLmFjdGlvbiA9IDB4MDM7XG4gIH1cblxuICAvLyBPYWsgbW90aGVyICgkMWUpIH4gaW5zZWN0IGZsdXRlIHJlZHVuZGFudCBmbGFnXG4gIC8vIFRPRE8gLSByZWFycmFuZ2UgdGhlc2UgZmxhZ3MgYSBiaXQgKG1heWJlIH4wNDUsIH4wYTAgfjA0MSAtIHNvIHJldmVyc2UpXG4gIC8vICAgICAgLSB3aWxsIG5lZWQgdG8gY2hhbmdlIGJhbGxPZkZpcmUgYW5kIGluc2VjdEZsdXRlIGluIGRlcGdyYXBoXG4gICgoKSA9PiB7XG4gICAgY29uc3QgW2tpbGxlZEluc2VjdCwgZ290SXRlbSwgZ2V0SXRlbSwgZmluZENoaWxkXSA9IE9ha01vdGhlci5kaWFsb2coKTtcbiAgICBmaW5kQ2hpbGQuY29uZGl0aW9uID0gfmZsYWdzLlJlc2N1ZWRDaGlsZC5pZDtcbiAgICAvL2dldEl0ZW0uY29uZGl0aW9uID0gfjB4MjI3O1xuICAgIC8vZ2V0SXRlbS5mbGFncyA9IFtdO1xuICAgIGdvdEl0ZW0uY29uZGl0aW9uID0gfjA7IC8vIGFsd2F5cyB0cnVlXG4gICAgT2FrTW90aGVyLmRpYWxvZygpLnNwbGljZSgwLCA0LCBmaW5kQ2hpbGQsIGdldEl0ZW0sIGtpbGxlZEluc2VjdCwgZ290SXRlbSk7XG4gIH0pKCk7XG4gIC8vLyBvYWtNb3RoZXJEaWFsb2dbMl0uZmxhZ3MgPSBbXTtcbiAgLy8gLy8gRW5zdXJlIHdlIGFsd2F5cyBnaXZlIGl0ZW0gYWZ0ZXIgaW5zZWN0LlxuICAvLyBvYWtNb3RoZXJEaWFsb2dbMF0ubWVzc2FnZS5hY3Rpb24gPSAweDAzO1xuICAvLyBvYWtNb3RoZXJEaWFsb2dbMV0ubWVzc2FnZS5hY3Rpb24gPSAweDAzO1xuICAvLyByZXZlcnNlRGlhbG9nKG9ha01vdGhlckRpYWxvZyk7XG5cbiAgLy8gUmV2ZXJzZSB0aGUgb3RoZXIgb2FrIGRpYWxvZ3MsIHRvby5cbiAgZm9yIChjb25zdCBpIG9mIFsweDIwLCAweDIxLCAweDIyLCAweDdjLCAweDdkXSkge1xuICAgIHJldmVyc2VEaWFsb2cocm9tLm5wY3NbaV0uZGlhbG9nKCkpO1xuICB9XG5cbiAgLy8gU3dhcCB0aGUgZmlyc3QgdHdvIG9hayBjaGlsZCBkaWFsb2dzLlxuICBPYWtDaGlsZC5kaWFsb2coKS51bnNoaWZ0KC4uLk9ha0NoaWxkLmRpYWxvZygpLnNwbGljZSgxLCAxKSk7XG5cbiAgLy8gVGhyb25lIHJvb20gYmFjayBkb29yIGd1YXJkICgkMzMgQCAkZGYpIHNob3VsZCBoYXZlIHNhbWUgc3Bhd24gY29uZGl0aW9uIGFzIHF1ZWVuXG4gIC8vICgwMjAgTk9UIHF1ZWVuIG5vdCBpbiB0aHJvbmUgcm9vbSBBTkQgMDFiIE5PVCB2aWV3ZWQgbWVzaWEgcmVjb3JkaW5nKVxuICBQb3J0b2FUaHJvbmVSb29tQmFja0Rvb3JHdWFyZC5zcGF3bkNvbmRpdGlvbnMuc2V0KFxuICAgICAgUG9ydG9hUGFsYWNlX1Rocm9uZVJvb20uaWQsXG4gICAgICBbfmZsYWdzLlF1ZWVuTm90SW5UaHJvbmVSb29tLmlkLCB+ZmxhZ3MuTWVzaWFSZWNvcmRpbmcuaWRdKTtcblxuICAvLyBGcm9udCBwYWxhY2UgZ3VhcmQgKCQzNCkgdmFjYXRpb24gbWVzc2FnZSBrZXlzIG9mZiAwMWIgaW5zdGVhZCBvZiAwMWZcbiAgUG9ydG9hUGFsYWNlRnJvbnRHdWFyZC5kaWFsb2coKVsxXS5jb25kaXRpb24gPSBmbGFncy5NZXNpYVJlY29yZGluZy5pZDtcblxuICAvLyBRdWVlbidzICgkMzgpIGRpYWxvZyBuZWVkcyBxdWl0ZSBhIGJpdCBvZiB3b3JrXG4gIC8vIEdpdmUgaXRlbSAoZmx1dGUgb2YgbGltZSkgZXZlbiBpZiBnb3QgdGhlIHN3b3JkIG9mIHdhdGVyXG4gIFBvcnRvYVF1ZWVuLmRpYWxvZygpWzNdLmNvbmRpdGlvbiA9IGZsYWdzLlN3b3JkT2ZXYXRlci5pZDsgLy8gXCJ5b3UgZm91bmQgc3dvcmRcIlxuICBQb3J0b2FRdWVlbi5kaWFsb2coKVszXS5tZXNzYWdlLmFjdGlvbiA9IDB4MDM7IC8vICA9PiBhY3Rpb24gMyBpdGVtZ2V0XG4gIC8vIEVuc3VyZSB5b3UgY2FuIGFsd2F5cyBtYWtlIHRoZSBxdWVlbiBnbyBhd2F5LlxuICBQb3J0b2FRdWVlbi5kaWFsb2coKVs0XS5mbGFncy5wdXNoKGZsYWdzLlBvcnRvYVF1ZWVuR29pbmdBd2F5LmlkKTtcbiAgLy8gUXVlZW4gc3Bhd24gY29uZGl0aW9uIGRlcGVuZHMgb24gMDFiIChtZXNpYSByZWNvcmRpbmcpIG5vdCAwMWYgKGJhbGwgb2Ygd2F0ZXIpXG4gIC8vIFRoaXMgZW5zdXJlcyB5b3UgaGF2ZSBib3RoIHN3b3JkIGFuZCBiYWxsIHRvIGdldCB0byBoZXIgKD8/PylcbiAgUG9ydG9hUXVlZW4uc3Bhd25zKFBvcnRvYVBhbGFjZV9UaHJvbmVSb29tKVsxXSA9IH5mbGFncy5NZXNpYVJlY29yZGluZy5pZDtcbiAgUG9ydG9hUXVlZW4uc3Bhd25zKFBvcnRvYV9Bc2luYVJvb20pWzBdID0gZmxhZ3MuTWVzaWFSZWNvcmRpbmcuaWQ7XG4gIFBvcnRvYVF1ZWVuLmRpYWxvZygpWzFdLmNvbmRpdGlvbiA9IGZsYWdzLk1lc2lhUmVjb3JkaW5nLmlkOyAvLyByZXZlYWxcblxuICAvLyBGb3J0dW5lIHRlbGxlciAoJDM5KSBzaG91bGQgYWxzbyBub3Qgc3Bhd24gYmFzZWQgb24gbWVzaWEgcmVjb3JkaW5nIHJhdGhlciB0aGFuIG9yYlxuICBGb3J0dW5lVGVsbGVyLnNwYXducyhQb3J0b2FfRm9ydHVuZVRlbGxlcilbMV0gPSB+ZmxhZ3MuTWVzaWFSZWNvcmRpbmcuaWQ7XG5cbiAgLy8gQ2xhcmsgKCQ0NCkgbW92ZXMgYWZ0ZXIgdGFsa2luZyB0byBoaW0gKDA4ZCkgcmF0aGVyIHRoYW4gY2FsbWluZyBzZWEgKDA4ZikuXG4gIC8vIFRPRE8gLSBjaGFuZ2UgMDhkIHRvIHdoYXRldmVyIGFjdHVhbCBpdGVtIGhlIGdpdmVzLCB0aGVuIHJlbW92ZSBib3RoIGZsYWdzXG4gIENsYXJrLnNwYXduQ29uZGl0aW9ucy5zZXQoWm9tYmllVG93bl9Ib3VzZUJhc2VtZW50LmlkLCBbfmZsYWdzLkNsYXJrLmlkXSk7XG4gIENsYXJrLnNwYXduQ29uZGl0aW9ucy5zZXQoSm9lbF9TaGVkLmlkLCBbZmxhZ3MuQ2xhcmsuaWRdKTtcbiAgLy9kaWFsb2coMHg0NCwgMHhlOSlbMV0uZmxhZ3MucG9wKCk7IC8vIHJlbW92ZSByZWR1bmRhbnQgaXRlbWdldCBmbGFnXG5cbiAgLy8gQnJva2FoYW5hICgkNTQpIH4gd2FycmlvciByaW5nIHJlZHVuZGFudCBmbGFnXG4gIC8vZGlhbG9nKDB4NTQpWzJdLmZsYWdzID0gW107XG5cbiAgLy8gRGVvICgkNWEpIH4gcGVuZGFudCByZWR1bmRhbnQgZmxhZ1xuICAvL2RpYWxvZygweDVhKVsxXS5mbGFncyA9IFtdO1xuXG4gIC8vIFplYnUgKCQ1ZSkgY2F2ZSBkaWFsb2cgKEAgJDEwKVxuICAvLyBUT0RPIC0gZGlhbG9ncygweDVlLCAweDEwKS5yZWFycmFuZ2UofjB4MDNhLCAweDAwZCwgMHgwMzgsIDB4MDM5LCAweDAwYSwgfjB4MDAwKTtcbiAgWmVidS5sb2NhbERpYWxvZ3Muc2V0KFplYnVDYXZlLmlkLCBbXG4gICAgTG9jYWxEaWFsb2cub2YofmZsYWdzLlRhbGtlZFRvWmVidUluQ2F2ZS5pZCxcbiAgICAgICAgICAgICAgICAgICBbMHgwMCwgMHgxYV0sIFtmbGFncy5UYWxrZWRUb1plYnVJbkNhdmUuaWRdKSxcbiAgICBMb2NhbERpYWxvZy5vZihmbGFncy5MZWFmVmlsbGFnZXJzUmVzY3VlZC5pZCwgWzB4MDAsIDB4MWRdKSxcbiAgICBMb2NhbERpYWxvZy5vZihmbGFncy5MZWFmQWJkdWN0aW9uLmlkLCBbMHgwMCwgMHgxY10pLCAvLyAwMzggbGVhZiBhdHRhY2tlZFxuICAgIExvY2FsRGlhbG9nLm9mKGZsYWdzLlplYnVBdFdpbmRtaWxsLmlkLCBbMHgwMCwgMHgxZF0pLCAvLyAwMzkgbGVhcm5lZCByZWZyZXNoXG4gICAgTG9jYWxEaWFsb2cub2YoZmxhZ3MuVXNlZFdpbmRtaWxsS2V5LmlkLCBbMHgwMCwgMHgxYiwgMHgwM10pLCAvLyA9PiByZWZyZXNoXG4gICAgTG9jYWxEaWFsb2cub2YofjAsIFsweDAwLCAweDFkXSksXG4gIF0pO1xuICAvLyBEb24ndCBkZXNwYXduIG9uIGdldHRpbmcgYmFycmllclxuICByZW1vdmUoWmVidS5zcGF3bnMoWmVidUNhdmUpLCB+ZmxhZ3MuQmVoaW5kV2hpcmxwb29sLmlkKTsgLy8gcmVtb3ZlIDA1MSBOT1QgbGVhcm5lZCBiYXJyaWVyXG5cbiAgLy8gVG9ybmVsICgkNWYpIGluIHNhYnJlIHdlc3QgKCQyMSkgfiB0ZWxlcG9ydCByZWR1bmRhbnQgZmxhZ1xuICAvL2RpYWxvZygweDVmLCAweDIxKVsxXS5mbGFncyA9IFtdO1xuICAvLyBEb24ndCBkZXNwYXduIG9uIGdldHRpbmcgYmFycmllclxuICBUb3JuZWwuc3Bhd25Db25kaXRpb25zLmRlbGV0ZShNdFNhYnJlV2VzdF9VcHBlci5pZCk7IC8vIGFsd2F5cyBzcGF3blxuXG4gIC8vIFN0b20gKCQ2MCk6IGRvbid0IGRlc3Bhd24gb24gZ2V0dGluZyBiYXJyaWVyXG4gIFN0b20uc3Bhd25Db25kaXRpb25zLmRlbGV0ZShTdG9tSG91c2UuaWQpOyAvLyByZW1vdmUgMDUxIE5PVCBsZWFybmVkIGJhcnJpZXJcblxuICAvLyBQcmV2ZW50IGRlc3Bhd24gZnJvbSBiYWNrIHJvb20gYWZ0ZXIgY2FsbWluZyBzZWEgKH4wOGYgb3IgfjI4MylcbiAgcmVtb3ZlKEFzaW5hLnNwYXducyhQb3J0b2FfQXNpbmFSb29tKSwgfmZsYWdzLkNhbG1lZEFuZ3J5U2VhLmlkKTtcblxuICAvLyBBZGQgYW4gZXh0cmEgTlBDIGluIFBvcnRvYSB0aHJvbmUgcm9vbSB0byBnaXZlIEZsdXRlIG9mIExpbWUgaWZcbiAgLy8gdGhlIHF1ZWVuIGlzIG5vdCB0aGVyZS5cbiAgLy8gSSB3YW50ZWQgdG8gbWFrZSB0aGlzIGJlIHRoZSBxdWVlbidzIGxhZHktaW4td2FpdGluZywgYnV0IGl0IGRvZXNuJ3RcbiAgLy8gcmVhbGx5IHdvcmsgd2l0aCB0aGUgcGF0dGVybnMgYXMgdGhleSBhcmUuICBXZSBjb3VsZCBzd2l0Y2ggdGhlIDRhIHRvXG4gIC8vIGluc3RlYWQgYmUgNDkgYW5kIHRoZW4gdGhlIGd1YXJkIGJlY29tZXMgdGhlIGxhZHkgKHdlJ2Qgd2FudCB0byBzd2l0Y2hcbiAgLy8gdG8gdGhlIHBpbmsgcGFsZXR0ZSBhcyB3ZWxsKS4gIEJ1dCB0aGF0IGRvZXNuJ3QgcmVhbGx5IGJ1eSB1cyBtdWNoLlxuICBjb25zdCBndWFyZDIgPSByb20ubnBjc1sweDM0XTtcbiAgZ3VhcmQyLnNwYXduQ29uZGl0aW9ucy5zZXQoUG9ydG9hUGFsYWNlX1Rocm9uZVJvb20uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtmbGFncy5NZXNpYVJlY29yZGluZy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH5mbGFncy5Qb3J0b2FRdWVlbi5pZF0pO1xuICBndWFyZDIubG9jYWxEaWFsb2dzLnNldChQb3J0b2FfUGFsYWNlRW50cmFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGd1YXJkMi5sb2NhbERpYWxvZ3MuZ2V0KC0xKSEpO1xuICBndWFyZDIuZGF0YVswXSA9IHJvbS5pdGVtcy5GbHV0ZU9mTGltZS5pZDtcbiAgY29uc3QgZ3VhcmQyTWVzc2FnZSA9IHJvbS5tZXNzYWdlcy5hbGxvYygpO1xuICBndWFyZDJNZXNzYWdlLnRleHQgPSBcIlRoZSBxdWVlbiBsZWZ0IHRoaXMgZm9yIHlvdS5cIjtcbiAgZ3VhcmQyLmxvY2FsRGlhbG9ncy5zZXQoUG9ydG9hUGFsYWNlX1Rocm9uZVJvb20uaWQsIFtcbiAgICBMb2NhbERpYWxvZy5vZih+ZmxhZ3MuUG9ydG9hUXVlZW4uaWQsIFtndWFyZDJNZXNzYWdlLnBhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VhcmQyTWVzc2FnZS5pZCwgMHgwM10pLFxuICAgIExvY2FsRGlhbG9nLm9mKH4wLCBbMHgwYSwgMHgwZV0pLCAvLyBcIkJlIGNhcmVmdWxcIiAob3IgMTQ6MDQgXCJHb29kIGx1Y2suXCIpXG4gIF0pO1xuICBQb3J0b2FQYWxhY2VfVGhyb25lUm9vbS5zcGF3bnMucHVzaChTcGF3bi5vZih7eXQ6IDMsIHh0OiAxMiwgdHlwZTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm5CYW5rOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGd1YXJkMi5pZH0pKTtcblxuICAvLyBLZW5zdSBpbiBjYWJpbiAoJDY4IEAgJDYxKSBuZWVkcyB0byBiZSBhdmFpbGFibGUgZXZlbiBhZnRlciB2aXNpdGluZyBKb2VsLlxuICAvLyBDaGFuZ2UgaGltIHRvIGp1c3QgZGlzYXBwZWFyIGFmdGVyIHNldHRpbmcgdGhlIHJpZGVhYmxlIGRvbHBoaW4gZmxhZyAoMDliKSxcbiAgLy8gYW5kIHRvIG5vdCBldmVuIHNob3cgdXAgYXQgYWxsIHVubGVzcyB0aGUgZm9nIGxhbXAgd2FzIHJldHVybmVkICgwMjEpLlxuICBLZW5zdUluQ2FiaW4uc3Bhd25Db25kaXRpb25zLnNldChCb2F0SG91c2UuaWQsIFt+ZmxhZ3MuQWJsZVRvUmlkZURvbHBoaW4uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzLlJldHVybmVkRm9nTGFtcC5pZF0pO1xuICBLZW5zdUluQ2FiaW4uZGlhbG9nKClbMF0ubWVzc2FnZS5hY3Rpb24gPSAweDAyOyAvLyBkaXNhcHBlYXJcblxuICAvLyBBenRlY2EgaW4gU2h5cm9uICg2ZSkgc2hvdWxkbid0IHNwYXduIGFmdGVyIG1hc3NhY3JlICgwMjcpXG4gIEF6dGVjYUluU2h5cm9uLnNwYXducyhTaHlyb25fVGVtcGxlKS5wdXNoKH5mbGFncy5TaHlyb25NYXNzYWNyZS5pZCk7XG4gIC8vIEFsc28gdGhlIGRpYWxvZyB0cmlnZ2VyICg4Mikgc2hvdWxkbid0IGhhcHBlblxuICByb20udHJpZ2dlcigweDgyKS5jb25kaXRpb25zLnB1c2gofmZsYWdzLlNoeXJvbk1hc3NhY3JlLmlkKTtcblxuICAvLyBLZW5zdSBpbiBsaWdodGhvdXNlICgkNzQvJDdlIEAgJDYyKSB+IHJlZHVuZGFudCBmbGFnXG4gIC8vZGlhbG9nKDB4NzQsIDB4NjIpWzBdLmZsYWdzID0gW107XG5cbiAgLy8gQXp0ZWNhICgkODMpIGluIHB5cmFtaWQgfiBib3cgb2YgdHJ1dGggcmVkdW5kYW50IGZsYWdcbiAgLy9kaWFsb2coMHg4MylbMF0uY29uZGl0aW9uID0gfjB4MjQwOyAgLy8gMjQwIE5PVCBib3cgb2YgdHJ1dGhcbiAgLy9kaWFsb2coMHg4MylbMF0uZmxhZ3MgPSBbXTtcblxuICAvLyBSYWdlIGJsb2NrcyBvbiBzd29yZCBvZiB3YXRlciwgbm90IHJhbmRvbSBpdGVtIGZyb20gdGhlIGNoZXN0XG4gIFJhZ2UuZGlhbG9nKClbMF0uY29uZGl0aW9uID0gZmxhZ3MuU3dvcmRPZldhdGVyLmlkO1xuXG4gIC8vIFJlbW92ZSB1c2VsZXNzIHNwYXduIGNvbmRpdGlvbiBmcm9tIE1hZG8gMVxuICAvLyByb20ubnBjc1sweGM0XS5zcGF3bkNvbmRpdGlvbnMuZGVsZXRlKDB4ZjIpOyAvLyBhbHdheXMgc3Bhd25cblxuICAvLyBEcmF5Z29uIDIgKCRjYiBAIGxvY2F0aW9uICRhNikgc2hvdWxkIGRlc3Bhd24gYWZ0ZXIgYmVpbmcgZGVmZWF0ZWQuXG4gIERyYXlnb24uc3Bhd25Db25kaXRpb25zLnNldChDcnlwdF9EcmF5Z29uMi5pZCwgW35mbGFncy5EcmF5Z29uMi5pZF0pO1xuXG4gIC8vIEZpeCBaZWJ1IHRvIGdpdmUga2V5IHRvIHN0eHkgZXZlbiBpZiB0aHVuZGVyIHN3b3JkIGlzIGdvdHRlbiAoanVzdCBzd2l0Y2ggdGhlXG4gIC8vIG9yZGVyIG9mIHRoZSBmaXJzdCB0d28pLiAgQWxzbyBkb24ndCBib3RoZXIgc2V0dGluZyAwM2Igc2luY2UgdGhlIG5ldyBJdGVtR2V0XG4gIC8vIGxvZ2ljIG9idmlhdGVzIHRoZSBuZWVkLlxuICBaZWJ1LmRpYWxvZyhTaHlyb25fVGVtcGxlKVxuICAgICAgLnVuc2hpZnQoLi4uWmVidS5kaWFsb2coU2h5cm9uX1RlbXBsZSkuc3BsaWNlKDEsIDEpKTtcbiAgLy8gemVidVNoeXJvblswXS5mbGFncyA9IFtdO1xuXG4gIC8vIFNoeXJvbiBtYXNzYWNyZSAoJDgwKSByZXF1aXJlcyBrZXkgdG8gc3R4eVxuICByb20udHJpZ2dlcigweDgwKS5jb25kaXRpb25zID0gW1xuICAgIH5mbGFncy5TaHlyb25NYXNzYWNyZS5pZCxcbiAgICBmbGFncy5UYWxrZWRUb1plYnVJblNoeXJvbi5pZCxcbiAgICBmbGFncy5Td29yZE9mVGh1bmRlci5pZCxcbiAgXTtcblxuICAvLyBFbnRlciBzaHlyb24gKCQ4MSkgc2hvdWxkIHNldCB3YXJwIG5vIG1hdHRlciB3aGF0XG4gIHJvbS50cmlnZ2VyKDB4ODEpLmNvbmRpdGlvbnMgPSBbXTtcblxuICBpZiAob3B0cy5iYXJyaWVyUmVxdWlyZXNDYWxtU2VhKCkpIHtcbiAgICAvLyBMZWFybiBiYXJyaWVyICgkODQpIHJlcXVpcmVzIGNhbG0gc2VhXG4gICAgcm9tLnRyaWdnZXIoMHg4NCkuY29uZGl0aW9ucy5wdXNoKGZsYWdzLkNhbG1lZEFuZ3J5U2VhLmlkKTtcbiAgICAvLyBUT0RPIC0gY29uc2lkZXIgbm90IHNldHRpbmcgMDUxIGFuZCBjaGFuZ2luZyB0aGUgY29uZGl0aW9uIHRvIG1hdGNoIHRoZSBpdGVtXG4gIH1cbiAgLy9yb20udHJpZ2dlcigweDg0KS5mbGFncyA9IFtdO1xuXG4gIC8vIEFkZCBhbiBleHRyYSBjb25kaXRpb24gdG8gdGhlIExlYWYgYWJkdWN0aW9uIHRyaWdnZXIgKGJlaGluZCB6ZWJ1KS4gIFRoaXMgZW5zdXJlc1xuICAvLyBhbGwgdGhlIGl0ZW1zIGluIExlYWYgcHJvcGVyIChlbGRlciBhbmQgc3R1ZGVudCkgYXJlIGdvdHRlbiBiZWZvcmUgdGhleSBkaXNhcHBlYXIuXG4gIHJvbS50cmlnZ2VyKDB4OGMpLmNvbmRpdGlvbnMucHVzaChmbGFncy5UYWxrZWRUb1plYnVJbkNhdmUuaWQpO1xuXG4gIC8vIE1vcmUgd29yayBvbiBhYmR1Y3Rpb24gdHJpZ2dlcnM6XG4gIC8vIDEuIFJlbW92ZSB0aGUgOGQgdHJpZ2dlciBpbiB0aGUgZnJvbnQgb2YgdGhlIGNlbGwsIHN3YXAgaXQgb3V0XG4gIC8vICAgIGZvciBiMiAobGVhcm4gcGFyYWx5c2lzKS5cbiAgcm9tLnRyaWdnZXIoMHg4ZCkudXNlZCA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IHNwYXduIG9mIE10U2FicmVOb3J0aF9TdW1taXRDYXZlLnNwYXducykge1xuICAgIGlmIChzcGF3bi5pc1RyaWdnZXIoKSAmJiBzcGF3bi5pZCA9PT0gMHg4ZCkgc3Bhd24uaWQgPSAweGIyO1xuICB9XG4gIHJlbW92ZUlmKFdhdGVyZmFsbFZhbGxleU5vcnRoLnNwYXducyxcbiAgICAgICAgICAgc3Bhd24gPT4gc3Bhd24uaXNUcmlnZ2VyKCkgJiYgc3Bhd24uaWQgPT09IDB4OGQpO1xuICAvLyAyLiBTZXQgdGhlIHRyaWdnZXIgdG8gcmVxdWlyZSBoYXZpbmcga2lsbGVkIGtlbGJlc3F1ZS5cbiAgcm9tLnRyaWdnZXIoMHhiMikuY29uZGl0aW9ucy5wdXNoKGZsYWdzLktlbGJlc3F1ZTEuaWQpO1xuICAvLyAzLiBBbHNvIHNldCB0aGUgdHJpZ2dlciB0byBmcmVlIHRoZSB2aWxsYWdlcnMgYW5kIHRoZSBlbGRlci5cbiAgcm9tLnRyaWdnZXIoMHhiMikuZmxhZ3MucHVzaChcbiAgICB+ZmxhZ3MuTGVhZlZpbGxhZ2Vyc0N1cnJlbnRseUFiZHVjdGVkLmlkLFxuICAgIH5mbGFncy5MZWFmRWxkZXJDdXJyZW50bHlBYmR1Y3RlZC5pZCxcbiAgICBmbGFncy5MZWFmVmlsbGFnZXJzUmVzY3VlZC5pZCk7XG4gIC8vIDQuIERvbid0IHRyaWdnZXIgdGhlIGFiZHVjdGlvbiBpbiB0aGUgZmlyc3QgcGxhY2UgaWYga2VsYmVzcXVlIGRlYWRcbiAgcm9tLnRyaWdnZXIoMHg4YykuY29uZGl0aW9ucy5wdXNoKH5mbGFncy5LZWxiZXNxdWUxLmlkKTtcbiAgLy8gNS4gRG9uJ3QgdHJpZ2dlciByYWJiaXQgYmxvY2sgaWYga2VsYmVzcXVlIGRlYWRcbiAgcm9tLnRyaWdnZXIoMHg4NikuY29uZGl0aW9ucy5wdXNoKH5mbGFncy5LZWxiZXNxdWUxLmlkKTsgLy8ga2lsbGVkIGtlbGJlc3F1ZVxuICAvLyA2LiBEb24ndCBmcmVlIHZpbGxhZ2VycyBmcm9tIHVzaW5nIHByaXNvbiBrZXlcbiAgcmVtb3ZlKEtleVRvUHJpc29uLml0ZW1Vc2VEYXRhWzBdLmZsYWdzLFxuICAgICAgICAgfmZsYWdzLkxlYWZWaWxsYWdlcnNDdXJyZW50bHlBYmR1Y3RlZC5pZCk7XG4gIC8vIHJvbS5wcmdbMHgxZTBhM10gPSAweGMwO1xuICAvLyByb20ucHJnWzB4MWUwYTRdID0gMHgwMDtcblxuICAvLyBUT0RPIC0gYWRkaXRpb25hbCB3b3JrIG9uIGFiZHVjdGlvbiB0cmlnZ2VyOlxuICAvLyAgIC0gZ2V0IHJpZCBvZiB0aGUgZmxhZ3Mgb24ga2V5IHRvIHByaXNvbiB1c2VcbiAgLy8gICAtIGFkZCBhIGNvbmRpdGlvbiB0aGF0IGFiZHVjdGlvbiBkb2Vzbid0IGhhcHBlbiBpZiByZXNjdWVkXG4gIC8vIEdldCByaWQgb2YgQk9USCB0cmlnZ2VycyBpbiBzdW1taXQgY2F2ZSwgIEluc3RlYWQsIHRpZSBldmVyeXRoaW5nXG4gIC8vIHRvIHRoZSBlbGRlciBkaWFsb2cgb24gdG9wXG4gIC8vICAgLSBpZiBrZWxiZXNxdWUgc3RpbGwgYWxpdmUsIG1heWJlIGdpdmUgYSBoaW50IGFib3V0IHdlYWtuZXNzXG4gIC8vICAgLSBpZiBrZWxiZXNxdWUgZGVhZCB0aGVuIHRlYWNoIHBhcmFseXNpcyBhbmQgc2V0L2NsZWFyIGZsYWdzXG4gIC8vICAgLSBpZiBwYXJhbHlzaXMgbGVhcm5lZCB0aGVuIHNheSBzb21ldGhpbmcgZ2VuZXJpY1xuICAvLyBTdGlsbCBuZWVkIHRvIGtlZXAgdGhlIHRyaWdnZXIgaW4gdGhlIGZyb250IGluIGNhc2Ugbm9cbiAgLy8gYWJkdWN0aW9uIHlldFxuICAvLyAgIC0gaWYgTk9UIHBhcmFseXNpcyBBTkQgaWYgTk9UIGVsZGVyIG1pc3NpbmcgQU5EIGlmIGtlbGJlcXVlIGRlYWRcbiAgLy8gLS0tPiBuZWVkIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHR3byB3YXlzIHRvIGdldCAobGlrZSByZWZyZXNoKT9cbiAgLy9cbiAgLy8gQWxzbyBhZGQgYSBjaGVjayB0aGF0IHRoZSByYWJiaXQgdHJpZ2dlciBpcyBnb25lIGlmIHJlc2N1ZWQhXG5cblxuXG4gIC8vIFBhcmFseXNpcyB0cmlnZ2VyICgkYjIpIH4gcmVtb3ZlIHJlZHVuZGFudCBpdGVtZ2V0IGZsYWdcbiAgLy9yb20udHJpZ2dlcigweGIyKS5jb25kaXRpb25zWzBdID0gfjB4MjQyO1xuICAvL3JvbS50cmlnZ2VyKDB4YjIpLmZsYWdzLnNoaWZ0KCk7IC8vIHJlbW92ZSAwMzcgbGVhcm5lZCBwYXJhbHlzaXNcblxuICAvLyBMZWFybiByZWZyZXNoIHRyaWdnZXIgKCRiNCkgfiByZW1vdmUgcmVkdW5kYW50IGl0ZW1nZXQgZmxhZ1xuICAvL3JvbS50cmlnZ2VyKDB4YjQpLmNvbmRpdGlvbnNbMV0gPSB+MHgyNDE7XG4gIC8vcm9tLnRyaWdnZXIoMHhiNCkuZmxhZ3MgPSBbXTsgLy8gcmVtb3ZlIDAzOSBsZWFybmVkIHJlZnJlc2hcblxuICAvLyBUZWxlcG9ydCBibG9jayBvbiBtdCBzYWJyZSBpcyBmcm9tIHNwZWxsLCBub3Qgc2xvdFxuICAvLyBOT1RFOiB0aGlzIGlzIG5vdyBkb25lIGluIGZsYWdzLmRlZnJhZ1xuICAvL3JlcGxhY2Uocm9tLnRyaWdnZXIoMHhiYSkuY29uZGl0aW9ucywgfjB4MDNmLCB+ZmxhZ3MuVGVsZXBvcnQuaWQpO1xuXG4gIC8vIFBvcnRvYSBwYWxhY2UgZ3VhcmQgbW92ZW1lbnQgdHJpZ2dlciAoJGJiKSBzdG9wcyBvbiAwMWIgKG1lc2lhKSBub3QgMDFmIChvcmIpXG4gIHJlcGxhY2Uocm9tLnRyaWdnZXIoMHhiYikuY29uZGl0aW9ucywgfmZsYWdzLlJhZ2UuaWQsIH5mbGFncy5NZXNpYVJlY29yZGluZy5pZCk7XG5cbiAgLy8gUmVtb3ZlIHJlZHVuZGFudCB0cmlnZ2VyIDhhIChzbG90IDE2KSBpbiB6b21iaWV0b3duICgkNjUpXG4gIC8vICAtLSBub3RlOiBubyBsb25nZXIgbmVjZXNzYXJ5IHNpbmNlIHdlIHJlcHVycG9zZSBpdCBpbnN0ZWFkLlxuICAvLyBjb25zdCB7em9tYmllVG93bn0gPSByb20ubG9jYXRpb25zO1xuICAvLyB6b21iaWVUb3duLnNwYXducyA9IHpvbWJpZVRvd24uc3Bhd25zLmZpbHRlcih4ID0+ICF4LmlzVHJpZ2dlcigpIHx8IHguaWQgIT0gMHg4YSk7XG5cbiAgLy8gLy8gUmVwbGFjZSBhbGwgZGlhbG9nIGNvbmRpdGlvbnMgZnJvbSAwMGUgdG8gMjQzXG4gIC8vIGZvciAoY29uc3QgbnBjIG9mIHJvbS5ucGNzKSB7XG4gIC8vICAgZm9yIChjb25zdCBkIG9mIG5wYy5hbGxEaWFsb2dzKCkpIHtcbiAgLy8gICAgIGlmIChkLmNvbmRpdGlvbiA9PT0gMHgwMGUpIGQuY29uZGl0aW9uID0gMHgyNDM7XG4gIC8vICAgICBpZiAoZC5jb25kaXRpb24gPT09IH4weDAwZSkgZC5jb25kaXRpb24gPSB+MHgyNDM7XG4gIC8vICAgfVxuICAvLyB9XG59XG5cbi8vIEhhcmQgbW9kZSBmbGFnOiBIYyAtIHplcm8gb3V0IHRoZSBzd29yZCdzIGNvbGxpc2lvbiBwbGFuZVxuZnVuY3Rpb24gZGlzYWJsZVN0YWJzKHJvbTogUm9tKTogdm9pZCB7XG4gIGZvciAoY29uc3QgbyBvZiBbMHgwOCwgMHgwOSwgMHgyN10pIHtcbiAgICByb20ub2JqZWN0c1tvXS5jb2xsaXNpb25QbGFuZSA9IDA7XG4gIH1cbiAgLy8gQWxzbyB0YWtlIHdhcnJpb3IgcmluZyBvdXQgb2YgdGhlIHBpY3R1cmUuLi4gOnRyb2xsOlxuICAvLyByb20uaXRlbUdldHNbMHgyYl0uaWQgPSAweDViOyAvLyBtZWRpY2FsIGhlcmIgZnJvbSBzZWNvbmQgZmx1dGUgb2YgbGltZSBjaGVja1xuICByb20ubnBjcy5Ccm9rYWhhbmEuZGF0YVswXSA9IHJvbS5pdGVtcy5GcnVpdE9mTGltZS5pZDtcbn1cblxuZnVuY3Rpb24gb3Jic09wdGlvbmFsKHJvbTogUm9tKTogdm9pZCB7XG4gIGZvciAoY29uc3Qgb2JqIG9mIFsweDEwLCAweDE0LCAweDE4LCAweDFkXSkge1xuICAgIC8vIDEuIExvb3NlbiB0ZXJyYWluIHN1c2NlcHRpYmlsaXR5IG9mIGxldmVsIDEgc2hvdHNcbiAgICByb20ub2JqZWN0c1tvYmpdLnRlcnJhaW5TdXNjZXB0aWJpbGl0eSAmPSB+MHgwNDtcbiAgICAvLyAyLiBJbmNyZWFzZSB0aGUgbGV2ZWwgdG8gMlxuICAgIHJvbS5vYmplY3RzW29ial0ubGV2ZWwgPSAyO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vQm93TW9kZShyb206IFJvbSk6IHZvaWQge1xuICAvLyBJbml0aWFsIHRyaWdnZXIgZ2l2ZXMgXCJ1c2VkIGJvdyBvZiB0cnV0aFwiLlxuICBjb25zdCB7XG4gICAgZmxhZ3M6IHtVc2VkQm93T2ZUcnV0aH0sXG4gICAgbG9jYXRpb25zOiB7Q3J5cHRfRHJheWdvbjIsIE1lemFtZVNocmluZX0sXG4gIH0gPSByb207XG4gIGxldCB0cmlnZ2VyITogVHJpZ2dlcjtcbiAgZm9yIChjb25zdCBzcGF3biBvZiBNZXphbWVTaHJpbmUuc3Bhd25zKSB7XG4gICAgaWYgKHNwYXduLmlzVHJpZ2dlcigpICYmIHNwYXduLnRpbGUgPT09IDB4ODgpIHtcbiAgICAgIHRyaWdnZXIgPSByb20udHJpZ2dlcihzcGF3bi5pZCk7XG4gICAgfVxuICB9XG4gIGlmICghdHJpZ2dlcikgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBzdGFydCB0cmlnZ2VyYCk7XG4gIHRyaWdnZXIuZmxhZ3MucHVzaChVc2VkQm93T2ZUcnV0aC5pZCk7XG4gIC8vIEFkZCBhbiBleGl0IHN0cmFpZ2h0IHRvIGRyYXlnb25cbiAgcm9tLnRpbGVFZmZlY3RzWzB4YjkgLSAweGIzXS5lZmZlY3RzWzB4NThdID0gMDtcbiAgTWV6YW1lU2hyaW5lLm1ldGEuc2V0RXhpdChcbiAgICAgIDAsICdkb29yJywgW0NyeXB0X0RyYXlnb24yLm1ldGEuaWQgPDwgOCB8IDB4MTAsICdlZGdlOmJvdHRvbSddKTtcbn1cblxuLy8gRm9yIG5vdyB0aGlzIGp1c3QgZml4ZXMgdGhlIHNob3QgdG8gYmUgYWxsIGVsZW1lbnRzIGluc3RlYWQgb2Ygbm9uZS5cbmZ1bmN0aW9uIGZpeENyeXN0YWxpcyhyb206IFJvbSkge1xuICByb20ub2JqZWN0c1sweDMzXS5lbGVtZW50cyA9IDB4Zjtcbn1cblxuLy8gVGhlcmUgYXJlIGEgZmV3IG1ldGF0aWxlcyB0aGF0IGhhdmUgaW5jb3JyZWN0IGJlaGF2aW9yIChvbmUgb2Zcbi8vIHRoZSBwaWxsYXIgdGlsZXMgaW4gdGhlIGNyeXB0IHRpbGVzZXQgYW5kIGEgY29ybmVyIHRpbGUgaW4gdGhlXG4vLyBjYXZlIHRpbGVzZXQpLCB3aGljaCBhbGxvd3MgZmx5aW5nIHRocm91Z2ggdGhlbS4gIFRoZSBjcnlwdCB0aWxlXG4vLyBjYW4gY2F1c2UgdGhlIHBsYXllciB0byBnZXQgc3R1Y2sgaWYgdGhleSBnZXQgaGl0IHdoaWxlIGZseWluZ1xuLy8gbmVhciBpdC4gIFRoZSBjYXZlIGNvcm5lciBjYW4gYWxsb3cgc25lYWtpbmcgcGFzdCB0aGUgc3RvbmVkXG4vLyBOUENzIGluIHRoZSB3YXRlcmZhbGwgY2F2ZSB1c2luZyBmbGlnaHQuXG5mdW5jdGlvbiBmaXhGbHlhYmxlV2FsbHMocm9tOiBSb20pIHtcbiAgcm9tLnRpbGVFZmZlY3RzWzB4YjUgLSAweGIzXS5lZmZlY3RzWzB4NzRdID0gNjsgLy8gY2F2ZSBjb3JuZXJcbiAgcm9tLnRpbGVFZmZlY3RzWzB4YjYgLSAweGIzXS5lZmZlY3RzWzB4NDZdID0gNjsgLy8gY3J5cHQgcGlsbGFyXG59XG5cbi8vIFRvbWF0b3MgKGFuZCBvdGhlcnMpIHNob3VsZG4ndCBiZSBhYmxlIHRvIGNyb3NzIHdhdGVyIG9yIHJvbGwgdXAgcmFtcHMuXG5mdW5jdGlvbiBmaXhNb25zdGVyVGVycmFpbihyb206IFJvbSkge1xuICBmb3IgKGNvbnN0IG9iaiBvZiByb20ub2JqZWN0cykge1xuICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIE1vbnN0ZXIpKSBjb250aW51ZTtcbiAgICBpZiAob2JqLmlzUHJvamVjdGlsZSgpIHx8IG9iai5pc0Jvc3MoKSB8fCBvYmouaXNGbHllcigpKSBjb250aW51ZTtcbiAgICBpZiAob2JqID09PSByb20ub2JqZWN0cy5taW1pYykgY29udGludWU7XG4gICAgb2JqLnRlcnJhaW5TdXNjZXB0aWJpbGl0eSB8PSAweDM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZTxUPihhcnJheTogVFtdLCBvbGQ6IFQsIHJlcGxhY2VtZW50OiBUKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyYXlbaV0gIT09IG9sZCkgY29udGludWU7XG4gICAgYXJyYXlbaV0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCAke29sZH0gaW4gJHthcnJheS5qb2luKCcsJyl9YCk7ICAgICAgXG59XG5cbmZ1bmN0aW9uIGhhcmRjb3JlTW9kZShyb206IFJvbSkge1xuICBmb3IgKGNvbnN0IGxvYyBvZiByb20ubG9jYXRpb25zKSB7XG4gICAgbG9jLmNoZWNrcG9pbnQgPSBsb2Muc2F2ZWFibGUgPSBmYWxzZTtcbiAgfVxufVxuIl19