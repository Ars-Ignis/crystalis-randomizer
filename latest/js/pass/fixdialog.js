import { hex } from '../rom/util.js';
import { buildTradeInMap } from './shuffletrades.js';
import { fail } from '../assert.js';
export function fixDialog(rom) {
    replaceMessage('03:06', ',', '');
    const tradeIns = buildTradeInMap(rom);
    const zebu = rom.npcs[0x5e];
    if (zebu.data[0] < 0x41)
        unmagic('00:1b');
    replaceMessage('00:1b', '[41:Refresh]', item(zebu.data[0]));
    const akahanaTradeIn = mustGet(tradeIns, 0x82);
    replaceMessage('02:01', 'an unusual statue', vague(akahanaTradeIn));
    replaceMessage('02:02', 'a statue', `the ${commonNoun(akahanaTradeIn)}`);
    const gasMaskSlot = actionGrant(akahanaTradeIn);
    replaceMessage('02:02', '[29:Gas Mask]', item(gasMaskSlot));
    const telepathySlot = rom.prg[0x367f4];
    if (telepathySlot < 0x41)
        unmagic('03:01');
    replaceMessage('03:01', '[43:Telepathy]', item(telepathySlot));
    const tornel = rom.npcs[0x5f];
    const tornelTradeIn = findTornelTradeIn(tornel);
    replaceMessage('03:01', '[06:Tornado Bracelet]', item(tornelTradeIn));
    replaceMessage('05:0a', '[06:Tornado Bracelet]', item(tornelTradeIn));
    replaceMessage('05:0a', '[44:Teleport]', item(tornel.data[0]));
    const fogLampTradeIn = tradeIns.get(0x64);
    if (fogLampTradeIn != null) {
        replaceMessage('09:01', '[35:Fog Lamp]', item(fogLampTradeIn));
        replaceMessage('09:04', '[35:Fog Lamp]', item(fogLampTradeIn));
        replaceMessage('09:05', '[35:Fog Lamp]', item(fogLampTradeIn));
        replaceMessage('09:06', 'lamp', commonNoun(fogLampTradeIn));
    }
    const queen = rom.npcs[0x38];
    replaceMessage('0a:0c', '[28:Flute of Lime]', item(queen.data[0]));
    replaceMessage('0a:0d', '[02:Sword of Water]', item(queen.localDialogs.get(-1)[3].condition & 0xff));
    const recoverSlot = rom.prg[0x3d1f9];
    if (recoverSlot < 0x41)
        unmagic('0b:01');
    replaceMessage('0b:01', '[45:Recover]', item(recoverSlot));
    const barrierSlot = actionGrant(0x84);
    if (barrierSlot < 0x41) {
        unmagic('0b:01');
        unmagic('1d:12');
    }
    replaceMessage('0b:01', '[46:Barrier]', item(barrierSlot));
    replaceMessage('1d:12', '[46:Barrier]', item(barrierSlot));
    let fogLampCaveLoot = findLoot(0x4f, 0x4e, 0x4d, 0x4c, 0x47, 0x46, 0x45, 0x44, 0x4b, 0x4a, 0x49, 0x48);
    if (fogLampCaveLoot >= 0) {
        replaceMessage('0d:00', '[35:Fog Lamp]', item(fogLampCaveLoot));
    }
    else {
        replaceMessage('0d:00', 'that a [35:Fog Lamp] was', 'there was treasure');
    }
    const rageTradeIn = rom.npcs[0xc3].localDialogs.get(-1)[0].condition & 0xff;
    const rageItem = rom.prg[0x3d337];
    replaceMessage('0e:03', '[02:Sword of Water]', item(rageTradeIn));
    replaceMessage('0e:03', '[09:Ball of Water]', item(rageItem));
    replaceMessage('10:0c', 'that\'s', 'is');
    replaceMessage('10:0c', /, is in the\+lighthouse/, '');
    const aryllisTradeIn = tradeIns.get(0x23);
    if (aryllisTradeIn != null) {
        replaceMessage('12:05', '[3c:Kirisa Plant]', item(aryllisTradeIn));
        replaceMessage('12:10', 'the plant', `the ${commonNoun(aryllisTradeIn)}`);
        replaceMessage('12:10', '[3c:Kirisa Plant]', item(aryllisTradeIn));
        const clue = `Our illustrious chief seeks ${vague(aryllisTradeIn)}.`;
        replaceMessage('12:09', /[^]*/, clue);
        replaceMessage('12:0a', /[^]*/, clue);
    }
    const lovePendantTradeIn = mustGet(tradeIns, 0x74);
    replaceMessage('13:02', '[3b:Love Pendant]', item(lovePendantTradeIn));
    replaceMessage('13:00', 'pendant', commonNoun(lovePendantTradeIn));
    const changeSlot = actionGrant(lovePendantTradeIn);
    if (changeSlot < 0x41) {
        unmagic('13:02');
    }
    replaceMessage('13:02', '[47:Change]', item(changeSlot));
    const ivoryStatueTradeIn = tradeIns.get(0x75);
    if (ivoryStatueTradeIn != null) {
        replaceMessage('18:06', '[3d:Ivory Statue]', item(ivoryStatueTradeIn));
        replaceMessage('18:07', '[3d:Ivory Statue]', item(ivoryStatueTradeIn));
    }
    replaceMessage('18:06', `It's in a room`, '{0b:Karmine} is');
    const flightSlot = rom.prg[0x3d18f];
    if (flightSlot < 0x41)
        replaceMessage('18:07', 'teach', 'give');
    replaceMessage('18:07', '[48:Flight]', item(flightSlot));
    const paralysisSlot = actionGrant(0xb2);
    if (paralysisSlot < 0x41)
        unmagic('1c:10');
    replaceMessage('1c:10', '[42:Paralysis]', item(paralysisSlot));
    replaceMessage('20:06', 'Statue of Gold', item(actionGrant(0x39)));
    function unmagic(mid) {
        replaceMessage(mid, /teach\s+you\s+the\s+magic\s+of/, 'bestow upon you the');
    }
    function item(id) {
        const item = itemget(id);
        return `[${hex(item.id)}:${item.messageName}]`;
    }
    function replaceMessage(mid, pat, repl) {
        const [part, index] = mid.split(':').map(x => parseInt(x, 16));
        const msg = rom.messages.parts[part][index];
        msg.text = msg.text.replace(pat, repl);
    }
    function findLoot(...locs) {
        const conditions = [
            (item) => BOWS.has(item),
            (item) => SWORD_OR_MAGIC.has(item),
            (item) => itemget(item).unique,
        ];
        for (const cond of conditions) {
            for (const id of locs) {
                const loc = rom.locations[id];
                for (const spawn of loc.spawns) {
                    if (spawn.isChest() && spawn.id <= 0x48 && cond(spawn.id)) {
                        return spawn.id;
                    }
                }
            }
        }
        return -1;
    }
    function itemget(id) {
        const itemget = rom.itemGets[id];
        return rom.items[itemget.itemId];
    }
    function actionGrant(key) {
        const grant = rom.itemGets.actionGrants.get(key);
        if (grant == null)
            throw new Error(`Missing actionGrant for ${hex(key)}`);
        return grant;
    }
}
const BOWS = new Set([0x3e, 0x3f, 0x40]);
const SWORD_OR_MAGIC = new Set([0x00, 0x01, 0x02, 0x03, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48]);
function findTornelTradeIn(tornel) {
    for (const ds of tornel.localDialogs.values()) {
        for (let i = 2; i < ds.length; i++) {
            const item = ~ds[i].condition;
            if (item > 0x204 && item <= 0x20c && !(item & 1))
                return item & 0xff;
        }
    }
    return 0x06;
}
function vague(id) {
    switch (id) {
        case 0x25: return 'an unusual statue';
        case 0x28: return 'a rare instrument';
        case 0x35: return 'a brilliant lamp';
        case 0x3b: return 'a beautiful charm';
        case 0x3c: return 'a fragrant plant';
        case 0x3d: return 'an exotic statue';
    }
    fail();
    return 'a valuable item';
}
function commonNoun(id) {
    switch (id) {
        case 0x25: return 'statue';
        case 0x28: return 'instrument';
        case 0x35: return 'lamp';
        case 0x3b: return 'pendant';
        case 0x3c: return 'plant';
        case 0x3d: return 'statue';
    }
    fail();
    return 'item';
}
function mustGet(map, key) {
    const result = map.get(key);
    if (result == null)
        throw new Error(`Expected value for ${key}`);
    return result;
}
//# sourceMappingURL=data:application/json;base64,