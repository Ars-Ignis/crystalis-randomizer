export class Spoiler {
    constructor(rom) {
        this.rom = rom;
        this.slots = [];
        this.route = [];
        this.mazes = [];
        this.trades = [];
        this.walls = [];
        this.unidentifiedItems = [];
        this.wildWarps = [];
        this.slotNames = [];
        this.conditionNames = {};
    }
    addCondition(condition, name) {
        this.conditionNames[condition] = name;
    }
    addCheck(condition, deps, item) {
        this.route.push(new Check(this, condition, deps, item));
    }
    addSlot(slot, slotName, item) {
        this.slots[slot] = new Slot(this.rom, slot, slotName, item);
        if (slotName)
            this.slotNames[0x200 | slot] = slotName;
    }
    addMaze(id, name, maze) {
        this.mazes.push({ id, name, maze });
    }
    addTrade(itemId, item, npc) {
        this.trades.push({ itemId, item, npc });
    }
    addUnidentifiedItem(itemId, oldName, newName) {
        this.unidentifiedItems.push({ itemId, oldName, newName });
    }
    addWall(location, oldElement, newElement) {
        this.walls.push({ location, oldElement, newElement });
    }
    addWildWarp(id, name) {
        this.wildWarps.push({ id, name });
    }
    formatCondition(id, item) {
        if (id < 0x200 || id >= 0x280)
            return this.conditionNames[id] || conditionHex(id);
        if (item == null)
            return slotToItem(this.rom, id & 0xff);
        return `${this.slotNames[id] || conditionHex(id)} (${this.formatCondition(item | 0x200)})`;
    }
}
class Check {
    constructor(spoiler, condition, deps, item) {
        this.spoiler = spoiler;
        this.condition = condition;
        this.deps = deps;
        this.item = item;
    }
    toString() {
        return `${this.spoiler.formatCondition(this.condition, this.item)}: [${this.deps.map(d => this.spoiler.formatCondition(d)).join(', ')}]`;
    }
}
function conditionHex(id) {
    return id < 0 ? '~' + ~id.toString(16).padStart(2, '0') : id.toString(16).padStart(3, '0');
}
class Slot {
    constructor(rom, slot, slotName, item) {
        this.slot = slot;
        this.slotName = slotName;
        this.item = item;
        this.itemName = slotToItem(rom, item);
        this.originalItem = slotToItem(rom, slot);
    }
    toString() {
        return `${this.itemName}: ${this.slotName} (${this.originalItem})`;
    }
}
function slotToItem(rom, slot) {
    if (slot >= 0x70)
        return 'Mimic';
    return rom.items[rom.itemGets[slot].itemId].messageName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BvaWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vc3BvaWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxNQUFNLE9BQU8sT0FBTztJQWFsQixZQUFxQixHQUFRO1FBQVIsUUFBRyxHQUFILEdBQUcsQ0FBSztRQVpwQixVQUFLLEdBQVcsRUFBRSxDQUFDO1FBQ25CLFVBQUssR0FBWSxFQUFFLENBQUM7UUFDcEIsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUNuQixXQUFNLEdBQVksRUFBRSxDQUFDO1FBQ3JCLFVBQUssR0FBVyxFQUFFLENBQUM7UUFDbkIsc0JBQWlCLEdBQXVCLEVBQUUsQ0FBQztRQUMzQyxjQUFTLEdBQWUsRUFBRSxDQUFDO1FBRzNCLGNBQVMsR0FBMkIsRUFBRSxDQUFDO1FBQ3ZDLG1CQUFjLEdBQTJCLEVBQUUsQ0FBQztJQUVyQixDQUFDO0lBRWpDLFlBQVksQ0FBQyxTQUFpQixFQUFFLElBQVk7UUFDMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUVELFFBQVEsQ0FBQyxTQUFpQixFQUFFLElBQXVCLEVBQUUsSUFBYTtRQUNoRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxPQUFPLENBQUMsSUFBWSxFQUFFLFFBQWdCLEVBQUUsSUFBWTtRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1RCxJQUFJLFFBQVE7WUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxRQUFR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Q0FBUTtRQUNaLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxRQUFRO1FBRU4sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUM7SUFDckUsQ0FBQztDQUNGO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBUSxFQUFFLElBQVk7SUFDeEMsSUFBSSxJQUFJLElBQUksSUFBSTtRQUFFLE9BQU8sT0FBTyxDQUFDO0lBQ2pDLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUMxRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5cbi8qKlxuICogU3RvcmVzIG9yZ2FuaXplZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2h1ZmZsZSwgaW5jbHVkaW5nXG4gKiAgIC0gd2hpY2ggaXRlbXMgYXJlIGluIHdoaWNoIHNsb3RzXG4gKiAgIC0gYSBrbm93bi13b3JraW5nIHJvdXRlIHRocm91Z2ggdGhlIGdhbWVcbiAqICAgLSB3aGljaCBlbmVtaWVzIGFyZSBzaHVmZmxlIHdoZXJlXG4gKiAgIC0gZW5lbXkgdnVsbmVyYWJpbGl0aWVzXG4gKiAgIC0gbG9jYXRpb24gY29ubmVjdGlvbnNcbiAqICAgLSByb3V0ZXMgdG8gZWFjaCBhcmVhXG4gKi9cbmV4cG9ydCBjbGFzcyBTcG9pbGVyIHtcbiAgcmVhZG9ubHkgc2xvdHM6IFNsb3RbXSA9IFtdO1xuICByZWFkb25seSByb3V0ZTogQ2hlY2tbXSA9IFtdO1xuICByZWFkb25seSBtYXplczogTWF6ZVtdID0gW107XG4gIHJlYWRvbmx5IHRyYWRlczogVHJhZGVbXSA9IFtdO1xuICByZWFkb25seSB3YWxsczogV2FsbFtdID0gW107XG4gIHJlYWRvbmx5IHVuaWRlbnRpZmllZEl0ZW1zOiBVbmlkZW50aWZpZWRJdGVtW10gPSBbXTtcbiAgcmVhZG9ubHkgd2lsZFdhcnBzOiBXaWxkV2FycFtdID0gW107XG5cbiAgLy8gVXNlZCBmb3IgbGF6aWx5IGRpc3BsYXlpbmcgcm91dGVcbiAgcmVhZG9ubHkgc2xvdE5hbWVzOiB7W2lkOiBudW1iZXJdOiBzdHJpbmd9ID0gW107XG4gIHJlYWRvbmx5IGNvbmRpdGlvbk5hbWVzOiB7W2lkOiBudW1iZXJdOiBzdHJpbmd9ID0ge307XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcm9tOiBSb20pIHt9XG5cbiAgYWRkQ29uZGl0aW9uKGNvbmRpdGlvbjogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNvbmRpdGlvbk5hbWVzW2NvbmRpdGlvbl0gPSBuYW1lO1xuICB9XG5cbiAgYWRkQ2hlY2soY29uZGl0aW9uOiBudW1iZXIsIGRlcHM6IHJlYWRvbmx5IG51bWJlcltdLCBpdGVtPzogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5yb3V0ZS5wdXNoKG5ldyBDaGVjayh0aGlzLCBjb25kaXRpb24sIGRlcHMsIGl0ZW0pKTtcbiAgfVxuXG4gIGFkZFNsb3Qoc2xvdDogbnVtYmVyLCBzbG90TmFtZTogc3RyaW5nLCBpdGVtOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNsb3RzW3Nsb3RdID0gbmV3IFNsb3QodGhpcy5yb20sIHNsb3QsIHNsb3ROYW1lLCBpdGVtKTtcbiAgICBpZiAoc2xvdE5hbWUpIHRoaXMuc2xvdE5hbWVzWzB4MjAwIHwgc2xvdF0gPSBzbG90TmFtZTtcbiAgfVxuXG4gIGFkZE1hemUoaWQ6IG51bWJlciwgbmFtZTogc3RyaW5nLCBtYXplOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLm1hemVzLnB1c2goe2lkLCBuYW1lLCBtYXplfSk7XG4gIH1cblxuICBhZGRUcmFkZShpdGVtSWQ6IG51bWJlciwgaXRlbTogc3RyaW5nLCBucGM6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudHJhZGVzLnB1c2goe2l0ZW1JZCwgaXRlbSwgbnBjfSk7XG4gIH1cblxuICBhZGRVbmlkZW50aWZpZWRJdGVtKGl0ZW1JZDogbnVtYmVyLCBvbGROYW1lOiBzdHJpbmcsIG5ld05hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudW5pZGVudGlmaWVkSXRlbXMucHVzaCh7aXRlbUlkLCBvbGROYW1lLCBuZXdOYW1lfSk7XG4gIH1cblxuICBhZGRXYWxsKGxvY2F0aW9uOiBzdHJpbmcsIG9sZEVsZW1lbnQ6IG51bWJlciwgbmV3RWxlbWVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy53YWxscy5wdXNoKHtsb2NhdGlvbiwgb2xkRWxlbWVudCwgbmV3RWxlbWVudH0pO1xuICB9XG5cbiAgYWRkV2lsZFdhcnAoaWQ6IG51bWJlciwgbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy53aWxkV2FycHMucHVzaCh7aWQsIG5hbWV9KTtcbiAgfVxuXG4gIGZvcm1hdENvbmRpdGlvbihpZDogbnVtYmVyLCBpdGVtPzogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAvLyBPcmRpbmFyeSBzeW1tZXRpYyBjb25kaXRpb25zXG4gICAgaWYgKGlkIDwgMHgyMDAgfHwgaWQgPj0gMHgyODApIHJldHVybiB0aGlzLmNvbmRpdGlvbk5hbWVzW2lkXSB8fCBjb25kaXRpb25IZXgoaWQpO1xuICAgIC8vIERlcGVuZGVuY3kgaXRlbXMgLSBhbHdheXMgPCAyNDhcbiAgICBpZiAoaXRlbSA9PSBudWxsKSByZXR1cm4gc2xvdFRvSXRlbSh0aGlzLnJvbSwgaWQgJiAweGZmKTtcbiAgICAvLyBTbG90IC0gcHJpbnQgYm90aCBzbG90IGFuZCBpdGVtIG5hbWVcbiAgICByZXR1cm4gYCR7dGhpcy5zbG90TmFtZXNbaWRdIHx8IGNvbmRpdGlvbkhleChpZCl9ICgke3RoaXMuZm9ybWF0Q29uZGl0aW9uKGl0ZW0gfCAweDIwMCl9KWA7XG4gIH1cbn1cblxuaW50ZXJmYWNlIE1hemUge1xuICBpZDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIG1hemU6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFRyYWRlIHtcbiAgaXRlbUlkOiBudW1iZXI7XG4gIGl0ZW06IHN0cmluZztcbiAgbnBjOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBVbmlkZW50aWZpZWRJdGVtIHtcbiAgaXRlbUlkOiBudW1iZXI7XG4gIG9sZE5hbWU6IHN0cmluZztcbiAgbmV3TmFtZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgV2FsbCB7XG4gIGxvY2F0aW9uOiBzdHJpbmc7XG4gIG9sZEVsZW1lbnQ6IG51bWJlcjtcbiAgbmV3RWxlbWVudDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgV2lsZFdhcnAge1xuICBpZDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbmNsYXNzIENoZWNrIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgc3BvaWxlcjogU3BvaWxlcixcbiAgICAgICAgICAgICAgcmVhZG9ubHkgY29uZGl0aW9uOiBudW1iZXIsXG4gICAgICAgICAgICAgIHJlYWRvbmx5IGRlcHM6IHJlYWRvbmx5IG51bWJlcltdLFxuICAgICAgICAgICAgICByZWFkb25seSBpdGVtOiBudW1iZXIgfCB1bmRlZmluZWQpIHt9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5zcG9pbGVyLmZvcm1hdENvbmRpdGlvbih0aGlzLmNvbmRpdGlvbiwgdGhpcy5pdGVtKX06IFske1xuICAgICAgICAgICAgdGhpcy5kZXBzLm1hcChkID0+IHRoaXMuc3BvaWxlci5mb3JtYXRDb25kaXRpb24oZCkpLmpvaW4oJywgJyl9XWA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uZGl0aW9uSGV4KGlkOiBudW1iZXIpOiBzdHJpbmcge1xuICByZXR1cm4gaWQgPCAwID8gJ34nICsgfmlkLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpIDogaWQudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDMsICcwJyk7XG59XG5cbmNsYXNzIFNsb3Qge1xuICByZWFkb25seSBpdGVtTmFtZTogc3RyaW5nO1xuICByZWFkb25seSBvcmlnaW5hbEl0ZW06IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihyb206IFJvbSxcbiAgICAgICAgICAgICAgcmVhZG9ubHkgc2xvdDogbnVtYmVyLFxuICAgICAgICAgICAgICByZWFkb25seSBzbG90TmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICByZWFkb25seSBpdGVtOiBudW1iZXIpIHtcbiAgICB0aGlzLml0ZW1OYW1lID0gc2xvdFRvSXRlbShyb20sIGl0ZW0pO1xuICAgIHRoaXMub3JpZ2luYWxJdGVtID0gc2xvdFRvSXRlbShyb20sIHNsb3QpO1xuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSBuYW1lIG9mIHRoZSBzbG90LCB0aGUgb3JpZ2luYWwgaXRlbSwgZXRjXG4gICAgcmV0dXJuIGAke3RoaXMuaXRlbU5hbWV9OiAke3RoaXMuc2xvdE5hbWV9ICgke3RoaXMub3JpZ2luYWxJdGVtfSlgO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNsb3RUb0l0ZW0ocm9tOiBSb20sIHNsb3Q6IG51bWJlcik6IHN0cmluZyB7XG4gIGlmIChzbG90ID49IDB4NzApIHJldHVybiAnTWltaWMnO1xuICByZXR1cm4gcm9tLml0ZW1zW3JvbS5pdGVtR2V0c1tzbG90XS5pdGVtSWRdLm1lc3NhZ2VOYW1lO1xufVxuIl19