import { Entity, EntityArray } from './entity.js';
import { MessageId } from './messageid.js';
import { hex, readString, tuple, ITEM_USE_FLAGS, ITEM_CONDITION_FLAGS, relocExportLabel } from './util.js';
import { Address, Segment } from './util.js';
import { assertNever } from '../util.js';
const { $0e, $0f, $10, $1a } = Segment;
const ITEM_USE_JUMP_TABLE = Address.of($0e, 0x8399);
const ITEM_USE_DATA_TABLE = Address.of($0e, 0x9be2);
const ITEM_DATA_TABLE = Address.of($10, 0x8ff0);
const SELECTED_ITEM_TABLE = Address.of($10, 0x903b);
const MENU_NAME_TABLE = Address.of($10, 0x9086);
const ARMOR_DEFENSE_TABLE = Address.of($1a, 0x8bc0);
const SHIELD_DEFENSE_TABLE = Address.of($1a, 0x8bc9);
const MENU_NAME_ENCODE = [
    ['Sword', '\x0a\x0b\x0c'],
    [' of ', '\x5c\x5d'],
    ['Bracelet', '\x3c\x3d\x3e\x5b'],
    ['Shield', '\x0d\x0e\x0f'],
    ['Armor', '\x7b\x11\x12'],
    ['Magic', '\x23\x25\x28'],
    ['Power', '\x13\x14\x15'],
    ['Item', '\x16\x17\x5e'],
];
export class Item extends Entity {
    constructor(items, id, opts = {}) {
        super(items.rom, id);
        this.items = items;
        const rom = this.rom;
        items[id] = this;
        this.itemUseData = [];
        this.trades = opts.trades || [];
        this.use = opts.use || false;
        this.weight = opts.weight || 1;
        this.valueAddr =
            opts.valueAddr != null ? Address.of($0e, opts.valueAddr) : undefined;
        if (this.valueAddr != null)
            this.value = this.valueAddr.read(rom.prg);
        if (this.use) {
            this.itemUseJump =
                this.itemUseJumpPointer.readAddress(rom.prg, $0e, $0f);
            const entries = items.itemUseJumps[this.itemUseJump.org];
            if (!entries)
                throw new Error(`Bad ItemUseJump: ${this.itemUseJump}`);
            let itemUseOffset = this.itemUseDataPointer.readAddress(rom.prg, $0e, $0f);
            for (const entry of entries) {
                const data = ItemUse.from(entry, rom.prg, itemUseOffset);
                this.itemUseData.push(data);
                itemUseOffset = itemUseOffset.plus(data.length);
            }
        }
        this.itemDataValue = this.itemDataPointer.read(rom.prg);
        this.selectedItemValue = this.selectedItemPointer.read(rom.prg);
        const menuNameBase = this.menuNamePointer.readAddress(rom.prg);
        this.menuName =
            MENU_NAME_ENCODE.reduce((s, [d, e]) => s.replace(e, d), readString(rom.prg, menuNameBase.offset, 0xff));
    }
    get messageName() {
        return this.rom.messages.itemNames[this.id];
    }
    set messageName(name) {
        this.rom.messages.itemNames[this.id] = name;
    }
    get basePrice() {
        return this.rom.shops.basePrices[this.id];
    }
    set basePrice(price) {
        this.rom.shops.basePrices[this.id] = price;
    }
    get itemUseJumpPointer() {
        return ITEM_USE_JUMP_TABLE.plus(this.id << 1);
    }
    get itemUseDataPointer() {
        return ITEM_USE_DATA_TABLE.plus(this.id << 1);
    }
    get itemDataPointer() {
        return ITEM_DATA_TABLE.plus(this.id);
    }
    get selectedItemPointer() {
        return SELECTED_ITEM_TABLE.plus(this.id);
    }
    get menuNamePointer() {
        return MENU_NAME_TABLE.plus(this.id << 1);
    }
    itemUseMessages() {
        const messages = new Map();
        for (const { message } of this.itemUseData) {
            messages.set(message.mid, message);
        }
        return [...messages.values()];
    }
    setName(name) {
        this.messageName = this.menuName = name;
    }
    get palette() { return this.itemDataValue & 3; }
    set palette(p) { this.itemDataValue = this.itemDataValue & ~3 | (p & 3); }
    get unique() { return !!(this.itemDataValue & 0x40); }
    set unique(u) { this.itemDataValue = this.itemDataValue & ~0x40 | (u ? 0x40 : 0); }
    get worn() { return !!(this.itemDataValue & 0x20); }
    set worn(w) { this.itemDataValue = this.itemDataValue & ~0x20 | (w ? 0x20 : 0); }
    get solid() { return !!(this.itemDataValue & 0x80); }
    set solid(s) { this.itemDataValue = this.itemDataValue & ~0x80 | (s ? 0x80 : 0); }
    assemble(a) {
        const id = hex(this.id);
        this.itemDataPointer.loc(a, `ItemData_${id}`);
        a.byte(this.itemDataValue);
        this.selectedItemPointer.loc(a, `ItemSelectedValue_${id}`);
        a.byte(this.selectedItemValue);
        const menuNameEncoded = MENU_NAME_ENCODE.reduce((s, [d, e]) => s.replace(d, e), this.menuName);
        a.segment($10);
        a.reloc(`ItemMenuName_${hex(this.id)}`);
        const menuNameAddr = a.pc();
        a.byte(menuNameEncoded, 0xff);
        this.menuNamePointer.loc(a, `ItemMenuName_${id}`);
        a.word(menuNameAddr);
        if (this.itemUseJump) {
            this.itemUseJumpPointer.loc(a, `ItemUseJump_${id}_Ptr`);
            a.word(this.itemUseJump.org);
            const itemUseData = [];
            for (const use of this.itemUseData) {
                itemUseData.push(...use.bytes());
            }
            a.segment($0e.name, $0f.name);
            a.reloc(`ItemUseData_${id}`);
            const usePtr = a.pc();
            a.byte(...itemUseData);
            this.itemUseDataPointer.loc(a, `ItemUseData_${id}_Ptr`);
            a.word(usePtr);
        }
        if (this.valueAddr) {
            this.valueAddr.loc(a, `ItemValue_${id}`);
            a.byte(this.value);
        }
    }
    isMagic() {
        return this.id >= 0x41 && this.id <= 0x48;
    }
}
export class ItemUse {
    constructor(kind, want, message, flags) {
        this.kind = kind;
        this.want = want;
        this.message = message;
        this.flags = flags;
    }
    static from(kind, data, addr) {
        let { offset } = addr;
        let want = 0;
        if (kind === 'expect' || kind === 'screen') {
            want = data[offset + 1] << 8 | data[offset];
            offset += 2;
        }
        else if (kind === 'flag') {
            const flags = ITEM_CONDITION_FLAGS.read(data, offset);
            if (!flags.length)
                flags.push(~0);
            if (flags.length > 1)
                throw new Error(`Flag list too long: ${flags}`);
            want = flags[0];
            offset += 2;
        }
        else if (kind === 'location') {
            want = data[offset++];
        }
        else if (kind !== 'empty') {
            assertNever(kind);
        }
        const message = MessageId.from(data, offset);
        const flags = ITEM_USE_FLAGS.read(data, offset + 2);
        return new ItemUse(kind, want, message, flags);
    }
    bytes() {
        const bytes = [];
        if (this.kind === 'expect' || this.kind === 'screen') {
            bytes.push(this.want & 0xff, (this.want >>> 8) & 0xff);
        }
        else if (this.kind === 'flag') {
            const flagBytes = ITEM_CONDITION_FLAGS.bytes([this.want]);
            if (flagBytes.length !== 2)
                throw new Error(`bad data: ${flagBytes}`);
            bytes.push(...flagBytes);
        }
        else if (this.kind === 'location') {
            bytes.push(this.want);
        }
        else if (this.kind !== 'empty') {
            assertNever(this.kind);
        }
        bytes.push(...this.message.data);
        bytes.push(...ITEM_USE_FLAGS.bytes(this.flags));
        return bytes;
    }
    tradeNpc() {
        if (this.kind !== 'expect')
            return null;
        if ((this.want >>> 8) !== 1)
            return null;
        return this.want & 0xff;
    }
    get length() {
        const header = this.kind === 'empty' ? 0 : this.kind === 'location' ? 1 : 2;
        return 2 * (1 + Math.max(1, this.flags.length)) + header;
    }
}
class Shield extends Item {
    get defense() {
        return this.items.shieldDefense[this.id - 0x0c];
    }
    set defense(def) {
        this.items.shieldDefense[this.id - 0x0c] = def;
    }
}
class Armor extends Item {
    get defense() {
        return this.items.armorDefense[this.id - 0x14];
    }
    set defense(def) {
        this.items.armorDefense[this.id - 0x14] = def;
    }
}
export class Items extends EntityArray {
    constructor(rom) {
        super(0x49);
        this.rom = rom;
        this.itemUseJumps = DEFAULT_ITEM_USE_JUMPS;
        this.SwordOfWind = new Item(this, 0x00);
        this.SwordOfFire = new Item(this, 0x01);
        this.SwordOfWater = new Item(this, 0x02);
        this.SwordOfThunder = new Item(this, 0x03);
        this.Crystalis = new Item(this, 0x04);
        this.BallOfWind = new Item(this, 0x05);
        this.TornadoBracelet = new Item(this, 0x06);
        this.BallOfFire = new Item(this, 0x07);
        this.FlameBracelet = new Item(this, 0x08);
        this.BallOfWater = new Item(this, 0x09);
        this.BlizzardBracelet = new Item(this, 0x0a);
        this.BallOfThunder = new Item(this, 0x0b);
        this.StormBracelet = new Item(this, 0x0c);
        this.CarapaceShield = new Shield(this, 0x0d);
        this.BronzeShield = new Shield(this, 0x0e);
        this.PlatinumShield = new Shield(this, 0x0f);
        this.MirroredShield = new Shield(this, 0x10);
        this.CeramicShield = new Shield(this, 0x11);
        this.SacredShield = new Shield(this, 0x12);
        this.BattleShield = new Shield(this, 0x13);
        this.PsychoShield = new Shield(this, 0x14);
        this.TannedHide = new Armor(this, 0x15);
        this.LeatherArmor = new Armor(this, 0x16);
        this.BronzeArmor = new Armor(this, 0x17);
        this.PlatinumArmor = new Armor(this, 0x18);
        this.SoldierSuit = new Armor(this, 0x19);
        this.CeramicSuit = new Armor(this, 0x1a);
        this.BattleArmor = new Armor(this, 0x1b);
        this.PsychoArmor = new Armor(this, 0x1c);
        this.MedicalHerb = new Item(this, 0x1d, { use: true,
            trades: [0],
            valueAddr: 0x84ea });
        this.Antidote = new Item(this, 0x1e, { use: true });
        this.LysisPlant = new Item(this, 0x1f, { use: true });
        this.FruitOfLime = new Item(this, 0x20, { use: true });
        this.FruitOfPower = new Item(this, 0x21, { use: true,
            valueAddr: 0x850c });
        this.MagicRing = new Item(this, 0x22, { use: true });
        this.FruitOfRepun = new Item(this, 0x23, { use: true });
        this.WarpBoots = new Item(this, 0x24, { use: true });
        this.StatueOfOnyx = new Item(this, 0x25, { use: true, trades: [0] });
        this.OpelStatue = new Item(this, 0x26, { use: true });
        this.InsectFlute = new Item(this, 0x27, { use: true });
        this.FluteOfLime = new Item(this, 0x28, { use: true,
            trades: [0, 1, 2, 3] });
        this.GasMask = new Item(this, 0x29);
        this.PowerRing = new Item(this, 0x2a);
        this.WarriorRing = new Item(this, 0x2b);
        this.IronNecklace = new Item(this, 0x2c);
        this.DeosPendant = new Item(this, 0x2d);
        this.RabbitBoots = new Item(this, 0x2e);
        this.LeatherBoots = new Item(this, 0x2f);
        this.ShieldRing = new Item(this, 0x30);
        this.AlarmFlute = new Item(this, 0x31, { use: true, trades: [0, 1] });
        this.WindmillKey = new Item(this, 0x32, { use: true });
        this.KeyToPrison = new Item(this, 0x33, { use: true });
        this.KeyToStyx = new Item(this, 0x34, { use: true });
        this.FogLamp = new Item(this, 0x35, { use: true, trades: [0] });
        this.ShellFlute = new Item(this, 0x36, { use: true });
        this.EyeGlasses = new Item(this, 0x37, { use: true });
        this.BrokenStatue = new Item(this, 0x38, { use: true });
        this.GlowingLamp = new Item(this, 0x39, { use: true });
        this.StatueOfGold = new Item(this, 0x3a, { use: true });
        this.LovePendant = new Item(this, 0x3b, { use: true, trades: [0] });
        this.KirisaPlant = new Item(this, 0x3c, { use: true, trades: [0] });
        this.IvoryStatue = new Item(this, 0x3d, { use: true, trades: [0] });
        this.BowOfMoon = new Item(this, 0x3e, { use: true });
        this.BowOfSun = new Item(this, 0x3f, { use: true });
        this.BowOfTruth = new Item(this, 0x40, { use: true });
        this.Refresh = new Item(this, 0x41);
        this.Paralysis = new Item(this, 0x42);
        this.Telepathy = new Item(this, 0x43);
        this.Teleport = new Item(this, 0x44);
        this.Recover = new Item(this, 0x45);
        this.Barrier = new Item(this, 0x46);
        this.Change = new Item(this, 0x47);
        this.Flight = new Item(this, 0x48);
        this.armorDefense = tuple(rom.prg, ARMOR_DEFENSE_TABLE.offset, 9);
        this.shieldDefense = tuple(rom.prg, SHIELD_DEFENSE_TABLE.offset, 9);
    }
    write() {
        const a = this.rom.assembler();
        ARMOR_DEFENSE_TABLE.loc(a);
        a.byte(...this.armorDefense);
        SHIELD_DEFENSE_TABLE.loc(a);
        a.byte(...this.shieldDefense);
        const uniqueTable = new Array(10).fill(0);
        for (const item of this) {
            item.assemble(a);
            if (item.unique)
                uniqueTable[item.id >>> 3] |= (1 << (item.id & 7));
        }
        relocExportLabel(a, [$0e, $0f], 'KeyItemData');
        a.byte(...uniqueTable);
        return [a.module()];
    }
}
const DEFAULT_ITEM_USE_JUMPS = {
    0x8439: ['expect'],
    0x8442: ['screen'],
    0x8450: ['empty'],
    0x8451: ['screen'],
    0x845f: ['location'],
    0x8491: ['expect'],
    0x84a9: ['expect', 'expect'],
    0x84b3: ['location'],
    0x84d0: ['expect'],
    0x84db: [],
    0x84e0: ['expect', 'empty'],
    0x8507: ['empty'],
    0x851d: ['empty'],
    0x8524: ['empty'],
    0x852f: ['empty'],
    0x853a: ['empty'],
    0x854a: ['empty'],
    0x8564: ['empty'],
    0x8565: ['expect'],
    0x856b: ['flag'],
    0x8585: ['empty'],
    0x859e: ['expect', 'expect', 'expect', 'expect'],
};
//# sourceMappingURL=data:application/json;base64,