import { Entity } from './entity.js';
import { reverseBits, seq, tuple } from './util.js';
export class Pattern extends Entity {
    constructor(rom, id, pixels) {
        super(rom, id);
        this.pixels = pixels || tuple(rom.chr, id << 4, 16);
    }
    pixelAt(y, x) {
        return (this.pixels[y | 8] >> x & 1) << 1 | (this.pixels[y] >> x & 1);
    }
    flipH() {
        return new Pattern(this.rom, -1, this.pixels.map(reverseBits));
    }
    flipV() {
        return new Pattern(this.rom, -1, seq(16, y => this.pixels[y & 8 | ~y & 7]));
    }
    flip(type) {
        let p = this;
        if (type & Flip.HORIZONTAL)
            p = p.flipH();
        if (type & Flip.VERTICAL)
            p = p.flipV();
        return p;
    }
    write() {
        const a = this.id << 4;
        this.rom.chr.subarray(a, a + 16).set(this.pixels);
        return [];
    }
}
export class Patterns {
    constructor(rom) {
        this._all = [];
        this._all = seq(rom.chr.length >> 4, i => new Pattern(rom, i));
    }
    get(page, tile_idx) {
        if (!tile_idx) {
            return this._all[page];
        }
        return this._all[page | tile_idx];
    }
    set(page, tile_idx, pixels) {
        this._all[page | tile_idx].pixels = pixels;
    }
    [Symbol.iterator]() {
        return this._all[Symbol.iterator]();
    }
}
Patterns.HUD_LF = parsePattern(`
    +xxxxxoo
    +oxxxxo+
    +oxx++o+
    +oxx+oo+
    +++x++o+
    xooo+oo+
    xxxx+xoo
    xxxxoxxx
  `);
Patterns.HUD_PW = parsePattern(`
    +++xxxxx
    +oo+oxxx
    +++oxxxx
    +ooxxxxx
    +o+o+o+x
    xo+o+o+x
    xxo+o+ox
    xxxoxoxx
  `);
Patterns.HUD_EY = parsePattern(`
    +++xxxoo
    +ooxxxo+
    ++x+o+o+
    +oo+o+o+
    +++o+oo+
    ooox+oo+
    xxxx+ooo
    xxxxxxxx
  `);
Patterns.HUD_LV = parsePattern(`
    xxxxxxxx
    +xxxxxxx
    +oxxxxxx
    +ox+ox+o
    +ox+ox+o
    +++x++ox
    xooox+ox
    xxxxxoxx
  `);
Patterns.HUD_DL = parsePattern(`
    xxxxxxxx
    ++xxxxxx
    +o+o+xxx
    +o+o+oxx
    +o+o+oxx
    ++ox+oxx
    xoxx+++x
    xxxxxooo
  `);
Patterns.HUD_MP = parsePattern(`
    +oxx+xxx
    ++o++oxx
    +o+o+oxx
    +oxo+++x
    +oxo+oo+
    xxxx+++o
    xxxx+oox
    xxxx+oxx
  `);
Patterns.HUD_EX = parsePattern(`
    +++xxxxx
    +oooxxxx
    +++xxxxx
    +oooxxxx
    +++x+o+o
    xooox+ox
    xxxx+o+o
    xxxxxoxo
  `);
function parsePattern(data) {
    const text = data.replace(/\s/g, '');
    if (text.length !== 64)
        throw new Error(`Bad CHR tile: ${text}`);
    let arr = new Array(16).fill(0);
    for (let i = 0, c = ''; c = text.charAt(i); ++i) {
        let off = i >>> 3;
        let lo = off;
        let hi = off | 8;
        let col = ~i & 7;
        if (c === '+' || c === 'o') {
            arr[lo] |= 1 << col;
        }
        if (c === 'x' || c === 'o') {
            arr[hi] |= 1 << col;
        }
    }
    return arr;
}
export var Flip;
(function (Flip) {
    Flip[Flip["HORIZONTAL"] = 64] = "HORIZONTAL";
    Flip[Flip["VERTICAL"] = 128] = "VERTICAL";
})(Flip || (Flip = {}));
//# sourceMappingURL=data:application/json;base64,