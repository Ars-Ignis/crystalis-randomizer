import { iters } from '../util.js';
export var ScreenFix;
(function (ScreenFix) {
    ScreenFix[ScreenFix["Unknown"] = 0] = "Unknown";
    ScreenFix[ScreenFix["GrassLongGrass"] = 1] = "GrassLongGrass";
    ScreenFix[ScreenFix["GrassLongGrassRemapping"] = 2] = "GrassLongGrassRemapping";
    ScreenFix[ScreenFix["RiverShortGrass"] = 3] = "RiverShortGrass";
    ScreenFix[ScreenFix["SeaCaveEntrance"] = 4] = "SeaCaveEntrance";
    ScreenFix[ScreenFix["SeaRocks"] = 5] = "SeaRocks";
    ScreenFix[ScreenFix["SeaMarsh"] = 6] = "SeaMarsh";
    ScreenFix[ScreenFix["SeaTrees"] = 7] = "SeaTrees";
    ScreenFix[ScreenFix["DesertShortGrass"] = 8] = "DesertShortGrass";
    ScreenFix[ScreenFix["DesertLongGrass"] = 9] = "DesertLongGrass";
    ScreenFix[ScreenFix["DesertMarsh"] = 10] = "DesertMarsh";
    ScreenFix[ScreenFix["DesertRocks"] = 11] = "DesertRocks";
    ScreenFix[ScreenFix["DesertTrees"] = 12] = "DesertTrees";
    ScreenFix[ScreenFix["DesertTownEntrance"] = 13] = "DesertTownEntrance";
    ScreenFix[ScreenFix["LabyrinthParapets"] = 14] = "LabyrinthParapets";
    ScreenFix[ScreenFix["SwampDoors"] = 15] = "SwampDoors";
    ScreenFix[ScreenFix["ExtraSpikes"] = 16] = "ExtraSpikes";
    ScreenFix[ScreenFix["CloseCaves"] = 17] = "CloseCaves";
    ScreenFix[ScreenFix["WideArenaExits"] = 18] = "WideArenaExits";
})(ScreenFix || (ScreenFix = {}));
export function withRequire(requirement, props) {
    for (const key in props) {
        props[key].requires = [requirement];
    }
    return props;
}
export function fixTilesets(rom) {
    const { desert, grass, lime, mountain, mountainRiver, river, sea } = rom.metatilesets;
    const $ = rom.metascreens;
    $.registerFix(ScreenFix.DesertRocks);
    desert.getTile(0x5f).copyFrom(0x5b).replaceIn($.oasisCave, $.oasisLake);
    desert.getTile(0x5a).copyFrom(0x98).setTiles([, , 0x1a, 0x18]);
    desert.getTile(0x5b).copyFrom(0x80).setTiles([0x34, 0x32, ,]);
    desert.getTile(0x5c).copyFrom(0x80).setTiles([, , 0x37, 0x35]);
    desert.getTile(0x5d).copyFrom(0x80).setTiles([, 0x37, , 0x34]);
    desert.getTile(0x5e).copyFrom(0x80).setTiles([0x35, , 0x32,]);
    $.registerFix(ScreenFix.DesertTrees);
    desert.getTile(0x63).copyFrom(0x71);
    desert.getTile(0x68).copyFrom(0x70);
    desert.getTile(0x69).copyFrom(0x60);
    desert.getTile(0x6a).copyFrom(0x65);
    desert.getTile(0x6c).copyFrom(0x70);
    desert.getTile(0x6e).copyFrom(0x76);
    desert.getTile(0x6f).copyFrom(0x78);
    $.registerFix(ScreenFix.GrassLongGrass);
    grass.getTile(0x40).copyFrom(0x51);
    grass.getTile(0x41).copyFrom(0x52);
    grass.getTile(0x42).copyFrom(0x53);
    grass.getTile(0x43).copyFrom(0x54);
    grass.getTile(0x44).copyFrom(0x55);
    grass.getTile(0x45).copyFrom(0x56);
    grass.getTile(0x46).copyFrom(0x58);
    grass.getTile(0x47).copyFrom(0x59);
    $.registerFix(ScreenFix.SeaCaveEntrance);
    sea.getTile(0xad).copyFrom(0x0a)
        .replaceIn($.beachExitN, $.lighthouseEntrance, $.oceanShrine);
    sea.getTile(0x0a).copyFrom(0xa2);
    $.boundaryN_cave.screen.set2d(0x38, [[null, 0x00, 0x00, null],
        [null, 0x0a, 0x0a, null],
        [null, 0xf7, 0xf7, null],
        [0xf8, 0xf8, 0xf8, 0xf8]]);
    $.cornerSE_cave.screen.set2d(0x49, [[null, 0x00, 0x00],
        [null, 0x0a, 0x0a],
        [null, 0xf7, 0xf7],
        [0xf8, 0xf7, 0xf7],
        [null, 0xfd, 0xf7]]);
    $.cornerSE_cave.screen.set2d(0x4a, [[0x00, 0x00],
        [0x0a, 0x0a],
        [0xf7, 0xf7],
        [0xf8, 0xf7],
        [0x80, 0xfd],
        [0x80, 0xff],
        [0xfa, null]]);
    $.registerFix(ScreenFix.CloseCaves);
    river.getTile(0x07).copyFrom(0x01).replaceIn(...river);
    river.getTile(0x0e).copyFrom(0x02).replaceIn(...river);
    river.getTile(0x20).copyFrom(0x03).replaceIn(...river);
    river.getTile(0x21).copyFrom(0x04).replaceIn(...river);
    for (const ts of [desert, sea, mountain, mountainRiver, lime]) {
        ts.getTile(0x68).copyFrom(0x01).replaceIn(...ts);
        ts.getTile(0x83).copyFrom(0x02).replaceIn(...ts);
        ts.getTile(0x88).copyFrom(0x03).replaceIn(...ts);
        ts.getTile(0x89).copyFrom(0x04).replaceIn(...ts);
    }
    for (const ts of [grass, river, desert]) {
        ts.getTile(0x01).copyFrom(0xc1).setAlternative(0x00);
        ts.getTile(0x02).copyFrom(0xd7).setAlternative(0x0a);
        ts.getTile(0x03).copyFrom(0xc1).setAlternative(0x00);
        ts.getTile(0x04).copyFrom(0xd7).setAlternative(0x0a);
    }
    for (const ts of [sea]) {
        ts.getTile(0x01).copyFrom(0xc1).setAlternative(0x00);
        ts.getTile(0x02).copyFrom(0xcb).setAlternative(0x00);
        ts.getTile(0x03).copyFrom(0xc1).setAlternative(0xc0);
        ts.getTile(0x04).copyFrom(0xcb).setAlternative(0xc0);
        for (let i = 1; i < 5; i++) {
            ts.getTile(i).setTiles(grass.getTile(i).tiles);
        }
    }
    const closedCaves = new Set([
        $.boundaryE_cave, $.boundaryW_cave, $.exitW_cave, $.caveAbovePortoa,
        $.beachCave, $.outsideWindmill,
        $.exitS_cave, $.townExitW_cave,
    ]);
    const waterCaves = new Set([]);
    waterCaves.add($.boundaryN_cave);
    waterCaves.add($.cornerSE_cave);
    for (const scr of [...closedCaves, ...waterCaves]) {
        const exit = scr.data.exits.find(e => e.type === 'cave');
        const pos = Math.min(...exit.exits) - 0x10;
        const tiles = waterCaves.has(scr) ? [[3, 3], [4, 4]] : [[1, 1], [2, 2]];
        scr.screen.set2d(pos, tiles);
        scr.addCustomFlag(true);
    }
    $.outsideWindmill.screen.set2d(0x43, [[0xca, 0x82]]);
    $.townExitW_cave.screen.set2d(0x2a, [[0xca, 0x82]]);
}
export function wideArenaExits(rom) {
    var _a;
    function widen(exits) {
        exits.splice(0, exits.length, ...new Set(iters.concat(...exits.map(e => [e, e + 1, e - 1]))));
    }
    const { fortressArena_through, fortressTrap, hallNS, hallNS_arena, hallNS_arenaWall, hallNS_entrance, } = rom.metascreens;
    hallNS_arena.screen.set2d(0x04, [
        [0x97, 0x76, 0x22, 0x23, 0x23, 0x23, 0x4b, 0x95],
        [0x42, 0x48, 0x22, 0x21, 0x23, 0x23, 0x45, 0x42],
        [0x43, 0x49, 0x2e, 0x23, 0x23, 0x21, 0x46, 0x43],
        [0x44, 0x4a, 0x2e, 0x23, 0x21, 0x21, 0x47, 0x44],
    ]);
    hallNS_arena.setGridTile(' c | a | c ');
    widen(hallNS_arena.findExitByType('edge:top').exits);
    hallNS_arenaWall.screen.set2d(0x04, [
        [0x94, 0x4c, 0x22, 0x21, 0x21, 0x21, 0x4b, 0x93],
        [0x97, 0x4f, 0x00, 0x01, 0x01, 0x02, 0x50, 0x95],
    ]);
    hallNS_arenaWall.setGridTile(' c | a | c ');
    widen(hallNS_arenaWall.findExitByType('edge:top').exits);
    const abductionTrigger = rom.locations.ZebuCave.spawns.find(s => s.isTrigger() && s.id === 0x8c);
    if (abductionTrigger)
        abductionTrigger.yt += 4;
    fortressArena_through.screen.set2d(0x05, [
        [0x5f, 0x22, 0x21, 0x21, 0x21, 0x5f],
        [0xb7, 0x22, 0x21, 0x21, 0x21, 0xb5],
        [0xbf, 0x22, 0x21, 0x21, 0x21, 0xa8],
    ]);
    fortressArena_through.setGridTile(' c | a | w ');
    widen(fortressArena_through.findExitByType('edge:top').exits);
    fortressTrap.screen.set2d(0xc4, [
        [0x3c, 0x3d, 0x21, 0x21, 0x21, 0x21, 0x3b, 0x3c],
        [0x92, 0x4c, 0x22, 0x21, 0x21, 0x21, 0x4b, 0x90],
        [0x94, 0x4c, 0x22, 0x21, 0x21, 0x21, 0x4b, 0x93],
    ]);
    fortressTrap.setGridTile('   | x | c ');
    widen(fortressTrap.findExitByType('edge:bottom').exits);
    for (const location of rom.locations) {
        const meta = location.meta;
        for (const pos of meta.allPos()) {
            const scr = meta.get(pos);
            if (scr === hallNS_entrance && ((_a = meta.get(pos + 16)) === null || _a === void 0 ? void 0 : _a.hasFeature('arena'))) {
                meta.set(pos, hallNS);
                const row = location.screens[pos >>> 4];
                if (row)
                    row[pos & 0xf] = hallNS.sid;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,