import { DEBUG_MODE_FLAGS } from './flags/debug-mode.js';
import { EASY_MODE_FLAGS } from './flags/easy-mode.js';
import { GLITCH_FIX_FLAGS } from './flags/glitch-fixes.js';
import { GLITCH_FLAGS } from './flags/glitches.js';
import { HARD_MODE_FLAGS } from './flags/hard-mode.js';
import { ITEM_FLAGS } from './flags/items.js';
import { MONSTER_FLAGS } from './flags/monsters.js';
import { ROUTING_FLAGS } from './flags/routing.js';
import { SHOP_FLAGS } from './flags/shops.js';
import { TWEAK_FLAGS } from './flags/tweaks.js';
import { WORLD_FLAGS } from './flags/world.js';
import { UsageError } from './util.js';
const REPEATABLE_FLAGS = new Set(['S']);
export const PRESETS = [
    {
        title: 'Casual',
        descr: `Basic flags for a relatively easy playthrough.`,
        flags: 'Ds Edmrsx Fw Mr Rp Sc Sk Sm Tab',
    },
    {
        title: 'Intermediate',
        descr: `Slightly more challenge than Casual but still approachable.`,
        flags: 'Ds Edms Fsw Gt Mr Ps Rpt Sct Skm Tab',
        default: true,
    },
    {
        title: 'Full Shuffle',
        descr: `Slightly harder than intermediate, with full shuffle and no spoiler log.`,
        flags: 'Em Fsw Gt Mert Ps Rprt Sckmt Tabmp Wmtuw',
    },
    {
        title: 'Glitchless',
        descr: `Full shuffle but with no glitches.`,
        flags: 'Em Fcpstw Mert Ps Rprt Sckmt Tab Wmtuw',
    },
    {
        title: 'Advanced',
        descr: `A balanced randomization with quite a bit more difficulty.`,
        flags: 'Fsw Gfprt Hbdgw Mert Ps Roprst Sckt Sm Tabmp Wmtuw',
    },
    {
        title: 'Ludicrous',
        descr: `Pulls out all the stops, may require superhuman feats.`,
        flags: 'Fs Gcfprtw Hbdgmswxz Mert Ps Roprst Sckmt Tabmp Wmtuw',
    },
    {
        title: 'Mattrick',
        descr: 'Not for the faint of heart. Good luck...',
        flags: 'Fcprsw Gt Hbdhwx Mert Ps Ropst Sckmt Tabmp Wmtuw',
    },
    {
        title: 'Tournament: Swiss Round',
        descr: 'Quick-paced full-shuffle flags for Swiss Round of 2019 Tournament',
        flags: 'Es Fcprsw Gt Hd Mr Ps Rpt Sckmt Tab',
    },
];
const PRESETS_BY_KEY = {};
for (const { title, flags } of PRESETS) {
    PRESETS_BY_KEY[`@${title.replace(/ /g, '').toLowerCase()}`] = flags;
}
export const FLAGS = [
    ITEM_FLAGS, WORLD_FLAGS, MONSTER_FLAGS, SHOP_FLAGS, HARD_MODE_FLAGS,
    TWEAK_FLAGS, ROUTING_FLAGS, GLITCH_FLAGS, GLITCH_FIX_FLAGS, EASY_MODE_FLAGS,
    DEBUG_MODE_FLAGS
];
export class FlagSet {
    constructor(str = 'RtGftTab') {
        if (str.startsWith('@')) {
            const expanded = PRESETS_BY_KEY[str.toLowerCase()];
            if (!expanded)
                throw new UsageError(`Unknown preset: ${str}`);
            str = expanded;
        }
        this.flags = {};
        str = str.replace(/[^A-Za-z0-9!]/g, '');
        const re = /([A-Z])([a-z0-9!]+)/g;
        let match;
        while ((match = re.exec(str))) {
            const [, key, value] = match;
            const terms = REPEATABLE_FLAGS.has(key) ? [value] : value;
            for (const term of terms) {
                this.set(key + term, true);
            }
        }
    }
    get(category) {
        return this.flags[category] || [];
    }
    set(flag, value) {
        const key = flag[0];
        const term = flag.substring(1);
        if (!value) {
            const filtered = (this.flags[key] || []).filter(t => t !== term);
            if (filtered.length) {
                this.flags[key] = filtered;
            }
            else {
                delete this.flags[key];
            }
            return;
        }
        this.removeConflicts(flag);
        const terms = (this.flags[key] || []).filter(t => t !== term);
        terms.push(term);
        terms.sort();
        this.flags[key] = terms;
    }
    check(flag) {
        const terms = this.flags[flag[0]];
        return !!(terms && (terms.indexOf(flag.substring(1)) >= 0));
    }
    autoEquipBracelet() {
        return this.check('Ta');
    }
    buffDeosPendant() {
        return this.check('Tb');
    }
    slowDownTornado() {
        return this.check('Tb');
    }
    leatherBootsGiveSpeed() {
        return this.check('Tb');
    }
    rabbitBootsChargeWhileWalking() {
        return this.check('Tb');
    }
    randomizeMusic() {
        return this.check('Tm');
    }
    shuffleSpritePalettes() {
        return this.check('Tp');
    }
    shuffleMonsters() {
        return this.check('Mr');
    }
    shuffleShops() {
        return this.check('Ps');
    }
    bargainHunting() {
        return this.shuffleShops();
    }
    shuffleTowerMonsters() {
        return this.check('Mt');
    }
    shuffleMonsterElements() {
        return this.check('Me');
    }
    shuffleBossElements() {
        return this.shuffleMonsterElements();
    }
    doubleBuffMedicalHerb() {
        return this.check('Em');
    }
    buffMedicalHerb() {
        return !this.check('Hm');
    }
    decreaseEnemyDamage() {
        return this.check('Ed');
    }
    trainer() {
        return this.check('Dt');
    }
    neverDie() {
        return this.check('Di');
    }
    chargeShotsOnly() {
        return this.check('Hc');
    }
    barrierRequiresCalmSea() {
        return true;
    }
    paralysisRequiresPrisonKey() {
        return true;
    }
    sealedCaveRequiresWindmill() {
        return true;
    }
    connectLimeTreeToLeaf() {
        return this.check('Rp');
    }
    storyMode() {
        return this.check('Rs');
    }
    requireHealedDolphinToRide() {
        return this.check('Rd');
    }
    saharaRabbitsRequireTelepathy() {
        return this.check('Rr');
    }
    teleportOnThunderSword() {
        return this.check('Rt');
    }
    orbsOptional() {
        return this.check('Ro');
    }
    randomizeMaps() {
        return this.check('Wm');
    }
    randomizeTrades() {
        return this.check('Wt');
    }
    unidentifiedItems() {
        return this.check('Wu');
    }
    randomizeWalls() {
        return this.check('Ww');
    }
    guaranteeSword() {
        return this.check('Es');
    }
    guaranteeSwordMagic() {
        return !this.check('Hw');
    }
    guaranteeMatchingSword() {
        return !this.check('Hs');
    }
    guaranteeGasMask() {
        return !this.check('Hg');
    }
    guaranteeBarrier() {
        return !this.check('Hb');
    }
    guaranteeRefresh() {
        return this.check('Er');
    }
    disableSwordChargeGlitch() {
        return this.check('Fc');
    }
    disableTeleportSkip() {
        return this.check('Fp');
    }
    disableRabbitSkip() {
        return this.check('Fr');
    }
    disableShopGlitch() {
        return this.check('Fs');
    }
    disableStatueGlitch() {
        return this.check('Ft');
    }
    assumeSwordChargeGlitch() {
        return this.check('Gc');
    }
    assumeGhettoFlight() {
        return this.check('Gf');
    }
    assumeTeleportSkip() {
        return this.check('Gp');
    }
    assumeRabbitSkip() {
        return this.check('Gr');
    }
    assumeStatueGlitch() {
        return this.check('Gt');
    }
    assumeTriggerGlitch() {
        return false;
    }
    assumeWildWarp() {
        return this.check('Gw');
    }
    nerfWildWarp() {
        return this.check('Fw');
    }
    allowWildWarp() {
        return !this.nerfWildWarp();
    }
    randomizeWildWarp() {
        return this.check('Tw');
    }
    blackoutMode() {
        return this.check('Hz');
    }
    hardcoreMode() {
        return this.check('Hh');
    }
    buffDyna() {
        return this.check('Hd');
    }
    expScalingFactor() {
        return this.check('Hx') ? 0.25 : this.check('Ex') ? 2.5 : 1;
    }
    removeConflicts(flag) {
        const re = this.exclusiveFlags(flag);
        if (!re)
            return;
        for (const key in this.flags) {
            if (!this.flags.hasOwnProperty(key))
                continue;
            const terms = this.flags[key].filter(t => !re.test(key + t));
            if (terms.length) {
                this.flags[key] = terms;
            }
            else {
                delete this.flags[key];
            }
        }
    }
    toStringKey(key) {
        if (REPEATABLE_FLAGS.has(key)) {
            return [...this.flags[key]].sort().map(v => key + v).join(' ');
        }
        return key + [...this.flags[key]].sort().join('');
    }
    exclusiveFlags(flag) {
        if (flag.startsWith('S')) {
            return new RegExp(`S.*[${flag.substring(1)}]`);
        }
        const flagForName = this.getFlagForName(flag);
        if (flagForName == null)
            throw new Error(`Unknown flag: ${flag}`);
        return flagForName.conflict;
    }
    getFlagForName(flag) {
        const matchingFlagSection = FLAGS.find(flagSection => {
            return flag.startsWith(flagSection.prefix);
        });
        return matchingFlagSection
            .flags.find(flagToMatch => flagToMatch.flag === flag);
    }
    toString() {
        const keys = Object.keys(this.flags);
        keys.sort();
        return keys.map(k => this.toStringKey(k)).join(' ');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3NldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9mbGFnc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUVyRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3JELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUM1QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUM1QyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFckMsTUFBTSxnQkFBZ0IsR0FBZ0IsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRXJELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBYTtJQUMvQjtRQUNFLEtBQUssRUFBRSxRQUFRO1FBRWYsS0FBSyxFQUFFLGdEQUFnRDtRQUN2RCxLQUFLLEVBQUUsaUNBQWlDO0tBQ3pDO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsY0FBYztRQUVyQixLQUFLLEVBQUUsNkRBQTZEO1FBQ3BFLEtBQUssRUFBRSxzQ0FBc0M7UUFFN0MsT0FBTyxFQUFFLElBQUk7S0FDZDtJQUNE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LENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7REVCVUdfTU9ERV9GTEFHU30gZnJvbSAnLi9mbGFncy9kZWJ1Zy1tb2RlLmpzJztcbmltcG9ydCB7RUFTWV9NT0RFX0ZMQUdTfSBmcm9tICcuL2ZsYWdzL2Vhc3ktbW9kZS5qcyc7XG5pbXBvcnQge0ZsYWcsIEZsYWdTZWN0aW9uLCBQcmVzZXR9IGZyb20gJy4vZmxhZ3MvZmxhZy5qcyc7XG5pbXBvcnQge0dMSVRDSF9GSVhfRkxBR1N9IGZyb20gJy4vZmxhZ3MvZ2xpdGNoLWZpeGVzLmpzJztcbmltcG9ydCB7R0xJVENIX0ZMQUdTfSBmcm9tICcuL2ZsYWdzL2dsaXRjaGVzLmpzJztcbmltcG9ydCB7SEFSRF9NT0RFX0ZMQUdTfSBmcm9tICcuL2ZsYWdzL2hhcmQtbW9kZS5qcyc7XG5pbXBvcnQge0lURU1fRkxBR1N9IGZyb20gJy4vZmxhZ3MvaXRlbXMuanMnO1xuaW1wb3J0IHtNT05TVEVSX0ZMQUdTfSBmcm9tICcuL2ZsYWdzL21vbnN0ZXJzLmpzJztcbmltcG9ydCB7Uk9VVElOR19GTEFHU30gZnJvbSAnLi9mbGFncy9yb3V0aW5nLmpzJztcbmltcG9ydCB7U0hPUF9GTEFHU30gZnJvbSAnLi9mbGFncy9zaG9wcy5qcyc7XG5pbXBvcnQge1RXRUFLX0ZMQUdTfSBmcm9tICcuL2ZsYWdzL3R3ZWFrcy5qcyc7XG5pbXBvcnQge1dPUkxEX0ZMQUdTfSBmcm9tICcuL2ZsYWdzL3dvcmxkLmpzJztcbmltcG9ydCB7VXNhZ2VFcnJvcn0gZnJvbSAnLi91dGlsLmpzJztcblxuY29uc3QgUkVQRUFUQUJMRV9GTEFHUzogU2V0PHN0cmluZz4gPSBuZXcgU2V0KFsnUyddKTtcblxuZXhwb3J0IGNvbnN0IFBSRVNFVFM6IFByZXNldFtdID0gW1xuICB7XG4gICAgdGl0bGU6ICdDYXN1YWwnLFxuXG4gICAgZGVzY3I6IGBCYXNpYyBmbGFncyBmb3IgYSByZWxhdGl2ZWx5IGVhc3kgcGxheXRocm91Z2guYCxcbiAgICBmbGFnczogJ0RzIEVkbXJzeCBGdyBNciBScCBTYyBTayBTbSBUYWInLFxuICB9LFxuICB7XG4gICAgdGl0bGU6ICdJbnRlcm1lZGlhdGUnLFxuXG4gICAgZGVzY3I6IGBTbGlnaHRseSBtb3JlIGNoYWxsZW5nZSB0aGFuIENhc3VhbCBidXQgc3RpbGwgYXBwcm9hY2hhYmxlLmAsXG4gICAgZmxhZ3M6ICdEcyBFZG1zIEZzdyBHdCBNciBQcyBScHQgU2N0IFNrbSBUYWInLFxuXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiAnRnVsbCBTaHVmZmxlJyxcblxuICAgIGRlc2NyOlxuICAgICAgICBgU2xpZ2h0bHkgaGFyZGVyIHRoYW4gaW50ZXJtZWRpYXRlLCB3aXRoIGZ1bGwgc2h1ZmZsZSBhbmQgbm8gc3BvaWxlciBsb2cuYCxcbiAgICBmbGFnczogJ0VtIEZzdyBHdCBNZXJ0IFBzIFJwcnQgU2NrbXQgVGFibXAgV210dXcnLFxuICB9LFxuICB7XG4gICAgdGl0bGU6ICdHbGl0Y2hsZXNzJyxcblxuICAgIGRlc2NyOiBgRnVsbCBzaHVmZmxlIGJ1dCB3aXRoIG5vIGdsaXRjaGVzLmAsXG4gICAgZmxhZ3M6ICdFbSBGY3BzdHcgTWVydCBQcyBScHJ0IFNja210IFRhYiBXbXR1dycsXG4gIH0sXG4gIHtcbiAgICAvLyBUT0RPOiBhZGQgJ0h0JyBmb3IgbWF4aW5nIG91dCB0b3dlciBzY2FsaW5nXG4gICAgdGl0bGU6ICdBZHZhbmNlZCcsXG5cbiAgICBkZXNjcjogYEEgYmFsYW5jZWQgcmFuZG9taXphdGlvbiB3aXRoIHF1aXRlIGEgYml0IG1vcmUgZGlmZmljdWx0eS5gLFxuICAgIGZsYWdzOiAnRnN3IEdmcHJ0IEhiZGd3IE1lcnQgUHMgUm9wcnN0IFNja3QgU20gVGFibXAgV210dXcnLFxuICB9LFxuICB7XG4gICAgLy8gVE9ETzogYWRkICdIdCdcbiAgICB0aXRsZTogJ0x1ZGljcm91cycsXG5cbiAgICBkZXNjcjogYFB1bGxzIG91dCBhbGwgdGhlIHN0b3BzLCBtYXkgcmVxdWlyZSBzdXBlcmh1bWFuIGZlYXRzLmAsXG4gICAgZmxhZ3M6ICdGcyBHY2ZwcnR3IEhiZGdtc3d4eiBNZXJ0IFBzIFJvcHJzdCBTY2ttdCBUYWJtcCBXbXR1dycsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogJ01hdHRyaWNrJyxcblxuICAgIGRlc2NyOiAnTm90IGZvciB0aGUgZmFpbnQgb2YgaGVhcnQuIEdvb2QgbHVjay4uLicsXG4gICAgZmxhZ3M6ICdGY3Byc3cgR3QgSGJkaHd4IE1lcnQgUHMgUm9wc3QgU2NrbXQgVGFibXAgV210dXcnLFxuICB9LFxuICAvLyBUT1VSTkFNRU5UIFBSRVNFVFNcbiAge1xuICAgIHRpdGxlOiAnVG91cm5hbWVudDogU3dpc3MgUm91bmQnLFxuXG4gICAgZGVzY3I6ICdRdWljay1wYWNlZCBmdWxsLXNodWZmbGUgZmxhZ3MgZm9yIFN3aXNzIFJvdW5kIG9mIDIwMTkgVG91cm5hbWVudCcsXG4gICAgZmxhZ3M6ICdFcyBGY3Byc3cgR3QgSGQgTXIgUHMgUnB0IFNja210IFRhYicsXG4gIH0sXG5dO1xuXG4vLyBKdXN0IHRoZSBmbGFncywgbm90IHRoZSB3aG9sZSBkb2N1bWVudGF0aW9uLlxuY29uc3QgUFJFU0VUU19CWV9LRVk6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9ID0ge307XG5mb3IgKGNvbnN0IHt0aXRsZSwgZmxhZ3N9IG9mIFBSRVNFVFMpIHtcbiAgUFJFU0VUU19CWV9LRVlbYEAke3RpdGxlLnJlcGxhY2UoLyAvZywgJycpLnRvTG93ZXJDYXNlKCl9YF0gPSBmbGFncztcbn1cblxuZXhwb3J0IGNvbnN0IEZMQUdTOiBGbGFnU2VjdGlvbltdID0gW1xuICBJVEVNX0ZMQUdTLCBXT1JMRF9GTEFHUywgTU9OU1RFUl9GTEFHUywgU0hPUF9GTEFHUywgSEFSRF9NT0RFX0ZMQUdTLFxuICBUV0VBS19GTEFHUywgUk9VVElOR19GTEFHUywgR0xJVENIX0ZMQUdTLCBHTElUQ0hfRklYX0ZMQUdTLCBFQVNZX01PREVfRkxBR1MsXG4gIERFQlVHX01PREVfRkxBR1Ncbl07XG5cbmV4cG9ydCBjbGFzcyBGbGFnU2V0IHtcbiAgcHJpdmF0ZSBmbGFnczoge1tzZWN0aW9uOiBzdHJpbmddOiBzdHJpbmdbXX07XG5cbiAgY29uc3RydWN0b3Ioc3RyID0gJ1J0R2Z0VGFiJykge1xuICAgIGlmIChzdHIuc3RhcnRzV2l0aCgnQCcpKSB7XG4gICAgICBjb25zdCBleHBhbmRlZCA9IFBSRVNFVFNfQllfS0VZW3N0ci50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGlmICghZXhwYW5kZWQpIHRocm93IG5ldyBVc2FnZUVycm9yKGBVbmtub3duIHByZXNldDogJHtzdHJ9YCk7XG4gICAgICBzdHIgPSBleHBhbmRlZDtcbiAgICB9XG4gICAgdGhpcy5mbGFncyA9IHt9O1xuICAgIC8vIHBhcnNlIHRoZSBzdHJpbmdcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvW15BLVphLXowLTkhXS9nLCAnJyk7XG4gICAgY29uc3QgcmUgPSAvKFtBLVpdKShbYS16MC05IV0rKS9nO1xuICAgIGxldCBtYXRjaDtcbiAgICB3aGlsZSAoKG1hdGNoID0gcmUuZXhlYyhzdHIpKSkge1xuICAgICAgY29uc3QgWywga2V5LCB2YWx1ZV0gPSBtYXRjaDtcbiAgICAgIGNvbnN0IHRlcm1zID0gUkVQRUFUQUJMRV9GTEFHUy5oYXMoa2V5KSA/IFt2YWx1ZV0gOiB2YWx1ZTtcbiAgICAgIGZvciAoY29uc3QgdGVybSBvZiB0ZXJtcykge1xuICAgICAgICB0aGlzLnNldChrZXkgKyB0ZXJtLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQoY2F0ZWdvcnk6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5mbGFnc1tjYXRlZ29yeV0gfHwgW107XG4gIH1cblxuICBzZXQoZmxhZzogc3RyaW5nLCB2YWx1ZTogYm9vbGVhbikge1xuICAgIC8vIGNoZWNrIGZvciBpbmNvbXBhdGlibGUgZmxhZ3MuLi4/XG4gICAgY29uc3Qga2V5ID0gZmxhZ1swXTtcbiAgICBjb25zdCB0ZXJtID0gZmxhZy5zdWJzdHJpbmcoMSk7ICAvLyBhc3NlcnQ6IHRlcm0gaXMgb25seSBsZXR0ZXJzL251bWJlcnNcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAvLyBKdXN0IGRlbGV0ZSAtIHRoYXQncyBlYXN5LlxuICAgICAgY29uc3QgZmlsdGVyZWQgPSAodGhpcy5mbGFnc1trZXldIHx8IFtdKS5maWx0ZXIodCA9PiB0ICE9PSB0ZXJtKTtcbiAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5mbGFnc1trZXldID0gZmlsdGVyZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgdGhpcy5mbGFnc1trZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBBY3R1YWxseSBhZGQgdGhlIGZsYWcuXG4gICAgdGhpcy5yZW1vdmVDb25mbGljdHMoZmxhZyk7XG4gICAgY29uc3QgdGVybXMgPSAodGhpcy5mbGFnc1trZXldIHx8IFtdKS5maWx0ZXIodCA9PiB0ICE9PSB0ZXJtKTtcbiAgICB0ZXJtcy5wdXNoKHRlcm0pO1xuICAgIHRlcm1zLnNvcnQoKTtcbiAgICB0aGlzLmZsYWdzW2tleV0gPSB0ZXJtcztcbiAgfVxuXG4gIGNoZWNrKGZsYWc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHRlcm1zID0gdGhpcy5mbGFnc1tmbGFnWzBdXTtcbiAgICByZXR1cm4gISEodGVybXMgJiYgKHRlcm1zLmluZGV4T2YoZmxhZy5zdWJzdHJpbmcoMSkpID49IDApKTtcbiAgfVxuXG4gIGF1dG9FcXVpcEJyYWNlbGV0KCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdUYScpO1xuICB9XG4gIGJ1ZmZEZW9zUGVuZGFudCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnVGInKTtcbiAgfVxuICBzbG93RG93blRvcm5hZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ1RiJyk7XG4gIH1cbiAgbGVhdGhlckJvb3RzR2l2ZVNwZWVkKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdUYicpO1xuICB9XG4gIHJhYmJpdEJvb3RzQ2hhcmdlV2hpbGVXYWxraW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdUYicpO1xuICB9XG4gIHJhbmRvbWl6ZU11c2ljKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdUbScpO1xuICB9XG4gIHNodWZmbGVTcHJpdGVQYWxldHRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnVHAnKTtcbiAgfVxuXG4gIHNodWZmbGVNb25zdGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnTXInKTtcbiAgfVxuICBzaHVmZmxlU2hvcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ1BzJyk7XG4gIH1cbiAgYmFyZ2Fpbkh1bnRpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2h1ZmZsZVNob3BzKCk7XG4gIH1cblxuICBzaHVmZmxlVG93ZXJNb25zdGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnTXQnKTtcbiAgfVxuICBzaHVmZmxlTW9uc3RlckVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdNZScpO1xuICB9XG4gIHNodWZmbGVCb3NzRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2h1ZmZsZU1vbnN0ZXJFbGVtZW50cygpO1xuICB9XG5cbiAgZG91YmxlQnVmZk1lZGljYWxIZXJiKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdFbScpO1xuICB9XG4gIGJ1ZmZNZWRpY2FsSGVyYigpIHtcbiAgICByZXR1cm4gIXRoaXMuY2hlY2soJ0htJyk7XG4gIH1cbiAgZGVjcmVhc2VFbmVteURhbWFnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnRWQnKTtcbiAgfVxuICB0cmFpbmVyKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdEdCcpO1xuICB9XG4gIG5ldmVyRGllKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdEaScpO1xuICB9XG4gIGNoYXJnZVNob3RzT25seSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnSGMnKTtcbiAgfVxuXG4gIGJhcnJpZXJSZXF1aXJlc0NhbG1TZWEoKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIHRoaXMuY2hlY2soJ1JsJyk7XG4gIH1cbiAgcGFyYWx5c2lzUmVxdWlyZXNQcmlzb25LZXkoKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIHRoaXMuY2hlY2soJ1JsJyk7XG4gIH1cbiAgc2VhbGVkQ2F2ZVJlcXVpcmVzV2luZG1pbGwoKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIHRoaXMuY2hlY2soJ1JsJyk7XG4gIH1cbiAgY29ubmVjdExpbWVUcmVlVG9MZWFmKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdScCcpO1xuICB9XG4gIHN0b3J5TW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnUnMnKTtcbiAgfVxuICByZXF1aXJlSGVhbGVkRG9scGhpblRvUmlkZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnUmQnKTtcbiAgfVxuICBzYWhhcmFSYWJiaXRzUmVxdWlyZVRlbGVwYXRoeSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnUnInKTtcbiAgfVxuICB0ZWxlcG9ydE9uVGh1bmRlclN3b3JkKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdSdCcpO1xuICB9XG4gIG9yYnNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnUm8nKTtcbiAgfVxuXG4gIHJhbmRvbWl6ZU1hcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ1dtJyk7XG4gIH1cbiAgcmFuZG9taXplVHJhZGVzKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdXdCcpO1xuICB9XG4gIHVuaWRlbnRpZmllZEl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdXdScpO1xuICB9XG4gIHJhbmRvbWl6ZVdhbGxzKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdXdycpO1xuICB9XG5cbiAgZ3VhcmFudGVlU3dvcmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ0VzJyk7XG4gIH1cbiAgZ3VhcmFudGVlU3dvcmRNYWdpYygpIHtcbiAgICByZXR1cm4gIXRoaXMuY2hlY2soJ0h3Jyk7XG4gIH1cbiAgZ3VhcmFudGVlTWF0Y2hpbmdTd29yZCgpIHtcbiAgICByZXR1cm4gIXRoaXMuY2hlY2soJ0hzJyk7XG4gIH1cbiAgZ3VhcmFudGVlR2FzTWFzaygpIHtcbiAgICByZXR1cm4gIXRoaXMuY2hlY2soJ0hnJyk7XG4gIH1cbiAgZ3VhcmFudGVlQmFycmllcigpIHtcbiAgICByZXR1cm4gIXRoaXMuY2hlY2soJ0hiJyk7XG4gIH1cbiAgZ3VhcmFudGVlUmVmcmVzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnRXInKTtcbiAgfVxuXG4gIGRpc2FibGVTd29yZENoYXJnZUdsaXRjaCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnRmMnKTtcbiAgfVxuICBkaXNhYmxlVGVsZXBvcnRTa2lwKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdGcCcpO1xuICB9XG4gIGRpc2FibGVSYWJiaXRTa2lwKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdGcicpO1xuICB9XG4gIGRpc2FibGVTaG9wR2xpdGNoKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdGcycpO1xuICB9XG4gIGRpc2FibGVTdGF0dWVHbGl0Y2goKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ0Z0Jyk7XG4gIH1cblxuICBhc3N1bWVTd29yZENoYXJnZUdsaXRjaCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnR2MnKTtcbiAgfVxuICBhc3N1bWVHaGV0dG9GbGlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ0dmJyk7XG4gIH1cbiAgYXNzdW1lVGVsZXBvcnRTa2lwKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdHcCcpO1xuICB9XG4gIGFzc3VtZVJhYmJpdFNraXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ0dyJyk7XG4gIH1cbiAgYXNzdW1lU3RhdHVlR2xpdGNoKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdHdCcpO1xuICB9XG4gIGFzc3VtZVRyaWdnZXJHbGl0Y2goKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9ICAvLyBUT0RPIC0gb25seSB3b3JrcyBvbiBsYW5kP1xuICBhc3N1bWVXaWxkV2FycCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnR3cnKTtcbiAgfVxuXG4gIG5lcmZXaWxkV2FycCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnRncnKTtcbiAgfVxuICBhbGxvd1dpbGRXYXJwKCkge1xuICAgIHJldHVybiAhdGhpcy5uZXJmV2lsZFdhcnAoKTtcbiAgfVxuICByYW5kb21pemVXaWxkV2FycCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnVHcnKTtcbiAgfVxuXG4gIGJsYWNrb3V0TW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygnSHonKTtcbiAgfVxuICBoYXJkY29yZU1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ0hoJyk7XG4gIH1cbiAgYnVmZkR5bmEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soJ0hkJyk7XG4gIH1cblxuICBleHBTY2FsaW5nRmFjdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrKCdIeCcpID8gMC4yNSA6IHRoaXMuY2hlY2soJ0V4JykgPyAyLjUgOiAxO1xuICB9XG5cbiAgLy8gVGhlIGZvbGxvd2luZyBkaWRuJ3QgZW5kIHVwIGdldHRpbmcgdXNlZC5cblxuICAvLyBhbGxvd3MoZmxhZykge1xuICAvLyAgIGNvbnN0IHJlID0gZXhjbHVzaXZlRmxhZ3MoZmxhZyk7XG4gIC8vICAgaWYgKCFyZSkgcmV0dXJuIHRydWU7XG4gIC8vICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5mbGFncykge1xuICAvLyAgICAgaWYgKHRoaXMuZmxhZ3Nba2V5XS5maW5kKHQgPT4gcmUudGVzdChrZXkgKyB0KSkpIHJldHVybiBmYWxzZTtcbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHRydWU7XG4gIC8vIH1cblxuICAvLyBtZXJnZSh0aGF0KSB7XG4gIC8vICAgdGhpcy5mbGFncyA9IHRoYXQuZmxhZ3M7XG4gIC8vIH1cblxuICBwcml2YXRlIHJlbW92ZUNvbmZsaWN0cyhmbGFnOiBzdHJpbmcpIHtcbiAgICAvLyBOT1RFOiB0aGlzIGlzIHNvbWV3aGF0IHJlZHVuZGFudCB3aXRoIHNldChmbGFnLCBmYWxzZSlcbiAgICBjb25zdCByZSA9IHRoaXMuZXhjbHVzaXZlRmxhZ3MoZmxhZyk7XG4gICAgaWYgKCFyZSkgcmV0dXJuO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmxhZ3MpIHtcbiAgICAgIGlmICghdGhpcy5mbGFncy5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcbiAgICAgIGNvbnN0IHRlcm1zID0gdGhpcy5mbGFnc1trZXldLmZpbHRlcih0ID0+ICFyZS50ZXN0KGtleSArIHQpKTtcbiAgICAgIGlmICh0ZXJtcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5mbGFnc1trZXldID0gdGVybXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgdGhpcy5mbGFnc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9TdHJpbmdLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoUkVQRUFUQUJMRV9GTEFHUy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIFsuLi50aGlzLmZsYWdzW2tleV1dLnNvcnQoKS5tYXAodiA9PiBrZXkgKyB2KS5qb2luKCcgJyk7XG4gICAgfVxuICAgIHJldHVybiBrZXkgKyBbLi4udGhpcy5mbGFnc1trZXldXS5zb3J0KCkuam9pbignJyk7XG4gIH1cblxuICBwcml2YXRlIGV4Y2x1c2l2ZUZsYWdzKGZsYWc6IHN0cmluZyk6IFJlZ0V4cHx1bmRlZmluZWQge1xuICAgIGlmIChmbGFnLnN0YXJ0c1dpdGgoJ1MnKSkge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoYFMuKlske2ZsYWcuc3Vic3RyaW5nKDEpfV1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBmbGFnRm9yTmFtZTogRmxhZyA9IHRoaXMuZ2V0RmxhZ0Zvck5hbWUoZmxhZyk7XG4gICAgaWYgKGZsYWdGb3JOYW1lID09IG51bGwpIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBmbGFnOiAke2ZsYWd9YCk7XG4gICAgcmV0dXJuIGZsYWdGb3JOYW1lLmNvbmZsaWN0O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGbGFnRm9yTmFtZShmbGFnOiBzdHJpbmcpOiBGbGFnIHtcbiAgICBjb25zdCBtYXRjaGluZ0ZsYWdTZWN0aW9uID0gRkxBR1MuZmluZChmbGFnU2VjdGlvbiA9PiB7XG4gICAgICByZXR1cm4gZmxhZy5zdGFydHNXaXRoKGZsYWdTZWN0aW9uLnByZWZpeCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gPEZsYWc+KDxGbGFnU2VjdGlvbj5tYXRjaGluZ0ZsYWdTZWN0aW9uKVxuICAgICAgICAuZmxhZ3MuZmluZChmbGFnVG9NYXRjaCA9PiBmbGFnVG9NYXRjaC5mbGFnID09PSBmbGFnKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmZsYWdzKTtcbiAgICBrZXlzLnNvcnQoKTtcbiAgICByZXR1cm4ga2V5cy5tYXAoayA9PiB0aGlzLnRvU3RyaW5nS2V5KGspKS5qb2luKCcgJyk7XG4gIH1cbn1cbiJdfQ==