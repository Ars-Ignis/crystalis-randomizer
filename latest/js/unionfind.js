import { DefaultMap } from "./util.js";
export class UnionFind {
    constructor() {
        this.data = new Map();
        this.sizes = new Map();
    }
    find(elem) {
        if (elem !== elem)
            throw ('nan');
        if (!this.data.has(elem)) {
            this.data.set(elem, elem);
            this.sizes.set(elem, 1);
        }
        let next;
        while (!Object.is((next = this.data.get(elem)), elem)) {
            this.data.set(elem, elem = this.data.get(next));
        }
        return elem;
    }
    union(elems) {
        this.find(elems[0]);
        for (let i = 1; i < elems.length; i++) {
            if (elems[i] !== elems[i])
                throw ('nan');
            this.unionInternal(elems[0], elems[i]);
        }
    }
    unionInternal(a, b) {
        a = this.find(a);
        b = this.find(b);
        if (a === b)
            return;
        const sa = this.sizes.get(a);
        const sb = this.sizes.get(b);
        if (sa < sb) {
            this.sizes.set(b, sa + sb);
            this.data.set(a, b);
        }
        else {
            this.sizes.set(a, sa + sb);
            this.data.set(b, a);
        }
    }
    sets() {
        const sets = new Map();
        for (const elem of this.data.keys()) {
            const root = this.find(elem);
            let set = sets.get(root);
            if (!set)
                sets.set(root, set = new Set());
            set.add(elem);
        }
        return [...sets.values()];
    }
    map() {
        const sets = new DefaultMap(() => new Set());
        for (const elem of this.data.keys()) {
            let set = sets.get(this.find(elem));
            sets.set(elem, set);
            set.add(elem);
        }
        return sets;
    }
    roots() {
        const roots = new Set();
        for (const elem of this.data.keys()) {
            roots.add(this.find(elem));
        }
        return [...roots];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pb25maW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL3VuaW9uZmluZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXJDLE1BQU0sT0FBTyxTQUFTO0lBQXRCO1FBRW1CLFNBQUksR0FBYyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzVCLFVBQUssR0FBbUIsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQW9FckQsQ0FBQztJQWpFQyxJQUFJLENBQUMsSUFBTztRQUNWLElBQUksSUFBSSxLQUFLLElBQUk7WUFBRSxNQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDekI7UUFDRCxJQUFJLElBQU8sQ0FBQztRQUNaLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQVU7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEtBQUssSUFBSSxD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LElBQUksQ0FBQyxDQUFDLENBQUM7U0FDNUI7UUFDRCxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNwQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RlZmF1bHRNYXB9IGZyb20gXCIuL3V0aWwuanNcIjtcblxuZXhwb3J0IGNsYXNzIFVuaW9uRmluZDxUPiB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBkYXRhOiBNYXA8VCwgVD4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2l6ZXM6IE1hcDxULCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuXG4gIC8qKiBSZXR1cm5zIHRoZSBjYW5vbmljYWwgZWxlbWVudCBmb3IgdGhlIGdpdmVuIGVudHJ5LiAqL1xuICBmaW5kKGVsZW06IFQpOiBUIHtcbiAgICBpZiAoZWxlbSAhPT0gZWxlbSkgdGhyb3coJ25hbicpO1xuICAgIGlmICghdGhpcy5kYXRhLmhhcyhlbGVtKSkge1xuICAgICAgdGhpcy5kYXRhLnNldChlbGVtLCBlbGVtKTtcbiAgICAgIHRoaXMuc2l6ZXMuc2V0KGVsZW0sIDEpO1xuICAgIH1cbiAgICBsZXQgbmV4dDogVDtcbiAgICB3aGlsZSAoIU9iamVjdC5pcygobmV4dCA9IHRoaXMuZGF0YS5nZXQoZWxlbSkhKSwgZWxlbSkpIHtcbiAgICAgIHRoaXMuZGF0YS5zZXQoZWxlbSwgZWxlbSA9IHRoaXMuZGF0YS5nZXQobmV4dCkhKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW07XG4gIH1cblxuICB1bmlvbihlbGVtczogVFtdKSB7XG4gICAgdGhpcy5maW5kKGVsZW1zWzBdKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZWxlbXNbaV0gIT09IGVsZW1zW2ldKSB0aHJvdygnbmFuJyk7XG4gICAgICB0aGlzLnVuaW9uSW50ZXJuYWwoZWxlbXNbMF0sIGVsZW1zW2ldKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVuaW9uSW50ZXJuYWwoYTogVCwgYjogVCkge1xuICAgIGEgPSB0aGlzLmZpbmQoYSk7XG4gICAgYiA9IHRoaXMuZmluZChiKTtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuO1xuICAgIGNvbnN0IHNhID0gdGhpcy5zaXplcy5nZXQoYSkhO1xuICAgIGNvbnN0IHNiID0gdGhpcy5zaXplcy5nZXQoYikhO1xuICAgIGlmIChzYSA8IHNiKSB7XG4gICAgICB0aGlzLnNpemVzLnNldChiLCBzYSArIHNiKTtcbiAgICAgIHRoaXMuZGF0YS5zZXQoYSwgYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2l6ZXMuc2V0KGEsIHNhICsgc2IpO1xuICAgICAgdGhpcy5kYXRhLnNldChiLCBhKTtcbiAgICB9XG4gIH1cblxuICBzZXRzKCk6IFNldDxUPltdIHtcbiAgICBjb25zdCBzZXRzID0gbmV3IE1hcDxULCBTZXQ8VD4+KCk7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIHRoaXMuZGF0YS5rZXlzKCkpIHtcbiAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLmZpbmQoZWxlbSk7XG4gICAgICBsZXQgc2V0ID0gc2V0cy5nZXQocm9vdCk7XG4gICAgICBpZiAoIXNldCkgc2V0cy5zZXQocm9vdCwgc2V0ID0gbmV3IFNldDxUPigpKTtcbiAgICAgIHNldC5hZGQoZWxlbSk7XG4gICAgfVxuICAgIHJldHVybiBbLi4uc2V0cy52YWx1ZXMoKV07XG4gIH1cblxuICAvKiogQHJldHVybiBtYXAgb2YgYWxsIGVsZW1lbnRzIHRvIHRoZWlyIGVxdWl2YWxlbmNlIHNldC4gKi9cbiAgbWFwKCk6IE1hcDxULCBTZXQ8VD4+IHtcbiAgICBjb25zdCBzZXRzID0gbmV3IERlZmF1bHRNYXA8VCwgU2V0PFQ+PigoKSA9PiBuZXcgU2V0KCkpO1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiB0aGlzLmRhdGEua2V5cygpKSB7XG4gICAgICBsZXQgc2V0ID0gc2V0cy5nZXQodGhpcy5maW5kKGVsZW0pKTtcbiAgICAgIHNldHMuc2V0KGVsZW0sIHNldCk7XG4gICAgICBzZXQuYWRkKGVsZW0pO1xuICAgIH1cbiAgICByZXR1cm4gc2V0cztcbiAgfVxuXG4gIHJvb3RzKCk6IFRbXSB7XG4gICAgY29uc3Qgcm9vdHMgPSBuZXcgU2V0PFQ+KCk7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIHRoaXMuZGF0YS5rZXlzKCkpIHtcbiAgICAgIHJvb3RzLmFkZCh0aGlzLmZpbmQoZWxlbSkpO1xuICAgIH1cbiAgICByZXR1cm4gWy4uLnJvb3RzXTtcbiAgfVxufVxuIl19