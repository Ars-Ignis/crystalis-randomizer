export class TilesetPalette {
    constructor(context) {
        this.context = context;
        this.rom = context.rom;
        this.graphics = context.graphics;
        const grid = this.el = document.createElement('div');
        grid.classList.add('tileset-palette-grid');
        grid.addEventListener('dragstart', (ev) => this.handleDragStart(ev));
        grid.addEventListener('click', (ev) => this.handleClick(ev));
        for (let i = 0; i < 256; i++) {
            const img = document.createElement('img');
            img.dataset['index'] = String(i);
            img.draggable = true;
            grid.appendChild(img);
        }
        (async () => {
            for await (const update of context.updates()) {
                if (update.graphics)
                    this.redraw();
            }
        })();
    }
    redraw() {
        const tileset = this.rom.tileset(this.context.tileset);
        for (let tile = 0; tile < 256; tile++) {
            let attr = tileset.attrs[tile];
            const pal = attr < 3 ? this.context.tilePalettes[attr] : 0x7f;
            this.el.children[tile].src =
                this.graphics.metatile(tile, this.context.tilePatterns, this.context.tileset, pal);
        }
        this.el.style.background = this.graphics.paletteCss(this.context.tilePalettes[0]);
    }
    handleDragStart(ev) {
        const target = ev.target;
        if (!target.dataset['index'])
            return;
        const index = Number(target.dataset['index']);
        if (!ev.dataTransfer)
            throw new Error(`Expected data: ${ev}`);
        ev.dataTransfer.setData('application/json', JSON.stringify({
            'metatile': index,
            'png': target.src,
        }));
    }
    handleClick(ev) {
        const target = ev.target;
        if (!target.dataset['index'])
            return;
        const index = Number(target.dataset['index']);
        if (ev.shiftKey) {
            this.context.selection = {
                'metatile': index,
                'png': target.src,
            };
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZXNldHBhbGV0dGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvZWRpdC90aWxlc2V0cGFsZXR0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxNQUFNLE9BQU8sY0FBYztJQU96QixZQUFxQixPQUFnQjtRQUFoQixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ25DLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFHM0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFlLENBQUMsQ0FBQyxDQUFDO1FBRWxGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFFM0UsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7UUFDRCxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ1YsSUFBSSxLQUFLLEVBQUUsTUFBTSxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUM1QyxJQUFJLE1BQU0sQ0FBQyxRQUFRO29CQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNwQztRQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkQsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNyQyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDN0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFzQixDQUFDLEdBQUc7Z0JBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDdkQ7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRU8sZUFBZSxDQUFDLEVBQWE7UUFDbkMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQTBCLENBQUM7UUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQUUsT0FBTztRQUNyQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUQsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN6RCxVQUFVLEVBQUUsS0FBSztZQUNqQixLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUc7U0FDbEIsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBRU8sV0FBVyxDQUFDLEVBQWM7UUFDaEMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQTBCLENBQUM7UUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQUUsT0FBTztRQUNyQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzlDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHO2dCQUN2QixVQUFVLEVBQUUsS0FBSztnQkFDakIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHO2FBQ2xCLENBQUM7U0FDSDtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRpbGVzZXQgcGFsZXR0ZVxuXG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7Q29udGV4dH0gZnJvbSAnLi9jb250ZXh0LmpzJztcbmltcG9ydCB7R3JhcGhpY3N9IGZyb20gJy4vZ3JhcGhpY3MuanMnO1xuXG5leHBvcnQgY2xhc3MgVGlsZXNldFBhbGV0dGUge1xuICAvLyBTZWxlY3Rpb24gY29udGV4dCB3LyBjdXJyZW50IHNjcmVlbi90aWxlc2V0L3BhdHRlcm5zL2V0Yz9cblxuICByZWFkb25seSBlbDogSFRNTERpdkVsZW1lbnQ7XG4gIHJlYWRvbmx5IHJvbTogUm9tO1xuICByZWFkb25seSBncmFwaGljczogR3JhcGhpY3M7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgY29udGV4dDogQ29udGV4dCkge1xuICAgIHRoaXMucm9tID0gY29udGV4dC5yb207XG4gICAgdGhpcy5ncmFwaGljcyA9IGNvbnRleHQuZ3JhcGhpY3M7XG4gICAgY29uc3QgZ3JpZCA9IHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBncmlkLmNsYXNzTGlzdC5hZGQoJ3RpbGVzZXQtcGFsZXR0ZS1ncmlkJyk7XG4gICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyIGZvciBkcm9wIGV2ZW50c1xuICAgIC8vZ3JpZC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgKGV2KSA9PiB0aGlzLmhhbmRsZURyb3AoZXYgYXMgRHJhZ0V2ZW50KSk7XG4gICAgZ3JpZC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCAoZXYpID0+IHRoaXMuaGFuZGxlRHJhZ1N0YXJ0KGV2IGFzIERyYWdFdmVudCkpO1xuICAgIC8vZ3JpZC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIChldikgPT4gZXYucHJldmVudERlZmF1bHQoKSk7XG4gICAgZ3JpZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4gdGhpcy5oYW5kbGVDbGljayhldiBhcyBNb3VzZUV2ZW50KSk7XG4gICAgLy8gYWRkIDI0MCBjaGlsZHJlblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgaW1nLmRhdGFzZXRbJ2luZGV4J10gPSBTdHJpbmcoaSk7XG4gICAgICBpbWcuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgIGdyaWQuYXBwZW5kQ2hpbGQoaW1nKTtcbiAgICB9XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgIGZvciBhd2FpdCAoY29uc3QgdXBkYXRlIG9mIGNvbnRleHQudXBkYXRlcygpKSB7XG4gICAgICAgIGlmICh1cGRhdGUuZ3JhcGhpY3MpIHRoaXMucmVkcmF3KCk7XG4gICAgICB9XG4gICAgfSkoKTtcbiAgfVxuXG4gIHJlZHJhdygpIHtcbiAgICBjb25zdCB0aWxlc2V0ID0gdGhpcy5yb20udGlsZXNldCh0aGlzLmNvbnRleHQudGlsZXNldCk7XG4gICAgZm9yIChsZXQgdGlsZSA9IDA7IHRpbGUgPCAyNTY7IHRpbGUrKykge1xuICAgICAgbGV0IGF0dHIgPSB0aWxlc2V0LmF0dHJzW3RpbGVdO1xuICAgICAgY29uc3QgcGFsID0gYXR0ciA8IDMgPyB0aGlzLmNvbnRleHQudGlsZVBhbGV0dGVzW2F0dHJdIDogMHg3ZjtcbiAgICAgICh0aGlzLmVsLmNoaWxkcmVuW3RpbGVdIGFzIEhUTUxJbWFnZUVsZW1lbnQpLnNyYyA9XG4gICAgICAgICAgdGhpcy5ncmFwaGljcy5tZXRhdGlsZSh0aWxlLCB0aGlzLmNvbnRleHQudGlsZVBhdHRlcm5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnRpbGVzZXQsIHBhbCk7XG4gICAgfVxuICAgIHRoaXMuZWwuc3R5bGUuYmFja2dyb3VuZCA9IHRoaXMuZ3JhcGhpY3MucGFsZXR0ZUNzcyh0aGlzLmNvbnRleHQudGlsZVBhbGV0dGVzWzBdKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRHJhZ1N0YXJ0KGV2OiBEcmFnRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldi50YXJnZXQgYXMgSFRNTEltYWdlRWxlbWVudDtcbiAgICBpZiAoIXRhcmdldC5kYXRhc2V0WydpbmRleCddKSByZXR1cm47XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIodGFyZ2V0LmRhdGFzZXRbJ2luZGV4J10pO1xuICAgIGlmICghZXYuZGF0YVRyYW5zZmVyKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGRhdGE6ICR7ZXZ9YCk7XG4gICAgZXYuZGF0YVRyYW5zZmVyLnNldERhdGEoJ2FwcGxpY2F0aW9uL2pzb24nLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAnbWV0YXRpbGUnOiBpbmRleCxcbiAgICAgICdwbmcnOiB0YXJnZXQuc3JjLFxuICAgIH0pKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ2xpY2soZXY6IE1vdXNlRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldi50YXJnZXQgYXMgSFRNTEltYWdlRWxlbWVudDtcbiAgICBpZiAoIXRhcmdldC5kYXRhc2V0WydpbmRleCddKSByZXR1cm47XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIodGFyZ2V0LmRhdGFzZXRbJ2luZGV4J10pO1xuICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgdGhpcy5jb250ZXh0LnNlbGVjdGlvbiA9IHtcbiAgICAgICAgJ21ldGF0aWxlJzogaW5kZXgsXG4gICAgICAgICdwbmcnOiB0YXJnZXQuc3JjLFxuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==