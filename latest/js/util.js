export class Deque {
    constructor() {
        this.buffer = new Array(16);
        this.mask = 0xf;
        this.start = 0;
        this.end = 0;
        this.size = 0;
    }
    get length() {
        return this.size;
    }
    upsize(target) {
        while (this.mask < target) {
            if (this.end <= this.start)
                this.start += this.mask + 1;
            this.mask = this.mask << 1 | 1;
            this.buffer = this.buffer.concat(this.buffer);
        }
        this.size = target;
    }
    push(...elems) {
        this.upsize(this.size + elems.length);
        for (const elem of elems) {
            this.buffer[this.end] = elem;
            this.end = (this.end + 1) & this.mask;
        }
    }
    pop() {
        if (!this.size)
            return undefined;
        this.end = (this.end - 1) & this.mask;
        this.size--;
        return this.buffer[this.end];
    }
    peek() {
        if (!this.size)
            return undefined;
        return this.buffer[(this.end - 1) & this.mask];
    }
    unshift(...elems) {
        this.upsize(this.size + elems.length);
        for (const elem of elems) {
            this.start = (this.start - 1) & this.mask;
            this.buffer[this.start] = elem;
        }
    }
    shift() {
        if (!this.size)
            return undefined;
        const result = this.buffer[this.start];
        this.start = (this.start + 1) & this.mask;
        this.size--;
        return result;
    }
    front() {
        if (!this.size)
            return undefined;
        return this.buffer[this.start];
    }
    toString() {
        const parts = new Array(this.size);
        for (let i = 0; i < this.size; i++) {
            parts[i] = this.buffer[(this.start + i) & this.mask];
        }
        return `[${parts.join(', ')}]`;
    }
}
export const breakLines = (str, len) => {
    str = str.trim();
    const out = [];
    while (str.length > len) {
        let b = str.substring(0, len).lastIndexOf(' ');
        if (b < 0)
            b = len;
        out.push(str.substring(0, b).trim());
        str = str.substring(b).trim();
    }
    out.push(str.trim());
    return out;
};
export class UsageError extends Error {
}
export class SuffixTrie {
    constructor(key = '') {
        this.key = key;
        this.next = new Map();
    }
    get(key) {
        let t = this;
        for (let i = key.length - 1; i >= 0 && t; i++) {
            t = t.next.get(key[i]);
        }
        return t && t.data;
    }
    with(c) {
        let t = this.next.get(c);
        if (!t)
            this.next.set(c, (t = new SuffixTrie(c + this.key)));
        return t;
    }
    set(key, value) {
        let t = this;
        for (let i = key.length - 1; i >= 0 && t; i++) {
            t = t.with(key[i]);
        }
        t.data = value;
    }
    *values() {
        const stack = [this];
        while (stack.length) {
            const top = stack.pop();
            if (top.data)
                yield top.data;
            stack.push(...top.next.values());
        }
    }
}
export class DefaultMap extends Map {
    constructor(supplier, init) {
        super(init);
        this.supplier = supplier;
    }
    get(key) {
        let value = super.get(key);
        if (value == null)
            super.set(key, value = this.supplier(key));
        return value;
    }
}
export class IndexedSet {
    constructor() {
        this.forward = [];
        this.reverse = new Map();
    }
    add(elem) {
        let result = this.reverse.get(elem);
        if (result == null)
            this.reverse.set(elem, result = this.forward.push(elem) - 1);
        return result;
    }
    get(index) {
        return this.forward[index];
    }
}
export var iters;
(function (iters_1) {
    function* concat(...iters) {
        for (const iter of iters) {
            yield* iter;
        }
    }
    iters_1.concat = concat;
    function* map(iter, f) {
        for (const elem of iter) {
            yield f(elem);
        }
    }
    iters_1.map = map;
    function* filter(iter, f) {
        for (const elem of iter) {
            if (f(elem))
                yield elem;
        }
    }
    iters_1.filter = filter;
    function* flatMap(iter, f) {
        for (const elem of iter) {
            yield* f(elem);
        }
    }
    iters_1.flatMap = flatMap;
    function count(iter) {
        let count = 0;
        for (const _ of iter) {
            count++;
        }
        return count;
    }
    iters_1.count = count;
})(iters || (iters = {}));
const INVALIDATED = Symbol('Invalidated');
const SIZE = Symbol('Size');
class SetMultimapSetView {
    constructor(ownerMap, ownerKey, currentSet) {
        this.ownerMap = ownerMap;
        this.ownerKey = ownerKey;
        this.currentSet = currentSet;
    }
    getCurrentSet() {
        if (!this.currentSet || this.currentSet[INVALIDATED]) {
            this.currentSet = this.ownerMap.get(this.ownerKey) || new Set();
        }
        return this.currentSet;
    }
    mutateSet(f) {
        const set = this.getCurrentSet();
        const size = set.size;
        try {
            return f(set);
        }
        finally {
            this.ownerMap[SIZE] += set.size - size;
            if (!set.size) {
                this.ownerMap.delete(this.ownerKey);
                set[INVALIDATED] = true;
            }
        }
    }
    add(elem) {
        this.mutateSet(s => s.add(elem));
        return this;
    }
    has(elem) {
        return this.getCurrentSet().has(elem);
    }
    clear() {
        this.mutateSet(s => s.clear());
    }
    delete(elem) {
        return this.mutateSet(s => s.delete(elem));
    }
    [Symbol.iterator]() {
        return this.getCurrentSet()[Symbol.iterator]();
    }
    values() {
        return this.getCurrentSet().values();
    }
    keys() {
        return this.getCurrentSet().keys();
    }
    entries() {
        return this.getCurrentSet().entries();
    }
    forEach(callback, thisArg) {
        this.getCurrentSet().forEach(callback, thisArg);
    }
    get size() {
        return this.getCurrentSet().size;
    }
    get [Symbol.toStringTag]() {
        return 'Set';
    }
}
Reflect.setPrototypeOf(SetMultimapSetView.prototype, Set.prototype);
export class SetMultimap {
    constructor(entries = []) {
        this.map = new Map();
        this.map[SIZE] = 0;
        for (const [k, v] of entries) {
            this.add(k, v);
        }
    }
    get size() {
        return this.map[SIZE];
    }
    get(k) {
        return new SetMultimapSetView(this.map, k, this.map.get(k));
    }
    add(k, v) {
        let set = this.map.get(k);
        if (!set)
            this.map.set(k, set = new Set());
        const size = set.size;
        set.add(v);
        this.map[SIZE] += set.size - size;
    }
}
export class Multiset {
    constructor(entries = []) {
        this.entries = new DefaultMap(() => 0, entries);
    }
    add(elem) {
        this.entries.set(elem, this.entries.get(elem) + 1);
    }
    delete(elem) {
        const count = this.entries.get(elem) - 1;
        if (count > 0) {
            this.entries.set(elem, count);
        }
        else {
            this.entries.delete(elem);
        }
    }
    unique() {
        return this.entries.size;
    }
    count(elem) {
        return this.entries.has(elem) ? this.entries.get(elem) : 0;
    }
    [Symbol.iterator]() {
        return this.entries.entries();
    }
}
export function assertNever(x) {
    throw new Error(`non-exhaustive check: ${x}`);
}
export function isNonNull(x) {
    return x != null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxLQUFLO0lBQWxCO1FBRVUsV0FBTSxHQUFzQixJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQyxTQUFJLEdBQVcsR0FBRyxDQUFDO1FBQ25CLFVBQUssR0FBVyxDQUFDLENBQUM7UUFDbEIsUUFBRyxHQUFXLENBQUMsQ0FBQztRQUNoQixTQUFJLEdBQVcsQ0FBQyxDQUFDO0lBK0QzQixDQUFDO0lBN0RDLElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWM7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sRUFBRTtZQUN6QixJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUs7Z0JBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBRyxLQUFVO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxD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QUFDO0lBQ3JELENBQUM7SUFDRCxNQUFNLENBQUMsSUFBTztRQUNaLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUNELE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFDRCxLQUFLLENBQUMsSUFBTztRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUNELENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0NBQ0Y7QUFHRCxNQUFNLFVBQVUsV0FBVyxDQUFDLENBQVE7SUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBZSxDQUFtQjtJQUN6RCxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBEZXF1ZTxUPiB7XG5cbiAgcHJpdmF0ZSBidWZmZXI6IChUIHwgdW5kZWZpbmVkKVtdID0gbmV3IEFycmF5KDE2KTtcbiAgcHJpdmF0ZSBtYXNrOiBudW1iZXIgPSAweGY7XG4gIHByaXZhdGUgc3RhcnQ6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgZW5kOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIHNpemU6IG51bWJlciA9IDA7XG5cbiAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNpemU7XG4gIH1cblxuICB1cHNpemUodGFyZ2V0OiBudW1iZXIpIHtcbiAgICB3aGlsZSAodGhpcy5tYXNrIDwgdGFyZ2V0KSB7XG4gICAgICBpZiAodGhpcy5lbmQgPD0gdGhpcy5zdGFydCkgdGhpcy5zdGFydCArPSB0aGlzLm1hc2sgKyAxO1xuICAgICAgdGhpcy5tYXNrID0gdGhpcy5tYXNrIDw8IDEgfCAxO1xuICAgICAgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5jb25jYXQodGhpcy5idWZmZXIpO1xuICAgIH1cbiAgICB0aGlzLnNpemUgPSB0YXJnZXQ7XG4gIH1cblxuICBwdXNoKC4uLmVsZW1zOiBUW10pIHtcbiAgICB0aGlzLnVwc2l6ZSh0aGlzLnNpemUgKyBlbGVtcy5sZW5ndGgpO1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiBlbGVtcykge1xuICAgICAgdGhpcy5idWZmZXJbdGhpcy5lbmRdID0gZWxlbTtcbiAgICAgIHRoaXMuZW5kID0gKHRoaXMuZW5kICsgMSkgJiB0aGlzLm1hc2s7XG4gICAgfVxuICB9XG5cbiAgcG9wKCk6IFQgfCB1bmRlZmluZWQge1xuICAgIGlmICghdGhpcy5zaXplKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5kID0gKHRoaXMuZW5kIC0gMSkgJiB0aGlzLm1hc2s7XG4gICAgdGhpcy5zaXplLS07XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuZW5kXTtcbiAgfVxuXG4gIHBlZWsoKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF0aGlzLnNpemUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyWyh0aGlzLmVuZCAtIDEpICYgdGhpcy5tYXNrXTtcbiAgfVxuXG4gIHVuc2hpZnQoLi4uZWxlbXM6IFRbXSkge1xuICAgIHRoaXMudXBzaXplKHRoaXMuc2l6ZSArIGVsZW1zLmxlbmd0aCk7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIGVsZW1zKSB7XG4gICAgICB0aGlzLnN0YXJ0ID0gKHRoaXMuc3RhcnQgLSAxKSAmIHRoaXMubWFzaztcbiAgICAgIHRoaXMuYnVmZmVyW3RoaXMuc3RhcnRdID0gZWxlbTtcbiAgICB9XG4gIH1cblxuICBzaGlmdCgpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoIXRoaXMuc2l6ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1ZmZlclt0aGlzLnN0YXJ0XTtcbiAgICB0aGlzLnN0YXJ0ID0gKHRoaXMuc3RhcnQgKyAxKSAmIHRoaXMubWFzaztcbiAgICB0aGlzLnNpemUtLTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnJvbnQoKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF0aGlzLnNpemUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuc3RhcnRdO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgcGFydHMgPSBuZXcgQXJyYXkodGhpcy5zaXplKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSsrKSB7XG4gICAgICBwYXJ0c1tpXSA9IHRoaXMuYnVmZmVyWyh0aGlzLnN0YXJ0ICsgaSkgJiB0aGlzLm1hc2tdO1xuICAgIH1cbiAgICByZXR1cm4gYFske3BhcnRzLmpvaW4oJywgJyl9XWA7XG4gIH1cbn1cblxuLy8gLyoqIEB0ZW1wbGF0ZSBUICovXG4vLyBleHBvcnQgY2xhc3MgRGVxdWVTZXQge1xuLy8gICBjb25zdHJ1Y3RvcigpIHtcbi8vICAgICAvKiogQHR5cGUgeyFBcnJheTxUfHVuZGVmaW5lZD59ICovXG4vLyAgICAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXkoMTYpO1xuLy8gICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuLy8gICAgIHRoaXMubWFzayA9IDB4Zjtcbi8vICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbi8vICAgICB0aGlzLnN0YXJ0ID0gMDtcbi8vICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbi8vICAgICB0aGlzLmVuZCA9IDA7XG4vLyAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4vLyAgICAgdGhpcy5zaXplID0gMDsgLy8gcmVhZG9ubHkgZXh0ZXJuYWxseVxuLy8gICAgIC8qKiBAdHlwZSB7IVNldDxUPn0gKi9cbi8vICAgICB0aGlzLnNldCA9IG5ldyBTZXQoKTtcbi8vICAgfVxuXG4vLyAgIHVwc2l6ZSh0YXJnZXQpIHtcbi8vICAgICB3aGlsZSAodGhpcy5tYXNrIDwgdGFyZ2V0KSB7XG4vLyAgICAgICB0aGlzLnN0YXJ0ICs9IHRoaXMubWFzayArIDE7XG4vLyAgICAgICB0aGlzLm1hc2sgPSB0aGlzLm1hc2sgPDwgMSB8IDE7XG4vLyAgICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcik7XG4vLyAgICAgfVxuLy8gICAgIHRoaXMuc2l6ZSA9IHRhcmdldDtcbi8vICAgfVxuXG4vLyAgIC8qKiBAcGFyYW0gey4uLlR9IGVsZW0gKi9cbi8vICAgcHVzaCguLi5lbGVtcykge1xuLy8gICAgIHRoaXMudXBzaXplKHRoaXMuc2l6ZSArIGVsZW1zLmxlbmd0aCk7XG4vLyAgICAgZm9yIChjb25zdCBlbGVtIG9mIGVsZW1zKSB7XG4vLyAgICAgICBpZiAodGhpcy5zZXQuaGFzKGVsZW0pKSB7XG4vLyAgICAgICAgIHRoaXMuc2l6ZS0tO1xuLy8gICAgICAgICBjb250aW51ZTtcbi8vICAgICAgIH1cbi8vICAgICAgIHRoaXMuYnVmZmVyW3RoaXMuZW5kXSA9IGVsZW07XG4vLyAgICAgICB0aGlzLmVuZCA9ICh0aGlzLmVuZCArIDEpICYgdGhpcy5tYXNrO1xuLy8gICAgIH1cbi8vICAgfVxuXG4vLyAgIC8qKiBAcmV0dXJuIHtUfHVuZGVmaW5lZH0gKi9cbi8vICAgcG9wKCkge1xuLy8gICAgIGlmICghdGhpcy5zaXplKSByZXR1cm4gdW5kZWZpbmVkO1xuLy8gICAgIHRoaXMuZW5kID0gKHRoaXMuZW5kIC0gMSkgJiB0aGlzLm1hc2s7XG4vLyAgICAgdGhpcy5zaXplLS07XG4vLyAgICAgY29uc3Qgb3V0ID0gdGhpcy5idWZmZXJbdGhpcy5lbmRdO1xuLy8gICAgIHRoaXMuc2V0LmRlbGV0ZShvdXQpO1xuLy8gICAgIHJldHVybiBvdXQ7XG4vLyAgIH1cblxuLy8gICAvKiogQHJldHVybiB7VHx1bmRlZmluZWR9ICovXG4vLyAgIHBlZWsoKSB7XG4vLyAgICAgaWYgKCF0aGlzLnNpemUpIHJldHVybiB1bmRlZmluZWQ7XG4vLyAgICAgcmV0dXJuIHRoaXMuYnVmZmVyWyh0aGlzLmVuZCAtIDEpICYgdGhpcy5tYXNrXTtcbi8vICAgfVxuXG4vLyAgIC8qKiBAcGFyYW0gey4uLlR9IGVsZW0gKi9cbi8vICAgdW5zaGlmdCguLi5lbGVtcykge1xuLy8gICAgIHRoaXMudXBzaXplKHRoaXMuc2l6ZSArIGVsZW1zLmxlbmd0aCk7XG4vLyAgICAgZm9yIChjb25zdCBlbGVtIG9mIGVsZW1zKSB7XG4vLyAgICAgICBpZiAodGhpcy5zZXQuaGFzKGVsZW0pKSB7XG4vLyAgICAgICAgIHRoaXMuc2l6ZS0tO1xuLy8gICAgICAgICBjb250aW51ZTtcbi8vICAgICAgIH1cbi8vICAgICAgIHRoaXMuc3RhcnQgPSAodGhpcy5zdGFydCAtIDEpICYgdGhpcy5tYXNrO1xuLy8gICAgICAgdGhpcy5idWZmZXJbdGhpcy5zdGFydF0gPSBlbGVtO1xuLy8gICAgIH1cbi8vICAgfVxuXG4vLyAgIC8qKiBAcmV0dXJuIHtUfHVuZGVmaW5lZH0gKi9cbi8vICAgc2hpZnQoKSB7XG4vLyAgICAgaWYgKCF0aGlzLnNpemUpIHJldHVybiB1bmRlZmluZWQ7XG4vLyAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXJbdGhpcy5zdGFydF07XG4vLyAgICAgdGhpcy5zdGFydCA9ICh0aGlzLnN0YXJ0ICsgMSkgJiB0aGlzLm1hc2s7XG4vLyAgICAgdGhpcy5zaXplLS07XG4vLyAgICAgdGhpcy5zZXQucmVtb3ZlKHJlc3VsdCk7XG4vLyAgICAgcmV0dXJuIHJlc3VsdDtcbi8vICAgfVxuXG4vLyAgIC8qKiBAcmV0dXJuIHtUfHVuZGVmaW5lZH0gKi9cbi8vICAgZnJvbnQoKSB7XG4vLyAgICAgaWYgKCF0aGlzLnNpemUpIHJldHVybiB1bmRlZmluZWQ7XG4vLyAgICAgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuc3RhcnRdO1xuLy8gICB9XG4vLyB9XG5cbi8vIGV4cG9ydCBjbGFzcyBJbmRleGVkTGlzdCB7XG4vLyAgIGNvbnN0cnVjdG9yKCkge1xuLy8gICAgIHRoaXMubGlzdCA9IFtdO1xuLy8gICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuLy8gICB9XG5cbi8vICAgYWRkKGVsZW0pIHtcbi8vICAgICBpZiAodGhpcy5tYXAuaGFzKGVsZW0pKSByZXR1cm47XG4vLyAgICAgdGhpcy5tYXAuc2V0KGVsZW0sIHRoaXMubGlzdC5sZW5ndGgpO1xuLy8gICAgIHRoaXMubGlzdC5wdXNoKGVsZW0pO1xuLy8gICB9XG5cbi8vICAgaW5kZXhPZihlbGVtKSB7XG4vLyAgICAgcmV0dXJuIHRoaXMubWFwLmdldChlbGVtKTtcbi8vICAgfVxuXG4vLyAgIHJlbW92ZShlbGVtKSB7XG4vLyAgICAgLy8gVE9ETyAtIHRoaXMgaXNuJ3Qgc3VwZXIgZWZmaWNpZW50Li4uXG4vLyAgICAgLy8gV2UgY291bGQgbWFpbnRhaW4gYSBzbWFsbCBoYW5kZnVsIG9mIHNwbGl0IHBvaW50cy5cbi8vICAgICAvLyBPciBhIFJlbW92YWxUcmVlIHdoZXJlIGl0IHN0YXJ0cyB3aXRoIGEgZnVsbHktYmFsYW5jZWRcbi8vICAgICAvLyBiaW5hcnkgdHJlZSAoaGVpZ2h0IH4gbG9nKG4pKSBhbmQgdGhlbiB3ZSBqdXN0IHJlbW92ZVxuLy8gICAgIC8vIGVsZW1lbnRzIGZyb20gdGhlcmUgc28gdGhhdCB3ZSBvbmx5IG5lZWQgdG8gdXBkYXRlXG4vLyAgICAgLy8gTyhsb2cobikpIFwic2l6ZVwiIHZhbHVlcyBvbiB0aGUgd2F5IHVwLiAgVGhvdWdoIHRoaXNcbi8vICAgICAvLyBkb2Vzbid0IGhlbHAgdG8gYWN0dWFsbHkgKmZpbmQqIHRoZSBlbGVtZW50Li4uXG4vLyAgICAgLy8gQW5vdGhlciBvcHRpb24gd291bGQgYmUgdG8gdXNlIHRoZSBiaXRzIG9mIHRoZSBpbmRleFxuLy8gICAgIC8vIHRvIGtlZXAgdHJhY2sgb2YgdGhlIG51bWJlciBvZiByZW1vdmVkIGVsZW1lbnRzIGJlZm9yZS5cbi8vICAgICAvLyBTbyB3ZSBoYXZlIGEgc2FtZS1zaXplIGFycmF5IG9mIG51bWJlcnNcbi8vICAgICAvLyB3aGVyZSBlYWNoIGVudHJ5IHRlbGxzIHRoZSBzaXplIHRvIGFkZCBmb3IgdGhlIE50aCBvbmUtYml0XG4vLyAgICAgLy8gYW5kIGFsbCB0aGUgaGlnaGVyIGJpdHMuXG4vLyAgICAgLy8gICAwMCAtPiAwXG4vLyAgICAgLy8gICAwMSAtPiAxXG4vLyAgICAgLy8gICAxMCAtPiAyXG4vLyAgICAgLy8gICAxMSAtPiAzID0gMiArIDFcbi8vICAgICAvLyBTdG9yaW5nXG4vLyAgICAgLy8gICBYIyAgLT4gMlxuLy8gICAgIC8vICAgMVggIC0+IDFcbi8vICAgICAvLyAgIDBYICAtPiAxXG4vLyAgICAgLy8gRm9yIGJpZ2dlciBsaXN0LFxuLy8gICAgIC8vICAgMTFYIC0+IDEgICAgc3RvcmVkIGF0ICAgIDExMSA9IDdcbi8vICAgICAvLyAgIDEwWCAtPiAxICAgICAgICAgICAgICAgICAxMTAgPSA2XG4vLyAgICAgLy8gICAwMVggLT4gMSAgICAgICAgICAgICAgICAgMTAxID0gNVxuLy8gICAgIC8vICAgMDBYIC0+IDEgICAgICAgICAgICAgICAgIDEwMCA9IDRcbi8vICAgICAvLyAgIDFYIyAtPiAyICAgICAgICAgICAgICAgICAwMTEgPSAzXG4vLyAgICAgLy8gICAwWCMgLT4gMiAgICAgICAgICAgICAgICAgMDEwID0gMlxuLy8gICAgIC8vICAgWCMjIC0+IDQgICAgICAgICAgICAgICAgIDAwMSA9IDFcbi8vICAgICAvLyBUaGUgdXBzaG90IGlzIHRoYXQgd2hlbiByZW1vdmluZyBhbiBlbGVtZW50IHdlIG9ubHkgbmVlZCB0b1xuLy8gICAgIC8vIHVwZGF0ZSBPKGxvZyhuKSkgZWxlbWVudHMuLi5cbi8vICAgICAvLyBBbmQgd2UgY2FuIGF2b2lkIHNwbGljaW5nIHRoZSBsaXN0IGFuZCBldmVuIGZpbmQgdGhlIGZpcnN0XG4vLyAgICAgLy8gZWxlbWVudCB3aXRoIGJpbmFyeSBzZWFyY2ggLSBPKGxvZyhuKSlcbi8vICAgICBjb25zdCBpbmRleCA9IHRoaXMubWFwLmdldChlbGVtKTtcbi8vICAgICBpZiAoaW5kZXggPT0gbnVsbCkgcmV0dXJuO1xuLy8gICAgIHRoaXMubGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuLy8gICAgIHRoaXMubWFwLmRlbGV0ZShlbGVtKTtcbi8vICAgICBmb3IgKGxldCBpID0gaW5kZXg7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcbi8vICAgICAgIHRoaXMubWFwLnNldCh0aGlzLmxpc3RbaV0sIGkpO1xuLy8gICAgIH1cbi8vICAgfVxuXG4vLyAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuLy8gICAgIHJldHVybiB0aGlzLmxpc3RbU3ltYm9sLml0ZXJhdG9yXSgpO1xuLy8gICB9XG4vLyB9XG5cbmV4cG9ydCBjb25zdCBicmVha0xpbmVzID0gKHN0cjogc3RyaW5nLCBsZW46IG51bWJlcik6IHN0cmluZ1tdID0+IHtcbiAgc3RyID0gc3RyLnRyaW0oKTtcbiAgY29uc3Qgb3V0OiBzdHJpbmdbXSA9IFtdO1xuICB3aGlsZSAoc3RyLmxlbmd0aCA+IGxlbikge1xuICAgIGxldCBiID0gc3RyLnN1YnN0cmluZygwLCBsZW4pLmxhc3RJbmRleE9mKCcgJyk7XG4gICAgaWYgKGIgPCAwKSBiID0gbGVuO1xuICAgIG91dC5wdXNoKHN0ci5zdWJzdHJpbmcoMCwgYikudHJpbSgpKTtcbiAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKGIpLnRyaW0oKTtcbiAgfVxuICBvdXQucHVzaChzdHIudHJpbSgpKTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbmV4cG9ydCBjbGFzcyBVc2FnZUVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZXhwb3J0IGNsYXNzIFN1ZmZpeFRyaWU8VD4ge1xuICByZWFkb25seSBuZXh0ID0gbmV3IE1hcDxzdHJpbmcsIFN1ZmZpeFRyaWU8VD4+KCk7XG4gIGRhdGE6IFQgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkga2V5OiBzdHJpbmcgPSAnJykge31cblxuICBnZXQoa2V5OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgdDogU3VmZml4VHJpZTxUPiB8IHVuZGVmaW5lZCA9IHRoaXM7XG4gICAgZm9yIChsZXQgaSA9IGtleS5sZW5ndGggLSAxOyBpID49IDAgJiYgdDsgaSsrKSB7XG4gICAgICB0ID0gdC5uZXh0LmdldChrZXlbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gdCAmJiB0LmRhdGE7XG4gIH1cblxuICB3aXRoKGM6IHN0cmluZyk6IFN1ZmZpeFRyaWU8VD4ge1xuICAgIGxldCB0ID0gdGhpcy5uZXh0LmdldChjKTtcbiAgICBpZiAoIXQpIHRoaXMubmV4dC5zZXQoYywgKHQgPSBuZXcgU3VmZml4VHJpZTxUPihjICsgdGhpcy5rZXkpKSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBUIHwgdW5kZWZpbmVkKSB7XG4gICAgbGV0IHQ6IFN1ZmZpeFRyaWU8VD4gPSB0aGlzO1xuICAgIGZvciAobGV0IGkgPSBrZXkubGVuZ3RoIC0gMTsgaSA+PSAwICYmIHQ7IGkrKykge1xuICAgICAgdCA9IHQud2l0aChrZXlbaV0pO1xuICAgIH1cbiAgICB0LmRhdGEgPSB2YWx1ZTtcbiAgfVxuXG4gICogdmFsdWVzKCk6IEl0ZXJhYmxlPFQ+IHtcbiAgICBjb25zdCBzdGFjazogU3VmZml4VHJpZTxUPltdID0gW3RoaXNdO1xuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHRvcCA9IHN0YWNrLnBvcCgpITtcbiAgICAgIGlmICh0b3AuZGF0YSkgeWllbGQgdG9wLmRhdGE7XG4gICAgICBzdGFjay5wdXNoKC4uLnRvcC5uZXh0LnZhbHVlcygpKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlZmF1bHRNYXA8SywgViBleHRlbmRzIHt9PiBleHRlbmRzIE1hcDxLLCBWPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc3VwcGxpZXI6IChrZXk6IEspID0+IFYsXG4gICAgICAgICAgICAgIGluaXQ/OiBJdGVyYWJsZTxyZWFkb25seSBbSywgVl0+KSB7XG4gICAgc3VwZXIoaW5pdCBhcyBhbnkpOyAvLyBOT1RFOiBNYXAncyBkZWNsYXJhdGlvbnMgYXJlIG9mZiwgSXRlcmFibGUgaXMgZmluZS5cbiAgfVxuICBnZXQoa2V5OiBLKTogViB7XG4gICAgbGV0IHZhbHVlID0gc3VwZXIuZ2V0KGtleSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHN1cGVyLnNldChrZXksIHZhbHVlID0gdGhpcy5zdXBwbGllcihrZXkpKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEluZGV4ZWRTZXQ8VCBleHRlbmRzIHt9PiB7XG4gIHByaXZhdGUgZm9yd2FyZDogVFtdID0gW107XG4gIHByaXZhdGUgcmV2ZXJzZSA9IG5ldyBNYXA8VCwgbnVtYmVyPigpO1xuXG4gIGFkZChlbGVtOiBUKTogbnVtYmVyIHtcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXZlcnNlLmdldChlbGVtKTtcbiAgICBpZiAocmVzdWx0ID09IG51bGwpIHRoaXMucmV2ZXJzZS5zZXQoZWxlbSwgcmVzdWx0ID0gdGhpcy5mb3J3YXJkLnB1c2goZWxlbSkgLSAxKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZ2V0KGluZGV4OiBudW1iZXIpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkW2luZGV4XTtcbiAgfVxufVxuXG5leHBvcnQgbmFtZXNwYWNlIGl0ZXJzIHtcbiAgLy8gQ29uY2F0ZW5hdGVzIGl0ZXJhYmxlcy5cbiAgZXhwb3J0IGZ1bmN0aW9uICogY29uY2F0PFQ+KC4uLml0ZXJzOiBBcnJheTxJdGVyYWJsZTxUPj4pOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICBmb3IgKGNvbnN0IGl0ZXIgb2YgaXRlcnMpIHtcbiAgICAgIHlpZWxkICogaXRlcjtcbiAgICB9XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uICogbWFwPFQsIFU+KGl0ZXI6IEl0ZXJhYmxlPFQ+LCBmOiAoZWxlbTogVCkgPT4gVSk6IEl0ZXJhYmxlSXRlcmF0b3I8VT4ge1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiBpdGVyKSB7XG4gICAgICB5aWVsZCBmKGVsZW0pO1xuICAgIH1cbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gKiBmaWx0ZXI8VD4oaXRlcjogSXRlcmFibGU8VD4sIGY6IChlbGVtOiBUKSA9PiBib29sZWFuKTogSXRlcmFibGU8VD4ge1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiBpdGVyKSB7XG4gICAgICBpZiAoZihlbGVtKSkgeWllbGQgZWxlbTtcbiAgICB9XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uICogZmxhdE1hcDxULCBVPihpdGVyOiBJdGVyYWJsZTxUPiwgZjogKGVsZW06IFQpID0+IEl0ZXJhYmxlPFU+KTogSXRlcmFibGVJdGVyYXRvcjxVPiB7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIGl0ZXIpIHtcbiAgICAgIHlpZWxkICogZihlbGVtKTtcbiAgICB9XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIGNvdW50KGl0ZXI6IEl0ZXJhYmxlPHVua25vd24+KTogbnVtYmVyIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAoY29uc3QgXyBvZiBpdGVyKSB7XG4gICAgICBjb3VudCsrO1xuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG4gIH1cbn1cblxuLy8gZXhwb3J0IGNsYXNzIExhYmVsZWRTZXQ8VD4ge1xuLy8gICBwcml2YXRlIG1hcDogTWFwPFN0cmluZywgVD5cbi8vIH1cblxuY29uc3QgSU5WQUxJREFURUQgPSBTeW1ib2woJ0ludmFsaWRhdGVkJyk7XG5jb25zdCBTSVpFID0gU3ltYm9sKCdTaXplJyk7XG5cbmNsYXNzIFNldE11bHRpbWFwU2V0VmlldzxLLCBWPiBpbXBsZW1lbnRzIFNldDxWPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgb3duZXJNYXA6IE1hcDxLLCBTZXQ8Vj4+LFxuICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG93bmVyS2V5OiBLLCBwcml2YXRlIGN1cnJlbnRTZXQ/OiBTZXQ8Vj4pIHt9XG4gIHByaXZhdGUgZ2V0Q3VycmVudFNldCgpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudFNldCB8fCAodGhpcy5jdXJyZW50U2V0IGFzIGFueSlbSU5WQUxJREFURURdKSB7XG4gICAgICB0aGlzLmN1cnJlbnRTZXQgPSB0aGlzLm93bmVyTWFwLmdldCh0aGlzLm93bmVyS2V5KSB8fCBuZXcgU2V0PFY+KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTZXQ7XG4gIH1cbiAgcHJpdmF0ZSBtdXRhdGVTZXQ8Uj4oZjogKHM6IFNldDxWPikgPT4gUik6IFIge1xuICAgIGNvbnN0IHNldCA9IHRoaXMuZ2V0Q3VycmVudFNldCgpO1xuICAgIGNvbnN0IHNpemUgPSBzZXQuc2l6ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGYoc2V0KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgKHRoaXMub3duZXJNYXAgYXMgYW55KVtTSVpFXSArPSBzZXQuc2l6ZSAtIHNpemU7XG4gICAgICBpZiAoIXNldC5zaXplKSB7XG4gICAgICAgIHRoaXMub3duZXJNYXAuZGVsZXRlKHRoaXMub3duZXJLZXkpO1xuICAgICAgICAoc2V0IGFzIGFueSlbSU5WQUxJREFURURdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYWRkKGVsZW06IFYpOiB0aGlzIHtcbiAgICB0aGlzLm11dGF0ZVNldChzID0+IHMuYWRkKGVsZW0pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBoYXMoZWxlbTogVik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRTZXQoKS5oYXMoZWxlbSk7XG4gIH1cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5tdXRhdGVTZXQocyA9PiBzLmNsZWFyKCkpO1xuICB9XG4gIGRlbGV0ZShlbGVtOiBWKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRlU2V0KHMgPT4gcy5kZWxldGUoZWxlbSkpO1xuICB9XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8Vj4ge1xuICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cbiAgdmFsdWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8Vj4ge1xuICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRTZXQoKS52YWx1ZXMoKTtcbiAgfVxuICBrZXlzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8Vj4ge1xuICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRTZXQoKS5rZXlzKCk7XG4gIH1cbiAgZW50cmllcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFtWLCBWXT4ge1xuICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRTZXQoKS5lbnRyaWVzKCk7XG4gIH1cbiAgZm9yRWFjaDxUPihjYWxsYmFjazogKHZhbHVlOiBWLCBrZXk6IFYsIHNldDogU2V0PFY+KSA9PiB2b2lkLCB0aGlzQXJnPzogVCk6IHZvaWQge1xuICAgIHRoaXMuZ2V0Q3VycmVudFNldCgpLmZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpO1xuICB9XG4gIGdldCBzaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFNldCgpLnNpemU7XG4gIH1cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdTZXQnO1xuICB9XG59XG4vLyBGaXggJ2luc3RhbmNlb2YnIHRvIHdvcmsgcHJvcGVybHkgd2l0aG91dCByZXF1aXJpbmcgYWN0dWFsIHN1cGVyY2xhc3MuLi5cblJlZmxlY3Quc2V0UHJvdG90eXBlT2YoU2V0TXVsdGltYXBTZXRWaWV3LnByb3RvdHlwZSwgU2V0LnByb3RvdHlwZSk7XG5cbmV4cG9ydCBjbGFzcyBTZXRNdWx0aW1hcDxLLCBWPiB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBtYXAgPSBuZXcgTWFwPEssIFNldDxWPj4oKTtcblxuICBjb25zdHJ1Y3RvcihlbnRyaWVzOiBJdGVyYWJsZTxyZWFkb25seSBbSywgVl0+ID0gW10pIHtcbiAgICAodGhpcy5tYXAgYXMgYW55KVtTSVpFXSA9IDA7XG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy5hZGQoaywgdik7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHRoaXMubWFwIGFzIGFueSlbU0laRV07XG4gIH1cblxuICBnZXQoazogSyk6IFNldDxWPiB7XG4gICAgcmV0dXJuIG5ldyBTZXRNdWx0aW1hcFNldFZpZXcodGhpcy5tYXAsIGssIHRoaXMubWFwLmdldChrKSk7XG4gIH1cblxuICBhZGQoazogSywgdjogVik6IHZvaWQge1xuICAgIGxldCBzZXQgPSB0aGlzLm1hcC5nZXQoayk7XG4gICAgaWYgKCFzZXQpIHRoaXMubWFwLnNldChrLCBzZXQgPSBuZXcgU2V0KCkpO1xuICAgIGNvbnN0IHNpemUgPSBzZXQuc2l6ZTtcbiAgICBzZXQuYWRkKHYpO1xuICAgICh0aGlzLm1hcCBhcyBhbnkpW1NJWkVdICs9IHNldC5zaXplIC0gc2l6ZTtcbiAgfVxuXG4gIC8vIFRPRE8gLSBpdGVyYXRpb24/XG59XG5cblxuZXhwb3J0IGNsYXNzIE11bHRpc2V0PFQ+IGltcGxlbWVudHMgSXRlcmFibGU8W1QsIG51bWJlcl0+IHtcbiAgcHJpdmF0ZSBlbnRyaWVzOiBEZWZhdWx0TWFwPFQsIG51bWJlcj47XG4gIGNvbnN0cnVjdG9yKGVudHJpZXM6IEl0ZXJhYmxlPFtULCBudW1iZXJdPiA9IFtdKSB7XG4gICAgdGhpcy5lbnRyaWVzID0gbmV3IERlZmF1bHRNYXAoKCkgPT4gMCwgZW50cmllcyk7XG4gIH1cbiAgYWRkKGVsZW06IFQpIHtcbiAgICB0aGlzLmVudHJpZXMuc2V0KGVsZW0sIHRoaXMuZW50cmllcy5nZXQoZWxlbSkgKyAxKTtcbiAgfVxuICBkZWxldGUoZWxlbTogVCkge1xuICAgIGNvbnN0IGNvdW50ID0gdGhpcy5lbnRyaWVzLmdldChlbGVtKSAtIDE7XG4gICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgdGhpcy5lbnRyaWVzLnNldChlbGVtLCBjb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW50cmllcy5kZWxldGUoZWxlbSk7XG4gICAgfVxuICB9XG4gIHVuaXF1ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVudHJpZXMuc2l6ZTtcbiAgfVxuICBjb3VudChlbGVtOiBUKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzLmhhcyhlbGVtKSA/IHRoaXMuZW50cmllcy5nZXQoZWxlbSkgOiAwO1xuICB9XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W1QsIG51bWJlcl0+IHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzLmVudHJpZXMoKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROZXZlcih4OiBuZXZlcik6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IEVycm9yKGBub24tZXhoYXVzdGl2ZSBjaGVjazogJHt4fWApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb25OdWxsPFQgZXh0ZW5kcyB7fT4oeDogVHx1bmRlZmluZWR8bnVsbCk6IHggaXMgVCB7XG4gIHJldHVybiB4ICE9IG51bGw7XG59XG4vLyBleHBvcnQgZnVuY3Rpb24gbm9uTnVsbDxUIGV4dGVuZHMge30+KHg6IFR8dW5kZWZpbmVkfG51bGwpOiBUIHtcbi8vICAgaWYgKHggIT0gbnVsbCkgcmV0dXJuIHg7XG4vLyAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgbm9uLW51bGxgKTtcbi8vIH1cbiJdfQ==