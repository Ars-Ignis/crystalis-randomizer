export var Event;
(function (Event) {
    Event.STARTED_WINDMILL = Condition(0x00a);
    Event.LEAF_ELDER = Condition(0x00b);
    Event.UNDERGROUND_CHANNEL = Condition(0x018);
    Event.MESIA_RECORDING = Condition(0x01b);
    Event.QUEEN_REVEALED = Condition(0x01e);
    Event.RETURNED_FOG_LAMP = Condition(0x021);
    Event.GENERALS_DEFEATED = Condition(0x024);
    Event.HEALED_DOLPHIN = Condition(0x025);
    Event.ENTERED_SHYRON = Condition(0x026);
    Event.SHYRON_MASSACRE = Condition(0x027);
    Event.LEAF_ABDUCTION = Condition(0x038);
    Event.ZEBU_CAVE = Condition(0x03a);
    Event.ZEBU_SHYRON = Condition(0x03b);
    Event.RESCUED_CHILD = Condition(0x045);
    Event.DWARF_MOTHER = Condition(0x052);
    Event.DWARF_CHILD = Condition(0x053);
    Event.STOM_IN_SWAN = Condition(0x061);
    Event.DRAYGON1 = Condition(0x06c);
    Event.FOUND_KENSU = Condition(0x072);
    Event.SHELL_FLUTE = Condition(0x08b);
    Event.RIDE_DOLPHIN = Condition(0x09b);
    Event.ZEBU_STUDENT = Condition(0x0a5);
    Event.LEAF_RABBIT = Condition(0x0a9);
    Event.CALMED_SEA = Condition(0x283);
    Event.OPENED_JOEL_SHED = Condition(0x287);
    Event.OPENED_CRYPT = Condition(0x28e);
    Event.OPENED_STYX = Condition(0x2b0);
    Event.OPENED_SWAN = Condition(0x2b3);
    Event.OPENED_PRISON = Condition(0x2d8);
    Event.OPENED_SEALED_CAVE = Condition(0x2ee);
    Event.WARP_OAK = Condition(0x2f7);
    Event.WARP_JOEL = Condition(0x2fb);
})(Event || (Event = {}));
export var Capability;
(function (Capability) {
    Capability.SWORD = Condition(~0);
    Capability.MONEY = Condition(~1);
    Capability.BREAK_STONE = Condition(~2);
    Capability.BREAK_ICE = Condition(~3);
    Capability.FORM_BRIDGE = Condition(~4);
    Capability.BREAK_IRON = Condition(~5);
    Capability.TRAVEL_SWAMP = Condition(~6);
    Capability.CLIMB_WATERFALL = Condition(~7);
    Capability.BUY_HEALING = Condition(~8);
    Capability.BUY_WARP = Condition(~9);
    Capability.SHOOTING_STATUE = Condition(~10);
    Capability.CLIMB_SLOPE = Condition(~11);
})(Capability || (Capability = {}));
export function Boss(id) {
    return Condition(0x100 | id);
}
(function (Boss) {
    Boss.VAMPIRE1 = Boss(0x0);
    Boss.INSECT = Boss(0x1);
    Boss.KELBESQUE1 = Boss(0x2);
    Boss.RAGE = Boss(0x3);
    Boss.SABERA1 = Boss(0x4);
    Boss.MADO1 = Boss(0x5);
    Boss.KELBESQUE2 = Boss(0x6);
    Boss.SABERA2 = Boss(0x7);
    Boss.MADO2 = Boss(0x8);
    Boss.KARMINE = Boss(0x9);
    Boss.DRAYGON1 = Boss(0xa);
    Boss.DRAYGON2 = Boss(0xb);
    Boss.VAMPIRE2 = Boss(0xc);
})(Boss || (Boss = {}));
export function Item(id) {
    if (id >= 0x70)
        throw new Error(`expected item: ${id.toString(16)}`);
    return Condition(0x200 | id);
}
(function (Item) {
    Item.SWORD_OF_WIND = Item(0x00);
    Item.SWORD_OF_FIRE = Item(0x01);
    Item.SWORD_OF_WATER = Item(0x02);
    Item.SWORD_OF_THUNDER = Item(0x03);
    Item.CRYSTALIS = Item(0x04);
    Item.ORB_OF_WIND = Item(0x05);
    Item.TORNADO_BRACELET = Item(0x06);
    Item.ORB_OF_FIRE = Item(0x07);
    Item.FLAME_BRACELET = Item(0x08);
    Item.ORB_OF_WATER = Item(0x09);
    Item.BLIZZARD_BRACELET = Item(0x0a);
    Item.ORB_OF_THUNDER = Item(0x0b);
    Item.STORM_BRACELET = Item(0x0c);
    Item.MEDICAL_HERB = Item(0x1d);
    Item.WARP_BOOTS = Item(0x24);
    Item.STATUE_OF_ONYX = Item(0x25);
    Item.INSECT_FLUTE = Item(0x27);
    Item.FLUTE_OF_LIME = Item(0x28);
    Item.GAS_MASK = Item(0x29);
    Item.POWER_RING = Item(0x2a);
    Item.WARRIOR_RING = Item(0x2b);
    Item.IRON_NECKLACE = Item(0x2c);
    Item.DEOS_PENDANT = Item(0x2d);
    Item.RABBIT_BOOTS = Item(0x2e);
    Item.LEATHER_BOOTS = Item(0x2f);
    Item.SHIELD_RING = Item(0x30);
    Item.ALARM_FLUTE = Item(0x31);
    Item.WINDMILL_KEY = Item(0x32);
    Item.KEY_TO_PRISON = Item(0x33);
    Item.KEY_TO_STYX = Item(0x34);
    Item.FOG_LAMP = Item(0x35);
    Item.SHELL_FLUTE = Item(0x36);
    Item.EYE_GLASSES = Item(0x37);
    Item.BROKEN_STATUE = Item(0x38);
    Item.GLOWING_LAMP = Item(0x39);
    Item.STATUE_OF_GOLD = and(Item.BROKEN_STATUE, Item.GLOWING_LAMP);
    Item.LOVE_PENDANT = Item(0x3b);
    Item.KIRISA_PLANT = Item(0x3c);
    Item.IVORY_STATUE = Item(0x3d);
    Item.BOW_OF_MOON = Item(0x3e);
    Item.BOW_OF_SUN = Item(0x3f);
    Item.BOW_OF_TRUTH = Item(0x40);
})(Item || (Item = {}));
export var Magic;
(function (Magic) {
    Magic.REFRESH = Item(0x41);
    Magic.PARALYSIS = Item(0x42);
    Magic.TELEPATHY = Item(0x43);
    Magic.TELEPORT = Item(0x44);
    Magic.RECOVER = Item(0x45);
    Magic.BARRIER = Item(0x46);
    Magic.CHANGE = Item(0x47);
    Magic.FLIGHT = Item(0x48);
})(Magic || (Magic = {}));
export var WallType;
(function (WallType) {
    WallType[WallType["WIND"] = 0] = "WIND";
    WallType[WallType["FIRE"] = 1] = "FIRE";
    WallType[WallType["WATER"] = 2] = "WATER";
    WallType[WallType["THUNDER"] = 3] = "THUNDER";
})(WallType || (WallType = {}));
export class MutableRequirement {
    constructor() {
        this.map = new Map();
    }
    [Symbol.iterator]() {
        return this.map.values();
    }
    add(newLabel, newDeps) {
        for (const c of newDeps)
            if (Array.isArray(c))
                throw new Error();
        if (this.map.has(newLabel))
            return false;
        for (const [curLabel, curDeps] of this.map) {
            if (containsAll(newDeps, curDeps))
                return false;
            if (containsAll(curDeps, newDeps))
                this.map.delete(curLabel);
        }
        this.map.set(newLabel, newDeps);
        return true;
    }
    addAll(requirement) {
        for (const conditions of requirement) {
            this.addList(conditions);
        }
    }
    addList(conditions) {
        const sorted = [...new Set(conditions)].sort();
        const deps = new Set(sorted);
        this.add(sorted.join(' '), deps);
    }
    restrict(r) {
        const l = [...this.map.values()];
        this.map.clear();
        for (const ls of l) {
            for (const rs of r) {
                this.addList([...ls, ...rs]);
            }
        }
    }
    freeze() {
        return [...this].map(cs => [...cs]);
    }
}
const containsAll = (left, right) => {
    if (left.size < right.size)
        return false;
    for (const d of right) {
        if (!left.has(d))
            return false;
    }
    return true;
};
export function Condition(x) {
    return [[x]];
}
export function and(...cs) {
    return [[].concat(...cs.map((c) => c[0]))];
}
export function or(...cs) {
    return [].concat(...cs);
}
export function meet(left, right) {
    const out = new MutableRequirement();
    for (const ls of left) {
        for (const rs of right) {
            out.addList([...ls, ...rs]);
        }
    }
    return out.freeze();
}
const meetReq = meet;
(function (Condition) {
    Condition.OPEN = [[]];
})(Condition || (Condition = {}));
export function Slot(x) {
    if (typeof x === 'number')
        return x;
    return x[0][0];
}
(function (Slot) {
    function item(x) {
        return (x | 0x200);
    }
    Slot.item = item;
})(Slot || (Slot = {}));
export var Check;
(function (Check) {
    function chest(id) {
        return { slot: Slot(0x200 | id) };
    }
    Check.chest = chest;
})(Check || (Check = {}));
export var Terrain;
(function (Terrain) {
    Terrain.seamless = memoize((t) => ({ ...t }));
    function meet(left, right) {
        const out = {};
        if (left.enter || right.enter) {
            out.enter = meetReq(left.enter || [[]], right.enter || [[]]);
        }
        if (left.exit || right.exit) {
            out.exit = meetReq(left.exit || [[]], right.exit || [[]]);
        }
        if (left.exitSouth || right.exitSouth) {
            out.exitSouth = meetReq(left.exitSouth || [[]], right.exitSouth || [[]]);
        }
        return out;
    }
    Terrain.meet = meet;
    function join(left, right) {
        const out = {};
        if (left.enter || right.enter) {
            out.enter = (left.enter || [[]]).concat(right.enter || [[]]);
        }
        if (left.exit || right.exit) {
            out.exit = (left.exit || [[]]).concat(right.exit || [[]]);
        }
        if (left.exitSouth || right.exitSouth) {
            out.exitSouth = (left.exitSouth || [[]]).concat(right.exitSouth || [[]]);
        }
        return out;
    }
    Terrain.join = join;
    function flag(id) {
        return { enter: Condition(id) };
    }
    Terrain.flag = flag;
})(Terrain || (Terrain = {}));
export function memoize(f) {
    const map = new WeakMap();
    const undef = {};
    return (x) => {
        let y = map.get(x);
        if (y === undefined) {
            y = f(x);
            map.set(x, y === undefined ? undef : y);
        }
        else if (y === undef) {
            y = undefined;
        }
        return y;
    };
}
export function memoize2(f) {
    const map = new WeakMap();
    const undef = {};
    return (x, y) => {
        let ys = map.get(x);
        if (ys == undefined)
            map.set(x, ys = new WeakMap());
        let z = ys.get(y);
        if (z === undefined) {
            z = f(x, y);
            ys.set(y, z === undefined ? undef : z);
        }
        else if (z === undef) {
            z = undefined;
        }
        return z;
    };
}
//# sourceMappingURL=data:application/json;base64,