import { paletteTypes } from '../rom/tileset.js';
import { seq } from '../rom/util.js';
export function shufflePalettes(rom, flags, random) {
    new Shuffle(rom, flags, random).shuffle();
}
class Shuffle {
    constructor(rom, flags, random) {
        this.rom = rom;
        this.flags = flags;
        this.random = random;
    }
    shuffle() {
        this.shuffleBackgrounds();
    }
    shuffleBackgrounds() {
        if (!this.flags.shuffleSpritePalettes())
            return;
        function eq(a, b) {
            return a.tilePalettes[0] === b.tilePalettes[0] &&
                a.tilePalettes[1] === b.tilePalettes[1] &&
                a.tilePalettes[2] === b.tilePalettes[2] &&
                a.tileEffects === b.tileEffects;
        }
        const partitions = this.rom.locations.partition(x => x, eq, true);
        const pal = [new Map(), new Map()];
        for (const part of partitions) {
            const l = part[1];
            for (let i = 0; i < 2; i++) {
                for (let j = 0; j < 2; j++) {
                    let set = pal[i].get(l.tilePatterns[j]);
                    if (!set)
                        pal[i].set(l.tilePatterns[j], set = new Set());
                    set.add(l.tilePalettes[i]);
                }
            }
        }
        for (const part of partitions) {
            const l = part[1];
            const s = [new Set(), new Set()];
            for (let i = 0; i < 2; i++) {
                s[i] = new Set([...pal[i].get(l.tilePatterns[0]),
                    ...pal[i].get(l.tilePatterns[1]),]);
            }
            const p0 = this.random.pick([...s[0]]);
            const p1 = this.random.pick([...s[1]]);
            for (const loc of part[0]) {
                loc.tilePalettes[0] = p0;
                loc.tilePalettes[1] = p1;
            }
        }
    }
    shuffleBackgrounds2() {
        if (!this.flags.shuffleSpritePalettes())
            return;
        function eq(a, b) {
            return a.tilePalettes[0] === b.tilePalettes[0] &&
                a.tilePalettes[1] === b.tilePalettes[1] &&
                a.tilePalettes[2] === b.tilePalettes[2];
        }
        const paletteSets = [new Set(), new Set()];
        for (const loc of this.rom.locations) {
            if (!loc.used)
                continue;
            const tileset = this.rom.tilesets[(loc.tileset & 0x7f) >> 2];
            const types = paletteTypes(tileset.id, loc.id);
            for (let i = 0; i < 3; i++) {
                for (let i = 0; i < types[i]; i++) {
                    paletteSets[i].add(loc.tilePalettes[i]);
                }
            }
        }
        const partitions = this.rom.locations.partition(x => x, eq, true);
        const palettes = paletteSets.map(s => [...s]);
        for (const part of partitions) {
            const rep = part[1];
            const repTypes = paletteTypes(rep.tileset, rep.id);
            for (let attempt = 0; attempt < 1000; attempt++) {
                const pals = seq(3, i => !repTypes[i] ? rep.tilePalettes[i] :
                    this.random.pick(palettes[repTypes[i] - 1]));
                const ps = pals.map(p => this.rom.palettes[p].colors);
                let found = true;
                for (const loc of part[0]) {
                    const [, , , validator] = paletteTypes(loc.tileset, loc.id);
                    if (validator && !validator(ps[0], ps[1], ps[2])) {
                        found = false;
                        break;
                    }
                }
                if (found) {
                    for (const loc of part[0]) {
                        loc.tilePalettes = [pals[0], pals[1], pals[2]];
                    }
                }
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,