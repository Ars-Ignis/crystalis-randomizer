import { Entity } from './entity.js';
import { MapScreen } from './mapscreen.js';
import { seq, tuple } from './util.js';
export class Tileset extends Entity {
    constructor(rom, id) {
        super(rom, id);
        const map = id & 0x3f;
        this.tileBase = 0x10000 | map << 8;
        this.attrBase = 0x13000 | map << 4;
        this.alternatesBase = 0x13e00 | map << 3;
        this.tiles = seq(4, q => tuple(rom.prg, this.tileBase | q << 8, 256));
        this.attrs = seq(256, i => rom.prg[this.attrBase | i >> 2] >> ((i & 3) << 1) & 3);
        this.alternates = tuple(rom.prg, this.alternatesBase, 32);
    }
    get screens() {
        if (this.lazyScreens)
            return this.lazyScreens;
        return this.lazyScreens =
            seq(256, i => new MapScreen(this.rom.screens[i], this));
    }
    write(writer) {
        for (let i = 0; i < 0x100; i++) {
            if (i < 0x20) {
                writer.rom[this.alternatesBase + i] = this.alternates[i];
            }
            for (let j = 0; j < 4; j++) {
                writer.rom[this.tileBase + (j << 8) + i] = this.tiles[j][i];
            }
        }
        for (let i = 0; i < 0x40; i++) {
            const j = i << 2;
            writer.rom[this.attrBase + i] =
                (this.attrs[j] & 3) | (this.attrs[j + 1] & 3) << 2 |
                    (this.attrs[j + 2] & 3) << 4 | (this.attrs[j + 3] & 3) << 6;
        }
    }
    effects() {
        let index = (this.id >>> 2) & 0xf;
        if (this.id === 0xa8)
            index = 2;
        if (this.id === 0xac)
            index--;
        return this.rom.tileEffects[index];
    }
}
const NONE = 0;
const TRIM = 1;
const MAIN = 2;
export function paletteTypes(tileset, location) {
    switch (location) {
        case 0x1a:
            return [MAIN, MAIN, TRIM, (p0, p1, p2) => p0[3] === p1[3] && p1[3] === p2[3]];
        case 0x43:
            return [MAIN, TRIM, TRIM];
        case 0x57:
            return [MAIN, NONE, NONE];
        case 0x60:
            return [MAIN, MAIN, MAIN, (p0, _p1, p2) => p0[2] === p2[2]];
        case 0x64:
        case 0x68:
            return [MAIN, NONE, TRIM];
        case 0x7c:
            return [MAIN, TRIM, TRIM];
    }
    switch (tileset) {
        case 0x80:
        case 0x84:
            return [MAIN, MAIN, TRIM, (p0, p1) => p0[3] === p1[3]];
        case 0x88:
            return [MAIN, TRIM, NONE];
        case 0x8c: return [MAIN, TRIM, MAIN];
        case 0x90: return [MAIN, MAIN, MAIN];
        case 0x94: return [MAIN, TRIM, TRIM, (p0, p1) => p0[3] === p1[3]];
        case 0x98: return [TRIM, TRIM, TRIM];
        case 0x9c: return [MAIN, TRIM, MAIN];
        case 0xa0: return [TRIM, TRIM, TRIM];
        case 0xa4: return [MAIN, MAIN, TRIM];
        case 0xa8: return [MAIN, MAIN, TRIM];
        case 0xac: return [MAIN, TRIM, MAIN];
    }
    throw new Error(`unxpected: ${tileset}`);
}
const ALLOWED_PALETTES = new Map([
    ['path', [...r(0x00, 0x12), ...r(0x15, 0x1b), ...r(0x1e, 0x25),
            ...r(0x26, 0x2b), ...r(0x2c, 0x30), ...r(0x39, 0x3f),
            0x42, ...r(0x44, 0x48), ...r(0x4d, 0x59), ...r(0x80, 0x84),
            0x87, ...r(0x8b, 0x93)]],
    ['mountain', [0x01, ...r(0x03, 0x07), ...r(0x08, 0x0b), 0x0c, 0x0d, 0x0e,
            ...r(0x11, 0x18), 0x19, 0x1a, 0x1c, 0x1d, 0x1e, 0x20, 0x21,
            0x23, 0x27, 0x2a, 0x2b, 0x2f, 0x31, 0x33, 0x36, 0x37, 0x38,
            0x39, 0x3c, 0x42, 0x44, 0x46, 0x4b, 0x4c, 0x4f, 0x53, 0x58,
            ...r(0x80, 0x85), 0x87, 0x88, 0x8b, 0x8e]],
    ['trees', [0x01, 0x02, 0x04, 0x06, ...r(0x07, 0x0f), ...r(0x14, 0x18),
            0x1a, 0x1c, 0x1e, 0x20, 0x23, 0x27, 0x29, 0x2a, 0x2b, 0x2e,
            0x2f, 0x31, 0x33, 0x37, 0x38, 0x39, 0x3c, 0x3d, 0x43, 0x44,
            0x46, 0x49, 0x4a, 0x4b, 0x4f, 0x52, 0x57, 0x6e,
            ...r(0x80, 0x85), 0x87, 0x88, ...r(0x8b, 0x90)]],
]);
const TERRAIN_BY_PALETTE = new Map([
    [0x80, ['path', 'mountain', 'trees']],
    [0x84, ['mountain-path', 'brick', 'trees']],
    [0x88, ['cave wall/ground', 'cave bridge', '']],
    [0x8c, ['floor', 'fire', 'accept']],
    [0x90, ['trees', 'mountain', 'grass']],
    [0x94, ['water/ground', 'mountain', 'shallows']],
    [0x98, ['door', 'room', 'rocks']],
    [0x9c, ['mountain/ground', 'trees', 'desert']],
    [0xa0, ['ground', 'trees', 'some haze']],
    [0xa4, ['', '', '']],
    [0xa8, ['', '', '']],
    [0xac, ['', '', '']],
]);
function r(a, b) {
    return new Array(b - a).fill(0).map((_x, i) => i + a);
}
const [] = [TERRAIN_BY_PALETTE, ALLOWED_PALETTES];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZXNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vdGlsZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxPQUFPLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUtyQyxNQUFNLE9BQU8sT0FBUSxTQUFRLE1BQU07SUFZakMsWUFBWSxHQUFRLEVBQUUsRUFBVTtRQUU5QixLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2YsTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxD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QUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNyQyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNyQyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3BDO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQVlELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLENBQTRCO0lBQzFELENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQ3BELEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNwRCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQzFELElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUMzRCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUMxRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDMUQsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZELENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDMUQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUMxRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUM5QyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUU1RCxDQUFDLENBQUM7QUFjSCxNQUFNLGtCQUFrQixHQUFHLElBQUksR0FBRyxDQUE0QztJQUM1RSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNDLENBQUMsSUFBSSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRS9DLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFLdEMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2hELENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVqQyxDQUFDLElBQUksRUFBRSxDQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUc5QyxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNwQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDckIsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFDN0IsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbnRpdHl9IGZyb20gJy4vZW50aXR5LmpzJztcbmltcG9ydCB7TWFwU2NyZWVufSBmcm9tICcuL21hcHNjcmVlbi5qcyc7XG5pbXBvcnQge1RpbGVFZmZlY3RzfSBmcm9tICcuL3RpbGVlZmZlY3RzLmpzJztcbmltcG9ydCB7c2VxLCB0dXBsZX0gZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCB7V3JpdGVyfSBmcm9tICcuL3dyaXRlci5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxuLy8gTWFwcHBpbmcgZnJvbSBtZXRhdGlsZSBJRCB0byB0aWxlIHF1YWRzIGFuZCBwYWxldHRlIG51bWJlci5cbmV4cG9ydCBjbGFzcyBUaWxlc2V0IGV4dGVuZHMgRW50aXR5IHtcblxuICB0aWxlQmFzZTogbnVtYmVyO1xuICBhdHRyQmFzZTogbnVtYmVyO1xuICBhbHRlcm5hdGVzQmFzZTogbnVtYmVyO1xuXG4gIHRpbGVzOiBudW1iZXJbXVtdOyAgICAvLyB0aWxlIGluZm8sIG91dGVyIGlzIDQgcXVhZHJhbnRzIChUTCwgVFIsIEJMLCBCUilcbiAgYXR0cnM6IG51bWJlcltdOyAgICAgIC8vIHBhbGV0dGUgaW5mb1xuICBhbHRlcm5hdGVzOiBudW1iZXJbXTsgLy8gMzItZWxlbWVudCBtYXBwaW5nIGZvciBmbGFnLWJhc2VkIGFsdGVybmF0ZXNcblxuICBwcml2YXRlIGxhenlTY3JlZW5zPzogcmVhZG9ubHkgTWFwU2NyZWVuW107XG5cbiAgY29uc3RydWN0b3Iocm9tOiBSb20sIGlkOiBudW1iZXIpIHtcbiAgICAvLyBgaWRgIGlzIE1hcERhdGFbMV1bM10sIHJhbmdlcyBmcm9tICQ4MC4uJGJjIGluIGluY3JlbWVudHMgb2YgNC5cbiAgICBzdXBlcihyb20sIGlkKTtcbiAgICBjb25zdCBtYXAgPSBpZCAmIDB4M2Y7XG4gICAgdGhpcy50aWxlQmFzZSA9IDB4MTAwMDAgfCBtYXAgPDwgODtcbiAgICB0aGlzLmF0dHJCYXNlID0gMHgxMzAwMCB8IG1hcCA8PCA0O1xuICAgIHRoaXMuYWx0ZXJuYXRlc0Jhc2UgPSAweDEzZTAwIHwgbWFwIDw8IDM7XG4gICAgdGhpcy50aWxlcyA9IHNlcSg0LCBxID0+IHR1cGxlKHJvbS5wcmcsIHRoaXMudGlsZUJhc2UgfCBxIDw8IDggLCAyNTYpKTtcbiAgICB0aGlzLmF0dHJzID0gc2VxKDI1NiwgaSA9PiByb20ucHJnW3RoaXMuYXR0ckJhc2UgfCBpID4+IDJdID4+ICgoaSAmIDMpIDw8IDEpICYgMyk7XG4gICAgdGhpcy5hbHRlcm5hdGVzID0gdHVwbGUocm9tLnByZywgdGhpcy5hbHRlcm5hdGVzQmFzZSwgMzIpO1xuICB9XG5cbiAgZ2V0IHNjcmVlbnMoKTogcmVhZG9ubHkgTWFwU2NyZWVuW10ge1xuICAgIGlmICh0aGlzLmxhenlTY3JlZW5zKSByZXR1cm4gdGhpcy5sYXp5U2NyZWVucztcbiAgICByZXR1cm4gdGhpcy5sYXp5U2NyZWVucyA9XG4gICAgICAgIHNlcSgyNTYsIGkgPT4gbmV3IE1hcFNjcmVlbih0aGlzLnJvbS5zY3JlZW5zW2ldLCB0aGlzKSk7XG4gIH1cblxuICB3cml0ZSh3cml0ZXI6IFdyaXRlcikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMHgxMDA7IGkrKykge1xuICAgICAgaWYgKGkgPCAweDIwKSB7XG4gICAgICAgIHdyaXRlci5yb21bdGhpcy5hbHRlcm5hdGVzQmFzZSArIGldID0gdGhpcy5hbHRlcm5hdGVzW2ldO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcbiAgICAgICAgd3JpdGVyLnJvbVt0aGlzLnRpbGVCYXNlICsgKGogPDwgOCkgKyBpXSA9IHRoaXMudGlsZXNbal1baV07XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMHg0MDsgaSsrKSB7XG4gICAgICBjb25zdCBqID0gaSA8PCAyO1xuICAgICAgd3JpdGVyLnJvbVt0aGlzLmF0dHJCYXNlICsgaV0gPVxuICAgICAgICAgICh0aGlzLmF0dHJzW2pdICYgMykgfCAodGhpcy5hdHRyc1tqICsgMV0gJiAzKSA8PCAyIHxcbiAgICAgICAgICAodGhpcy5hdHRyc1tqICsgMl0gJiAzKSA8PCA0IHwgKHRoaXMuYXR0cnNbaiArIDNdICYgMykgPDwgNjtcbiAgICB9XG4gIH1cblxuICBlZmZlY3RzKCk6IFRpbGVFZmZlY3RzIHtcbiAgICAvLyBOT1RFOiBpdCdzIHBvc3NpYmxlIHRoaXMgY291bGQgZ2V0IG91dCBvZiBzeW5jLi4uXG4gICAgbGV0IGluZGV4ID0gKHRoaXMuaWQgPj4+IDIpICYgMHhmO1xuICAgIGlmICh0aGlzLmlkID09PSAweGE4KSBpbmRleCA9IDI7XG4gICAgaWYgKHRoaXMuaWQgPT09IDB4YWMpIGluZGV4LS07XG4gICAgcmV0dXJuIHRoaXMucm9tLnRpbGVFZmZlY3RzW2luZGV4XTtcbiAgfVxuXG4gIC8vIHBhc3NhZ2UodGlsZUlkOiBudW1iZXIsIHRpbGVFZmZlY3RzID0gdGhpcy5lZmZlY3RzKCkpOiBUZXJyYWluIHtcbiAgLy8gICBjb25zdCBlZmZlY3RzID0gdGlsZUVmZmVjdHMuZWZmZWN0cztcbiAgLy8gICAvLyBOb3RlOiBmb3IgdGhpcyBwdXJwb3NlLCBwaXRzIGNhbiBiZSB0cmF2ZXJzZWQgYmVjYXVzZSB0aGVyZSBzaG91bGQgYWx3YXlzXG4gIC8vICAgLy8gYmUgYSBwbGF0Zm9ybSBhY3Jvc3MgaXQuICBUaGUgZG9scGhpbiBjb3VudHMgYXMgZmx5aW5nLCBhbmQgd2UgaGF2ZVxuICAvLyAgIC8vIHNwZWNpYWwgbG9naWMgdG8gdHJhbnNsYXRlIHRoYXQuXG4gIC8vICAgY29uc3QgYml0cyA9IGVmZmVjdHNbdGlsZUlkXSAmIDB4MjY7XG4gIC8vICAgaWYgKCFiaXRzKSByZXR1cm4gUGFzc2FnZS5BTFdBWVM7XG4gIC8vICAgLy8gTm90ZTogdGhpcyB3aWxsIGxvc2UgdGhlIGZsaWdodCBiaXQgZnJvbSBhbmdyeSBzZWEgd2F0ZXJmYWxsLCBidXRcbiAgLy8gICAvLyB0aGF0J3MgcHJvYmFibHkgZmluZS5cbiAgLy8gICBpZiAoYml0cyAmIDB4MjApIHJldHVybiBQYXNzYWdlLlNMT1BFO1xuICAvLyAgIC8vIFRPRE8gLSByZXF1aXJlIHRoZSAweDA4IGJpdCBiZWZvcmUgY2hlY2tpbmcgYWx0ZXJuYXRlP1xuICAvLyAgIGlmICh0aWxlSWQgPCAweDIwICYmIHRoaXMuYWx0ZXJuYXRlc1t0aWxlSWRdICE9PSB0aWxlSWQpIHtcbiAgLy8gICAgIGNvbnN0IGFsdEJpdHMgPSBlZmZlY3RzW3RoaXMuYWx0ZXJuYXRlc1t0aWxlSWRdXSAmIDB4MjY7XG4gIC8vICAgICBpZiAoIWFsdEJpdHMpIHJldHVybiBQYXNzYWdlLkZMQUc7XG4gIC8vICAgfVxuICAvLyAgIGlmICghKGJpdHMgJiAweDA0KSkgcmV0dXJuIFBhc3NhZ2UuRkxZO1xuICAvLyAgIHJldHVybiBQYXNzYWdlLk5FVkVSO1xuICAvLyB9XG59XG5cblxuLy8gZXhwb3J0IGVudW0gUGFzc2FnZSB7XG4vLyAgIEFMV0FZUyA9IDAsXG4vLyAgIFNMT1BFID0gMSxcbi8vICAgRkxBRyA9IDIsXG4vLyAgIEZMWSA9IDMsXG4vLyAgIE5FVkVSID0gNCxcbi8vIH1cblxuLy8gaW50ZXJmYWNlIFBhbGV0dGVIYW5kbGVyIHtcbi8vICAgZG9ub3I6IHN0cmluZ1tdO1xuLy8gICByZWNlaXZlcjogc3RyaW5nW107XG4vLyB9XG5cbi8vIGNvbnN0IE1BSU4gPSB7ZG9ub3I6IFsnbWFpbicsICd0cmltJ10sIHJlY2VpdmVyOiBbJ21haW4nXX07XG4vLyBjb25zdCBUUklNID0ge2Rvbm9yOiBbJ3RyaW0nXSwgcmVjZWl2ZXI6IFsndHJpbSddfTtcbi8vIGNvbnN0IE5PTkUgPSB7ZG9ub3I6IFtdLCByZWNlaXZlcjogW119O1xuY29uc3QgTk9ORSA9IDA7XG5jb25zdCBUUklNID0gMTtcbmNvbnN0IE1BSU4gPSAyO1xudHlwZSBQYWxldHRlSGFuZGxlciA9IG51bWJlcjtcblxudHlwZSBQYWxldHRlID0gcmVhZG9ubHkgW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG50eXBlIFBhbGV0dGVWYWxpZGF0b3IgPSAocDA6IFBhbGV0dGUsIHAxOiBQYWxldHRlLCBwMjogUGFsZXR0ZSkgPT4gYm9vbGVhbjtcblxudHlwZSBQYWxldHRlU3BlYyA9IHJlYWRvbmx5IFtQYWxldHRlSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFsZXR0ZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhbGV0dGVIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYWxldHRlVmFsaWRhdG9yP107XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWxldHRlVHlwZXModGlsZXNldDogbnVtYmVyLCBsb2NhdGlvbjogbnVtYmVyKTogUGFsZXR0ZVNwZWMge1xuICAvLyBQdWxsIG91dCBhIGZldyBzcGVjaWFsLWNhc2UgbG9jYXRpb25zLlxuICAvLyBOT1RFOiB1bmRlcmdyb3VuZCBjYXZlcm4gJDY0IGhhcyBtaWRkbGUgZm9yIHdhdGVyLCBtdXN0IGJlICQxZlxuICBzd2l0Y2ggKGxvY2F0aW9uKSB7XG4gIGNhc2UgMHgxYTogLy8gdGlsZXNldCBhMCBzd2FtcFxuICAgIHJldHVybiBbTUFJTiwgTUFJTiwgVFJJTSwgKHAwLCBwMSwgcDIpID0+IHAwWzNdID09PSBwMVszXSAmJiBwMVszXSA9PT0gcDJbM11dO1xuICBjYXNlIDB4NDM6IC8vIHRpbGVzZXQgOTRcbiAgICByZXR1cm4gW01BSU4sIFRSSU0sIFRSSU1dO1xuICBjYXNlIDB4NTc6IC8vIHRpbGVldCA4OFxuICAgIC8vIGRvbid0IGluY2x1ZGUgdGhlIHdhdGVyIGluIHRoZSBub3JtYWwgcG9vbC4uLlxuICAgIHJldHVybiBbTUFJTiwgTk9ORSwgTk9ORV07XG4gIGNhc2UgMHg2MDogLy8gdGlsZXNldCA5NFxuICAgIHJldHVybiBbTUFJTiwgTUFJTiwgTUFJTiwgKHAwLCBfcDEsIHAyKSA9PiBwMFsyXSA9PT0gcDJbMl1dO1xuICBjYXNlIDB4NjQ6IGNhc2UgMHg2ODogLy8gdGlsZXNldCA4OFxuICAgIC8vIHNvbWUgd2F0ZXIgaW4gdGhpcyBjYXZlIHVzZXMgdGhlIEhVRCdzIHBhbGV0dGUgc28gZG9uJ3Qgc2h1ZmZsZSBpdFxuICAgIHJldHVybiBbTUFJTiwgTk9ORSwgVFJJTV07XG4gIGNhc2UgMHg3YzogLy8gdGlsZXNldCA5Y1xuICAgIHJldHVybiBbTUFJTiwgVFJJTSwgVFJJTV07XG4gIH1cblxuICBzd2l0Y2ggKHRpbGVzZXQpIHtcbiAgY2FzZSAweDgwOiBjYXNlIDB4ODQ6XG4gICAgcmV0dXJuIFtNQUlOLCBNQUlOLCBUUklNLCAocDAsIHAxKSA9PiBwMFszXSA9PT0gcDFbM11dO1xuICBjYXNlIDB4ODg6XG4gICAgcmV0dXJuIFtNQUlOLCBUUklNLCBOT05FXTtcbiAgY2FzZSAweDhjOiByZXR1cm4gW01BSU4sIFRSSU0sIE1BSU5dO1xuICBjYXNlIDB4OTA6IHJldHVybiBbTUFJTiwgTUFJTiwgTUFJTl07XG4gIGNhc2UgMHg5NDogcmV0dXJuIFtNQUlOLCBUUklNLCBUUklNLCAocDAsIHAxKSA9PiBwMFszXSA9PT0gcDFbM11dO1xuICBjYXNlIDB4OTg6IHJldHVybiBbVFJJTSwgVFJJTSwgVFJJTV07IC8vIFRPRE8gLSB2YWxpZGF0ZT8hP1xuICBjYXNlIDB4OWM6IHJldHVybiBbTUFJTiwgVFJJTSwgTUFJTl07XG4gIGNhc2UgMHhhMDogcmV0dXJuIFtUUklNLCBUUklNLCBUUklNXTtcbiAgY2FzZSAweGE0OiByZXR1cm4gW01BSU4sIE1BSU4sIFRSSU1dO1xuICBjYXNlIDB4YTg6IHJldHVybiBbTUFJTiwgTUFJTiwgVFJJTV07XG4gIGNhc2UgMHhhYzogcmV0dXJuIFtNQUlOLCBUUklNLCBNQUlOXTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYHVueHBlY3RlZDogJHt0aWxlc2V0fWApO1xufVxuLy8gICBbMHg5OCwgWydkb29yJywgJ3Jvb20nLCAncm9ja3MnXV0sIC8vIHNocmluZVxuLy8gICAvLyBOT1RFOiBoeWRyYSB2ZXJ5IGRpZmY6IChyb2NrL2dyb3VuZCwgYnJpZGdlLCByaXZlcilcbi8vICAgWzB4OWMsIFsnbW91bnRhaW4vZ3JvdW5kJywgJ3RyZWVzJywgJ2Rlc2VydCddXSxcbi8vICAgLy8gTk9URTogdGhpcyBpcyBzd2FtcCwgYnV0IGFsc28gaW5jbHVkZXMgYWxsIGluZG9vcnNcbi8vICAgLy8gYWxsIDMgbmVlZCBzYW1lIGJnIGZvciBzd2FtcFxuLy8gICBbMHhhMCwgWydncm91bmQnLCAndHJlZXMnLCAnc29tZSBoYXplJ11dLFxuLy8gICBbMHhhNCwgWycnLCAnJywgJyddXSwgLy8gZm9ydHJlc3Ncbi8vICAgWzB4YTgsIFsnJywgJycsICcnXV0sIC8vIGljZSBjYXZlXG4vLyAgIFsweGFjLCBbJycsICcnLCAnJ11dLCAvLyBlbmRnYW1lXG4vLyBdKTtcblxuY29uc3QgQUxMT1dFRF9QQUxFVFRFUyA9IG5ldyBNYXA8c3RyaW5nLCByZWFkb25seSBudW1iZXJbXT4oW1xuICBbJ3BhdGgnLCBbLi4ucigweDAwLCAweDEyKSwgLi4ucigweDE1LCAweDFiKSwgLi4ucigweDFlLCAweDI1KSxcbiAgICAgICAgICAgIC4uLnIoMHgyNiwgMHgyYiksIC4uLnIoMHgyYywgMHgzMCksIC4uLnIoMHgzOSwgMHgzZiksXG4gICAgICAgICAgICAweDQyLCAuLi5yKDB4NDQsIDB4NDgpLCAuLi5yKDB4NGQsIDB4NTkpLCAuLi5yKDB4ODAsIDB4ODQpLFxuICAgICAgICAgICAgMHg4NywgLi4ucigweDhiLCAweDkzKV1dLFxuICBbJ21vdW50YWluJywgWzB4MDEsIC4uLnIoMHgwMywgMHgwNyksIC4uLnIoMHgwOCwgMHgwYiksIDB4MGMsIDB4MGQsIDB4MGUsXG4gICAgICAgICAgICAgICAuLi5yKDB4MTEsIDB4MTgpLCAweDE5LCAweDFhLCAweDFjLCAweDFkLCAweDFlLCAweDIwLCAweDIxLFxuICAgICAgICAgICAgICAgMHgyMywgMHgyNywgMHgyYSwgMHgyYiwgMHgyZiwgMHgzMSwgMHgzMywgMHgzNiwgMHgzNywgMHgzOCxcbiAgICAgICAgICAgICAgIDB4MzksIDB4M2MsIDB4NDIsIDB4NDQsIDB4NDYsIDB4NGIsIDB4NGMsIDB4NGYsIDB4NTMsIDB4NTgsXG4gICAgICAgICAgICAgICAuLi5yKDB4ODAsIDB4ODUpLCAweDg3LCAweDg4LCAweDhiLCAweDhlXV0sXG4gIFsndHJlZXMnLCBbMHgwMSwgMHgwMiwgMHgwNCwgMHgwNiwgLi4ucigweDA3LCAweDBmKSwgLi4ucigweDE0LCAweDE4KSxcbiAgICAgICAgICAgICAweDFhLCAweDFjLCAweDFlLCAweDIwLCAweDIzLCAweDI3LCAweDI5LCAweDJhLCAweDJiLCAweDJlLFxuICAgICAgICAgICAgIDB4MmYsIDB4MzEsIDB4MzMsIDB4MzcsIDB4MzgsIDB4MzksIDB4M2MsIDB4M2QsIDB4NDMsIDB4NDQsXG4gICAgICAgICAgICAgMHg0NiwgMHg0OSwgMHg0YSwgMHg0YiwgMHg0ZiwgMHg1MiwgMHg1NywgMHg2ZSxcbiAgICAgICAgICAgICAuLi5yKDB4ODAsIDB4ODUpLCAweDg3LCAweDg4LCAuLi5yKDB4OGIsIDB4OTApXV0sXG5cbl0pO1xuXG4vLyBpbmZlciBjb25zdHJhaW50cz9cbi8vICAtIHRyZWF0IEJHIGNvbG9yIHNlcGFyYXRlbHlcbi8vICAgIC0gZmlndXJlIG91dCB3aGljaCBwYWxzIG9uIGEgbWFwIHNoYXJlIHNhbWUgYmdcbi8vICAgIC0ga2VlcCBibGFjayBvbmVzIGJsYWNrXG4vLyAgICAtIGtlZXAgbGlnaHQgb25lcyBsaWdodCwgZGFyayBvbmVzIGRhcms/XG4vLyAgLSBhbGwgc2hhcmVkIGNvbG9ycyBtb3ZlZCBpbiBsb2Nrc3RlcD9cbi8vICAtIGNhdGVnb3JpemUgaW5kaXZpZHVhbCBjb2xvcnM/XG4vLyAgICBsb29rIGF0IGhvdyBtdWNoIGlzIHVzZWQ/ICBubyBicmlnaHQgY29sb3JzIGZvciB2ZXJ5IGNvbW1vbj9cbi8vICBUT0RPIC0gZml4IHRoZSBuby1pY2UgQkcgZm9yIGh5ZHJhL3N0eHkvZ29hIGluIHRoZSB0aWxlc2V0XG5cbi8vIG5leHQgc3RlcCAtIG1ha2UgcGF0dGVybi9wYWxldHRlIHZpZXdlciAoZWRpdG9yPylcblxuY29uc3QgVEVSUkFJTl9CWV9QQUxFVFRFID0gbmV3IE1hcDxudW1iZXIsIHJlYWRvbmx5IFtzdHJpbmcsIHN0cmluZywgc3RyaW5nXT4oW1xuICBbMHg4MCwgWydwYXRoJywgJ21vdW50YWluJywgJ3RyZWVzJ11dLFxuICBbMHg4NCwgWydtb3VudGFpbi1wYXRoJywgJ2JyaWNrJywgJ3RyZWVzJ11dLFxuICBbMHg4OCwgWydjYXZlIHdhbGwvZ3JvdW5kJywgJ2NhdmUgYnJpZGdlJywgJyddXSxcbiAgLy8gTk9URTogdW5kZXJncm91bmQgY2F2ZXJuICQ2NCBoYXMgbWlkZGxlIGZvciB3YXRlciwgbXVzdCBiZSAkMWZcbiAgWzB4OGMsIFsnZmxvb3InLCAnZmlyZScsICdhY2NlcHQnXV0sXG4gIFsweDkwLCBbJ3RyZWVzJywgJ21vdW50YWluJywgJ2dyYXNzJ11dLFxuICAvLyBOT1RFOiAwIGFuZCAyIG5lZWQgc2FtZSBiYWNrZ3JvdW5kIGZvciBvY2VhblxuICAvLyBsaW1lIHRyZWUgaXMgdmVyeSBkaWZmZXJlbnQgdXNhZ2U6ICh3YXRlciwgdHJlZSB0cnVuaywgdHJlZXMpLlxuICAvLyBtb3VudGFpbnMgYWxzbyBkaWZmZXJlbnQgKHJvY2ssIHRyaW0gKG9uIDI4LzdjKSwgYnJpZGdlKVxuICAvLyBmb3IgbW91bnRhaW5zLCAwIGFuZCAxIGFyZSBzYW1lLWJnXG4gIFsweDk0LCBbJ3dhdGVyL2dyb3VuZCcsICdtb3VudGFpbicsICdzaGFsbG93cyddXSxcbiAgWzB4OTgsIFsnZG9vcicsICdyb29tJywgJ3JvY2tzJ11dLCAvLyBzaHJpbmVcbiAgLy8gTk9URTogaHlkcmEgdmVyeSBkaWZmOiAocm9jay9ncm91bmQsIGJyaWRnZSwgcml2ZXIpXG4gIFsweDljLCBbJ21vdW50YWluL2dyb3VuZCcsICd0cmVlcycsICdkZXNlcnQnXV0sXG4gIC8vIE5PVEU6IHRoaXMgaXMgc3dhbXAsIGJ1dCBhbHNvIGluY2x1ZGVzIGFsbCBpbmRvb3JzXG4gIC8vIGFsbCAzIG5lZWQgc2FtZSBiZyBmb3Igc3dhbXBcbiAgWzB4YTAsIFsnZ3JvdW5kJywgJ3RyZWVzJywgJ3NvbWUgaGF6ZSddXSxcbiAgWzB4YTQsIFsnJywgJycsICcnXV0sIC8vIGZvcnRyZXNzXG4gIFsweGE4LCBbJycsICcnLCAnJ11dLCAvLyBpY2UgY2F2ZVxuICBbMHhhYywgWycnLCAnJywgJyddXSwgLy8gZW5kZ2FtZVxuXSk7XG5cbmZ1bmN0aW9uIHIoYTogbnVtYmVyLCBiOiBudW1iZXIpOiByZWFkb25seSBudW1iZXJbXSB7XG4gIHJldHVybiBuZXcgQXJyYXkoYiAtIGEpLmZpbGwoMCkubWFwKChfeCwgaSkgPT4gaSArIGEpO1xufVxuXG5jb25zdCBbXSA9IFtURVJSQUlOX0JZX1BBTEVUVEUsIEFMTE9XRURfUEFMRVRURVNdO1xuIl19