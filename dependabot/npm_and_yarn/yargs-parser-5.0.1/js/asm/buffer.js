class State {
    constructor(line, column, prefix, remainder, match) {
        this.line = line;
        this.column = column;
        this.prefix = prefix;
        this.remainder = remainder;
        this.match = match;
    }
}
export class Buffer {
    constructor(content, line = 0, column = 0) {
        this.content = content;
        this.line = line;
        this.column = column;
        this.prefix = '';
        this.remainder = content;
    }
    advance(s) {
        const s1 = this.remainder.substring(0, s.length);
        if (s !== s1)
            throw new Error(`Non-rooted token: '${s}' vs '${s1}'`);
        this.prefix += s;
        this.remainder = this.remainder.substring(s.length);
        const lines = s.split(/\n/g);
        if (lines.length > 1) {
            this.line += lines.length - 1;
            this.column = 0;
        }
        this.column += lines[lines.length - 1].length;
    }
    saveState() {
        return new State(this.line, this.column, this.prefix, this.remainder, this.lastMatch);
    }
    restoreState(state) {
        this.line = state.line;
        this.column = state.column;
        this.prefix = state.prefix;
        this.remainder = state.remainder;
        this.lastMatch = state.match;
    }
    skip(re) {
        const match = re.exec(this.remainder);
        if (!match)
            return false;
        this.advance(match[0]);
        return true;
    }
    space() { return this.skip(/^[ \t]+/); }
    newline() { return this.skip(/^\n/); }
    lookingAt(re) {
        if (typeof re === 'string')
            return this.remainder.startsWith(re);
        return re.test(this.remainder);
    }
    token(re) {
        let match;
        if (typeof re === 'string') {
            if (!this.remainder.startsWith(re))
                return false;
            match = [re];
        }
        else {
            match = re.exec(this.remainder);
        }
        if (!match)
            return false;
        match.line = this.line;
        match.column = this.column;
        this.lastMatch = match;
        this.advance(match[0]);
        return true;
    }
    lookBehind(re) {
        if (typeof re === 'string')
            return this.prefix.endsWith(re);
        const match = re.exec(this.prefix);
        if (!match)
            return false;
        match.line = this.line;
        match.column = this.line;
        this.lastMatch = match;
        return true;
    }
    match() {
        return this.lastMatch;
    }
    group(index = 0) {
        var _a;
        return (_a = this.lastMatch) === null || _a === void 0 ? void 0 : _a[index];
    }
    eof() {
        return !this.remainder;
    }
}
//# sourceMappingURL=data:application/json;base64,