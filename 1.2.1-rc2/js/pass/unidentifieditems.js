const KEY_NAMES = [
    'Curious Key',
    'Bronze Key',
    'Silver Key',
    'Ancient Key',
    'Small Key',
    'Shiny Key',
    'Mysterious Key',
    'Magic Key',
];
const FLUTE_NAMES = [
    'Wooden Flute',
    'Metal Flute',
    'Horn of Plenty',
    'Ocarina',
    'Pan Pipes',
    'Bugle',
    'Bagpipes',
    'Kazoo',
    'Magic Whistle',
    'Dog Whistle',
    'Recorder',
    'Accordion',
    'Harmonica',
    'Sousaphone',
    'Violin',
    'Cello',
];
const LAMP_NAMES = [
    'Bronze Lamp',
    'Magic Lamp',
    'Dull Lamp',
    'Shimmering Lamp',
    'Oil Lamp',
    'Broken Lamp',
];
const STATUE_NAMES = [
    'Rusty Statue',
    'Forbidden Statue',
    'Golden Idol',
    'Strange Statue',
    'Glass Statue',
    'Burt Figurine',
    'Draygon Figurine',
    'Karmine Figurine',
    'Mado Figurine',
    'Sabera Figurine',
    'Kelbesque Figurine',
    'Copper Statue',
    'White Statue',
    'Invisible Statue',
    'Mattrick Figurine',
    'Dragondarch Statue',
    'Overswarm Statue',
    'Trueblue83 Statue',
];
export function unidentifiedItems(rom, flags, random) {
    if (!flags.unidentifiedItems())
        return;
    const items = (...ids) => ids.map(id => rom.items[id]);
    const keys = items(0x32, 0x33, 0x34);
    const flutes = items(0x27, 0x28, 0x31, 0x36);
    const lamps = items(0x35, 0x39);
    const statues = items(0x25, 0x38, 0x3a, 0x3d);
    for (const [list, [...names]] of [[keys, KEY_NAMES],
        [flutes, FLUTE_NAMES],
        [lamps, LAMP_NAMES],
        [statues, STATUE_NAMES]]) {
        random.shuffle(names);
        const palettes = random.shuffle([0, 1, 2, 3]);
        for (const item of list) {
            const name = names.pop();
            if (rom.spoiler)
                rom.spoiler.addUnidentifiedItem(item.id, item.messageName, name);
            item.menuName = item.messageName = name;
            item.palette = palettes.pop();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZGVudGlmaWVkaXRlbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvcGFzcy91bmlkZW50aWZpZWRpdGVtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLFNBQVMsR0FBRztJQUNoQixhQUFhO0lBQ2IsWUFBWTtJQUNaLFlBQVk7SUFDWixhQUFhO0lBQ2IsV0FBVztJQUNYLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsV0FBVztDQUNaLENBQUM7QUFDRixNQUFNLFdBQVcsR0FBRztJQUNsQixjQUFjO0lBQ2QsYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLGVBQWU7SUFDZixhQUFhO0lBQ2IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsWUFBWTtJQUNaLFFBQVE7SUFDUixPQUFPO0NBQ1IsQ0FBQztBQUNGLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLGFBQWE7SUFDYixZQUFZO0lBQ1osV0FBVztJQUNYLGlCQUFpQjtJQUNqQixVQUFVO0lBQ1YsYUFBYTtDQUNkLENBQUM7QUFDRixNQUFNLFlBQVksR0FBRztJQUNuQixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtDQUNwQixDQUFDO0FBR0YsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEdBQVEsRUFBRSxLQUFjLEVBQUUsTUFBYztJQUN4RSxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFO1FBQUUsT0FBTztJQUN2QyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsR0FBYSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQW1CLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFL0QsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDO1FBQ2pCLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQztRQUNyQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUM7UUFDbkIsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQVUsRUFBRTtRQUVuRSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ3ZCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUcsQ0FBQztZQUMxQixJQUFJLEdBQUcsQ0FBQyxPQUFPO2dCQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2xGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDeEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFHLENBQUM7U0FDaEM7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZsYWdTZXR9IGZyb20gJy4uL2ZsYWdzZXQuanMnO1xuaW1wb3J0IHtSYW5kb219IGZyb20gJy4uL3JhbmRvbS5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxuY29uc3QgS0VZX05BTUVTID0gW1xuICAnQ3VyaW91cyBLZXknLFxuICAnQnJvbnplIEtleScsXG4gICdTaWx2ZXIgS2V5JyxcbiAgJ0FuY2llbnQgS2V5JyxcbiAgJ1NtYWxsIEtleScsXG4gICdTaGlueSBLZXknLFxuICAnTXlzdGVyaW91cyBLZXknLFxuICAnTWFnaWMgS2V5Jyxcbl07XG5jb25zdCBGTFVURV9OQU1FUyA9IFtcbiAgJ1dvb2RlbiBGbHV0ZScsXG4gICdNZXRhbCBGbHV0ZScsXG4gICdIb3JuIG9mIFBsZW50eScsXG4gICdPY2FyaW5hJyxcbiAgJ1BhbiBQaXBlcycsXG4gICdCdWdsZScsXG4gICdCYWdwaXBlcycsXG4gICdLYXpvbycsXG4gICdNYWdpYyBXaGlzdGxlJyxcbiAgJ0RvZyBXaGlzdGxlJyxcbiAgJ1JlY29yZGVyJyxcbiAgJ0FjY29yZGlvbicsXG4gICdIYXJtb25pY2EnLFxuICAnU291c2FwaG9uZScsXG4gICdWaW9saW4nLFxuICAnQ2VsbG8nLFxuXTtcbmNvbnN0IExBTVBfTkFNRVMgPSBbXG4gICdCcm9uemUgTGFtcCcsXG4gICdNYWdpYyBMYW1wJyxcbiAgJ0R1bGwgTGFtcCcsXG4gICdTaGltbWVyaW5nIExhbXAnLFxuICAnT2lsIExhbXAnLFxuICAnQnJva2VuIExhbXAnLFxuXTtcbmNvbnN0IFNUQVRVRV9OQU1FUyA9IFtcbiAgJ1J1c3R5IFN0YXR1ZScsXG4gICdGb3JiaWRkZW4gU3RhdHVlJyxcbiAgJ0dvbGRlbiBJZG9sJyxcbiAgJ1N0cmFuZ2UgU3RhdHVlJyxcbiAgJ0dsYXNzIFN0YXR1ZScsXG4gICdCdXJ0IEZpZ3VyaW5lJyxcbiAgJ0RyYXlnb24gRmlndXJpbmUnLFxuICAnS2FybWluZSBGaWd1cmluZScsXG4gICdNYWRvIEZpZ3VyaW5lJyxcbiAgJ1NhYmVyYSBGaWd1cmluZScsXG4gICdLZWxiZXNxdWUgRmlndXJpbmUnLFxuICAnQ29wcGVyIFN0YXR1ZScsXG4gICdXaGl0ZSBTdGF0dWUnLFxuICAnSW52aXNpYmxlIFN0YXR1ZScsXG4gICdNYXR0cmljayBGaWd1cmluZScsXG4gICdEcmFnb25kYXJjaCBTdGF0dWUnLFxuICAnT3ZlcnN3YXJtIFN0YXR1ZScsXG4gICdUcnVlYmx1ZTgzIFN0YXR1ZScsXG5dO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB1bmlkZW50aWZpZWRJdGVtcyhyb206IFJvbSwgZmxhZ3M6IEZsYWdTZXQsIHJhbmRvbTogUmFuZG9tKSB7XG4gIGlmICghZmxhZ3MudW5pZGVudGlmaWVkSXRlbXMoKSkgcmV0dXJuO1xuICBjb25zdCBpdGVtcyA9ICguLi5pZHM6IG51bWJlcltdKSA9PiBpZHMubWFwKGlkID0+IHJvbS5pdGVtc1tpZF0pO1xuICBjb25zdCBrZXlzID0gaXRlbXMoMHgzMiwgMHgzMywgMHgzNCk7XG4gIGNvbnN0IGZsdXRlcyA9IGl0ZW1zKDB4MjcsIDB4MjgsIDB4MzEsIDB4MzYpO1xuICBjb25zdCBsYW1wcyA9IGl0ZW1zKDB4MzUsIDB4MzkpO1xuICBjb25zdCBzdGF0dWVzID0gaXRlbXMoMHgyNSwgLyogb3BlbCAweDI2LCAqLyAweDM4LCAweDNhLCAweDNkKTtcblxuICBmb3IgKGNvbnN0IFtsaXN0LCBbLi4ubmFtZXNdXSBvZiBbW2tleXMsIEtFWV9OQU1FU10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZmx1dGVzLCBGTFVURV9OQU1FU10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbGFtcHMsIExBTVBfTkFNRVNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0YXR1ZXMsIFNUQVRVRV9OQU1FU11dIGFzIGNvbnN0KSB7XG4gICAgLy8gcGFsZXR0ZXMgYXJlIDowMyBiaXQgb2YgaXRlbS5pdGVtRGF0YVZhbHVlXG4gICAgcmFuZG9tLnNodWZmbGUobmFtZXMpO1xuICAgIGNvbnN0IHBhbGV0dGVzID0gcmFuZG9tLnNodWZmbGUoWzAsIDEsIDIsIDNdKTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgY29uc3QgbmFtZSA9IG5hbWVzLnBvcCgpITtcbiAgICAgIGlmIChyb20uc3BvaWxlcikgcm9tLnNwb2lsZXIuYWRkVW5pZGVudGlmaWVkSXRlbShpdGVtLmlkLCBpdGVtLm1lc3NhZ2VOYW1lLCBuYW1lKTtcbiAgICAgIGl0ZW0ubWVudU5hbWUgPSBpdGVtLm1lc3NhZ2VOYW1lID0gbmFtZTtcbiAgICAgIGl0ZW0ucGFsZXR0ZSA9IHBhbGV0dGVzLnBvcCgpITtcbiAgICB9XG4gIH1cbn1cbiJdfQ==