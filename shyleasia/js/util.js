export class Deque {
    constructor() {
        this.buffer = new Array(16);
        this.mask = 0xf;
        this.start = 0;
        this.end = 0;
        this.size = 0;
    }
    get length() {
        return this.size;
    }
    upsize(target) {
        while (this.mask < target) {
            if (this.end <= this.start)
                this.start += this.mask + 1;
            this.mask = this.mask << 1 | 1;
            this.buffer = this.buffer.concat(this.buffer);
        }
        this.size = target;
    }
    push(...elems) {
        this.upsize(this.size + elems.length);
        for (const elem of elems) {
            this.buffer[this.end] = elem;
            this.end = (this.end + 1) & this.mask;
        }
    }
    pop() {
        if (!this.size)
            return undefined;
        this.end = (this.end - 1) & this.mask;
        this.size--;
        return this.buffer[this.end];
    }
    peek() {
        if (!this.size)
            return undefined;
        return this.buffer[(this.end - 1) & this.mask];
    }
    unshift(...elems) {
        this.upsize(this.size + elems.length);
        for (const elem of elems) {
            this.start = (this.start - 1) & this.mask;
            this.buffer[this.start] = elem;
        }
    }
    shift() {
        if (!this.size)
            return undefined;
        const result = this.buffer[this.start];
        this.start = (this.start + 1) & this.mask;
        this.size--;
        return result;
    }
    front() {
        if (!this.size)
            return undefined;
        return this.buffer[this.start];
    }
    toString() {
        const parts = new Array(this.size);
        for (let i = 0; i < this.size; i++) {
            parts[i] = this.buffer[(this.start + i) & this.mask];
        }
        return `[${parts.join(', ')}]`;
    }
}
export const breakLines = (str, len) => {
    str = str.trim();
    const out = [];
    while (str.length > len) {
        let b = str.substring(0, len).lastIndexOf(' ');
        if (b < 0)
            b = len;
        out.push(str.substring(0, b).trim());
        str = str.substring(b).trim();
    }
    out.push(str.trim());
    return out;
};
export class UsageError extends Error {
}
export class SuffixTrie {
    constructor(key = '') {
        this.key = key;
        this.next = new Map();
    }
    get(key) {
        let t = this;
        for (let i = key.length - 1; i >= 0 && t; i++) {
            t = t.next.get(key[i]);
        }
        return t && t.data;
    }
    with(c) {
        let t = this.next.get(c);
        if (!t)
            this.next.set(c, (t = new SuffixTrie(c + this.key)));
        return t;
    }
    set(key, value) {
        let t = this;
        for (let i = key.length - 1; i >= 0 && t; i++) {
            t = t.with(key[i]);
        }
        t.data = value;
    }
    *values() {
        const stack = [this];
        while (stack.length) {
            const top = stack.pop();
            if (top.data)
                yield top.data;
            stack.push(...top.next.values());
        }
    }
}
export class DefaultMap extends Map {
    constructor(supplier, init) {
        super(init);
        this.supplier = supplier;
    }
    get(key) {
        let value = super.get(key);
        if (value == null)
            super.set(key, value = this.supplier(key));
        return value;
    }
}
export class IndexedSet {
    constructor() {
        this.forward = [];
        this.reverse = new Map();
    }
    add(elem) {
        let result = this.reverse.get(elem);
        if (result == null)
            this.reverse.set(elem, result = this.forward.push(elem) - 1);
        return result;
    }
    get(index) {
        return this.forward[index];
    }
}
export var iters;
(function (iters_1) {
    function* concat(...iters) {
        for (const iter of iters) {
            yield* iter;
        }
    }
    iters_1.concat = concat;
    function isEmpty(iter) {
        return Boolean(iter[Symbol.iterator]().next().done);
    }
    iters_1.isEmpty = isEmpty;
    function* map(iter, f) {
        for (const elem of iter) {
            yield f(elem);
        }
    }
    iters_1.map = map;
    function* filter(iter, f) {
        for (const elem of iter) {
            if (f(elem))
                yield elem;
        }
    }
    iters_1.filter = filter;
    function* flatMap(iter, f) {
        for (const elem of iter) {
            yield* f(elem);
        }
    }
    iters_1.flatMap = flatMap;
    function count(iter) {
        let count = 0;
        for (const _ of iter) {
            count++;
        }
        return count;
    }
    iters_1.count = count;
    function first(iter, fallback) {
        for (const elem of iter)
            return elem;
        if (arguments.length < 2)
            throw new Error(`Empty iterable: ${iter}`);
        return fallback;
    }
    iters_1.first = first;
    function zip(left, right, zipper = (a, b) => [a, b]) {
        return {
            *[Symbol.iterator]() {
                const leftIter = left[Symbol.iterator]();
                const rightIter = right[Symbol.iterator]();
                let a, b;
                while ((a = leftIter.next(), b = rightIter.next(), !a.done && !b.done)) {
                    yield zipper(a.value, b.value);
                }
            }
        };
    }
    iters_1.zip = zip;
})(iters || (iters = {}));
export function spread(iter) {
    return [...iter];
}
export class LabeledSet {
    constructor() {
        this.map = new Map();
    }
    add(elem) {
        this.map.set(elem.label, elem);
    }
    has(elem) {
        return this.map.has(elem.label);
    }
    delete(elem) {
        this.map.delete(elem.label);
    }
    [Symbol.iterator]() {
        return this.map.values();
    }
}
const INVALIDATED = Symbol('Invalidated');
const SIZE = Symbol('Size');
class SetMultimapSetView {
    constructor(ownerMap, ownerKey, currentSet) {
        this.ownerMap = ownerMap;
        this.ownerKey = ownerKey;
        this.currentSet = currentSet;
    }
    getCurrentSet() {
        if (!this.currentSet || this.currentSet[INVALIDATED]) {
            this.currentSet = this.ownerMap.get(this.ownerKey) || new Set();
        }
        return this.currentSet;
    }
    mutateSet(f) {
        const set = this.getCurrentSet();
        const size = set.size;
        try {
            return f(set);
        }
        finally {
            this.ownerMap[SIZE] += set.size - size;
            if (!set.size) {
                this.ownerMap.delete(this.ownerKey);
                set[INVALIDATED] = true;
            }
        }
    }
    add(elem) {
        this.mutateSet(s => s.add(elem));
        return this;
    }
    has(elem) {
        return this.getCurrentSet().has(elem);
    }
    clear() {
        this.mutateSet(s => s.clear());
    }
    delete(elem) {
        return this.mutateSet(s => s.delete(elem));
    }
    [Symbol.iterator]() {
        return this.getCurrentSet()[Symbol.iterator]();
    }
    values() {
        return this.getCurrentSet().values();
    }
    keys() {
        return this.getCurrentSet().keys();
    }
    entries() {
        return this.getCurrentSet().entries();
    }
    forEach(callback, thisArg) {
        this.getCurrentSet().forEach(callback, thisArg);
    }
    get size() {
        return this.getCurrentSet().size;
    }
    get [Symbol.toStringTag]() {
        return 'Set';
    }
}
Reflect.setPrototypeOf(SetMultimapSetView.prototype, Set.prototype);
export class SetMultimap {
    constructor(entries = []) {
        this.map = new Map();
        this.map[SIZE] = 0;
        for (const [k, v] of entries) {
            this.add(k, v);
        }
    }
    get size() {
        return this.map[SIZE];
    }
    get(k) {
        return new SetMultimapSetView(this.map, k, this.map.get(k));
    }
    add(k, v) {
        let set = this.map.get(k);
        if (!set)
            this.map.set(k, set = new Set());
        const size = set.size;
        set.add(v);
        this.map[SIZE] += set.size - size;
    }
}
export class Multiset {
    constructor(entries = []) {
        this.entries = new DefaultMap(() => 0, entries);
    }
    add(elem) {
        this.entries.set(elem, this.entries.get(elem) + 1);
    }
    delete(elem) {
        const count = this.entries.get(elem) - 1;
        if (count > 0) {
            this.entries.set(elem, count);
        }
        else {
            this.entries.delete(elem);
        }
    }
    unique() {
        return this.entries.size;
    }
    count(elem) {
        return this.entries.has(elem) ? this.entries.get(elem) : 0;
    }
    [Symbol.iterator]() {
        return this.entries.entries();
    }
}
export function assertNever(x) {
    throw new Error(`non-exhaustive check: ${x}`);
}
export function assert(x) {
    if (!x)
        throw new Error(`asserted but falsy: ${x}`);
    return x;
}
export function isNonNull(x) {
    return x != null;
}
export function memoize(f) {
    const cache = {};
    return function (...args) {
        let c = cache;
        for (const arg of args) {
            if (!c.next)
                c.next = new WeakMap();
            let next = (c.next || (c.next = new WeakMap())).get(arg);
            if (!next)
                c.next.set(arg, next = {});
        }
        if (!c.cached) {
            c.value = f.apply(this, args);
            c.cached = true;
        }
        return c.value;
    };
}
export function strcmp(left, right) {
    if (left < right)
        return -1;
    if (right < left)
        return 1;
    return 0;
}
export class Keyed {
    constructor(data) {
        this.data = data;
    }
    get(index) {
        return this.data[index];
    }
    [Symbol.iterator]() {
        return this.data.entries();
    }
    values() {
        return this.data[Symbol.iterator]();
    }
}
export class ArrayMap {
    constructor(data) {
        this.data = data;
        const rev = new Map();
        for (let i = 0; i < data.length; i++) {
            rev.set(data[i], i);
        }
        this.rev = rev;
        this.length = data.length;
    }
    get(index) {
        return this.data[index];
    }
    hasValue(value) {
        return this.rev.has(value);
    }
    index(value) {
        const index = this.rev.get(value);
        if (index == null)
            throw new Error(`Missing index for ${value}`);
        return index;
    }
    [Symbol.iterator]() {
        return this.data.entries();
    }
    values() {
        return this.data[Symbol.iterator]();
    }
}
export class MutableArrayBiMap {
    constructor() {
        this._fwd = [];
        this._rev = [];
    }
    *[Symbol.iterator]() {
        for (let i = 0; i < this._fwd.length; i++) {
            const val = this._fwd[i];
            if (val != null)
                yield [i, val];
        }
    }
    *keys() {
        for (let i = 0; i < this._fwd.length; i++) {
            if (this._fwd[i] != null)
                yield i;
        }
    }
    *values() {
        for (let i = 0; i < this._rev.length; i++) {
            if (this._rev[i] != null)
                yield i;
        }
    }
    get(index) {
        return this._fwd[index];
    }
    has(key) {
        return this._fwd[key] != null;
    }
    hasValue(value) {
        return this._rev[value] != null;
    }
    index(value) {
        const index = this._rev[value];
        if (index == null)
            throw new Error(`Missing index for ${value}`);
        return index;
    }
    set(key, value) {
        if (this._fwd[key])
            throw new Error(`already has key ${key}`);
        if (this._rev[value])
            throw new Error(`already has value ${value}`);
        this._fwd[key] = value;
        this._rev[value] = key;
    }
    replace(key, value) {
        const oldKey = this._rev[value];
        if (oldKey != null)
            delete this._fwd[oldKey];
        const oldValue = this._fwd[key];
        if (oldValue != null)
            delete this._rev[oldValue];
        this._fwd[key] = value;
        this._rev[value] = key;
        return oldValue;
    }
}
//# sourceMappingURL=data:application/json;base64,