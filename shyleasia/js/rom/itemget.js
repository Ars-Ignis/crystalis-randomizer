import { Entity, EntityArray } from './entity.js';
import { MessageId } from './messageid.js';
import { ITEM_GET_FLAGS, hex, readLittleEndian, writeLittleEndian } from './util.js';
const GRANT_ITEM_TABLE = 0x3d6d5;
const GET_TO_ITEM_BASE = 0x1dd66;
const GET_TO_ITEM_THRESHOLD = 0x49;
export class ItemGets extends EntityArray {
    constructor(rom) {
        super(0x71);
        this.rom = rom;
        this.actionGrants = new Map();
        for (let i = 0; i < 0x71; i++) {
            this[i] = new ItemGet(rom, i);
        }
        let addr = GRANT_ITEM_TABLE;
        while (rom.prg[addr] !== 0xff) {
            const key = rom.prg[addr++];
            const value = rom.prg[addr++];
            this.actionGrants.set(key, value);
        }
    }
    async write(writer) {
        const promises = [];
        for (const itemget of this) {
            promises.push(itemget.write(writer));
        }
        await Promise.all(promises);
        let addr = GRANT_ITEM_TABLE;
        for (const [key, value] of this.actionGrants) {
            writer.rom[addr++] = key;
            writer.rom[addr++] = value;
        }
    }
}
export class ItemGet extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.itemPointer = GET_TO_ITEM_BASE + id;
        this._itemId = rom.prg[this.itemPointer];
        this.tablePointer = 0x1db00 + 2 * id;
        this.tableBase = readLittleEndian(rom.prg, this.tablePointer) + 0x14000;
        let a = this.tableBase;
        this.inventoryRowStart = rom.prg[a++];
        this.inventoryRowLength = rom.prg[a++];
        this.acquisitionAction = MessageId.from(rom.prg, a);
        this.flags = ITEM_GET_FLAGS.read(rom.prg, a + 2);
        this.key = rom.prg[a + 2 + 2 * this.flags.length + 1] === 0xfe;
        if (id !== 0 && this.tableBase === readLittleEndian(rom.prg, 0x1dd66) + 0x14000) {
            this.key = false;
            this.flags = [];
        }
    }
    get itemId() { return this._itemId; }
    set itemId(itemId) {
        if (this.id < GET_TO_ITEM_THRESHOLD)
            throw new Error(`${this.id}`);
        this._itemId = itemId;
    }
    isLosable() {
        return LOSABLE_ROWS.has(this.inventoryRowStart);
    }
    copyFrom(that) {
        this.inventoryRowStart = that.inventoryRowStart;
        this.inventoryRowLength = that.inventoryRowLength;
        this.acquisitionAction = that.acquisitionAction;
        this.flags = [...that.flags];
        this.key = that.key;
    }
    async write(writer) {
        writer.rom[this.itemPointer] = this.itemId;
        const table = [
            this.inventoryRowStart, this.inventoryRowLength,
            ...this.acquisitionAction.data,
            ...ITEM_GET_FLAGS.bytes(this.flags),
            this.key ? 0xfe : 0xff,
        ];
        const address = await writer.write(table, 0x1c000, 0x1ffff, `ItemGetData ${hex(this.id)}`);
        writeLittleEndian(writer.rom, this.tablePointer, address - 0x14000);
    }
}
const LOSABLE_ROWS = new Set([4, 8, 16]);
//# sourceMappingURL=data:application/json;base64,