import { die } from '../assert.js';
import { readLittleEndian, upperCamelToSpaces } from './util.js';
export class Bosses {
    constructor(rom) {
        this.rom = rom;
        this.Vampire1 = new Boss(this, {
            flag: this.rom.flags.Vampire1,
            kill: 0x0,
            npc: this.rom.npcs.Vampire1,
            shuffled: true,
            sword: 1,
        });
        this.Insect = new Boss(this, {
            flag: this.rom.flags.GiantInsect,
            kill: 0x1,
            npc: this.rom.npcs.Insect,
            sword: 1,
        });
        this.Kelbesque1 = new Boss(this, {
            flag: this.rom.flags.Kelbesque1,
            kill: 0x2,
            npc: this.rom.npcs.Kelbesque1,
            shuffled: true,
        });
        this.Rage = new Boss(this, {
            flag: this.rom.flags.Rage,
            kill: 0x3,
            npc: this.rom.npcs.Rage,
        });
        this.Sabera1 = new Boss(this, {
            address: 0x3656e,
            flag: this.rom.flags.Sabera1,
            kill: 0x4,
            npc: this.rom.npcs.SaberaDisguisedAsMesia,
            shuffled: true,
        });
        this.Vampire2 = new Boss(this, {
            flag: this.rom.flags.Vampire2,
            kill: 0xc,
            npc: this.rom.npcs.Vampire2,
            shuffled: true,
            sword: 1,
        });
        this.Mado1 = new Boss(this, {
            address: 0x3d820,
            flag: this.rom.flags.Mado1,
            kill: 0x5,
            shuffled: true,
        });
        this.Kelbesque2 = new Boss(this, {
            flag: this.rom.flags.Kelbesque2,
            kill: 0x6,
            npc: this.rom.npcs.Kelbesque2,
            shuffled: true,
        });
        this.Sabera2 = new Boss(this, {
            flag: this.rom.flags.Sabera2,
            kill: 0x7,
            npc: this.rom.npcs.Sabera2,
            shuffled: true,
        });
        this.Mado2 = new Boss(this, {
            flag: this.rom.flags.Mado2,
            kill: 0x8,
            npc: this.rom.npcs.Mado2,
            shuffled: true,
        });
        this.Karmine = new Boss(this, {
            flag: this.rom.flags.Karmine,
            kill: 0x9,
            npc: this.rom.npcs.Karmine,
            shuffled: true,
            sword: 2,
        });
        this.Draygon1 = new Boss(this, {
            flag: this.rom.flags.Draygon1,
            kill: 0xa,
            npc: this.rom.npcs.Draygon,
            shuffled: true,
            sword: 2,
        });
        this.StatueOfMoon = new Boss(this, {
            flag: this.rom.flags.UsedBowOfMoon,
            npc: this.rom.npcs.StatueOfMoon,
        });
        this.StatueOfSun = new Boss(this, {
            flag: this.rom.flags.UsedBowOfSun,
            npc: this.rom.npcs.StatueOfSun,
        });
        this.Draygon2 = new Boss(this, {
            flag: this.rom.flags.Draygon2,
            kill: 0xb,
            npc: this.rom.npcs.Draygon,
        });
        this.Dyna = new Boss(this, {
            kill: 0xd,
            object: 0xa4,
        });
        this.all = [];
        for (const key in this) {
            if (!this.hasOwnProperty(key))
                continue;
            const boss = this[key];
            if (boss instanceof Boss) {
                boss.name = upperCamelToSpaces(key);
                this.all.push(boss);
            }
        }
    }
    isBossFlag(flag) {
        const flags = this.flags || (this.flags = (() => {
            const f = new Set();
            for (const boss of this.all) {
                if (boss.flag != null)
                    f.add(boss.flag.id);
            }
            return f;
        })());
        return flags.has(flag);
    }
    fromLocation(id) {
        return this.all.find(b => b.location === id);
    }
    fromBossKill(num) {
        return this.all.find(b => b.kill === num);
    }
    fromObject(id) {
        return this.all.find(b => b.object === id);
    }
    [Symbol.iterator]() {
        return this.all[Symbol.iterator]();
    }
}
export class Boss {
    constructor(bosses, { flag, npc, kill, shuffled, address, sword = 3, object }) {
        this.bosses = bosses;
        const { prg } = bosses.rom;
        this.flag = flag;
        this.npc = npc;
        this.object =
            address ? prg[address] : npc ? npc.data[1] : (object !== null && object !== void 0 ? object : die(`address, npc, or object is required`));
        this.swordLevel = sword;
        this.shuffled = Boolean(shuffled);
        this.kill = kill;
        if (kill != null) {
            const killAddr = 0x14000 + readLittleEndian(prg, 0x1f96b + 2 * kill);
            const drop = prg[killAddr + 4];
            if (drop !== 0xff)
                this.drop = drop;
            this.location = prg[0x1f95d + kill];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,