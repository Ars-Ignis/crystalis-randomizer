import { Entity } from './entity.js';
import { reverseBits, seq, tuple } from './util.js';
export class Pattern extends Entity {
    constructor(rom, id, pixels) {
        super(rom, id);
        this.pixels = pixels || tuple(rom.chr, id << 4, 16);
    }
    pixelAt(y, x) {
        return (this.pixels[y | 8] >> x & 1) << 1 | (this.pixels[y] >> x & 1);
    }
    flipH() {
        return new Pattern(this.rom, -1, this.pixels.map(reverseBits));
    }
    flipV() {
        return new Pattern(this.rom, -1, seq(16, y => this.pixels[y & 8 | ~y & 7]));
    }
    flip(type) {
        let p = this;
        if (type & Flip.HORIZONTAL)
            p = p.flipH();
        if (type & Flip.VERTICAL)
            p = p.flipV();
        return p;
    }
    write(writer) {
        const a = this.id << 4;
        writer.chr.subarray(a, a + 16).set(this.pixels);
    }
}
export var Flip;
(function (Flip) {
    Flip[Flip["HORIZONTAL"] = 64] = "HORIZONTAL";
    Flip[Flip["VERTICAL"] = 128] = "VERTICAL";
})(Flip || (Flip = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0dGVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vcGF0dGVybi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUlsRCxNQUFNLE9BQU8sT0FBUSxTQUFRLE1BQU07SUFJakMsWUFBWSxHQUFRLEVBQUUsRUFBVSxFQUFFLE1BQWlCO1FBQ2pELEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFHRCxPQUFPLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBVTtRQUNiLElBQUksQ0FBQyxHQUFZLElBQUksQ0FBQztRQUN0QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVTtZQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVE7WUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hDLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFjO1FBQ2xCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQU4sSUFBWSxJQUdYO0FBSEQsV0FBWSxJQUFJO0lBQ2QsNENBQWlCLENBQUE7SUFDakIseUNBQWUsQ0FBQTtBQUNqQixDQUFDLEVBSFcsSUFBSSxLQUFKLElBQUksUUFHZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RW50aXR5fSBmcm9tICcuL2VudGl0eS5qcyc7XG5pbXBvcnQge3JldmVyc2VCaXRzLCBzZXEsIHR1cGxlfSBmcm9tICcuL3V0aWwuanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQgeyBXcml0ZXIgfSBmcm9tICcuL3dyaXRlci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQYXR0ZXJuIGV4dGVuZHMgRW50aXR5IHtcblxuICBwaXhlbHM6IG51bWJlcltdO1xuXG4gIGNvbnN0cnVjdG9yKHJvbTogUm9tLCBpZDogbnVtYmVyLCBwaXhlbHM/OiBudW1iZXJbXSkge1xuICAgIHN1cGVyKHJvbSwgaWQpO1xuICAgIHRoaXMucGl4ZWxzID0gcGl4ZWxzIHx8IHR1cGxlKHJvbS5jaHIsIGlkIDw8IDQsIDE2KTtcbiAgfVxuXG4gIC8vIFRha2VzIHggYW5kIHkgZnJvbSAwLi43LCByZXR1cm5zIGEgY29sb3IgMC4uMy5cbiAgcGl4ZWxBdCh5OiBudW1iZXIsIHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuICh0aGlzLnBpeGVsc1t5IHwgOF0gPj4geCAmIDEpIDw8IDEgfCAodGhpcy5waXhlbHNbeV0gPj4geCAmIDEpO1xuICB9XG5cbiAgZmxpcEgoKTogUGF0dGVybiB7XG4gICAgcmV0dXJuIG5ldyBQYXR0ZXJuKHRoaXMucm9tLCAtMSwgdGhpcy5waXhlbHMubWFwKHJldmVyc2VCaXRzKSk7XG4gIH1cblxuICBmbGlwVigpOiBQYXR0ZXJuIHtcbiAgICByZXR1cm4gbmV3IFBhdHRlcm4odGhpcy5yb20sIC0xLCBzZXEoMTYsIHkgPT4gdGhpcy5waXhlbHNbeSAmIDggfCB+eSAmIDddKSk7XG4gIH1cblxuICBmbGlwKHR5cGU6IEZsaXApOiBQYXR0ZXJuIHtcbiAgICBsZXQgcDogUGF0dGVybiA9IHRoaXM7XG4gICAgaWYgKHR5cGUgJiBGbGlwLkhPUklaT05UQUwpIHAgPSBwLmZsaXBIKCk7XG4gICAgaWYgKHR5cGUgJiBGbGlwLlZFUlRJQ0FMKSBwID0gcC5mbGlwVigpO1xuICAgIHJldHVybiBwO1xuICB9XG5cbiAgd3JpdGUod3JpdGVyOiBXcml0ZXIpOiB2b2lkIHtcbiAgICBjb25zdCBhID0gdGhpcy5pZCA8PCA0O1xuICAgIHdyaXRlci5jaHIuc3ViYXJyYXkoYSwgYSArIDE2KS5zZXQodGhpcy5waXhlbHMpO1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIEZsaXAge1xuICBIT1JJWk9OVEFMID0gMHg0MCxcbiAgVkVSVElDQUwgPSAweDgwLFxufVxuIl19