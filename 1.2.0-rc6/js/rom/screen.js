import { Entity } from './entity.js';
import { tuple } from './util.js';
export class Screen extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.base = (id > 0xff ? 0x40 + id : id) << 8;
        this.tiles = tuple(rom.prg, this.base, 0xf0);
    }
    allTilesSet() {
        return new Set(this.tiles);
    }
    write(writer) {
        if (this.id < 0x100) {
            writer.rom.subarray(this.base, this.base + 0xf0).set(this.tiles);
        }
        else {
            for (let i = 0; i < 0xc0; i++) {
                writer.rom[this.base + i] = this.tiles[i];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3JvbS9zY3JlZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBSWhDLE1BQU0sT0FBTyxNQUFPLFNBQVEsTUFBTTtJQUtoQyxZQUFZLEdBQVEsRUFBRSxFQUFVO1FBQzlCLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBVUQsV0FBVztRQUNULE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBYztRQUNsQixJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xFO2FBQU07WUFHTCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQztTQUNGO0lBQ0gsQ0FBQztDQUdGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbnRpdHl9IGZyb20gJy4vZW50aXR5LmpzJztcbmltcG9ydCB7dHVwbGV9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQge1dyaXRlcn0gZnJvbSAnLi93cml0ZXIuanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTY3JlZW4gZXh0ZW5kcyBFbnRpdHkge1xuXG4gIGJhc2U6IG51bWJlcjtcbiAgdGlsZXM6IG51bWJlcltdOyAvLyBhbHdheXMgMTV4MTZcblxuICBjb25zdHJ1Y3Rvcihyb206IFJvbSwgaWQ6IG51bWJlcikge1xuICAgIHN1cGVyKHJvbSwgaWQpO1xuICAgIHRoaXMuYmFzZSA9IChpZCA+IDB4ZmYgPyAweDQwICsgaWQgOiBpZCkgPDwgODtcbiAgICAvLyBtZXRhdGlsZSBpbmRleFxuICAgIHRoaXMudGlsZXMgPSB0dXBsZShyb20ucHJnLCB0aGlzLmJhc2UsIDB4ZjApO1xuICB9XG5cbiAgLy8gdGlsZSh5OiBudW1iZXIsIHg6IG51bWJlcik6IG51bWJlciB7XG4gIC8vICAgcmV0dXJuIHRoaXMudGlsZXNbeSA8PCA0IHwgeF07XG4gIC8vIH1cblxuICAvLyBtZXRhdGlsZSh5LCB4KTogTWV0YXRpbGUge1xuICAvLyAgIHJldHVybiB0aGlzLnJvbS5tZXRhdGlsZXNbdGhpcy50aWxlc1t5XVt4XV07XG4gIC8vIH1cblxuICBhbGxUaWxlc1NldCgpOiBTZXQ8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG5ldyBTZXQodGhpcy50aWxlcyk7XG4gIH1cblxuICB3cml0ZSh3cml0ZXI6IFdyaXRlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmlkIDwgMHgxMDApIHtcbiAgICAgIHdyaXRlci5yb20uc3ViYXJyYXkodGhpcy5iYXNlLCB0aGlzLmJhc2UgKyAweGYwKS5zZXQodGhpcy50aWxlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlIHJldXNlIHRoZSBsYXN0IDIgcm93cyBvZiBleHRlbmRlZCBzY3JlZW5zIChjb3ZlcmVkIGJ5IEhVRCkgZm9yXG4gICAgICAvLyBnbG9iYWwgZmxhZ3MgaW4gdGhlIHJvbS5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMHhjMDsgaSsrKSB7XG4gICAgICAgIHdyaXRlci5yb21bdGhpcy5iYXNlICsgaV0gPSB0aGlzLnRpbGVzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE8gLSBhY2Nlc3NvcnMgZm9yIHdoaWNoIHBhbGV0dGVzLCB0aWxlc2V0cywgYW5kIHBhdHRlcm5zIGFyZSB1c2VkL2FsbG93ZWRcbn1cblxuLy8gTWV0YXRpbGUgZG9lc24ndCBtZWFuIG11Y2ggd2l0aG91dCB0aWxlc2V0LCBwYXR0ZXJucywgZXRjLlxuLy8gbWF5IG5lZWQgdG8gcmV0aGluayB0aGlzIG9uZSwgbWFrZSBpdCBhIHRyYW5zaWVudCBvYmplY3QgdGhhdCBkZXBzIG9uIG90aGVycy5cbi8vIGNsYXNzIE1ldGF0aWxlIHtcbi8vICAgY29uc3RydWN0b3Iocm9tLCBpZCkge1xuLy8gICAgIHRoaXMucm9tID0gcm9tO1xuLy8gICAgIHRoaXMuaWQgPSBpZDtcbi8vICAgfVxuLy8gfVxuIl19