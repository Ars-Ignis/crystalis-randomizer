The following scraps were intended to help palette-shuffling metatilesets.

// const indexedTilesets: {[name: string]: MetatilesetData} = TILESETS as any;

// assertType<{[name in keyof typeof TILESETS]: MetatilesetData}>(TILESETS);

// NOTE: This could automatically convert the above names into
// properties on exactly the correct tilesets, though we likely
// want to change them dynamically, so it's maybe less relevant?
//   - though we should set them all upfront, including unavailable ones...
// const X = {
//   a: {
//     grass: true,
//   },
//   b: {
//     tower: true,
//   },
// } as const;
// type XType = typeof X;
// type Filter1<T> = {[K in keyof XType]: XType[K]['tilesets'] extends T ? number : never};
// type Filter2<T> = ({[P in keyof T]: T[P] extends never ? never : P})[keyof T];
// type Filter<T> = Pick<Filter1<T>, Filter2<Filter1<T>>>;
// interface S {
//   tower: Filter<{tower: true}>;
//   grass: Filter<{grass: true}>;
// }
// type Filter<T> = {[K in typeof X]: (typeof X)[K] extends T ? number : never;
// interface S {
//   tower: Filter<{tower: true}>;
//   grass: Filter<{grass: true}>;
// }

// export enum Passage {
//   ALWAYS = 0,
//   SLOPE = 1,
//   FLAG = 2,
//   FLY = 3,
//   NEVER = 4,
// }

// interface PaletteHandler {
//   donor: string[];
//   receiver: string[];
// }

// const MAIN = {donor: ['main', 'trim'], receiver: ['main']};
// const TRIM = {donor: ['trim'], receiver: ['trim']};
// const NONE = {donor: [], receiver: []};
const NONE = 0;
const TRIM = 1;
const MAIN = 2;
type PaletteHandler = number;

type Palette = readonly [number, number, number, number];
type PaletteValidator = (p0: Palette, p1: Palette, p2: Palette) => boolean;

type PaletteSpec = readonly [PaletteHandler,
                             PaletteHandler,
                             PaletteHandler,
                             PaletteValidator?];

export function paletteTypes(tileset: number, location: number): PaletteSpec {
  // Pull out a few special-case locations.
  // NOTE: underground cavern $64 has middle for water, must be $1f
  switch (location) {
  case 0x1a: // tileset a0 swamp
    return [MAIN, MAIN, TRIM, (p0, p1, p2) => p0[3] === p1[3] && p1[3] === p2[3]];
  case 0x43: // tileset 94
    return [MAIN, TRIM, TRIM];
  case 0x57: // tileet 88
    // don't include the water in the normal pool...
    return [MAIN, NONE, NONE];
  case 0x60: // tileset 94
    return [MAIN, MAIN, MAIN, (p0, _p1, p2) => p0[2] === p2[2]];
  case 0x64: case 0x68: // tileset 88
    // some water in this cave uses the HUD's palette so don't shuffle it
    return [MAIN, NONE, TRIM];
  case 0x7c: // tileset 9c
    return [MAIN, TRIM, TRIM];
  }

  switch (tileset) {
  case 0x80: case 0x84:
    return [MAIN, MAIN, TRIM, (p0, p1) => p0[3] === p1[3]];
  case 0x88:
    return [MAIN, TRIM, NONE];
  case 0x8c: return [MAIN, TRIM, MAIN];
  case 0x90: return [MAIN, MAIN, MAIN];
  case 0x94: return [MAIN, TRIM, TRIM, (p0, p1) => p0[3] === p1[3]];
  case 0x98: return [TRIM, TRIM, TRIM]; // TODO - validate?!?
  case 0x9c: return [MAIN, TRIM, MAIN];
  case 0xa0: return [TRIM, TRIM, TRIM];
  case 0xa4: return [MAIN, MAIN, TRIM];
  case 0xa8: return [MAIN, MAIN, TRIM];
  case 0xac: return [MAIN, TRIM, MAIN];
  }
  throw new Error(`unxpected: ${tileset}`);
}
//   [0x98, ['door', 'room', 'rocks']], // shrine
//   // NOTE: hydra very diff: (rock/ground, bridge, river)
//   [0x9c, ['mountain/ground', 'trees', 'desert']],
//   // NOTE: this is swamp, but also includes all indoors
//   // all 3 need same bg for swamp
//   [0xa0, ['ground', 'trees', 'some haze']],
//   [0xa4, ['', '', '']], // fortress
//   [0xa8, ['', '', '']], // ice cave
//   [0xac, ['', '', '']], // endgame
// ]);

const ALLOWED_PALETTES = new Map<string, readonly number[]>([
  ['path', //'00..12|15..1b|1e..25|26..2b|2c..30|39..3f|42|44..48|4d..59',
           [...r(0x00, 0x12), ...r(0x15, 0x1b), ...r(0x1e, 0x25),
            ...r(0x26, 0x2b), ...r(0x2c, 0x30), ...r(0x39, 0x3f),
            0x42, ...r(0x44, 0x48), ...r(0x4d, 0x59), ...r(0x80, 0x84),
            0x87, ...r(0x8b, 0x93)]],
  ['mountain', [0x01, ...r(0x03, 0x07), ...r(0x08, 0x0b), 0x0c, 0x0d, 0x0e,
               ...r(0x11, 0x18), 0x19, 0x1a, 0x1c, 0x1d, 0x1e, 0x20, 0x21,
               0x23, 0x27, 0x2a, 0x2b, 0x2f, 0x31, 0x33, 0x36, 0x37, 0x38,
               0x39, 0x3c, 0x42, 0x44, 0x46, 0x4b, 0x4c, 0x4f, 0x53, 0x58,
               ...r(0x80, 0x85), 0x87, 0x88, 0x8b, 0x8e]],
  ['trees', [0x01, 0x02, 0x04, 0x06, ...r(0x07, 0x0f), ...r(0x14, 0x18),
             0x1a, 0x1c, 0x1e, 0x20, 0x23, 0x27, 0x29, 0x2a, 0x2b, 0x2e,
             0x2f, 0x31, 0x33, 0x37, 0x38, 0x39, 0x3c, 0x3d, 0x43, 0x44,
             0x46, 0x49, 0x4a, 0x4b, 0x4f, 0x52, 0x57, 0x6e,
             ...r(0x80, 0x85), 0x87, 0x88, ...r(0x8b, 0x90)]],

]);

// infer constraints?
//  - treat BG color separately
//    - figure out which pals on a map share same bg
//    - keep black ones black
//    - keep light ones light, dark ones dark?
//  - all shared colors moved in lockstep?
//  - categorize individual colors?
//    look at how much is used?  no bright colors for very common?
//  TODO - fix the no-ice BG for hydra/stxy/goa in the tileset

// next step - make pattern/palette viewer (editor?)

const TERRAIN_BY_PALETTE = new Map<number, readonly [string, string, string]>([
  [0x80, ['path', 'mountain', 'trees']],
  [0x84, ['mountain-path', 'brick', 'trees']],
  [0x88, ['cave wall/ground', 'cave bridge', '']],
  // NOTE: underground cavern $64 has middle for water, must be $1f
  [0x8c, ['floor', 'fire', 'accept']],
  [0x90, ['trees', 'mountain', 'grass']],
  // NOTE: 0 and 2 need same background for ocean
  // lime tree is very different usage: (water, tree trunk, trees).
  // mountains also different (rock, trim (on 28/7c), bridge)
  // for mountains, 0 and 1 are same-bg
  [0x94, ['water/ground', 'mountain', 'shallows']],
  [0x98, ['door', 'room', 'rocks']], // shrine
  // NOTE: hydra very diff: (rock/ground, bridge, river)
  [0x9c, ['mountain/ground', 'trees', 'desert']],
  // NOTE: this is swamp, but also includes all indoors
  // all 3 need same bg for swamp
  [0xa0, ['ground', 'trees', 'some haze']],
  [0xa4, ['', '', '']], // fortress
  [0xa8, ['', '', '']], // ice cave
  [0xac, ['', '', '']], // endgame
]);

function r(a: number, b: number): readonly number[] {
  return new Array(b - a).fill(0).map((_x, i) => i + a);
}

const [] = [TERRAIN_BY_PALETTE, ALLOWED_PALETTES];



  // TODO - this algorithm is much less satisfying.
  shuffleBackgrounds2() {
    function eq(a: Location, b: Location): boolean {
      return a.tilePalettes[0] === b.tilePalettes[0] &&
          a.tilePalettes[1] === b.tilePalettes[1] &&
          a.tilePalettes[2] === b.tilePalettes[2];
          // a.tilePatterns[0] === b.tilePatterns[0] &&
          // a.tilePatterns[1] === b.tilePatterns[1] &&
          // a.tileset === b.tileset &&
          // a.tileEffects === b.tileEffects;
    }
    const [] = [eq];

    // const palettes = [
    //   0x01, 0x07, 

    // // Key: (tileId/screenId) << 8 | tileset
    // // Value: Set<~pattern | palette>
    // const tileCache = new Map<number, Set<number>>();
    // const screenCache = new Map<number, Set<number>>();

    // function screenData(screen: number, tileset: number) {

    // }

    const paletteSets = [new Set<number>(), new Set<number>()];

    for (const loc of this.rom.locations) {
      if (!loc.used) continue;
      const tileset = this.rom.tilesets[loc.tileset];
      const types = paletteTypes(tileset.id, loc.id);
      for (let i = 0; i < 3; i++) {
        for (let i = 0; i < (types[i] as number); i++) {
          paletteSets[i].add(loc.tilePalettes[i]);
        }
      }
    }

    const partitions: any[] = []; // this.rom.locations.partition(x => x, eq, true);

    const palettes = paletteSets.map(s => [...s]);
    for (const part of partitions) {
      const rep = part[1]; // representative location
      const repTypes: number[] = paletteTypes(rep.tileset, rep.id) as any;
      for (let attempt = 0; attempt < 1000; attempt++) {
        const pals = seq(3, i => !repTypes[i] ? rep.tilePalettes[i] :
                         this.random.pick(palettes[repTypes[i] - 1]));
        const ps = pals.map(p => this.rom.palettes[p].colors);
        let found = true;
        for (const loc of part[0]) {
          const [,,, validator] = paletteTypes(loc.tileset, loc.id);
          if (validator && !validator(ps[0], ps[1], ps[2])) {
            found = false;
            break;
          }
        }
        if (found) {
          for (const loc of part[0]) {
            loc.tilePalettes = [pals[0], pals[1], pals[2]];
          }
        }
      }
    }
  }



    // function eq(a: Location, b: Location): boolean {
    //   return a.tilePalettes[0] === b.tilePalettes[0] &&
    //       a.tilePalettes[1] === b.tilePalettes[1] &&
    //       a.tilePalettes[2] === b.tilePalettes[2] &&
    //       // a.tilePatterns[0] === b.tilePatterns[0] &&
    //       // a.tilePatterns[1] === b.tilePatterns[1] &&
    //       // a.tileset === b.tileset &&
    //       a.tileEffects === b.tileEffects;
    // }

    // const palettes = [
    //   0x01, 0x07, 

    // // Key: (tileId/screenId) << 8 | tileset
    // // Value: Set<~pattern | palette>
    // const tileCache = new Map<number, Set<number>>();
    // const screenCache = new Map<number, Set<number>>();

    // function screenData(screen: number, tileset: number) {

    // }

    // for (const loc of rom.locations) {
    //   if (!loc.used) continue;
    //   const tileset = rom.tilesets[loc.tileset];
    //   for (const screen of loc.allScreens()) {
    //     const graphics = new Set();
    //     for (const tile of screen.tiles) {
    //       const tileId = tile << 8 | tileset.id;
    //       const prev = tileCache.get(tileId);
    //       if (prev) {
    //         for (const g of prev) graphics.add(g);
    //         continue;
    //       }
    //       const set = new Set<number>();
    //       for (const quad of tileset.tiles) {
    //         set.add(~quad[tile]);
    //         graphics.add(~quad[tile]);
    //       }
    //       set.add(tileset.attrs[tile]);
    //       graphics.add(tileset.attrs[tile]);
    //       tileCache.set(tileId, set);
    //     }
    //   }
    // }
