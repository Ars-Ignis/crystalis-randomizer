Goal: Randomize statue of gold trade-in

Problem:
 * Current ItemUse action jump just swaps out the broken statue with
   the statue of gold, but doesn't run any of the ItemGet actions.
 * Calling GrantItemInRegisterA or ItemGet or anything else causes
   a crash.

But there _are_ items that give other items.  We just need to consolidate
the other turn-ins to share the same action.  Maybe add a data table to
look up the current item and what it trades for.

Glowing Lamp:
  - Message 20:06 action 05 (rts)

Statue of Onyx:
  - Expect NPC 16
  - Message 02:02 action 1c
  - Set 050

Love Pendant:
  - Expect NPC 7e
  - Message 13:02 action 0c
  - Set 03c

Kirisa Plant:
  - Expect NPC 23
  - Message 12:10 action 0d
  - Set 010

Ivory Statue:
  - Expect NPC 75
  - Message 00:00 action 0e
  - Set 065


ItemOrTriggerActionJump_0d ($3d6e7)
When this runs, it looks like $23 is the item that was traded in.
We need to switch it to look it up from a table to see what item to give.

Then switch the statue fix to just return normally and use the itemuse data
to trigger the action.

================================================================

Generalizing the ItemOrTriggerActionJumps:

Currently many of these are hard-coded, but it would be nice to instead
use a sparse lookup table to map used item ID or trigger ID (these are
disjoint) to the item to grant.  Unfortunately, the current trigger ID
is not normally available by the time the action is run because the code
that matches conditions reuses $23 (where all three routines - ItemGet,
ItemUse, and Trigger - store the ID) as a signal.  We can instead use
a temp var, like $10 (which was most recently used for a jump table when
this check happens).

================================================================

Follow-up:

This generalization is a pretty significant change.
 * hardcoded trade-ins are now moved to a weird location that may not be
   as stable as they were before
 * randomized trades is even more complicated, because now we need to
   change TWO things - the item whose use points to the action, and the
   lookup table key!
 * the barrier trigger seems to have lost its text?
   - triggers aren't quite working as intended...? seems like we broke something
   - found a few more refs to $23 in the trigger AND item routines,
     still wonky -> no "nothing happens" message anymore???

FIXED - trade-ins and dialogs ("... statue of gold; you get power ring")
FIXED - fixdialog reading hardcoded slots, too (in addition to slots.ts)
         => introduce ItemGets.actionGrants abstraction

Note: While we were at it, we also fixed up the bow of sun/moon jumps to save
some extra space.  Potentially we've freed up 4-5 item/trigger followup action
slots that we could use for who knows what (if we went back and fixed all the
pointers in the trigger/item tables).

================================================================

Problem:

There's too much interaction between Trigger, ItemGet, and ItemUse.  Trying to
change the signals in one causes problems for the others.  The best approach
seemed to be backing up the value of $23 in $10 or $61 or something, but...?
 - $61 and $10 both cause problems?
 - $65 is free, but let's not start using it yet
 - $34 is available and seems to work correctly
    - it's only read BEFORE follow-up actions (which *do* use $34).
