bits: 7 => knockback
      5,6 => direction resolution (8/16/32/64)
      0..4 => speed


0 => 1/4
31 => 8

Given step count S (0..7), speed v at 1/4 resolution (0..31)
sin/cos tables at 1/64 resolution c,s (0..63)

dx = c*(S+1)*v


64 directions -> 16 entries to sin table
16 angles * 32 speeds = 512 bytes, on 0..31 scale (1/4)?
  - ultimately need 1/8 resolution => 0..63
Multiply by 0..7 -> 9 bits (use carry?)

  ;; Step should be in the upper 3 bits
  asl Step
  asl Step
  asl Step
  asl Step
  asl Step
  ;; Do the multiplication
  lda Frac  ; 0..63
  sta $61
  lda Step  ; 0..7
  sta $62
  lda #$00
  
  asl $62



Vanilla:
 340 = RRRRSSSS  recoil position, speed
 360 = KKKKDDDD  knockback direction, direction
Proposed:
 340 = RMMSSSSS  recoil position, mode, speed
 360 = KKKDDDDD or 00DDDDDD depending on mode?

But how do we reduce recoil to a single bit???



Note that ComputeDisplacementVector is called 20 times:
 _1e8ff: giant insect
 _1ea37: kelbesque
 BossPatternJump_18: sabera
 _1eeba: mado
 _1f203: draygon
 CheckDirectionAgainstTerrain: player and mobs
 ObjectActionJump_54: following dwarf child
 ObjectActionJump_2b: mimic
 ObjectActionJump_30 (@FinishNpcAction): npc
 ObjectActionJump_32 (@advance_frame): movement script
 ObjectActionJump_38: moving platform
 ObjectActionJump_57: dyna shots (bubble and revenge beam)
 ObjectActionJump_1b: boss popcorn
 ObjectActionJump_12: tornado
 ObjectActionJump_13: blizzard
 ObjectActionJump_15: fire 2
 ObjectActionJump_40: bats/moths
 ObjectActionJump_44: tomato
 ObjectActionJump_45: basic flyer
 FinishRobotMovement: robots (helicopter, maybe?)


There are 196 references (102 writes) to $0340,x (speed) or $0360,x (direction)
 - all of these will need updating...!


VectorBetweenObjectsXY =>
 - will want to have a high-res version of this?
