import { iters } from '../util.js';
export function TileId(x) { return x; }
(function (TileId) {
    function from({ id }, { x, y }) {
        const xs = x >>> 8;
        const xt = (x >>> 4) & 0xf;
        const ys = y >>> 8;
        const yt = (y >>> 4) & 0xf;
        return (id << 16 | ys << 12 | xs << 8 | yt << 4 | xt);
    }
    TileId.from = from;
    function add(tile, dy, dx) {
        let t = tile;
        if (dy) {
            let y = (t & 0xf0) + (dy << 4);
            while (y >= 0xf0) {
                if ((t & 0xf000) >= 0xf000)
                    return -1;
                y -= 0xf0;
                t += 0x1000;
            }
            while (y < 0) {
                if (!(t & 0xf000))
                    return -1;
                y += 0xf0;
                t -= 0x1000;
            }
            t = t & ~0xf0 | y;
        }
        if (dx) {
            let x = (t & 0xf) + dx;
            while (x >= 0x10) {
                if ((t & 0xf00) >= 0x700)
                    return -1;
                x -= 0x10;
                t += 0x100;
            }
            while (x < 0) {
                if (!(t & 0xf00))
                    return -1;
                x += 0x10;
                t -= 0x100;
            }
            t = t & ~0xf | x;
        }
        return t;
    }
    TileId.add = add;
})(TileId || (TileId = {}));
export function ScreenId(x) { return x; }
(function (ScreenId) {
    ScreenId.from = (tileOrLoc, coord) => {
        if (typeof tileOrLoc === 'number' || !coord) {
            return (Number(tileOrLoc) >>> 8);
        }
        const loc = tileOrLoc;
        return (loc.id << 8 | (coord.y >>> 8) << 4 | coord.x >>> 8);
    };
    function fromTile(tile) {
        return (tile >>> 8);
    }
    ScreenId.fromTile = fromTile;
})(ScreenId || (ScreenId = {}));
export function TilePair(x) { return x; }
(function (TilePair) {
    function of(from, to) {
        return (from * (1 << 24) + to);
    }
    TilePair.of = of;
    function split(pair) {
        return [Math.floor(pair / (1 << 24)),
            pair % (1 << 24)];
    }
    TilePair.split = split;
})(TilePair || (TilePair = {}));
export class Neighbors {
    constructor(tiles, exits) {
        this.tiles = tiles;
        this.exits = exits;
        this.south = new Set();
        this.other = new Set();
    }
    addAdjacent(lo, hi, vertical) {
        const lo1 = this.tiles.find(lo);
        const hi1 = this.tiles.find(hi);
        if (!this.exits.has(hi)) {
            this.other.add(TilePair.of(hi1, lo1));
        }
        if (!this.exits.has(lo)) {
            (vertical ? this.south : this.other).add(TilePair.of(lo1, hi1));
        }
    }
    addExit(from, to) {
        from = this.tiles.find(from);
        to = this.tiles.find(to);
        this.other.add(TilePair.of(from, to));
    }
    *[Symbol.iterator]() {
        const seen = new Set();
        let south = true;
        for (const exit of iters.concat(this.south, [-1], this.other)) {
            if (exit === -1) {
                south = false;
                continue;
            }
            let [from, to] = TilePair.split(exit);
            from = this.tiles.find(from);
            to = this.tiles.find(to);
            const normalized = TilePair.of(from, to);
            if (seen.has(normalized))
                continue;
            seen.add(normalized);
            yield { from, to, south };
        }
    }
}
//# sourceMappingURL=data:application/json;base64,