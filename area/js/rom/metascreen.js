import { featureMask } from './metascreendata.js';
import { DefaultMap } from '../util.js';
export class Metascreen {
    constructor(rom, uid, data) {
        var _a, _b, _c, _d, _e;
        this.rom = rom;
        this.uid = uid;
        this.data = data;
        this._tilesets = new Set();
        this.used = false;
        this.neighbors = [
            new DefaultMap((s) => this._checkNeighbor(s, 0)),
            new DefaultMap((s) => this._checkNeighbor(s, 1)),
        ];
        for (const tileset of Object.values(data.tilesets)) {
            if (!tileset.requires)
                this.used = true;
        }
        let features = 0;
        for (const feature of (_a = data.feature) !== null && _a !== void 0 ? _a : []) {
            const mask = featureMask[feature];
            if (mask != null)
                features |= mask;
        }
        for (const exit of (_b = data.exits) !== null && _b !== void 0 ? _b : []) {
            if (exit.type === 'stair:down' || exit.type === 'stair:up') {
                features |= featureMask[exit.type];
            }
        }
        this._features = features;
        this._isEmpty = Boolean(features & featureMask['empty']);
        this.flag = data.flag;
        const cxn = [[[]], [[]], [[]], [[]]];
        this.connections = cxn;
        for (let i = 0; i < 4; i++) {
            let poiIndex = 0;
            let exitIndex = 0;
            let cur = cxn[i][0];
            for (const term of (_c = this.data.connect) !== null && _c !== void 0 ? _c : '') {
                if (connectionBlocks[i].includes(term)) {
                    cxn[i].push(cur = []);
                    continue;
                }
                let delta;
                if (connectionBlockSet.has(term))
                    continue;
                if (term === 'p') {
                    delta = 0xf0 | poiIndex++;
                }
                else if (term === 'x') {
                    delta = 0xe0 | exitIndex++;
                }
                else {
                    const num = parseInt(term, 16);
                    if (!num)
                        throw new Error(`bad term: '${term}'`);
                    const channel = (num & 3) << (num & 4);
                    const offset = num & 8 ? (num & 4 ? 0x0100 : 0x1000) : 0;
                    delta = channel | offset;
                }
                cur.push(delta);
            }
            while (poiIndex < ((_d = this.data.poi) === null || _d === void 0 ? void 0 : _d.length)) {
                cur.push(0xf0 | poiIndex++);
            }
            while (exitIndex < ((_e = this.data.exits) === null || _e === void 0 ? void 0 : _e.length)) {
                cur.push(0xe0 | exitIndex++);
            }
        }
    }
    get features() {
        return this._features;
    }
    get manual() {
        return Boolean(this._features & manualFeatureMask);
    }
    get counted() {
        return Boolean(this._features & countedFeatureMask);
    }
    hasFeature(feature) {
        return Boolean(this._features & featureMask[feature]);
    }
    hasFeatures(features) {
        return (this._features & features) === features;
    }
    withFeature(feature) {
        throw new Error();
    }
    isEmpty() {
        return this._isEmpty;
    }
    hasStair() {
        return Boolean(this._features & (featureMask['stair:up'] |
            featureMask['stair:down']));
    }
    withObstruction() {
        throw new Error();
    }
    isCompatibleWithTileset(id) {
        for (const tileset of this._tilesets) {
            if (tileset.tilesetId === id)
                return true;
        }
        return false;
    }
    replace(from, to) {
        const { tiles } = this.screen;
        for (let i = 0; i < tiles.length; i++) {
            if (tiles[i] === from)
                tiles[i] = to;
        }
        return this;
    }
    remove() {
        for (const tileset of this.tilesets()) {
            tileset.deleteScreen(this);
        }
    }
    tilesets() {
        const tilesets = [];
        for (const key in this.data.tilesets) {
            tilesets.push(this.rom.metatilesets[key]);
        }
        return tilesets;
    }
    setGridTile(...tile) {
        this.data.tile = tile;
        for (const tileset of this.tilesets()) {
            tileset.invalidate();
        }
    }
    gridTiles() {
        var _a;
        let t = (_a = this.data.tile) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(t))
            t = [t];
        return t.map(s => s.replace(/\|/g, ''));
    }
    get sid() {
        return this.data.id;
    }
    set sid(sid) {
        if (this.sid === sid)
            return;
        this.rom.metascreens.renumber(this.sid, sid);
    }
    get screen() {
        const { sid, rom: { screens } } = this;
        return sid < 0 ? screens.unallocated[~sid] : screens[sid];
    }
    unsafeSetId(sid) {
        this.data.id = sid;
        for (const tileset of this._tilesets) {
            tileset.invalidate();
        }
    }
    unsafeAddTileset(tileset) {
        this._tilesets.add(tileset);
    }
    unsafeRemoveTileset(tileset) {
        this._tilesets.delete(tileset);
    }
    edgeExits() {
        var _a;
        let mask = 0;
        for (const e of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            const dir = edgeTypeMap[e.type];
            if (dir != null)
                mask |= (1 << dir);
        }
        return mask;
    }
    edgeIndex(edgeType) {
        var _a;
        let index = 0;
        const edge = (_a = this.data.edges) !== null && _a !== void 0 ? _a : '';
        for (let i = 0; i < 4; i++) {
            if (edge[i] === ' ')
                continue;
            if (edge[i] !== edgeType)
                return undefined;
            index |= (1 << i);
        }
        return index;
    }
    findExitType(tile, single, seamless) {
        var _a, _b;
        for (const exit of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            if (exit.type.startsWith('seamless') !== seamless)
                continue;
            const t0 = single && exit.type === 'edge:bottom' && tile >= 0xc0 ?
                tile + 0x20 : tile;
            if (exit.exits.includes(t0) || ((_b = exit.allowedExits) !== null && _b !== void 0 ? _b : []).includes(t0)) {
                return exit;
            }
        }
        return undefined;
    }
    findExitByType(type) {
        const exit = this.data.exits.find(e => e.type === type);
        if (!exit)
            throw new Error(`no exit ${type}`);
        return exit;
    }
    findEntranceType(coord, single) {
        var _a, _b;
        for (const exit of (_a = this.data.exits) !== null && _a !== void 0 ? _a : []) {
            if (exit.type.startsWith('seamless'))
                continue;
            const c0 = single && exit.type === 'edge:bottom' && coord >= 0xbf00 ?
                coord + 0x2000 : coord;
            const t0 = (c0 & 0xf0) >> 4 | (c0 & 0xf000) >> 8;
            if (exit.entrance === c0 ||
                exit.exits.includes(t0) || ((_b = exit.allowedExits) !== null && _b !== void 0 ? _b : []).includes(t0)) {
                return exit.type;
            }
        }
        return undefined;
    }
    addCustomFlag(defaultValue) {
        this.flag = defaultValue ? 'custom:true' : 'custom:false';
    }
    checkNeighbor(that, dir) {
        const a = dir & 2 ? this : that;
        const b = dir & 2 ? that : this;
        return a.neighbors[dir & 1].get(b);
    }
    _checkNeighbor(that, dir) {
        const e1 = this.data.edges;
        const e2 = that.data.edges;
        if (e1 && e2) {
            const opp = dir ^ 2;
            if (e1[opp] !== '*' && e1[opp] === e2[dir])
                return true;
        }
        return false;
    }
}
const edgeTypeMap = {
    'edge:top': 0,
    'edge:left': 1,
    'edge:bottom': 2,
    'edge:right': 3,
};
const connectionBlocks = [
    '|:',
    '|:=-',
    '|',
    '|=',
];
const connectionBlockSet = new Set(['|', ':', '-', '=']);
const manualFeatures = new Set([
    'arena', 'portoa1', 'portoa2', 'portoa3', 'lake', 'overpass', 'underpass',
    'lighthouse', 'cabin', 'windmill', 'altar', 'pyramid', 'crypt',
]);
const countedFeatures = new Set([
    'pit', 'spikes', 'bridge', 'wall', 'ramp', 'whirlpool',
]);
const manualFeatureMask = [...manualFeatures].map(f => featureMask[f]).reduce((a, b) => a | b);
const countedFeatureMask = [...countedFeatures].map(f => featureMask[f]).reduce((a, b) => a | b);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YXNjcmVlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vbWV0YXNjcmVlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0MsV0FBVyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFJaEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUl0QyxNQUFNLE9BQU8sVUFBVTtJQW1DckIsWUFBcUIsR0FBUSxFQUFXLEdBQVEsRUFDM0IsSUFBb0I7O1FBRHBCLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFBVyxRQUFHLEdBQUgsR0FBRyxDQUFLO1FBQzNCLFNBQUksR0FBSixJQUFJLENBQWdCO1FBbEN4QixjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztRQWNwRCxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBV0osY0FBUyxHQUFHO1lBQ25CLElBQUksVUFBVSxDQUFzQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckUsSUFBSSxVQUFVLENBQXNCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM3RCxDQUFDO1FBT1QsS0FBSyxNQUFNLE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsRCxJQUFJLENBQUMsT0FBUSxDQUFDLFFBQVE7Z0JBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDMUM7UUFHRCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDakIsS0FBSyxNQUFNLE9BQU8sVUFBSSxJQUFJLENBQUMsT0FBTyxtQ0FBSSxFQUFFLEVBQUU7WUFDeEMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xD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Q0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUMvQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29ubmVjdGlvbiwgQ29ubmVjdGlvblR5cGUsIEZlYXR1cmUsIE1ldGFzY3JlZW5EYXRhLFxuICAgICAgICBmZWF0dXJlTWFza30gZnJvbSAnLi9tZXRhc2NyZWVuZGF0YS5qcyc7XG5pbXBvcnQge01ldGF0aWxlc2V0LCBNZXRhdGlsZXNldHN9IGZyb20gJy4vbWV0YXRpbGVzZXQuanMnO1xuaW1wb3J0IHtTY3JlZW59IGZyb20gJy4vc2NyZWVuLmpzJztcbmltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuaW1wb3J0IHtEZWZhdWx0TWFwfSBmcm9tICcuLi91dGlsLmpzJztcblxuZXhwb3J0IHR5cGUgVWlkID0gbnVtYmVyICYge19fdWlkX186IG5ldmVyfTtcblxuZXhwb3J0IGNsYXNzIE1ldGFzY3JlZW4ge1xuICBwcml2YXRlIHJlYWRvbmx5IF9mZWF0dXJlczogbnVtYmVyOyAvLyA9IG5ldyBTZXQ8RmVhdHVyZT4oKTtcbiAgcHJpdmF0ZSByZWFkb25seSBfdGlsZXNldHMgPSBuZXcgU2V0PE1ldGF0aWxlc2V0PigpO1xuICBwcml2YXRlIHJlYWRvbmx5IF9pc0VtcHR5OiBib29sZWFuO1xuICAvLyBrZXk6IGJpdHNldCAtIDEgZm9yIGZsaWdodCwgMiBmb3Igbm9GbGFnXG4gIC8vIHZhbHVlOiBzZWdtZW50cywgZWFjaCBjb250YWluaW5nIGFuIG9mZnNldCB0byBhZGQgdG8gcG9zPDw4IHRvIGdldFxuICAvLyAgICAgICAgY29ubmVjdGlvbiBwb2ludHMgKGUuZy4gMDAwMSwgMDEwMSwgMTAyMCwgZXRjKS5cbiAgcmVhZG9ubHkgY29ubmVjdGlvbnM6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHlBcnJheTxSZWFkb25seUFycmF5PG51bWJlcj4+PjtcbiAgLy8gVE9ETyAtIGl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gYnVpbGQgaW4gJzw+cCcgaW50byB0aGUgY29ubmVjdGlvbnMgc3RyaW5nLFxuICAvLyBpbmRpY2F0aW5nIHdoaWNoIHBhcnRpdGlvbnMgaGF2ZSBleGl0cyBvciBQT0kgKGluIG9yZGVyKS4gIEJ1dCB0aGUgQVBJXG4gIC8vIGZvciBleHBvc2luZyB0aGlzIGlzIHVnbHkuICBBbm90aGVyIGFsdGVybmF0aXZlIHdvdWxkIGJlIHRvIGRlZGljYXRlXG4gIC8vIGEgcG9ydGlvbiBvZiBcInNwZWN0cnVtXCIgdG8gcG9pIGFuZCBleGl0cywgZS5nLiBbZjAuLmYzXSBmb3IgUE9JLCBbZTAuLmUzXVxuICAvLyBmb3IgZXhpdHMsIGFuZCB0aGVuIHdlIGNhbiBidWlsZCBpdCBkaXJlY3RseSBpbnRvIGNvbm5lY3Rpb25zLCBhbmQgdGhleVxuICAvLyB3aWxsIHNob3cgdXAgaW4gdGhlIHJlc3VsdHMuXG4gIC8vcG9pOiBBcnJheTx7eDogbnVtYmVyLCB5OiBudW1iZXIsIHByaW9yaXR5OiBudW1iZXIsIHNlZ21lbnQ6IG51bWJlcn0+O1xuXG4gIHVzZWQgPSBmYWxzZTtcblxuICAvLyAnYWx3YXlzJyBpbmRpY2F0ZXMgdGhhdCB0aGUgZmxhZyB0b2dnbGVzIGJldHdlZW4gdHdvIGRpZmZlcmVudCBtZXRhc2NyZWVuc1xuICAvLyAnY2FsbScgaXMgYSBzcGVjaWFsIGNhc2UgZm9yIHdoaXJscG9vbHNcbiAgLy8gJ2N1c3RvbTpmYWxzZScgaW5kaWNhdGVzIHRoYXQgdGhlIGZsYWcgd2lsbCBkZWZhdWx0IHRvIGZhbHNlLCBidXQgY2FuIGJlXG4gIC8vICAgICBvdmVycmlkZGVuIGJ5IHNldHRpbmcgYSBjdXN0b21GbGFnIG9uIHRoZSBNZXRhTG9jYXRpb25cbiAgLy8gJ2N1c3RvbTp0cnVlJyBpcyB0aGUgc2FtZSBidXQgZGVmYXVsdHMgdG8gdHJ1ZSAoaS5lLiBjbG9zZWFibGUgY2F2ZXMpXG4gIC8vIGFic2VudCBpcyB1c2VkIGZvciBub3JtYWwgd2FsbHMgYW5kIGRlZmF1bHQgdG8gYWxsb2NhdGluZyBhIG5ldyB3YWxsIGZsYWdcbiAgZmxhZz86ICdhbHdheXMnIHwgJ2NhbG0nIHwgJ2N1c3RvbTpmYWxzZScgfCAnY3VzdG9tOnRydWUnO1xuICBuYW1lPzogc3RyaW5nO1xuXG4gIHJlYWRvbmx5IG5laWdoYm9ycyA9IFtcbiAgICBuZXcgRGVmYXVsdE1hcDxNZXRhc2NyZWVuLCBib29sZWFuPigocykgPT4gdGhpcy5fY2hlY2tOZWlnaGJvcihzLCAwKSksXG4gICAgbmV3IERlZmF1bHRNYXA8TWV0YXNjcmVlbiwgYm9vbGVhbj4oKHMpID0+IHRoaXMuX2NoZWNrTmVpZ2hib3IocywgMSkpLFxuICBdIGFzIGNvbnN0O1xuXG4gIC8vcmVhZG9ubHkgZmVhdHVyZUNvdW50OiBSZWFkb25seU1hcDxGZWF0dXJlLCBudW1iZXI+O1xuXG4gIC8vIFRPRE8gLSBtYWtlIGRhdGEgcHJpdmF0ZT9cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcm9tOiBSb20sIHJlYWRvbmx5IHVpZDogVWlkLFxuICAgICAgICAgICAgICByZWFkb25seSBkYXRhOiBNZXRhc2NyZWVuRGF0YSkge1xuICAgIGZvciAoY29uc3QgdGlsZXNldCBvZiBPYmplY3QudmFsdWVzKGRhdGEudGlsZXNldHMpKSB7XG4gICAgICBpZiAoIXRpbGVzZXQhLnJlcXVpcmVzKSB0aGlzLnVzZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBsZXQgZml4ZWQgPSBmYWxzZTtcbiAgICAvLyBjb25zdCBmZWF0dXJlQ291bnQgPSBuZXcgRGVmYXVsdE1hcDxGZWF0dXJlLCBudW1iZXI+KCgpID0+IDApO1xuICAgIGxldCBmZWF0dXJlcyA9IDA7XG4gICAgZm9yIChjb25zdCBmZWF0dXJlIG9mIGRhdGEuZmVhdHVyZSA/PyBbXSkge1xuICAgICAgY29uc3QgbWFzayA9IGZlYXR1cmVNYXNrW2ZlYXR1cmVdO1xuICAgICAgaWYgKG1hc2sgIT0gbnVsbCkgZmVhdHVyZXMgfD0gbWFzaztcbiAgICAgIC8vIHRoaXMuX2ZlYXR1cmVzLmFkZChmZWF0dXJlKTtcbiAgICAgIC8vIGlmIChmaXhlZEZlYXR1cmVzLmhhcyhmZWF0dXJlKSkgZml4ZWQgPSB0cnVlO1xuICAgICAgLy8gaWYgKGZpeGVkQ291bnRGZWF0dXJlcy5oYXMoZmVhdHVyZSkpIHtcbiAgICAgIC8vICAgZmVhdHVyZUNvdW50LnNldChmZWF0dXJlLCBmZWF0dXJlQ291bnQuZ2V0KGZlYXR1cmUpICsgMSk7XG4gICAgICAvLyB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgZXhpdCBvZiBkYXRhLmV4aXRzID8/IFtdKSB7XG4gICAgICBpZiAoZXhpdC50eXBlID09PSAnc3RhaXI6ZG93bicgfHwgZXhpdC50eXBlID09PSAnc3RhaXI6dXAnKSB7XG4gICAgICAgIGZlYXR1cmVzIHw9IGZlYXR1cmVNYXNrW2V4aXQudHlwZV07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2ZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgdGhpcy5faXNFbXB0eSA9IEJvb2xlYW4oZmVhdHVyZXMgJiBmZWF0dXJlTWFza1snZW1wdHknXSk7XG4gICAgdGhpcy5mbGFnID0gZGF0YS5mbGFnO1xuICAgIC8vIHRoaXMuZml4ZWQgPSBmaXhlZDtcbiAgICAvLyB0aGlzLmZlYXR1cmVDb3VudCA9IGZlYXR1cmVDb3VudDtcbiAgICAvLyBUT0RPIC0gYnVpbGQgXCJjb25uZWN0aW9uc1wiIGJ5IGl0ZXJhdGluZyBvdmVyIDAuLjMuXG4gICAgY29uc3QgY3huOiBudW1iZXJbXVtdW10gPSBbW1tdXSwgW1tdXSwgW1tdXSwgW1tdXV07XG5cbiAgICB0aGlzLmNvbm5lY3Rpb25zID0gY3huO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICBsZXQgcG9pSW5kZXggPSAwO1xuICAgICAgbGV0IGV4aXRJbmRleCA9IDA7XG4gICAgICBsZXQgY3VyID0gY3huW2ldWzBdO1xuICAgICAgZm9yIChjb25zdCB0ZXJtIG9mIHRoaXMuZGF0YS5jb25uZWN0ID8/ICcnKSB7XG4gICAgICAgIGlmIChjb25uZWN0aW9uQmxvY2tzW2ldLmluY2x1ZGVzKHRlcm0pKSB7XG4gICAgICAgICAgY3huW2ldLnB1c2goY3VyID0gW10pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkZWx0YTtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb25CbG9ja1NldC5oYXModGVybSkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAodGVybSA9PT0gJ3AnKSB7XG4gICAgICAgICAgZGVsdGEgPSAweGYwIHwgcG9pSW5kZXgrKztcbiAgICAgICAgfSBlbHNlIGlmICh0ZXJtID09PSAneCcpIHtcbiAgICAgICAgICBkZWx0YSA9IDB4ZTAgfCBleGl0SW5kZXgrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBudW0gPSBwYXJzZUludCh0ZXJtLCAxNik7XG4gICAgICAgICAgaWYgKCFudW0pIHRocm93IG5ldyBFcnJvcihgYmFkIHRlcm06ICcke3Rlcm19J2ApOyAvLyBjb250aW51ZT8/P1xuICAgICAgICAgIGNvbnN0IGNoYW5uZWwgPSAobnVtICYgMykgPDwgKG51bSAmIDQpOyAvLyAwMSwgMDIsIDAzLCAxMCwgMjAsIG9yIDMwXG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbnVtICYgOCA/IChudW0gJiA0ID8gMHgwMTAwIDogMHgxMDAwKSA6IDA7XG4gICAgICAgICAgZGVsdGEgPSBjaGFubmVsIHwgb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGN1ci5wdXNoKGRlbHRhKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChwb2lJbmRleCA8IHRoaXMuZGF0YS5wb2k/Lmxlbmd0aCEpIHtcbiAgICAgICAgY3VyLnB1c2goMHhmMCB8IHBvaUluZGV4KyspO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGV4aXRJbmRleCA8IHRoaXMuZGF0YS5leGl0cz8ubGVuZ3RoISkge1xuICAgICAgICBjdXIucHVzaCgweGUwIHwgZXhpdEluZGV4KyspO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBmZWF0dXJlcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mZWF0dXJlcztcbiAgfVxuXG4gIGdldCBtYW51YWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5fZmVhdHVyZXMgJiBtYW51YWxGZWF0dXJlTWFzayk7XG4gIH1cblxuICBnZXQgY291bnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9mZWF0dXJlcyAmIGNvdW50ZWRGZWF0dXJlTWFzayk7XG4gIH1cblxuICAvLyBmZWF0dXJlcygpOiBJdGVyYWJsZTxGZWF0dXJlPiB7XG4gIC8vICAgcmV0dXJuIHRoaXMuX2ZlYXR1cmVzLnZhbHVlcygpO1xuICAvLyB9XG5cbiAgaGFzRmVhdHVyZShmZWF0dXJlOiBGZWF0dXJlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5fZmVhdHVyZXMgJiBmZWF0dXJlTWFza1tmZWF0dXJlXSk7XG4gIH1cblxuICBoYXNGZWF0dXJlcyhmZWF0dXJlczogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLl9mZWF0dXJlcyAmIGZlYXR1cmVzKSA9PT0gZmVhdHVyZXM7XG4gIH1cblxuICAvKiogUmV0dXJuIGEgbmV3IG1ldGFzY3JlZW4gd2l0aCB0aGUgc2FtZSBwcm9maWxlIGJ1dCBhbiBleHRyYSBmZWF0dXJlLiAqL1xuICB3aXRoRmVhdHVyZShmZWF0dXJlOiBGZWF0dXJlKTogTWV0YXNjcmVlbltdIHtcbiAgICAvLyBUT0RPIC0gaW5kZXggdGhpcz9cbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxuXG4gIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzRW1wdHk7XG4gIH1cblxuICBoYXNTdGFpcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9mZWF0dXJlcyAmIChmZWF0dXJlTWFza1snc3RhaXI6dXAnXSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU1hc2tbJ3N0YWlyOmRvd24nXSkpO1xuICB9XG5cbiAgLyoqIFJldHVybiBhIG5ldyBtZXRhc2NyZWVuIHdpdGggdGhlIHNhbWUgcHJvZmlsZSBidXQgbW9yZSBvYnN0cnVjdGVkLiAqL1xuICB3aXRoT2JzdHJ1Y3Rpb24oKTogTWV0YXNjcmVlbltdIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxuXG4gIGlzQ29tcGF0aWJsZVdpdGhUaWxlc2V0KGlkOiBudW1iZXIpIHtcbiAgICBmb3IgKGNvbnN0IHRpbGVzZXQgb2YgdGhpcy5fdGlsZXNldHMpIHtcbiAgICAgIGlmICh0aWxlc2V0LnRpbGVzZXRJZCA9PT0gaWQpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZSBvY2N1cnJlbmNlcyBvZiBhIG1ldGF0aWxlIHdpdGhpbiB0aGlzIHNjcmVlbi5cbiAgICovXG4gIHJlcGxhY2UoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKTogTWV0YXNjcmVlbiB7XG4gICAgY29uc3Qge3RpbGVzfSA9IHRoaXMuc2NyZWVuO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aWxlc1tpXSA9PT0gZnJvbSkgdGlsZXNbaV0gPSB0bztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgLy8gUmVtb3ZlIHNlbGYgZnJvbSBhbGwgbWV0YXRpbGVzZXRzLiAgVXNlZCBieSBsYWJ5cmludGhWYXJpYW50IHRvXG4gICAgLy8gZW5zdXJlIGltcG9zc2libGUgdmFyaWFudHMgYXJlbid0IGFkZGVkIChub3RlOiB3aXRoIGEgZGVkaWNhdGVkXG4gICAgLy8gcGFnZSB3ZSBjb3VsZCBtYWtlIG1vcmUgYXZhaWxhYmxlKS5cbiAgICBmb3IgKGNvbnN0IHRpbGVzZXQgb2YgdGhpcy50aWxlc2V0cygpKSB7XG4gICAgICB0aWxlc2V0LmRlbGV0ZVNjcmVlbih0aGlzKTtcbiAgICB9XG4gIH1cblxuICB0aWxlc2V0cygpOiBNZXRhdGlsZXNldFtdIHtcbiAgICBjb25zdCB0aWxlc2V0czogTWV0YXRpbGVzZXRbXSA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZGF0YS50aWxlc2V0cykge1xuICAgICAgdGlsZXNldHMucHVzaChcbiAgICAgICAgICB0aGlzLnJvbS5tZXRhdGlsZXNldHNba2V5IGFzIGtleW9mIE1ldGF0aWxlc2V0c10gYXMgTWV0YXRpbGVzZXQpO1xuICAgIH1cbiAgICByZXR1cm4gdGlsZXNldHM7XG4gIH1cblxuICBzZXRHcmlkVGlsZSguLi50aWxlOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuZGF0YS50aWxlID0gdGlsZTtcbiAgICBmb3IgKGNvbnN0IHRpbGVzZXQgb2YgdGhpcy50aWxlc2V0cygpKSB7XG4gICAgICB0aWxlc2V0LmludmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBncmlkVGlsZXMoKTogc3RyaW5nW10ge1xuICAgIGxldCB0ID0gdGhpcy5kYXRhLnRpbGUgPz8gW107XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHQpKSB0ID0gW3RdO1xuICAgIHJldHVybiB0Lm1hcChzID0+IHMucmVwbGFjZSgvXFx8L2csICcnKSk7XG4gIH1cblxuICBnZXQgc2lkKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5pZDtcbiAgfVxuXG4gIHNldCBzaWQoc2lkOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5zaWQgPT09IHNpZCkgcmV0dXJuO1xuICAgIHRoaXMucm9tLm1ldGFzY3JlZW5zLnJlbnVtYmVyKHRoaXMuc2lkLCBzaWQpO1xuICB9XG5cbiAgZ2V0IHNjcmVlbigpOiBTY3JlZW4ge1xuICAgIGNvbnN0IHtzaWQsIHJvbToge3NjcmVlbnN9fSA9IHRoaXM7XG4gICAgcmV0dXJuIHNpZCA8IDAgPyBzY3JlZW5zLnVuYWxsb2NhdGVkW35zaWRdIDogc2NyZWVuc1tzaWRdO1xuICB9XG5cbiAgLy8gT25seSBNZXRhc2NyZWVucy5yZW51bWJlciBzaG91bGQgY2FsbCB0aGlzLlxuICB1bnNhZmVTZXRJZChzaWQ6IG51bWJlcikge1xuICAgICh0aGlzLmRhdGEgYXMge2lkOiBudW1iZXJ9KS5pZCA9IHNpZDtcbiAgICBmb3IgKGNvbnN0IHRpbGVzZXQgb2YgdGhpcy5fdGlsZXNldHMpIHtcbiAgICAgIHRpbGVzZXQuaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuICAvLyBPbmx5IE1ldGF0aWxlc2V0LmFkZFNjcmVlbiBzaG91bGQgY2FsbCB0aGlzLlxuICB1bnNhZmVBZGRUaWxlc2V0KHRpbGVzZXQ6IE1ldGF0aWxlc2V0KSB7XG4gICAgdGhpcy5fdGlsZXNldHMuYWRkKHRpbGVzZXQpO1xuICB9XG4gIC8vIE9ubHkgTWV0YXRpbGVzZXQucmVtb3ZlU2NyZWVuIHNob3VsZCBjYWxsIHRoaXMuXG4gIHVuc2FmZVJlbW92ZVRpbGVzZXQodGlsZXNldDogTWV0YXRpbGVzZXQpIHtcbiAgICB0aGlzLl90aWxlc2V0cy5kZWxldGUodGlsZXNldCk7XG4gIH1cblxuICAvKiogUmV0dXJucyBhIGJpdCBtYXNrIG9mIGVkZ2VzIHRoYXQgX2NvdWxkXyBleGl0OiAxPU4sIDI9VywgND1TLCA4PUUuICovXG4gIGVkZ2VFeGl0cygpOiBudW1iZXIge1xuICAgIGxldCBtYXNrID0gMDtcbiAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5kYXRhLmV4aXRzID8/IFtdKSB7XG4gICAgICBjb25zdCBkaXIgPSBlZGdlVHlwZU1hcFtlLnR5cGVdO1xuICAgICAgaWYgKGRpciAhPSBudWxsKSBtYXNrIHw9ICgxIDw8IGRpcik7XG4gICAgfVxuICAgIHJldHVybiBtYXNrO1xuICB9XG5cbiAgZWRnZUluZGV4KGVkZ2VUeXBlOiBzdHJpbmcpOiBudW1iZXJ8dW5kZWZpbmVkIHtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmRhdGEuZWRnZXMgPz8gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIGlmIChlZGdlW2ldID09PSAnICcpIGNvbnRpbnVlO1xuICAgICAgaWYgKGVkZ2VbaV0gIT09IGVkZ2VUeXBlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaW5kZXggfD0gKDEgPDwgaSk7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGZpbmRFeGl0VHlwZSh0aWxlOiBudW1iZXIsIHNpbmdsZTogYm9vbGVhbixcbiAgICAgICAgICAgICAgIHNlYW1sZXNzOiBib29sZWFuKTogQ29ubmVjdGlvbnx1bmRlZmluZWQge1xuICAgIGZvciAoY29uc3QgZXhpdCBvZiB0aGlzLmRhdGEuZXhpdHMgPz8gW10pIHtcbiAgICAgIGlmIChleGl0LnR5cGUuc3RhcnRzV2l0aCgnc2VhbWxlc3MnKSAhPT0gc2VhbWxlc3MpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgdDAgPSBzaW5nbGUgJiYgZXhpdC50eXBlID09PSAnZWRnZTpib3R0b20nICYmIHRpbGUgPj0gMHhjMCA/XG4gICAgICAgICAgdGlsZSArIDB4MjAgOiB0aWxlO1xuICAgICAgaWYgKGV4aXQuZXhpdHMuaW5jbHVkZXModDApIHx8IChleGl0LmFsbG93ZWRFeGl0cyA/PyBbXSkuaW5jbHVkZXModDApKSB7XG4gICAgICAgIHJldHVybiBleGl0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZmluZEV4aXRCeVR5cGUodHlwZTogQ29ubmVjdGlvblR5cGUpOiBDb25uZWN0aW9uIHtcbiAgICBjb25zdCBleGl0ID0gdGhpcy5kYXRhLmV4aXRzIS5maW5kKGUgPT4gZS50eXBlID09PSB0eXBlKTtcbiAgICBpZiAoIWV4aXQpIHRocm93IG5ldyBFcnJvcihgbm8gZXhpdCAke3R5cGV9YCk7XG4gICAgcmV0dXJuIGV4aXQ7XG4gIH1cblxuICBmaW5kRW50cmFuY2VUeXBlKGNvb3JkOiBudW1iZXIsIHNpbmdsZTogYm9vbGVhbik6IENvbm5lY3Rpb25UeXBlfHVuZGVmaW5lZCB7XG4gICAgZm9yIChjb25zdCBleGl0IG9mIHRoaXMuZGF0YS5leGl0cyA/PyBbXSkge1xuICAgICAgaWYgKGV4aXQudHlwZS5zdGFydHNXaXRoKCdzZWFtbGVzcycpKSBjb250aW51ZTtcbiAgICAgIGNvbnN0IGMwID0gc2luZ2xlICYmIGV4aXQudHlwZSA9PT0gJ2VkZ2U6Ym90dG9tJyAmJiBjb29yZCA+PSAweGJmMDAgP1xuICAgICAgICAgIGNvb3JkICsgMHgyMDAwIDogY29vcmQ7XG4gICAgICBjb25zdCB0MCA9IChjMCAmIDB4ZjApID4+IDQgfCAoYzAgJiAweGYwMDApID4+IDg7XG4gICAgICBpZiAoZXhpdC5lbnRyYW5jZSA9PT0gYzAgfHxcbiAgICAgICAgICBleGl0LmV4aXRzLmluY2x1ZGVzKHQwKSB8fCAoZXhpdC5hbGxvd2VkRXhpdHMgPz8gW10pLmluY2x1ZGVzKHQwKSkge1xuICAgICAgICByZXR1cm4gZXhpdC50eXBlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgYWRkQ3VzdG9tRmxhZyhkZWZhdWx0VmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmZsYWcgPSBkZWZhdWx0VmFsdWUgPyAnY3VzdG9tOnRydWUnIDogJ2N1c3RvbTpmYWxzZSc7XG5cbiAgICAvLyBUT0RPIC0gZm9yIG5vdywgY3VzdG9tIGZsYWdzIGFyZSBzZXQgYnkgZGVmYXVsdC5cblxuICAgIC8vIGlmICghZmxhZ0FsbCkgcmV0dXJuO1xuICAgIC8vIGZvciAoY29uc3QgbG9jIG9mIHRoaXMucm9tLmxvY2F0aW9ucykge1xuICAgIC8vICAgaWYgKCFsb2MudXNlZCkgY29udGludWU7XG4gICAgLy8gICBmb3IgKGNvbnN0IHBvcyBvZiBsb2MubWV0YS5hbGxQb3MoKSkge1xuICAgIC8vICAgICBpZiAobG9jLm1ldGEuZ2V0VWlkKHBvcykgIT09IHRoaXMudWlkKSBjb250aW51ZTtcbiAgICAvLyAgICAgbG9jLm1ldGEuY3VzdG9tRmxhZ3Muc2V0KHBvcywgdGhpcy5yb20uZmxhZ3MuQWx3YXlzVHJ1ZSk7XG4gICAgLy8gICB9XG4gICAgLy8gfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGNhbiBuZWlnaGJvciB0aGF0IGluICdkaXInIGRpcmVjdGlvbi5cbiAgICogSWYgZGlyIGlzIDAsIGNoZWNrcyB0aGF0ICd0aGF0JyBpcyBhYm92ZSAndGhpcycuXG4gICAqIElmIGRpciBpcyAxLCBjaGVja3MgdGhhdCAndGhhdCcgaXMgbGVmdCBvZiAndGhpcycuXG4gICAqIElmIGRpciBpcyAyLCBjaGVja3MgdGhhdCAndGhhdCcgaXMgYmVsb3cgJ3RoaXMnLlxuICAgKiBJZiBkaXIgaXMgMywgY2hlY2tzIHRoYXQgJ3RoYXQnIGlzIHJpZ2h0IG9mICd0aGlzJy5cbiAgICovXG4gIGNoZWNrTmVpZ2hib3IodGhhdDogTWV0YXNjcmVlbiwgZGlyOiBudW1iZXIpIHtcbiAgICAvLyBjaGVjazogMCAtPiB0aGF0W3ZlcnRdLmdldCh0aGlzKSAtPiB0aGlzIGlzIHVuZGVyIHRoYXRcbiAgICBjb25zdCBhID0gZGlyICYgMiA/IHRoaXMgOiB0aGF0O1xuICAgIGNvbnN0IGIgPSBkaXIgJiAyID8gdGhhdCA6IHRoaXM7XG4gICAgcmV0dXJuIGEubmVpZ2hib3JzW2RpciAmIDFdLmdldChiKTtcbiAgfVxuXG4gIC8qKiBAcGFyYW0gZGlyIDAgdG8gY2hlY2sgaWYgdGhhdCBpcyB1bmRlciB0aGlzLCAxIGlmIHRoYXQgaXMgcmlnaHQgb2YgdGhpcyAqL1xuICBwcml2YXRlIF9jaGVja05laWdoYm9yKHRoYXQ6IE1ldGFzY3JlZW4sIGRpcjogMHwxKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZTEgPSB0aGlzLmRhdGEuZWRnZXM7XG4gICAgY29uc3QgZTIgPSB0aGF0LmRhdGEuZWRnZXM7XG4gICAgaWYgKGUxICYmIGUyKSB7XG4gICAgICBjb25zdCBvcHAgPSBkaXIgXiAyO1xuICAgICAgaWYgKGUxW29wcF0gIT09ICcqJyAmJiBlMVtvcHBdID09PSBlMltkaXJdKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmNvbnN0IGVkZ2VUeXBlTWFwOiB7W0MgaW4gQ29ubmVjdGlvblR5cGVdPzogbnVtYmVyfSA9IHtcbiAgJ2VkZ2U6dG9wJzogMCxcbiAgJ2VkZ2U6bGVmdCc6IDEsXG4gICdlZGdlOmJvdHRvbSc6IDIsXG4gICdlZGdlOnJpZ2h0JzogMyxcbn07XG5cbmNvbnN0IGNvbm5lY3Rpb25CbG9ja3MgPSBbXG4gICd8OicsIC8vIGJyZWFrIHdhbGwsIGZvcm0gYnJpZGdlLCBidXQgbm8gZmxpZ2h0XG4gICd8Oj0tJywgLy8gbm8gd2FsbHMvYnJpZGdlL2ZsaWdodFxuICAnfCcsIC8vIGZsaWdodCBhbmQgYnJlYWsgd2FsbHNcbiAgJ3w9JywgLy8gZmxpZ2h0IG9ubHlcbl07XG5jb25zdCBjb25uZWN0aW9uQmxvY2tTZXQgPSBuZXcgU2V0KFsnfCcsICc6JywgJy0nLCAnPSddKTtcblxuY29uc3QgbWFudWFsRmVhdHVyZXMgPSBuZXcgU2V0PEZlYXR1cmU+KFtcbiAgJ2FyZW5hJywgJ3BvcnRvYTEnLCAncG9ydG9hMicsICdwb3J0b2EzJywgJ2xha2UnLCAnb3ZlcnBhc3MnLCAndW5kZXJwYXNzJyxcbiAgJ2xpZ2h0aG91c2UnLCAnY2FiaW4nLCAnd2luZG1pbGwnLCAnYWx0YXInLCAncHlyYW1pZCcsICdjcnlwdCcsXG5dKTtcbmNvbnN0IGNvdW50ZWRGZWF0dXJlcyA9IG5ldyBTZXQ8RmVhdHVyZT4oW1xuICAncGl0JywgJ3NwaWtlcycsICdicmlkZ2UnLCAnd2FsbCcsICdyYW1wJywgJ3doaXJscG9vbCcsXG5dKTtcblxuY29uc3QgbWFudWFsRmVhdHVyZU1hc2sgPSBbLi4ubWFudWFsRmVhdHVyZXNdLm1hcChcbiAgICBmID0+IGZlYXR1cmVNYXNrW2ZdIGFzIG51bWJlcikucmVkdWNlKChhLCBiKSA9PiBhIHwgYik7XG5jb25zdCBjb3VudGVkRmVhdHVyZU1hc2sgPSBbLi4uY291bnRlZEZlYXR1cmVzXS5tYXAoXG4gICAgZiA9PiBmZWF0dXJlTWFza1tmXSBhcyBudW1iZXIpLnJlZHVjZSgoYSwgYikgPT4gYSB8IGIpO1xuIl19