import { Location } from '../rom/location.js';
import { DefaultMap } from '../util.js';
const connMap = new Map([
    ['stair:up', 'C'],
    ['edge:top', 'N'],
    ['edge:left', 'W'],
    ['edge:right', 'E'],
    ['cave', 'C'],
    ['door', 'C'],
    ['door2', 'C'],
    ['door3', 'C'],
    ['fortress', 'F'],
]);
const connInverse = new Map([
    ['N', 'S'],
    ['S', 'N'],
    ['E', 'W'],
    ['W', 'E'],
    ['C', 'X'],
    ['X', 'C'],
    ['F', 'O'],
    ['O', 'F'],
]);
function makeExit(loc, [pos, type, [revLocPos, revType]]) {
    let conn = connMap.get(type) || connInverse.get(connMap.get(revType));
    let shuffle = false;
    const area = loc.id.toString(16);
    const key = (loc.id << 8 | pos).toString(16) + ' ' + type;
    const revLoc = loc.rom.locations[revLocPos >>> 8];
    const revPos = revLocPos & 0xff;
    const revKey = revLocPos.toString(16) + ' ' + revType;
    const revArea = revLoc.id.toString(16);
    const reverse = {
        loc: revLoc, pos: revPos, type: revType,
        area: revArea, key: revKey, reverse: null,
        get conn() { return connInverse.get(conn); },
        set conn(c) { conn = connInverse.get(c); },
        get shuffle() { return shuffle; },
        set shuffle(s) {
            if (s && !conn)
                throw new Error(`shuffle without conn`);
            shuffle = s;
        },
    };
    const exit = {
        loc, pos, type, key, reverse, area,
        get conn() { return conn; },
        set conn(c) { conn = c; },
        get shuffle() { return shuffle; },
        set shuffle(s) {
            if (s && !conn)
                throw new Error(`shuffle without conn`);
            shuffle = s;
        },
    };
    reverse.reverse = exit;
    return exit;
}
function matchExit(exit, finder) {
    if (typeof finder === 'string')
        return exit.type === finder;
    if (typeof finder === 'number')
        return exit.pos === finder;
    if (finder instanceof Location)
        return exit.reverse.loc === finder;
    return finder.every(f => matchExit(exit, f));
}
export function shuffleAreas(rom, flags, random) {
    if (!flags.shuffleAreas())
        return;
    const { locations: loc } = rom;
    const exits = new Map();
    const exitsByLocation = new DefaultMap(() => []);
    for (const location of rom.locations) {
        for (const exitSpec of location.meta.exits()) {
            const exit = makeExit(location, exitSpec);
            if (exits.has(exit.key))
                continue;
            if (exits.has(exit.reverse.key)) {
                throw new Error(`Inconsistent exits: ${exit.key} ${exit.reverse.key}`);
            }
            exits.set(exit.key, exit);
            exits.set(exit.reverse.key, exit.reverse);
            exitsByLocation.get(exit.loc).push(exit);
            exitsByLocation.get(exit.reverse.loc).push(exit.reverse);
        }
    }
    function findExits(location, ...finders) {
        const out = [];
        for (const exit of exitsByLocation.get(location)) {
            for (const finder of finders) {
                if (matchExit(exit, finder)) {
                    out.push(exit);
                    break;
                }
            }
        }
        return out;
    }
    if (flags.shuffleHouses()) {
        for (const exit of findExits(loc.ValleyOfWind, 'door', 'windmill')) {
            exit.area = 'windmill';
        }
    }
    for (const exit of findExits(loc.AngrySea, 0x64)) {
        exit.area = 'lighthouse';
    }
    findExits(loc.Portoa_FishermanIsland, loc.Portoa)[0].oneWay = true;
    function mark(loc, ...exits) {
        for (const exit of findExits(loc, ...exits)) {
            exit.shuffle = true;
        }
    }
    function markOutside(...locs) {
        const set = new Set(locs);
        for (const loc of locs) {
            for (const exit of exitsByLocation.get(loc)) {
                if (!set.has(exit.reverse.loc))
                    exit.shuffle = true;
            }
        }
    }
    mark(loc.Leaf, loc.Leaf_OutsideStart);
    markOutside(loc.ValleyOfWind, loc.WindmillCave, loc.Windmill);
    if (flags.shuffleHouses())
        markOutside(loc.WindmillCave);
    markOutside(loc.EastCave1, loc.EastCave2, loc.EastCave3);
    markOutside(loc.ZebuCave, loc.MtSabreWest_Cave1);
    markOutside(loc.CordelPlainWest, loc.CordelPlainEast);
    markOutside(loc.WaterfallValleyNorth, loc.WaterfallValleySouth);
    markOutside(loc.KirisaMeadow);
    markOutside(loc.LimeTreeLake);
    mark(loc.Portoa_FishermanIsland, loc.Portoa);
    mark(loc.UndergroundChannel, loc.PortoaPalace_ThroneRoom);
    mark(loc.AngrySea, loc.Joel);
    markOutside(loc.JoelSecretPassage);
    markOutside(loc.EvilSpiritIsland1, loc.EvilSpiritIsland2);
    mark(loc.ZombieTown, 'cave');
    mark(loc.AngrySea, loc.Swan);
    markOutside(loc.SwanGate);
    mark(loc.GoaValley, loc.MtHydra);
    markOutside(loc.Desert1);
    markOutside(loc.GoaFortressBasement);
    markOutside(loc.DesertCave1);
    markOutside(loc.SaharaOutsideCave);
    markOutside(loc.DesertCave2);
    for (const exit of exits.values()) {
        if (!exit.shuffle)
            continue;
        console.log(`${exit.loc} => ${exit.reverse.loc} ${exit.conn}/${exit.reverse.conn}`);
    }
}
//# sourceMappingURL=data:application/json;base64,