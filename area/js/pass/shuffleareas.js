import { Location } from '../rom/location.js';
import { DefaultMap } from '../util.js';
import { UnionFind } from '../unionfind.js';
const connMap = new Map([
    ['stair:up', 'C'],
    ['edge:top', 'N'],
    ['edge:left', 'W'],
    ['edge:right', 'E'],
    ['cave', 'C'],
    ['door', 'C'],
    ['door2', 'C'],
    ['door3', 'C'],
    ['fortress', 'F'],
]);
const connInverse = new Map([
    ['N', 'S'],
    ['S', 'N'],
    ['E', 'W'],
    ['W', 'E'],
    ['C', 'X'],
    ['X', 'C'],
    ['F', 'O'],
    ['O', 'F'],
]);
function makeExit(loc, [pos, type, [revLocPos, revType]]) {
    let conn = connMap.get(type) || connInverse.get(connMap.get(revType));
    let shuffle = false;
    const area = loc.id.toString(16);
    const key = (loc.id << 8 | pos).toString(16) + ' ' + type;
    const revLoc = loc.rom.locations[revLocPos >>> 8];
    const revPos = revLocPos & 0xff;
    const revKey = revLocPos.toString(16) + ' ' + revType;
    const revArea = revLoc.id.toString(16);
    const reverse = {
        loc: revLoc, pos: revPos, type: revType,
        area: revArea, key: revKey, reverse: null, origRev: null,
        get conn() { return connInverse.get(conn); },
        set conn(c) { conn = connInverse.get(c); },
        get shuffle() { return shuffle; },
        set shuffle(s) {
            if (s && !conn)
                throw new Error(`shuffle without conn`);
            shuffle = s;
        },
    };
    const exit = {
        loc, pos, type, key, reverse, area, origRev: reverse,
        get conn() { return conn; },
        set conn(c) { conn = c; },
        get shuffle() { return shuffle; },
        set shuffle(s) {
            if (s && !conn)
                throw new Error(`shuffle without conn`);
            shuffle = s;
        },
    };
    reverse.reverse = reverse.origRev = exit;
    return exit;
}
function matchExit(exit, finder) {
    if (typeof finder === 'string')
        return exit.type === finder;
    if (typeof finder === 'number')
        return exit.pos === finder;
    if (finder instanceof Location)
        return exit.reverse.loc === finder;
    return finder.every(f => matchExit(exit, f));
}
export function shuffleAreas(rom, flags, random) {
    if (!flags.shuffleAreas())
        return;
    const { locations: loc } = rom;
    const exits = new Map();
    const exitsByLocation = new DefaultMap(() => []);
    for (const location of rom.locations) {
        for (const exitSpec of location.meta.exits()) {
            if (location === loc.CordelPlainEast && (exitSpec[0] & 0x0f) < 5)
                continue;
            if (location === loc.CordelPlainWest && (exitSpec[0] & 0x0f) > 4)
                continue;
            if (location.isTower())
                continue;
            const exit = makeExit(location, exitSpec);
            if (exit.loc === loc.Portoa_FortuneTeller)
                continue;
            if (exit.reverse.loc === loc.Portoa_FortuneTeller)
                continue;
            if (exits.has(exit.key))
                continue;
            if (exits.has(exit.reverse.key)) {
                throw new Error(`Inconsistent exits: ${exit.key} | ${exit.reverse.key}`);
            }
            exits.set(exit.key, exit);
            exits.set(exit.reverse.key, exit.reverse);
            exitsByLocation.get(exit.loc).push(exit);
            exitsByLocation.get(exit.reverse.loc).push(exit.reverse);
        }
    }
    function findExits(location, ...finders) {
        const out = [];
        for (const exit of exitsByLocation.get(location)) {
            for (const finder of finders) {
                if (matchExit(exit, finder)) {
                    out.push(exit);
                    break;
                }
            }
        }
        return out;
    }
    if (flags.shuffleHouses()) {
        for (const exit of findExits(loc.ValleyOfWind, 'door', 'windmill')) {
            exit.area = 'windmill';
        }
    }
    for (const exit of findExits(loc.AngrySea, 0x64)) {
        exit.area = 'lighthouse';
    }
    findExits(loc.Portoa_FishermanIsland, loc.Portoa)[0].oneWay = true;
    function mark(loc, ...exits) {
        for (const exit of findExits(loc, ...exits)) {
            exit.shuffle = true;
        }
    }
    function markOutside(...locs) {
        const set = new Set(locs);
        for (const loc of locs) {
            for (const exit of exitsByLocation.get(loc)) {
                if (!set.has(exit.reverse.loc))
                    exit.shuffle = true;
            }
        }
    }
    mark(loc.Leaf, loc.Leaf_OutsideStart);
    markOutside(loc.ValleyOfWind, loc.WindmillCave, loc.Windmill);
    if (flags.shuffleHouses())
        markOutside(loc.WindmillCave);
    markOutside(loc.EastCave1, loc.EastCave2, loc.EastCave3);
    markOutside(loc.ZebuCave, loc.MtSabreWest_Cave1);
    markOutside(loc.CordelPlainWest, loc.CordelPlainEast);
    markOutside(loc.WaterfallValleyNorth, loc.WaterfallValleySouth);
    markOutside(loc.KirisaMeadow);
    markOutside(loc.LimeTreeLake);
    mark(loc.Portoa_FishermanIsland, loc.Portoa);
    mark(loc.UndergroundChannel, loc.PortoaPalace_ThroneRoom);
    mark(loc.AngrySea, loc.Joel);
    markOutside(loc.JoelSecretPassage);
    mark(loc.EvilSpiritIsland1, loc.EvilSpiritIsland2);
    mark(loc.ZombieTown, loc.EvilSpiritIsland3);
    mark(loc.AngrySea, loc.Swan);
    markOutside(loc.SwanGate);
    mark(loc.GoaValley, loc.MtHydra);
    markOutside(loc.Desert1);
    markOutside(loc.GoaFortressBasement);
    markOutside(loc.DesertCave1);
    markOutside(loc.SaharaOutsideCave);
    markOutside(loc.DesertCave2);
    if (!flags.shuffleHouses()) {
        const palaces = [
            [loc.ZombieTown, loc.SaberaPalace1],
            [loc.MtHydra, loc.Styx1],
            [loc.Desert2, loc.Pyramid_Entrance],
            [loc.Goa, loc.GoaFortress_Entrance],
            [loc.Portoa, loc.Portoa_PalaceEntrance],
            [loc.Shyron, loc.Shyron_Temple],
            [loc.GoaValley, loc.Goa],
            [loc.OasisCave_Entrance, loc.GoaFortress_Exit],
            [loc.MtHydra_OutsideShyron, loc.Shyron],
        ];
        for (const [outside, inside] of palaces) {
            const [exit] = findExits(outside, inside);
            exit.conn = 'F';
            exit.shuffle = true;
        }
    }
    const uf = new UnionFind();
    for (const exit of exits.values()) {
        if (exit.shuffle)
            continue;
        uf.union([exit.area, exit.reverse.area]);
    }
    const areaExits = new DefaultMap(() => []);
    for (const exit of exits.values()) {
        if (!exit.shuffle)
            continue;
        areaExits.get(exit.area = uf.find(exit.area)).push(exit);
    }
    const start = exitsByLocation.get(loc.MezameShrine)[0].area;
    function traverse() {
        const seen = new Set();
        const map = new Map();
        const partitions = [];
        for (const area of [start, ...areaExits.keys()]) {
            if (seen.has(area))
                continue;
            const queue = new Set([area]);
            const partition = [];
            for (const next of queue) {
                seen.add(next);
                for (const exit of areaExits.get(next)) {
                    map.set(exit, partitions.length);
                    partition.push(exit);
                    if (exit.oneWay || seen.has(exit.reverse.area))
                        continue;
                    queue.add(exit.reverse.area);
                }
            }
            partitions.push(partition);
        }
        let min = 0;
        for (let i = 1; i < partitions.length; i++) {
            if (partitions[i].length < partitions[min].length)
                min = i;
        }
        return [partitions.length, map, partitions[min]];
    }
    const exitsByConn = new DefaultMap(() => []);
    for (const exit of exits.values()) {
        if (!exit.shuffle || !exit.conn)
            continue;
        exitsByConn.get(exit.conn).push(exit);
    }
    for (const c of 'NWCF') {
        const original = exitsByConn.get(c);
        const shuffled = random.shuffle([...original]).map(e => e.reverse);
        for (let i = 0; i < shuffled.length; i++) {
            const exit1 = original[i];
            const exit2 = shuffled[i];
            [exit1.reverse, exit2.reverse] = [exit2, exit1];
        }
    }
    let iterations = 0;
    let [count, traversal, pool] = traverse();
    while (iterations-- > 0 || count > 1) {
        const exit1 = random.pick(pool);
        let eligible = exitsByConn.get(exit1.conn);
        if (count > 1) {
            const avoid = traversal.get(exit1);
            eligible = eligible.filter(e => traversal.get(e) !== avoid);
        }
        const exit2 = random.pick(eligible);
        const rev1 = exit1.reverse;
        const rev2 = exit2.reverse;
        exit1.reverse = rev2;
        rev2.reverse = exit1;
        exit2.reverse = rev1;
        rev1.reverse = exit2;
        [count, traversal, pool] = traverse();
        if (iterations < -10)
            debugger;
    }
    for (const exit of exits.values()) {
        if (exit.reverse !== exit.origRev) {
            function showExit(e) { return `${e.loc.name} ${e.type}(${e.pos.toString(16)})`; }
            console.log(`${showExit(exit)}  =>  ${showExit(exit.reverse)}  (was ${showExit(exit.origRev)})`);
        }
        exit.loc.meta.attach(exit.pos, exit.reverse.loc.meta, exit.reverse.pos, exit.type, exit.reverse.type);
    }
}
//# sourceMappingURL=data:application/json;base64,