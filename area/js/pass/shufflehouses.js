import { Metalocation } from '../rom/metalocation.js';
import { DefaultMap } from '../util.js';
const HOUSE_ICON = 0x06;
const TALL_HOUSE_ICON = 0x21;
const icons = new Map([
    ['pawn', 0x36],
    ['inn', 0x37],
    ['armor', 0x38],
    ['tool', 0x39],
    ['tavern', 0x3b],
]);
const shops = new Set(['inn', 'armor', 'tool', 'pawn']);
const compat = new Set([...shops, 'house', 'tavern']);
export function shuffleHouses(rom, flags, random) {
    var _a, _b, _c;
    const { locations: { Goa, GoaFortress_Exit, Shyron }, metascreens: { squareTownNE_house, fortressTownEntrance, mountainPathE_gate }, } = rom;
    const palaceTowns = new Set([Goa.id, Shyron.id]);
    const firstPassOutsides = new Set([
        squareTownNE_house.data.id,
        fortressTownEntrance.data.id,
        mountainPathE_gate.data.id,
    ]);
    if (flags.shuffleAreas()) {
        for (const loc of [Goa, GoaFortress_Exit, Shyron]) {
            loc.data.houseType = 'palace';
        }
    }
    const byType = new DefaultMap(() => []);
    const byLocPos = new DefaultMap(() => []);
    const screens = new DefaultMap(() => new Set());
    for (const location of rom.locations) {
        if (!location.used)
            continue;
        if (location.data.houseType == null)
            continue;
        let bottomExit;
        for (const [pos, type, spec] of location.meta.exits()) {
            const coord = (pos & 0xf0) << 4 |
                (location.meta.get(pos).findExitByType(type).entrance >>> 8);
            if (!bottomExit || coord > bottomExit[3]) {
                bottomExit = [pos, type, spec, coord];
            }
        }
        for (const [pos, type, spec] of [bottomExit]) {
            const house = {
                type: location.data.houseType,
                inside: [location.id << 8 | pos, type],
                outside: spec,
            };
            let locpos = spec[0];
            byLocPos.get(locpos).push(house);
            byType.get(location.data.houseType).push(house);
            const screen = rom.locations[locpos >>> 8]
                .screens[(locpos >>> 4) & 0xf][locpos & 0xf];
            screens.get(screen).add(locpos);
        }
    }
    const secondPass = new Map();
    const firstPass = new Map();
    for (const [scr, locposs] of random.ishuffle(screens)) {
        if (locposs.size >= 2 || firstPassOutsides.has(scr)) {
            firstPass.set(scr, locposs);
        }
        else {
            secondPass.set(scr, locposs);
        }
    }
    const hasInn = new Set();
    const inns = byType.get('inn');
    for (const [, locposs] of [...firstPass, ...secondPass]) {
        const map = new Map();
        let first = true;
        for (const locpos of locposs) {
            for (const house of byLocPos.get(locpos)) {
                let eligible = first && compat.has(house.type) ?
                    [...compat].map(t => byType.get(t)) :
                    [byType.get((_a = map.get(house.outside[1])) !== null && _a !== void 0 ? _a : house.type)];
                eligible = eligible.filter(x => x.length);
                if (house.type === 'palace' && palaceTowns.has(house.outside[0] >>> 8)) {
                    eligible = eligible.map(x => x.filter(h => !palaceTowns.has(h.inside[0] >>> 8)));
                }
                const allowInn = [...locposs].every(lp => !hasInn.has(lp >>> 8));
                if (!allowInn && eligible.length > 1) {
                    eligible = eligible.filter(x => x !== inns);
                }
                else if (allowInn && eligible.some(x => x === inns)) {
                    eligible = [inns];
                }
                const replacement = random.pickAndRemove(...eligible);
                if (replacement.type === 'inn') {
                    for (const lp of locposs) {
                        hasInn.add(lp >>> 8);
                    }
                }
                map.set(house.outside[1], replacement.type);
                if (rom.spoiler) {
                    rom.spoiler.addHouse(replacement.inside[0] >>> 8, house.outside[0] >>> 8);
                }
                Metalocation.connect(rom, house.outside, replacement.inside);
                if (!first)
                    continue;
                if (icons.get(house.type) === icons.get(replacement.type))
                    continue;
                const outside = rom.locations[house.outside[0] >>> 8];
                if (outside.meta.tileset !== rom.metatilesets.town)
                    continue;
                const exits = Metalocation.findExitTiles(rom, house.outside);
                if (exits.length > 1)
                    continue;
                let coord = exits[0] - 0x20;
                if ((exits[0] & 0xf0) < 0x20)
                    coord -= 0x0f10;
                const pos = coord >> 8;
                const tile = coord & 0xff;
                const icon = (_b = icons.get(replacement.type)) !== null && _b !== void 0 ? _b : (((_c = outside.meta.get(pos).data.tallHouses) === null || _c === void 0 ? void 0 : _c.includes(tile)) ?
                    TALL_HOUSE_ICON : HOUSE_ICON);
                rom.screens[outside.screens[pos >> 4][pos & 0xf]].tiles[tile] = icon;
            }
            first = false;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,