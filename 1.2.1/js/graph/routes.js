import { MutableRequirement } from './condition.js';
import { DefaultMap } from '../util.js';
export class Routes {
    constructor() {
        this.routes = new DefaultMap(() => new MutableRequirement());
        this.edges = new DefaultMap(() => new Map());
    }
    addEdge(target, source, route) {
        const edge = LabeledRoute(target, route);
        this.edges.get(source).set(edge.label, edge);
        for (const srcRoute of this.routes.get(source)) {
            this.addRoute(target, [...srcRoute, ...route]);
        }
    }
    addRoute(target, route) {
        const queue = new Map();
        const seen = new Set();
        const start = LabeledRoute(target, route);
        queue.set(start.label, start);
        const iter = queue.values();
        while (true) {
            const { value, done } = iter.next();
            if (done)
                return;
            seen.add(value.label);
            queue.delete(value.label);
            for (const next of this.addRouteInternal(value)) {
                if (seen.has(next.label))
                    continue;
                queue.delete(next.label);
                queue.set(next.label, next);
            }
        }
    }
    addRouteInternal({ target, depsLabel, deps }) {
        const current = this.routes.get(target);
        if (!current.add(depsLabel, deps))
            return [];
        const out = new Map();
        for (const next of this.edges.get(target).values()) {
            const follow = LabeledRoute(next.target, [...deps, ...next.deps]);
            out.set(follow.label, follow);
        }
        return out.values();
    }
}
export function LabeledRoute(target, route) {
    const sorted = [...new Set(route)].sort();
    const deps = new Set(sorted);
    const depsLabel = sorted.join(' ');
    const label = `${target}:${depsLabel}`;
    return { target, deps, label, depsLabel };
}
//# sourceMappingURL=data:application/json;base64,