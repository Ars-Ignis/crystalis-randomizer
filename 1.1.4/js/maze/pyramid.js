export function shufflePyramid(rom, random) {
    const loc = rom.locations.pyramidMain;
    const dir = 'dudududuudududduu'.split('');
    let realDir = 'u';
    if (random.next() < 0.5) {
        loc.screens[0][3] = 0x84;
        loc.screens[0][2] = 0x99;
        dir[16] = realDir = 'd';
        loc.entrances[12].screen = loc.entrances[16].screen;
        loc.entrances[12].coord = loc.entrances[16].coord;
        loc.exits[2 * 12].screen = loc.exits[2 * 16].screen;
        loc.exits[2 * 12].tile = loc.exits[2 * 16].tile;
        loc.exits[2 * 12 + 1].screen = loc.exits[2 * 16 + 1].screen;
        loc.exits[2 * 12 + 1].tile = loc.exits[2 * 16 + 1].tile;
        loc.entrances[16].screen = 0x02;
        loc.entrances[16].coord = 0xafd0;
        loc.exits[2 * 16].screen = loc.exits[2 * 16 + 1].screen = 0x02;
        loc.exits[2 * 16].tile = 0xbc;
        loc.exits[2 * 16 + 1].tile = 0xbd;
        const loc2 = rom.locations.pyramidDraygon;
        loc2.width = 2;
        loc2.screens[0].push(0x9a);
        loc2.screens[1].push(0xfd);
        loc2.screens[2] = [0xe0, 0xe1];
        loc2.exits[0].screen = loc2.exits[1].screen = 0x01;
        loc2.exits[0].tile = 0xc7;
        loc2.exits[1].tile = 0xc8;
        loc2.entrances[0].screen = 0x01;
        loc2.entrances[0].coord = 0xd080;
    }
    const all = { 'u': [], 'd': [] };
    for (let i = 0; i < dir.length; i++) {
        all[dir[i]].push(i);
    }
    random.shuffle(all['u']);
    random.shuffle(all['d']);
    const realEntrance = all[realDir].pop();
    const entrances = [];
    entrances[16] = loc.entrances[realEntrance];
    setExit(realEntrance, 0x9f, 0);
    const upEntrance = all['u'].pop();
    entrances[1] = loc.entrances[upEntrance];
    setExit(upEntrance, 0x9d, 2);
    let downEntrance = all['d'].pop();
    if (realDir === 'u' && downEntrance === 0xe && upEntrance === 0xc) {
        [downEntrance] = all['d'].splice(0, 1, downEntrance);
    }
    else if (realDir === 'd' &&
        ((downEntrance === 0xe && realEntrance === 0x10) ||
            (downEntrance === 0x10 && realEntrance === 0xe))) {
        [downEntrance] = all['d'].splice(0, 1, downEntrance);
    }
    entrances[0] = loc.entrances[downEntrance];
    setExit(downEntrance, 0x9d, 1);
    do {
        const sources = { 'u': [...all['u']], 'd': [...all['d']] };
        const dests = { 'u': [...all['u']], 'd': [...all['d']] };
        random.shuffle(dests['u']);
        random.shuffle(dests['d']);
        const inv = { 'u': 'd', 'd': 'u' };
        for (let i = 2; i < 16; i++) {
            const source = sources[dir[i]].pop();
            const dest = dests[inv[dir[i]]].pop();
            if (source == null || dest == null)
                throw new Error('impossible');
            entrances[i] = loc.entrances[source];
            setExit(dest, 0x9e, i);
        }
        const cExit = loc.exits[2 * 0xc];
        const eExit = loc.exits[2 * 0xe];
        if (realDir === 'u' && cExit.dest === eExit.dest &&
            loc.entrances[0xe] === entrances[cExit.entrance] &&
            loc.entrances[0xc] === entrances[eExit.entrance]) {
            continue;
        }
        break;
    } while (true);
    loc.entrances = entrances;
    function setExit(i, dest, entrance) {
        loc.exits[2 * i].dest = loc.exits[2 * i + 1].dest = dest;
        loc.exits[2 * i].entrance = loc.exits[2 * i + 1].entrance = entrance;
    }
}
//# sourceMappingURL=data:application/json;base64,